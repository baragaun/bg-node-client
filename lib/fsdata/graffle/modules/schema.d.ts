import type { Schema as $ } from 'graffle/utilities-for-generated';
import type * as $$Utilities from 'graffle/utilities-for-generated';
import * as $$Data from './data.js';
import * as $$Scalar from './scalar.js';
export declare namespace Schema {
    export interface Query {
        kind: 'Object';
        name: 'Query';
        fields: {
            __typename: Query.__typename;
            doesUserExist: Query.doesUserExist;
            findUserById: Query.findUserById;
            findUserByIdent: Query.findUserByIdent;
            isUserIdentAvailable: Query.isUserIdentAvailable;
            findUsers: Query.findUsers;
            findUserDeviceById: Query.findUserDeviceById;
            findUserDevices: Query.findUserDevices;
            findMyUserDevices: Query.findMyUserDevices;
            findCompanyStages: Query.findCompanyStages;
            findCompanyTypes: Query.findCompanyTypes;
            findEducationLevels: Query.findEducationLevels;
            findExpertises: Query.findExpertises;
            findGenders: Query.findGenders;
            findPronouns: Query.findPronouns;
            findUserCmsByUserId: Query.findUserCmsByUserId;
            myInbox: Query.myInbox;
            findMyInbox: Query.findMyInbox;
            findAdminTaskById: Query.findAdminTaskById;
            findAdminTaskDefs: Query.findAdminTaskDefs;
            findUploadedAssetById: Query.findUploadedAssetById;
            findUploadedAssets: Query.findUploadedAssets;
            findUploadedAssetsForUser: Query.findUploadedAssetsForUser;
            findChannelInvitationById: Query.findChannelInvitationById;
            findChannelInvitationsBetweenUsers: Query.findChannelInvitationsBetweenUsers;
            findChannelInvitationsForUser: Query.findChannelInvitationsForUser;
            myChannelInvitations: Query.myChannelInvitations;
            findPendingChannelInvitationsForUser: Query.findPendingChannelInvitationsForUser;
            findChannelById: Query.findChannelById;
            findChannels: Query.findChannels;
            findChannelsForUser: Query.findChannelsForUser;
            find1On1Channel: Query.find1On1Channel;
            findMyChannels: Query.findMyChannels;
            findMyChannelsV2: Query.findMyChannelsV2;
            findChannelMessageById: Query.findChannelMessageById;
            findChannelMessages: Query.findChannelMessages;
            findChannelParticipants: Query.findChannelParticipants;
            findChannelParticipantsForChannel: Query.findChannelParticipantsForChannel;
            findChannelParticipantById: Query.findChannelParticipantById;
            findDeclineChannelInvitationReasons: Query.findDeclineChannelInvitationReasons;
            findOptions: Query.findOptions;
            findCountries: Query.findCountries;
            findErrorCodes: Query.findErrorCodes;
            findIndustries: Query.findIndustries;
            findLanguages: Query.findLanguages;
            apiVersion: Query.apiVersion;
            findGroupCmsByGroupIdent: Query.findGroupCmsByGroupIdent;
            findGroupCmsByGroupId: Query.findGroupCmsByGroupId;
            findGroupCmsById: Query.findGroupCmsById;
            findGroupMembershipById: Query.findGroupMembershipById;
            myGroupMemberships: Query.myGroupMemberships;
            findGroupMemberships: Query.findGroupMemberships;
            findGroupById: Query.findGroupById;
            findGroupByIdent: Query.findGroupByIdent;
            findGroups: Query.findGroups;
            findIndonesianCities: Query.findIndonesianCities;
            findIndonesianProvinces: Query.findIndonesianProvinces;
            findIqlaaJordanianDistricts: Query.findIqlaaJordanianDistricts;
            findIqlaaJordanianGovernorates: Query.findIqlaaJordanianGovernorates;
            findMastercardBanks: Query.findMastercardBanks;
            userWillReceiveWelcomeMessage: Query.userWillReceiveWelcomeMessage;
            findBrands: Query.findBrands;
            findPurchaseOrderItems: Query.findPurchaseOrderItems;
            findPurchaseOrderById: Query.findPurchaseOrderById;
            findPurchaseOrders: Query.findPurchaseOrders;
            findShoppingCartItemById: Query.findShoppingCartItemById;
            findShoppingCartItems: Query.findShoppingCartItems;
            findShoppingCarts: Query.findShoppingCarts;
            findMyShoppingCart: Query.findMyShoppingCart;
            findWalletItemById: Query.findWalletItemById;
            findWalletItemByTransferSlug: Query.findWalletItemByTransferSlug;
            findWalletItems: Query.findWalletItems;
            findWalletItemTransferRecipientInfoByTransferSlug: Query.findWalletItemTransferRecipientInfoByTransferSlug;
            findWalletItemTransferById: Query.findWalletItemTransferById;
            findWalletItemTransferByTransferSlug: Query.findWalletItemTransferByTransferSlug;
            findWalletItemTransfers: Query.findWalletItemTransfers;
            findWallets: Query.findWallets;
            findMyWallet: Query.findMyWallet;
            findWalletServiceRecord: Query.findWalletServiceRecord;
            findGiftCardProducts: Query.findGiftCardProducts;
            findMarketplaceServiceRecord: Query.findMarketplaceServiceRecord;
            findProductCategories: Query.findProductCategories;
            findUserSearchById: Query.findUserSearchById;
            findUserSearches: Query.findUserSearches;
            findUserSearchResults: Query.findUserSearchResults;
            myUserSearches: Query.myUserSearches;
            findServiceRequestById: Query.findServiceRequestById;
            findContactById: Query.findContactById;
            findContact: Query.findContact;
            findContacts: Query.findContacts;
            findMyActiveMultiStepActions: Query.findMyActiveMultiStepActions;
            findMyActiveMultiStepAction: Query.findMyActiveMultiStepAction;
            getMultiStepActionProgress: Query.getMultiStepActionProgress;
            findAvailableUserHandle: Query.findAvailableUserHandle;
            getMyUser: Query.getMyUser;
            findMyUser: Query.findMyUser;
            getMyBlockedUsers: Query.getMyBlockedUsers;
            findMyBlockedUsers: Query.findMyBlockedUsers;
            verifyMyPassword: Query.verifyMyPassword;
            findReportUserReasons: Query.findReportUserReasons;
            findTrainingsForMe: Query.findTrainingsForMe;
            findTrainingsForUser: Query.findTrainingsForUser;
            findTrainingById: Query.findTrainingById;
            findTrainingSessionById: Query.findTrainingSessionById;
            findTrainingSessionsForMe: Query.findTrainingSessionsForMe;
            findTrainingSessionsByTrainingId: Query.findTrainingSessionsByTrainingId;
            findLatestTrainingSessionForMe: Query.findLatestTrainingSessionForMe;
        };
    }
    export namespace Query {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Query';
            };
        }
        interface doesUserExist {
            kind: 'OutputField';
            name: 'doesUserExist';
            arguments: {
                identType: {
                    kind: 'InputField';
                    name: 'identType';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserIdentType;
                };
                ident: {
                    kind: 'InputField';
                    name: 'ident';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface findUserById {
            kind: 'OutputField';
            name: 'findUserById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$User;
        }
        interface findUserByIdent {
            kind: 'OutputField';
            name: 'findUserByIdent';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindUserByIdentOptions;
                };
                identType: {
                    kind: 'InputField';
                    name: 'identType';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserIdentType;
                };
                ident: {
                    kind: 'InputField';
                    name: 'ident';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$User;
        }
        interface isUserIdentAvailable {
            kind: 'OutputField';
            name: 'isUserIdentAvailable';
            arguments: {
                identType: {
                    kind: 'InputField';
                    name: 'identType';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserIdentType;
                };
                ident: {
                    kind: 'InputField';
                    name: 'ident';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface findUsers {
            kind: 'OutputField';
            name: 'findUsers';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserListItem;
        }
        interface findUserDeviceById {
            kind: 'OutputField';
            name: 'findUserDeviceById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface findUserDevices {
            kind: 'OutputField';
            name: 'findUserDevices';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserDeviceInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserDeviceListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface findMyUserDevices {
            kind: 'OutputField';
            name: 'findMyUserDevices';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface findCompanyStages {
            kind: 'OutputField';
            name: 'findCompanyStages';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$CompanyStage;
        }
        interface findCompanyTypes {
            kind: 'OutputField';
            name: 'findCompanyTypes';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$CompanyType;
        }
        interface findEducationLevels {
            kind: 'OutputField';
            name: 'findEducationLevels';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$EducationLevel;
        }
        interface findExpertises {
            kind: 'OutputField';
            name: 'findExpertises';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
                isParent: {
                    kind: 'InputField';
                    name: 'isParent';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                parentTextId: {
                    kind: 'InputField';
                    name: 'parentTextId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface findGenders {
            kind: 'OutputField';
            name: 'findGenders';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Gender;
        }
        interface findPronouns {
            kind: 'OutputField';
            name: 'findPronouns';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Pronoun;
        }
        interface findUserCmsByUserId {
            kind: 'OutputField';
            name: 'findUserCmsByUserId';
            arguments: {
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$UserCms;
        }
        /**
         * @deprecated use findMyInbox
         */
        interface myInbox {
            kind: 'OutputField';
            name: 'myInbox';
            arguments: {
                refresh: {
                    kind: 'InputField';
                    name: 'refresh';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserInbox;
        }
        interface findMyInbox {
            kind: 'OutputField';
            name: 'findMyInbox';
            arguments: {
                refresh: {
                    kind: 'InputField';
                    name: 'refresh';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserInbox;
        }
        interface findAdminTaskById {
            kind: 'OutputField';
            name: 'findAdminTaskById';
            arguments: {
                adminTaskId: {
                    kind: 'InputField';
                    name: 'adminTaskId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$AdminTask;
        }
        interface findAdminTaskDefs {
            kind: 'OutputField';
            name: 'findAdminTaskDefs';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$AdminTaskDef;
        }
        interface findUploadedAssetById {
            kind: 'OutputField';
            name: 'findUploadedAssetById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface findUploadedAssets {
            kind: 'OutputField';
            name: 'findUploadedAssets';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UploadedAssetInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UploadedAssetListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface findUploadedAssetsForUser {
            kind: 'OutputField';
            name: 'findUploadedAssetsForUser';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface findChannelInvitationById {
            kind: 'OutputField';
            name: 'findChannelInvitationById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface findChannelInvitationsBetweenUsers {
            kind: 'OutputField';
            name: 'findChannelInvitationsBetweenUsers';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                onlyUnseen: {
                    kind: 'InputField';
                    name: 'onlyUnseen';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                onlyPending: {
                    kind: 'InputField';
                    name: 'onlyPending';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                userIds: {
                    kind: 'InputField';
                    name: 'userIds';
                    inlineType: [1, [1]];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface findChannelInvitationsForUser {
            kind: 'OutputField';
            name: 'findChannelInvitationsForUser';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                onlyUnseen: {
                    kind: 'InputField';
                    name: 'onlyUnseen';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                onlyPending: {
                    kind: 'InputField';
                    name: 'onlyPending';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                direction: {
                    kind: 'InputField';
                    name: 'direction';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelInvitationDirection;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface myChannelInvitations {
            kind: 'OutputField';
            name: 'myChannelInvitations';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                onlyUnseen: {
                    kind: 'InputField';
                    name: 'onlyUnseen';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                onlyPending: {
                    kind: 'InputField';
                    name: 'onlyPending';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                direction: {
                    kind: 'InputField';
                    name: 'direction';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelInvitationDirection;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface findPendingChannelInvitationsForUser {
            kind: 'OutputField';
            name: 'findPendingChannelInvitationsForUser';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface findChannelById {
            kind: 'OutputField';
            name: 'findChannelById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Channel;
        }
        interface findChannels {
            kind: 'OutputField';
            name: 'findChannels';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Channel;
        }
        interface findChannelsForUser {
            kind: 'OutputField';
            name: 'findChannelsForUser';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                mustBeAccepted: {
                    kind: 'InputField';
                    name: 'mustBeAccepted';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                mustHaveMessages: {
                    kind: 'InputField';
                    name: 'mustHaveMessages';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Channel;
        }
        interface find1On1Channel {
            kind: 'OutputField';
            name: 'find1On1Channel';
            arguments: {
                userIds: {
                    kind: 'InputField';
                    name: 'userIds';
                    inlineType: [1, [1]];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Channel;
        }
        interface findMyChannels {
            kind: 'OutputField';
            name: 'findMyChannels';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Channel;
        }
        interface findMyChannelsV2 {
            kind: 'OutputField';
            name: 'findMyChannelsV2';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                addLatestMessage: {
                    kind: 'InputField';
                    name: 'addLatestMessage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                participantLimit: {
                    kind: 'InputField';
                    name: 'participantLimit';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Int;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelListItem;
        }
        interface findChannelMessageById {
            kind: 'OutputField';
            name: 'findChannelMessageById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface findChannelMessages {
            kind: 'OutputField';
            name: 'findChannelMessages';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelMessageInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelMessageListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface findChannelParticipants {
            kind: 'OutputField';
            name: 'findChannelParticipants';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelParticipantInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelParticipantListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface findChannelParticipantsForChannel {
            kind: 'OutputField';
            name: 'findChannelParticipantsForChannel';
            arguments: {
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ChannelParticipantInput;
                };
                channelId: {
                    kind: 'InputField';
                    name: 'channelId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface findChannelParticipantById {
            kind: 'OutputField';
            name: 'findChannelParticipantById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface findDeclineChannelInvitationReasons {
            kind: 'OutputField';
            name: 'findDeclineChannelInvitationReasons';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$DeclineChannelInvitationReason;
        }
        interface findOptions {
            kind: 'OutputField';
            name: 'findOptions';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
                isParent: {
                    kind: 'InputField';
                    name: 'isParent';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                parentTextId: {
                    kind: 'InputField';
                    name: 'parentTextId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                optionType: {
                    kind: 'InputField';
                    name: 'optionType';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$OptionType;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface findCountries {
            kind: 'OutputField';
            name: 'findCountries';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Country;
        }
        interface findErrorCodes {
            kind: 'OutputField';
            name: 'findErrorCodes';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ErrorCodeOption;
        }
        interface findIndustries {
            kind: 'OutputField';
            name: 'findIndustries';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface findLanguages {
            kind: 'OutputField';
            name: 'findLanguages';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Language;
        }
        interface apiVersion {
            kind: 'OutputField';
            name: 'apiVersion';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface findGroupCmsByGroupIdent {
            kind: 'OutputField';
            name: 'findGroupCmsByGroupIdent';
            arguments: {
                groupIdent: {
                    kind: 'InputField';
                    name: 'groupIdent';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupCms;
        }
        interface findGroupCmsByGroupId {
            kind: 'OutputField';
            name: 'findGroupCmsByGroupId';
            arguments: {
                groupId: {
                    kind: 'InputField';
                    name: 'groupId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupCms;
        }
        interface findGroupCmsById {
            kind: 'OutputField';
            name: 'findGroupCmsById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupCms;
        }
        interface findGroupMembershipById {
            kind: 'OutputField';
            name: 'findGroupMembershipById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupMembership;
        }
        interface myGroupMemberships {
            kind: 'OutputField';
            name: 'myGroupMemberships';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        interface findGroupMemberships {
            kind: 'OutputField';
            name: 'findGroupMemberships';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$GroupMembershipInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$GroupMembershipListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        interface findGroupById {
            kind: 'OutputField';
            name: 'findGroupById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Group;
        }
        interface findGroupByIdent {
            kind: 'OutputField';
            name: 'findGroupByIdent';
            arguments: {
                groupIdent: {
                    kind: 'InputField';
                    name: 'groupIdent';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Group;
        }
        interface findGroups {
            kind: 'OutputField';
            name: 'findGroups';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$GroupInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$GroupListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Group;
        }
        interface findIndonesianCities {
            kind: 'OutputField';
            name: 'findIndonesianCities';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IndonesianCity;
        }
        interface findIndonesianProvinces {
            kind: 'OutputField';
            name: 'findIndonesianProvinces';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IndonesianProvince;
        }
        interface findIqlaaJordanianDistricts {
            kind: 'OutputField';
            name: 'findIqlaaJordanianDistricts';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IqlaaJordanianDistrict;
        }
        interface findIqlaaJordanianGovernorates {
            kind: 'OutputField';
            name: 'findIqlaaJordanianGovernorates';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IqlaaJordanianGovernorate;
        }
        interface findMastercardBanks {
            kind: 'OutputField';
            name: 'findMastercardBanks';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$MastercardBank;
        }
        interface userWillReceiveWelcomeMessage {
            kind: 'OutputField';
            name: 'userWillReceiveWelcomeMessage';
            arguments: {
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface findBrands {
            kind: 'OutputField';
            name: 'findBrands';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$BrandInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$BrandListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Brand;
        }
        interface findPurchaseOrderItems {
            kind: 'OutputField';
            name: 'findPurchaseOrderItems';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$PurchaseOrderItemInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$PurchaseOrderItemListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$PurchaseOrderItem;
        }
        interface findPurchaseOrderById {
            kind: 'OutputField';
            name: 'findPurchaseOrderById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$PurchaseOrder;
        }
        interface findPurchaseOrders {
            kind: 'OutputField';
            name: 'findPurchaseOrders';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$PurchaseOrderInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$PurchaseOrderListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$PurchaseOrder;
        }
        interface findShoppingCartItemById {
            kind: 'OutputField';
            name: 'findShoppingCartItemById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$ShoppingCartItem;
        }
        interface findShoppingCartItems {
            kind: 'OutputField';
            name: 'findShoppingCartItems';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ShoppingCartItemInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ShoppingCartItemListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ShoppingCartItem;
        }
        interface findShoppingCarts {
            kind: 'OutputField';
            name: 'findShoppingCarts';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ShoppingCartInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ShoppingCartListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ShoppingCart;
        }
        interface findMyShoppingCart {
            kind: 'OutputField';
            name: 'findMyShoppingCart';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ShoppingCart;
        }
        interface findWalletItemById {
            kind: 'OutputField';
            name: 'findWalletItemById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItem;
        }
        interface findWalletItemByTransferSlug {
            kind: 'OutputField';
            name: 'findWalletItemByTransferSlug';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItem;
        }
        interface findWalletItems {
            kind: 'OutputField';
            name: 'findWalletItems';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$WalletItemInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$WalletItemListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$WalletItem;
        }
        interface findWalletItemTransferRecipientInfoByTransferSlug {
            kind: 'OutputField';
            name: 'findWalletItemTransferRecipientInfoByTransferSlug';
            arguments: {
                transferSecret: {
                    kind: 'InputField';
                    name: 'transferSecret';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItemTransferRecipientInfo;
        }
        interface findWalletItemTransferById {
            kind: 'OutputField';
            name: 'findWalletItemTransferById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItemTransfer;
        }
        interface findWalletItemTransferByTransferSlug {
            kind: 'OutputField';
            name: 'findWalletItemTransferByTransferSlug';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItemTransfer;
        }
        interface findWalletItemTransfers {
            kind: 'OutputField';
            name: 'findWalletItemTransfers';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$WalletItemTransferInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$WalletItemTransferListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$WalletItemTransfer;
        }
        interface findWallets {
            kind: 'OutputField';
            name: 'findWallets';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$WalletInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$WalletListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Wallet;
        }
        interface findMyWallet {
            kind: 'OutputField';
            name: 'findMyWallet';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Wallet;
        }
        interface findWalletServiceRecord {
            kind: 'OutputField';
            name: 'findWalletServiceRecord';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$WalletServiceRecord;
        }
        interface findGiftCardProducts {
            kind: 'OutputField';
            name: 'findGiftCardProducts';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$GiftCardProductInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$GiftCardProductListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GiftCardProduct;
        }
        interface findMarketplaceServiceRecord {
            kind: 'OutputField';
            name: 'findMarketplaceServiceRecord';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MarketplaceServiceRecord;
        }
        interface findProductCategories {
            kind: 'OutputField';
            name: 'findProductCategories';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ProductCategoryInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ProductCategoryListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ProductCategory;
        }
        interface findUserSearchById {
            kind: 'OutputField';
            name: 'findUserSearchById';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                userSearchId: {
                    kind: 'InputField';
                    name: 'userSearchId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearch;
        }
        interface findUserSearches {
            kind: 'OutputField';
            name: 'findUserSearches';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserSearchInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserSearchListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserSearch;
        }
        interface findUserSearchResults {
            kind: 'OutputField';
            name: 'findUserSearchResults';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                runIndex: {
                    kind: 'InputField';
                    name: 'runIndex';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Int;
                };
                userSearchId: {
                    kind: 'InputField';
                    name: 'userSearchId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserWithScore;
        }
        interface myUserSearches {
            kind: 'OutputField';
            name: 'myUserSearches';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserSearch;
        }
        interface findServiceRequestById {
            kind: 'OutputField';
            name: 'findServiceRequestById';
            arguments: {
                serviceRequestId: {
                    kind: 'InputField';
                    name: 'serviceRequestId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface findContactById {
            kind: 'OutputField';
            name: 'findContactById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Contact;
        }
        interface findContact {
            kind: 'OutputField';
            name: 'findContact';
            arguments: {
                createIfNotExist: {
                    kind: 'InputField';
                    name: 'createIfNotExist';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ContactInput;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Contact;
        }
        interface findContacts {
            kind: 'OutputField';
            name: 'findContacts';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ContactInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$SidContactListFilter;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ContactListItem;
        }
        interface findMyActiveMultiStepActions {
            kind: 'OutputField';
            name: 'findMyActiveMultiStepActions';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$SidMultiStepAction;
        }
        /**
         * @deprecated Use findMyActiveMultiStepActions instead
         */
        interface findMyActiveMultiStepAction {
            kind: 'OutputField';
            name: 'findMyActiveMultiStepAction';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$SidMultiStepAction;
        }
        interface getMultiStepActionProgress {
            kind: 'OutputField';
            name: 'getMultiStepActionProgress';
            arguments: {
                /**
                 * The result will only contain the authToken, if you specify a valid confirmToken
                 */
                confirmToken: {
                    kind: 'InputField';
                    name: 'confirmToken';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                actionId: {
                    kind: 'InputField';
                    name: 'actionId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SidMultiStepActionProgress;
        }
        interface findAvailableUserHandle {
            kind: 'OutputField';
            name: 'findAvailableUserHandle';
            arguments: {
                startValue: {
                    kind: 'InputField';
                    name: 'startValue';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * @deprecated Use findMyUser
         */
        interface getMyUser {
            kind: 'OutputField';
            name: 'getMyUser';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$User;
        }
        interface findMyUser {
            kind: 'OutputField';
            name: 'findMyUser';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MyUser;
        }
        /**
         * @deprecated Use findMyBlockedUsers
         */
        interface getMyBlockedUsers {
            kind: 'OutputField';
            name: 'getMyBlockedUsers';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$User;
        }
        interface findMyBlockedUsers {
            kind: 'OutputField';
            name: 'findMyBlockedUsers';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$User;
        }
        interface verifyMyPassword {
            kind: 'OutputField';
            name: 'verifyMyPassword';
            arguments: {
                password: {
                    kind: 'InputField';
                    name: 'password';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface findReportUserReasons {
            kind: 'OutputField';
            name: 'findReportUserReasons';
            arguments: {
                fallbackUiLanguage: {
                    kind: 'InputField';
                    name: 'fallbackUiLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ReportUserReason;
        }
        interface findTrainingsForMe {
            kind: 'OutputField';
            name: 'findTrainingsForMe';
            arguments: {
                displayInTrainingsList: {
                    kind: 'InputField';
                    name: 'displayInTrainingsList';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Training;
        }
        interface findTrainingsForUser {
            kind: 'OutputField';
            name: 'findTrainingsForUser';
            arguments: {
                displayInTrainingsList: {
                    kind: 'InputField';
                    name: 'displayInTrainingsList';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Training;
        }
        interface findTrainingById {
            kind: 'OutputField';
            name: 'findTrainingById';
            arguments: {
                selectedLanguage: {
                    kind: 'InputField';
                    name: 'selectedLanguage';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UiLanguage;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$Training;
        }
        interface findTrainingSessionById {
            kind: 'OutputField';
            name: 'findTrainingSessionById';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$TrainingSession;
        }
        interface findTrainingSessionsForMe {
            kind: 'OutputField';
            name: 'findTrainingSessionsForMe';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                trainingId: {
                    kind: 'InputField';
                    name: 'trainingId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$TrainingSession;
        }
        /**
         * Find training sessions by training  id. By default, finds the requestor's sessions.
         */
        interface findTrainingSessionsByTrainingId {
            kind: 'OutputField';
            name: 'findTrainingSessionsByTrainingId';
            arguments: {
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                trainingId: {
                    kind: 'InputField';
                    name: 'trainingId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$TrainingSession;
        }
        interface findLatestTrainingSessionForMe {
            kind: 'OutputField';
            name: 'findLatestTrainingSessionForMe';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                trainingId: {
                    kind: 'InputField';
                    name: 'trainingId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [0];
            namedType: $$NamedTypes.$$TrainingSession;
        }
    }
    export interface Mutation {
        kind: 'Object';
        name: 'Mutation';
        fields: {
            __typename: Mutation.__typename;
            createOneTimeAuthTokenForMe: Mutation.createOneTimeAuthTokenForMe;
            signInUser: Mutation.signInUser;
            signInOauthUser: Mutation.signInOauthUser;
            signMeOut: Mutation.signMeOut;
            signUpUser: Mutation.signUpUser;
            verifyOneTimeAuthToken: Mutation.verifyOneTimeAuthToken;
            addAppFeatureToUser: Mutation.addAppFeatureToUser;
            deleteUser: Mutation.deleteUser;
            deleteUserV2: Mutation.deleteUserV2;
            removeAppFeatureFromUser: Mutation.removeAppFeatureFromUser;
            reportUser: Mutation.reportUser;
            updateUser: Mutation.updateUser;
            createUserDevice: Mutation.createUserDevice;
            updateUserDevice: Mutation.updateUserDevice;
            createAcademicExperience: Mutation.createAcademicExperience;
            deleteAcademicExperience: Mutation.deleteAcademicExperience;
            updateAcademicExperience: Mutation.updateAcademicExperience;
            createBusinessExperience: Mutation.createBusinessExperience;
            deleteBusinessExperience: Mutation.deleteBusinessExperience;
            updateBusinessExperience: Mutation.updateBusinessExperience;
            createCompany: Mutation.createCompany;
            deleteCompany: Mutation.deleteCompany;
            deleteCompanyV2: Mutation.deleteCompanyV2;
            updateCompany: Mutation.updateCompany;
            findAndUpdateAllMm2Users: Mutation.findAndUpdateAllMm2Users;
            createAdminTask: Mutation.createAdminTask;
            deleteAdminTask: Mutation.deleteAdminTask;
            runAdminTask: Mutation.runAdminTask;
            updateAdminTask: Mutation.updateAdminTask;
            createUploadedAsset: Mutation.createUploadedAsset;
            deleteUploadedAsset: Mutation.deleteUploadedAsset;
            initAssetUpload: Mutation.initAssetUpload;
            updateUploadedAsset: Mutation.updateUploadedAsset;
            acceptChannelInvitation: Mutation.acceptChannelInvitation;
            acceptChannelInvitationV2: Mutation.acceptChannelInvitationV2;
            createChannelInvitation: Mutation.createChannelInvitation;
            declineChannelInvitation: Mutation.declineChannelInvitation;
            declineChannelInvitationV2: Mutation.declineChannelInvitationV2;
            deleteChannelInvitation: Mutation.deleteChannelInvitation;
            deleteChannelInvitationV2: Mutation.deleteChannelInvitationV2;
            dismissChannelInvitationFromInbox: Mutation.dismissChannelInvitationFromInbox;
            dismissChannelInvitationFromInboxV2: Mutation.dismissChannelInvitationFromInboxV2;
            updateChannelInvitation: Mutation.updateChannelInvitation;
            archiveChannelForMe: Mutation.archiveChannelForMe;
            createChannel: Mutation.createChannel;
            deleteChannel: Mutation.deleteChannel;
            deleteChannelV2: Mutation.deleteChannelV2;
            markChannelMessagesAsSeenByMe: Mutation.markChannelMessagesAsSeenByMe;
            updateChannel: Mutation.updateChannel;
            unarchiveChannelForMe: Mutation.unarchiveChannelForMe;
            addChannelMessageEvent: Mutation.addChannelMessageEvent;
            createChannelMessage: Mutation.createChannelMessage;
            deleteChannelMessage: Mutation.deleteChannelMessage;
            deleteChannelMessageV2: Mutation.deleteChannelMessageV2;
            updateChannelMessage: Mutation.updateChannelMessage;
            createChannelParticipant: Mutation.createChannelParticipant;
            deleteChannelParticipant: Mutation.deleteChannelParticipant;
            deleteChannelParticipantV2: Mutation.deleteChannelParticipantV2;
            updateChannelParticipant: Mutation.updateChannelParticipant;
            createContentTag: Mutation.createContentTag;
            deleteContentTag: Mutation.deleteContentTag;
            updateContentTag: Mutation.updateContentTag;
            createGroupMembership: Mutation.createGroupMembership;
            createMenteesGroupMembership: Mutation.createMenteesGroupMembership;
            createMentorsGroupMembership: Mutation.createMentorsGroupMembership;
            deleteGroupMembership: Mutation.deleteGroupMembership;
            updateGroupMembership: Mutation.updateGroupMembership;
            updateIqlaaGroupMembership: Mutation.updateIqlaaGroupMembership;
            updateMastercardGroupMembership: Mutation.updateMastercardGroupMembership;
            updateMenteesGroupMembership: Mutation.updateMenteesGroupMembership;
            updateMentorsGroupMembership: Mutation.updateMentorsGroupMembership;
            addUserToGroup: Mutation.addUserToGroup;
            createGroup: Mutation.createGroup;
            deleteGroup: Mutation.deleteGroup;
            removeUserFromGroup: Mutation.removeUserFromGroup;
            updateGroup: Mutation.updateGroup;
            createSupportChannelConfig: Mutation.createSupportChannelConfig;
            deleteSupportChannelConfig: Mutation.deleteSupportChannelConfig;
            updateSupportChannelConfig: Mutation.updateSupportChannelConfig;
            createPurchaseOrder: Mutation.createPurchaseOrder;
            createShoppingCartItem: Mutation.createShoppingCartItem;
            deleteShoppingCartItem: Mutation.deleteShoppingCartItem;
            updateShoppingCartItem: Mutation.updateShoppingCartItem;
            clearMyShoppingCart: Mutation.clearMyShoppingCart;
            clearShoppingCart: Mutation.clearShoppingCart;
            createWalletItem: Mutation.createWalletItem;
            deleteWalletItem: Mutation.deleteWalletItem;
            updateWalletItem: Mutation.updateWalletItem;
            acceptWalletItemTransfer: Mutation.acceptWalletItemTransfer;
            createWalletItemTransfer: Mutation.createWalletItemTransfer;
            declineWalletItemTransfer: Mutation.declineWalletItemTransfer;
            deleteWalletItemTransfer: Mutation.deleteWalletItemTransfer;
            updateWalletItemTransferShowOnlineFlag: Mutation.updateWalletItemTransferShowOnlineFlag;
            updateWalletItemTransfer: Mutation.updateWalletItemTransfer;
            updateWalletItemTransferPassword: Mutation.updateWalletItemTransferPassword;
            verifyWalletItemTransferPassword: Mutation.verifyWalletItemTransferPassword;
            createUserSearch: Mutation.createUserSearch;
            deleteUserSearch: Mutation.deleteUserSearch;
            updateUserSearch: Mutation.updateUserSearch;
            createNotification: Mutation.createNotification;
            deleteNotification: Mutation.deleteNotification;
            markInAppMessageReceived: Mutation.markInAppMessageReceived;
            sendMultiStepActionNotification: Mutation.sendMultiStepActionNotification;
            updateNotification: Mutation.updateNotification;
            createNotificationTemplate: Mutation.createNotificationTemplate;
            deleteNotificationTemplate: Mutation.deleteNotificationTemplate;
            updateNotificationTemplate: Mutation.updateNotificationTemplate;
            createContact: Mutation.createContact;
            updateContact: Mutation.updateContact;
            createMultiStepAction: Mutation.createMultiStepAction;
            startResetPassword: Mutation.startResetPassword;
            startVerifyEmail: Mutation.startVerifyEmail;
            startVerifyPhoneNumber: Mutation.startVerifyPhoneNumber;
            verifyMultiStepActionToken: Mutation.verifyMultiStepActionToken;
            blockUserForMe: Mutation.blockUserForMe;
            blockUserForMeV2: Mutation.blockUserForMeV2;
            deleteMyUser: Mutation.deleteMyUser;
            deleteMyUserV2: Mutation.deleteMyUserV2;
            endMySession: Mutation.endMySession;
            endMySessionV2: Mutation.endMySessionV2;
            startMySession: Mutation.startMySession;
            startMySessionV2: Mutation.startMySessionV2;
            unblockUserForMe: Mutation.unblockUserForMe;
            unblockUserForMeV2: Mutation.unblockUserForMeV2;
            updateMyUser: Mutation.updateMyUser;
            createUserTracking: Mutation.createUserTracking;
        };
    }
    export namespace Mutation {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Mutation';
            };
        }
        interface createOneTimeAuthTokenForMe {
            kind: 'OutputField';
            name: 'createOneTimeAuthTokenForMe';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface signInUser {
            kind: 'OutputField';
            name: 'signInUser';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SignInUserInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserAuthResponse;
        }
        interface signInOauthUser {
            kind: 'OutputField';
            name: 'signInOauthUser';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SignInOauthUserInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserAuthResponse;
        }
        interface signMeOut {
            kind: 'OutputField';
            name: 'signMeOut';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface signUpUser {
            kind: 'OutputField';
            name: 'signUpUser';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SignUpUserInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserAuthResponse;
        }
        interface verifyOneTimeAuthToken {
            kind: 'OutputField';
            name: 'verifyOneTimeAuthToken';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$VerifyOneTimeAuthTokenInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface addAppFeatureToUser {
            kind: 'OutputField';
            name: 'addAppFeatureToUser';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserListFilter;
                };
                appFeature: {
                    kind: 'InputField';
                    name: 'appFeature';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AppFeature;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteUser {
            kind: 'OutputField';
            name: 'deleteUser';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                description: {
                    kind: 'InputField';
                    name: 'description';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                cause: {
                    kind: 'InputField';
                    name: 'cause';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteUserV2 {
            kind: 'OutputField';
            name: 'deleteUserV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                requester: {
                    kind: 'InputField';
                    name: 'requester';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                description: {
                    kind: 'InputField';
                    name: 'description';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                cause: {
                    kind: 'InputField';
                    name: 'cause';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface removeAppFeatureFromUser {
            kind: 'OutputField';
            name: 'removeAppFeatureFromUser';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                match: {
                    kind: 'InputField';
                    name: 'match';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserInput;
                };
                filter: {
                    kind: 'InputField';
                    name: 'filter';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UserListFilter;
                };
                appFeature: {
                    kind: 'InputField';
                    name: 'appFeature';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AppFeature;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface reportUser {
            kind: 'OutputField';
            name: 'reportUser';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ReportUserInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface updateUser {
            kind: 'OutputField';
            name: 'updateUser';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createUserDevice {
            kind: 'OutputField';
            name: 'createUserDevice';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserDeviceInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface updateUserDevice {
            kind: 'OutputField';
            name: 'updateUserDevice';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserDeviceInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createAcademicExperience {
            kind: 'OutputField';
            name: 'createAcademicExperience';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AcademicExperienceInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$AcademicExperience;
        }
        interface deleteAcademicExperience {
            kind: 'OutputField';
            name: 'deleteAcademicExperience';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                academicExperienceId: {
                    kind: 'InputField';
                    name: 'academicExperienceId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateAcademicExperience {
            kind: 'OutputField';
            name: 'updateAcademicExperience';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AcademicExperienceInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createBusinessExperience {
            kind: 'OutputField';
            name: 'createBusinessExperience';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$BusinessExperienceInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$BusinessExperience;
        }
        interface deleteBusinessExperience {
            kind: 'OutputField';
            name: 'deleteBusinessExperience';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                businessExperienceId: {
                    kind: 'InputField';
                    name: 'businessExperienceId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateBusinessExperience {
            kind: 'OutputField';
            name: 'updateBusinessExperience';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$BusinessExperienceInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createCompany {
            kind: 'OutputField';
            name: 'createCompany';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$CompanyInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Company;
        }
        interface deleteCompany {
            kind: 'OutputField';
            name: 'deleteCompany';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                companyId: {
                    kind: 'InputField';
                    name: 'companyId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface deleteCompanyV2 {
            kind: 'OutputField';
            name: 'deleteCompanyV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                companyId: {
                    kind: 'InputField';
                    name: 'companyId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateCompany {
            kind: 'OutputField';
            name: 'updateCompany';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$CompanyInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface findAndUpdateAllMm2Users {
            kind: 'OutputField';
            name: 'findAndUpdateAllMm2Users';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createAdminTask {
            kind: 'OutputField';
            name: 'createAdminTask';
            arguments: {
                adminTaskInput: {
                    kind: 'InputField';
                    name: 'adminTaskInput';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AdminTaskInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$AdminTask;
        }
        interface deleteAdminTask {
            kind: 'OutputField';
            name: 'deleteAdminTask';
            arguments: {
                adminTaskId: {
                    kind: 'InputField';
                    name: 'adminTaskId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface runAdminTask {
            kind: 'OutputField';
            name: 'runAdminTask';
            arguments: {
                adminTaskId: {
                    kind: 'InputField';
                    name: 'adminTaskId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateAdminTask {
            kind: 'OutputField';
            name: 'updateAdminTask';
            arguments: {
                adminTaskInput: {
                    kind: 'InputField';
                    name: 'adminTaskInput';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AdminTaskInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$AdminTask;
        }
        interface createUploadedAsset {
            kind: 'OutputField';
            name: 'createUploadedAsset';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UploadedAssetInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface deleteUploadedAsset {
            kind: 'OutputField';
            name: 'deleteUploadedAsset';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface initAssetUpload {
            kind: 'OutputField';
            name: 'initAssetUpload';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UploadedAssetInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface updateUploadedAsset {
            kind: 'OutputField';
            name: 'updateUploadedAsset';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UploadedAssetInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface acceptChannelInvitation {
            kind: 'OutputField';
            name: 'acceptChannelInvitation';
            arguments: {
                channelInvitationId: {
                    kind: 'InputField';
                    name: 'channelInvitationId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface acceptChannelInvitationV2 {
            kind: 'OutputField';
            name: 'acceptChannelInvitationV2';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createChannelInvitation {
            kind: 'OutputField';
            name: 'createChannelInvitation';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelInvitationInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface declineChannelInvitation {
            kind: 'OutputField';
            name: 'declineChannelInvitation';
            arguments: {
                reasonTextId: {
                    kind: 'InputField';
                    name: 'reasonTextId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$DeclineChannelInvitationReasonTextId;
                };
                channelInvitationId: {
                    kind: 'InputField';
                    name: 'channelInvitationId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface declineChannelInvitationV2 {
            kind: 'OutputField';
            name: 'declineChannelInvitationV2';
            arguments: {
                reasonTextId: {
                    kind: 'InputField';
                    name: 'reasonTextId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$DeclineChannelInvitationReasonTextId;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface deleteChannelInvitation {
            kind: 'OutputField';
            name: 'deleteChannelInvitation';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                channelInvitationId: {
                    kind: 'InputField';
                    name: 'channelInvitationId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteChannelInvitationV2 {
            kind: 'OutputField';
            name: 'deleteChannelInvitationV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface dismissChannelInvitationFromInbox {
            kind: 'OutputField';
            name: 'dismissChannelInvitationFromInbox';
            arguments: {
                channelInvitationId: {
                    kind: 'InputField';
                    name: 'channelInvitationId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface dismissChannelInvitationFromInboxV2 {
            kind: 'OutputField';
            name: 'dismissChannelInvitationFromInboxV2';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateChannelInvitation {
            kind: 'OutputField';
            name: 'updateChannelInvitation';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelInvitationInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface archiveChannelForMe {
            kind: 'OutputField';
            name: 'archiveChannelForMe';
            arguments: {
                channelId: {
                    kind: 'InputField';
                    name: 'channelId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createChannel {
            kind: 'OutputField';
            name: 'createChannel';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Channel;
        }
        interface deleteChannel {
            kind: 'OutputField';
            name: 'deleteChannel';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                channelId: {
                    kind: 'InputField';
                    name: 'channelId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteChannelV2 {
            kind: 'OutputField';
            name: 'deleteChannelV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface markChannelMessagesAsSeenByMe {
            kind: 'OutputField';
            name: 'markChannelMessagesAsSeenByMe';
            arguments: {
                channelId: {
                    kind: 'InputField';
                    name: 'channelId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface updateChannel {
            kind: 'OutputField';
            name: 'updateChannel';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface unarchiveChannelForMe {
            kind: 'OutputField';
            name: 'unarchiveChannelForMe';
            arguments: {
                channelId: {
                    kind: 'InputField';
                    name: 'channelId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface addChannelMessageEvent {
            kind: 'OutputField';
            name: 'addChannelMessageEvent';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$BgAddChannelMessageEventInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createChannelMessage {
            kind: 'OutputField';
            name: 'createChannelMessage';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelMessageInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface deleteChannelMessage {
            kind: 'OutputField';
            name: 'deleteChannelMessage';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                channelMessageId: {
                    kind: 'InputField';
                    name: 'channelMessageId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteChannelMessageV2 {
            kind: 'OutputField';
            name: 'deleteChannelMessageV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateChannelMessage {
            kind: 'OutputField';
            name: 'updateChannelMessage';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelMessageInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createChannelParticipant {
            kind: 'OutputField';
            name: 'createChannelParticipant';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelParticipantInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface deleteChannelParticipant {
            kind: 'OutputField';
            name: 'deleteChannelParticipant';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                channelParticipantId: {
                    kind: 'InputField';
                    name: 'channelParticipantId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteChannelParticipantV2 {
            kind: 'OutputField';
            name: 'deleteChannelParticipantV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateChannelParticipant {
            kind: 'OutputField';
            name: 'updateChannelParticipant';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ChannelParticipantInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createContentTag {
            kind: 'OutputField';
            name: 'createContentTag';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ContentTagInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ContentTag;
        }
        interface deleteContentTag {
            kind: 'OutputField';
            name: 'deleteContentTag';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                contentTagId: {
                    kind: 'InputField';
                    name: 'contentTagId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateContentTag {
            kind: 'OutputField';
            name: 'updateContentTag';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ContentTagInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createGroupMembership {
            kind: 'OutputField';
            name: 'createGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$GroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createMenteesGroupMembership {
            kind: 'OutputField';
            name: 'createMenteesGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$MenteesGroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createMentorsGroupMembership {
            kind: 'OutputField';
            name: 'createMentorsGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$MentorsGroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface deleteGroupMembership {
            kind: 'OutputField';
            name: 'deleteGroupMembership';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                groupMembershipId: {
                    kind: 'InputField';
                    name: 'groupMembershipId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface updateGroupMembership {
            kind: 'OutputField';
            name: 'updateGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$GroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateIqlaaGroupMembership {
            kind: 'OutputField';
            name: 'updateIqlaaGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$IqlaaGroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateMastercardGroupMembership {
            kind: 'OutputField';
            name: 'updateMastercardGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$MastercardGroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateMenteesGroupMembership {
            kind: 'OutputField';
            name: 'updateMenteesGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$MenteesGroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateMentorsGroupMembership {
            kind: 'OutputField';
            name: 'updateMentorsGroupMembership';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$MentorsGroupMembershipInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface addUserToGroup {
            kind: 'OutputField';
            name: 'addUserToGroup';
            arguments: {
                roles: {
                    kind: 'InputField';
                    name: 'roles';
                    inlineType: [1, [1]];
                    namedType: $$NamedTypes.$$GroupMembershipRole;
                };
                groupIdent: {
                    kind: 'InputField';
                    name: 'groupIdent';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                groupId: {
                    kind: 'InputField';
                    name: 'groupId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createGroup {
            kind: 'OutputField';
            name: 'createGroup';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$GroupInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Group;
        }
        interface deleteGroup {
            kind: 'OutputField';
            name: 'deleteGroup';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                groupId: {
                    kind: 'InputField';
                    name: 'groupId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface removeUserFromGroup {
            kind: 'OutputField';
            name: 'removeUserFromGroup';
            arguments: {
                force: {
                    kind: 'InputField';
                    name: 'force';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                groupIdent: {
                    kind: 'InputField';
                    name: 'groupIdent';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                groupId: {
                    kind: 'InputField';
                    name: 'groupId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateGroup {
            kind: 'OutputField';
            name: 'updateGroup';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$GroupInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createSupportChannelConfig {
            kind: 'OutputField';
            name: 'createSupportChannelConfig';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SupportChannelConfigInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SupportChannelConfig;
        }
        interface deleteSupportChannelConfig {
            kind: 'OutputField';
            name: 'deleteSupportChannelConfig';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                supportChannelConfigId: {
                    kind: 'InputField';
                    name: 'supportChannelConfigId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateSupportChannelConfig {
            kind: 'OutputField';
            name: 'updateSupportChannelConfig';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SupportChannelConfigInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createPurchaseOrder {
            kind: 'OutputField';
            name: 'createPurchaseOrder';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$PurchaseOrderInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createShoppingCartItem {
            kind: 'OutputField';
            name: 'createShoppingCartItem';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UpdateObjectOptions;
                };
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ShoppingCartItemInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ShoppingCartItem;
        }
        interface deleteShoppingCartItem {
            kind: 'OutputField';
            name: 'deleteShoppingCartItem';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateShoppingCartItem {
            kind: 'OutputField';
            name: 'updateShoppingCartItem';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UpdateObjectOptions;
                };
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ShoppingCartItemInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface clearMyShoppingCart {
            kind: 'OutputField';
            name: 'clearMyShoppingCart';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface clearShoppingCart {
            kind: 'OutputField';
            name: 'clearShoppingCart';
            arguments: {
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createWalletItem {
            kind: 'OutputField';
            name: 'createWalletItem';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UpdateObjectOptions;
                };
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$WalletItemInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$WalletItem;
        }
        interface deleteWalletItem {
            kind: 'OutputField';
            name: 'deleteWalletItem';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateWalletItem {
            kind: 'OutputField';
            name: 'updateWalletItem';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UpdateObjectOptions;
                };
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$WalletItemInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface acceptWalletItemTransfer {
            kind: 'OutputField';
            name: 'acceptWalletItemTransfer';
            arguments: {
                transferSecret: {
                    kind: 'InputField';
                    name: 'transferSecret';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createWalletItemTransfer {
            kind: 'OutputField';
            name: 'createWalletItemTransfer';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$WalletItemTransferInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface declineWalletItemTransfer {
            kind: 'OutputField';
            name: 'declineWalletItemTransfer';
            arguments: {
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface deleteWalletItemTransfer {
            kind: 'OutputField';
            name: 'deleteWalletItemTransfer';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                id: {
                    kind: 'InputField';
                    name: 'id';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateWalletItemTransferShowOnlineFlag {
            kind: 'OutputField';
            name: 'updateWalletItemTransferShowOnlineFlag';
            arguments: {
                showOnline: {
                    kind: 'InputField';
                    name: 'showOnline';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                transferSecret: {
                    kind: 'InputField';
                    name: 'transferSecret';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateWalletItemTransfer {
            kind: 'OutputField';
            name: 'updateWalletItemTransfer';
            arguments: {
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$UpdateObjectOptions;
                };
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$WalletItemTransferInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateWalletItemTransferPassword {
            kind: 'OutputField';
            name: 'updateWalletItemTransferPassword';
            arguments: {
                password: {
                    kind: 'InputField';
                    name: 'password';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
                transferSecret: {
                    kind: 'InputField';
                    name: 'transferSecret';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface verifyWalletItemTransferPassword {
            kind: 'OutputField';
            name: 'verifyWalletItemTransferPassword';
            arguments: {
                password: {
                    kind: 'InputField';
                    name: 'password';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
                transferSlug: {
                    kind: 'InputField';
                    name: 'transferSlug';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createUserSearch {
            kind: 'OutputField';
            name: 'createUserSearch';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserSearchInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$UserSearch;
        }
        interface deleteUserSearch {
            kind: 'OutputField';
            name: 'deleteUserSearch';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                userSearchId: {
                    kind: 'InputField';
                    name: 'userSearchId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateUserSearch {
            kind: 'OutputField';
            name: 'updateUserSearch';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserSearchInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface createNotification {
            kind: 'OutputField';
            name: 'createNotification';
            arguments: {
                notificationInput: {
                    kind: 'InputField';
                    name: 'notificationInput';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$NotificationInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Notification;
        }
        interface deleteNotification {
            kind: 'OutputField';
            name: 'deleteNotification';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                notificationId: {
                    kind: 'InputField';
                    name: 'notificationId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface markInAppMessageReceived {
            kind: 'OutputField';
            name: 'markInAppMessageReceived';
            arguments: {
                actionTaken: {
                    kind: 'InputField';
                    name: 'actionTaken';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$AppAction;
                };
                notificationId: {
                    kind: 'InputField';
                    name: 'notificationId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface sendMultiStepActionNotification {
            kind: 'OutputField';
            name: 'sendMultiStepActionNotification';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SendMultiStepActionNotificationInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface updateNotification {
            kind: 'OutputField';
            name: 'updateNotification';
            arguments: {
                notificationInput: {
                    kind: 'InputField';
                    name: 'notificationInput';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$NotificationInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createNotificationTemplate {
            kind: 'OutputField';
            name: 'createNotificationTemplate';
            arguments: {
                notificationTemplateInput: {
                    kind: 'InputField';
                    name: 'notificationTemplateInput';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$NotificationTemplateInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$NotificationTemplate;
        }
        interface deleteNotificationTemplate {
            kind: 'OutputField';
            name: 'deleteNotificationTemplate';
            arguments: {
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                notificationTemplateId: {
                    kind: 'InputField';
                    name: 'notificationTemplateId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface updateNotificationTemplate {
            kind: 'OutputField';
            name: 'updateNotificationTemplate';
            arguments: {
                notificationTemplateInput: {
                    kind: 'InputField';
                    name: 'notificationTemplateInput';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$NotificationTemplateInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createContact {
            kind: 'OutputField';
            name: 'createContact';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ContactInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$Contact;
        }
        interface updateContact {
            kind: 'OutputField';
            name: 'updateContact';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ContactInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createMultiStepAction {
            kind: 'OutputField';
            name: 'createMultiStepAction';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$SidMultiStepActionInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SidMultiStepActionProgress;
        }
        interface startResetPassword {
            kind: 'OutputField';
            name: 'startResetPassword';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserIdentInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SidMultiStepActionProgress;
        }
        interface startVerifyEmail {
            kind: 'OutputField';
            name: 'startVerifyEmail';
            arguments: {
                email: {
                    kind: 'InputField';
                    name: 'email';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SidMultiStepActionProgress;
        }
        interface startVerifyPhoneNumber {
            kind: 'OutputField';
            name: 'startVerifyPhoneNumber';
            arguments: {
                phoneNumber: {
                    kind: 'InputField';
                    name: 'phoneNumber';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SidMultiStepActionProgress;
        }
        interface verifyMultiStepActionToken {
            kind: 'OutputField';
            name: 'verifyMultiStepActionToken';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$VerifyMultiStepActionTokenInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$SidMultiStepActionProgress;
        }
        /**
         * @deprecated Use blockUserForMeV2
         */
        interface blockUserForMe {
            kind: 'OutputField';
            name: 'blockUserForMe';
            arguments: {
                notes: {
                    kind: 'InputField';
                    name: 'notes';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                reasonTextId: {
                    kind: 'InputField';
                    name: 'reasonTextId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface blockUserForMeV2 {
            kind: 'OutputField';
            name: 'blockUserForMeV2';
            arguments: {
                notes: {
                    kind: 'InputField';
                    name: 'notes';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                reasonTextId: {
                    kind: 'InputField';
                    name: 'reasonTextId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface deleteMyUser {
            kind: 'OutputField';
            name: 'deleteMyUser';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$Boolean;
                };
                description: {
                    kind: 'InputField';
                    name: 'description';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                cause: {
                    kind: 'InputField';
                    name: 'cause';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deleteMyUserV2 {
            kind: 'OutputField';
            name: 'deleteMyUserV2';
            arguments: {
                anonymizePersonalData: {
                    kind: 'InputField';
                    name: 'anonymizePersonalData';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                deletePhysically: {
                    kind: 'InputField';
                    name: 'deletePhysically';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                description: {
                    kind: 'InputField';
                    name: 'description';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                cause: {
                    kind: 'InputField';
                    name: 'cause';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        /**
         * @deprecated Use endMySessionV2
         */
        interface endMySession {
            kind: 'OutputField';
            name: 'endMySession';
            arguments: {
                deviceUuid: {
                    kind: 'InputField';
                    name: 'deviceUuid';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface endMySessionV2 {
            kind: 'OutputField';
            name: 'endMySessionV2';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * @deprecated Use startMySessionV2
         */
        interface startMySession {
            kind: 'OutputField';
            name: 'startMySession';
            arguments: {
                pushNotificationToken: {
                    kind: 'InputField';
                    name: 'pushNotificationToken';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
                deviceUuid: {
                    kind: 'InputField';
                    name: 'deviceUuid';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface startMySessionV2 {
            kind: 'OutputField';
            name: 'startMySessionV2';
            arguments: {
                returnContentStatus: {
                    kind: 'InputField';
                    name: 'returnContentStatus';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                pushNotificationToken: {
                    kind: 'InputField';
                    name: 'pushNotificationToken';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ContentStatus;
        }
        /**
         * @deprecated Use unblockUserForMeV2
         */
        interface unblockUserForMe {
            kind: 'OutputField';
            name: 'unblockUserForMe';
            arguments: {
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface unblockUserForMeV2 {
            kind: 'OutputField';
            name: 'unblockUserForMeV2';
            arguments: {
                userId: {
                    kind: 'InputField';
                    name: 'userId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$String;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface updateMyUser {
            kind: 'OutputField';
            name: 'updateMyUser';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$MyUserInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface createUserTracking {
            kind: 'OutputField';
            name: 'createUserTracking';
            arguments: {
                input: {
                    kind: 'InputField';
                    name: 'input';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$UserTrackingInput;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Subscription {
        kind: 'Object';
        name: 'Subscription';
        fields: {
            __typename: Subscription.__typename;
            channelChanged: Subscription.channelChanged;
            objectChanged: Subscription.objectChanged;
        };
    }
    export namespace Subscription {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Subscription';
            };
        }
        interface channelChanged {
            kind: 'OutputField';
            name: 'channelChanged';
            arguments: {
                channelId: {
                    kind: 'InputField';
                    name: 'channelId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ID;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$BgChannelChangedEvent;
        }
        interface objectChanged {
            kind: 'OutputField';
            name: 'objectChanged';
            arguments: {
                objectId: {
                    kind: 'InputField';
                    name: 'objectId';
                    inlineType: [1];
                    namedType: $$NamedTypes.$$ID;
                };
                modelType: {
                    kind: 'InputField';
                    name: 'modelType';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ModelType;
                };
                ownerUserId: {
                    kind: 'InputField';
                    name: 'ownerUserId';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$ID;
                };
            };
            inlineType: [1];
            namedType: $$NamedTypes.$$ObjectChangedEvent;
        }
    }
    export interface UserMetadata {
        kind: 'Object';
        name: 'UserMetadata';
        fields: {
            __typename: UserMetadata.__typename;
            updatedAt: UserMetadata.updatedAt;
            totalTimeOnPlatform: UserMetadata.totalTimeOnPlatform;
            channelsMetadata: UserMetadata.channelsMetadata;
            groupsMetadata: UserMetadata.groupsMetadata;
        };
    }
    export namespace UserMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserMetadata';
            };
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface totalTimeOnPlatform {
            kind: 'OutputField';
            name: 'totalTimeOnPlatform';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface channelsMetadata {
            kind: 'OutputField';
            name: 'channelsMetadata';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelsUserMetadata;
        }
        interface groupsMetadata {
            kind: 'OutputField';
            name: 'groupsMetadata';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$GroupsUserMetadata;
        }
    }
    export interface ChannelsUserMetadata {
        kind: 'Object';
        name: 'ChannelsUserMetadata';
        fields: {
            __typename: ChannelsUserMetadata.__typename;
            mentoringSessionCount: ChannelsUserMetadata.mentoringSessionCount;
        };
    }
    export namespace ChannelsUserMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelsUserMetadata';
            };
        }
        interface mentoringSessionCount {
            kind: 'OutputField';
            name: 'mentoringSessionCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface GroupsUserMetadata {
        kind: 'Object';
        name: 'GroupsUserMetadata';
        fields: {
            __typename: GroupsUserMetadata.__typename;
            groupCount: GroupsUserMetadata.groupCount;
            updatedAt: GroupsUserMetadata.updatedAt;
        };
    }
    export namespace GroupsUserMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GroupsUserMetadata';
            };
        }
        interface groupCount {
            kind: 'OutputField';
            name: 'groupCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface GroupMembership {
        kind: 'Object';
        name: 'GroupMembership';
        fields: {
            __typename: GroupMembership.__typename;
            id: GroupMembership.id;
            adminNotes: GroupMembership.adminNotes;
            events: GroupMembership.events;
            metadata: GroupMembership.metadata;
            createdAt: GroupMembership.createdAt;
            createdBy: GroupMembership.createdBy;
            updatedAt: GroupMembership.updatedAt;
            updatedBy: GroupMembership.updatedBy;
            deletedAt: GroupMembership.deletedAt;
            deletedBy: GroupMembership.deletedBy;
            groupId: GroupMembership.groupId;
            groupIdent: GroupMembership.groupIdent;
            userId: GroupMembership.userId;
            roles: GroupMembership.roles;
            expertises: GroupMembership.expertises;
            industries: GroupMembership.industries;
            industry: GroupMembership.industry;
            soughtExpertises: GroupMembership.soughtExpertises;
        };
    }
    export namespace GroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        interface expertises {
            kind: 'OutputField';
            name: 'expertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface industry {
            kind: 'OutputField';
            name: 'industry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Industry;
        }
        interface soughtExpertises {
            kind: 'OutputField';
            name: 'soughtExpertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
    }
    export interface ModelEvent {
        kind: 'Object';
        name: 'ModelEvent';
        fields: {
            __typename: ModelEvent.__typename;
            time: ModelEvent.time;
            modelEventType: ModelEvent.modelEventType;
            message: ModelEvent.message;
        };
    }
    export namespace ModelEvent {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ModelEvent';
            };
        }
        interface time {
            kind: 'OutputField';
            name: 'time';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface modelEventType {
            kind: 'OutputField';
            name: 'modelEventType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ModelEventType;
        }
        interface message {
            kind: 'OutputField';
            name: 'message';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Expertise {
        kind: 'Object';
        name: 'Expertise';
        fields: {
            __typename: Expertise.__typename;
            id: Expertise.id;
            adminNotes: Expertise.adminNotes;
            events: Expertise.events;
            metadata: Expertise.metadata;
            createdAt: Expertise.createdAt;
            createdBy: Expertise.createdBy;
            updatedAt: Expertise.updatedAt;
            updatedBy: Expertise.updatedBy;
            deletedAt: Expertise.deletedAt;
            deletedBy: Expertise.deletedBy;
            textId: Expertise.textId;
            parentTextId: Expertise.parentTextId;
            isParent: Expertise.isParent;
            optionType: Expertise.optionType;
            value: Expertise.value;
            translatedValue: Expertise.translatedValue;
            supportedLanguages: Expertise.supportedLanguages;
            materialIconName: Expertise.materialIconName;
            description: Expertise.description;
            translatedDescription: Expertise.translatedDescription;
            language: Expertise.language;
            mm2Id: Expertise.mm2Id;
            mm2Value: Expertise.mm2Value;
            syncedWithMm2At: Expertise.syncedWithMm2At;
            mm2TextId: Expertise.mm2TextId;
            mm3TextId: Expertise.mm3TextId;
            childOptions: Expertise.childOptions;
            parentOption: Expertise.parentOption;
            childExpertises: Expertise.childExpertises;
            parentExpertise: Expertise.parentExpertise;
        };
    }
    export namespace Expertise {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Expertise';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface childExpertises {
            kind: 'OutputField';
            name: 'childExpertises';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface parentExpertise {
            kind: 'OutputField';
            name: 'parentExpertise';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Expertise;
        }
    }
    export interface Option {
        kind: 'Object';
        name: 'Option';
        fields: {
            __typename: Option.__typename;
            id: Option.id;
            adminNotes: Option.adminNotes;
            events: Option.events;
            metadata: Option.metadata;
            createdAt: Option.createdAt;
            createdBy: Option.createdBy;
            updatedAt: Option.updatedAt;
            updatedBy: Option.updatedBy;
            deletedAt: Option.deletedAt;
            deletedBy: Option.deletedBy;
            textId: Option.textId;
            parentTextId: Option.parentTextId;
            isParent: Option.isParent;
            optionType: Option.optionType;
            value: Option.value;
            translatedValue: Option.translatedValue;
            supportedLanguages: Option.supportedLanguages;
            materialIconName: Option.materialIconName;
            description: Option.description;
            translatedDescription: Option.translatedDescription;
            language: Option.language;
            mm2Id: Option.mm2Id;
            mm2Value: Option.mm2Value;
            syncedWithMm2At: Option.syncedWithMm2At;
            mm2TextId: Option.mm2TextId;
            mm3TextId: Option.mm3TextId;
            childOptions: Option.childOptions;
            parentOption: Option.parentOption;
        };
    }
    export namespace Option {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Option';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface Industry {
        kind: 'Object';
        name: 'Industry';
        fields: {
            __typename: Industry.__typename;
            id: Industry.id;
            adminNotes: Industry.adminNotes;
            events: Industry.events;
            metadata: Industry.metadata;
            createdAt: Industry.createdAt;
            createdBy: Industry.createdBy;
            updatedAt: Industry.updatedAt;
            updatedBy: Industry.updatedBy;
            deletedAt: Industry.deletedAt;
            deletedBy: Industry.deletedBy;
            textId: Industry.textId;
            parentTextId: Industry.parentTextId;
            isParent: Industry.isParent;
            optionType: Industry.optionType;
            value: Industry.value;
            translatedValue: Industry.translatedValue;
            supportedLanguages: Industry.supportedLanguages;
            materialIconName: Industry.materialIconName;
            description: Industry.description;
            translatedDescription: Industry.translatedDescription;
            language: Industry.language;
            mm2Id: Industry.mm2Id;
            mm2Value: Industry.mm2Value;
            syncedWithMm2At: Industry.syncedWithMm2At;
            mm2TextId: Industry.mm2TextId;
            mm3TextId: Industry.mm3TextId;
            childOptions: Industry.childOptions;
            parentOption: Industry.parentOption;
        };
    }
    export namespace Industry {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Industry';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    /**
     * This object contains the profile information describing a mentee/entrepreneur/business owner.
     *
     * Users with User.seeksHelp are members of the "mentees" group, which comes with extra
     * profile attributes. This is one of the 'embedded' group memberships that are available
     * through User.groupMemberships.
     */
    export interface MenteesGroupMembership {
        kind: 'Object';
        name: 'MenteesGroupMembership';
        fields: {
            __typename: MenteesGroupMembership.__typename;
            id: MenteesGroupMembership.id;
            adminNotes: MenteesGroupMembership.adminNotes;
            events: MenteesGroupMembership.events;
            metadata: MenteesGroupMembership.metadata;
            createdAt: MenteesGroupMembership.createdAt;
            createdBy: MenteesGroupMembership.createdBy;
            updatedAt: MenteesGroupMembership.updatedAt;
            updatedBy: MenteesGroupMembership.updatedBy;
            deletedAt: MenteesGroupMembership.deletedAt;
            deletedBy: MenteesGroupMembership.deletedBy;
            groupId: MenteesGroupMembership.groupId;
            groupIdent: MenteesGroupMembership.groupIdent;
            userId: MenteesGroupMembership.userId;
            roles: MenteesGroupMembership.roles;
            expertises: MenteesGroupMembership.expertises;
            industries: MenteesGroupMembership.industries;
            industry: MenteesGroupMembership.industry;
            soughtExpertises: MenteesGroupMembership.soughtExpertises;
            soughtExpertisesTextIds: MenteesGroupMembership.soughtExpertisesTextIds;
            additionalSoughtExpertisesTextIds: MenteesGroupMembership.additionalSoughtExpertisesTextIds;
            industryTextId: MenteesGroupMembership.industryTextId;
            mm2SoughtExpertisesTextIds: MenteesGroupMembership.mm2SoughtExpertisesTextIds;
            mm2IndustryTextId: MenteesGroupMembership.mm2IndustryTextId;
            actionsTaken: MenteesGroupMembership.actionsTaken;
            currentChallenges: MenteesGroupMembership.currentChallenges;
            futureGoals: MenteesGroupMembership.futureGoals;
            motivationsForMentorship: MenteesGroupMembership.motivationsForMentorship;
            reasonsForStartingBusiness: MenteesGroupMembership.reasonsForStartingBusiness;
            howCanMentorSupportMe: MenteesGroupMembership.howCanMentorSupportMe;
        };
    }
    export namespace MenteesGroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MenteesGroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        interface expertises {
            kind: 'OutputField';
            name: 'expertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface industry {
            kind: 'OutputField';
            name: 'industry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Industry;
        }
        interface soughtExpertises {
            kind: 'OutputField';
            name: 'soughtExpertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        /**
         * Must match expertise textIds.
         */
        interface soughtExpertisesTextIds {
            kind: 'OutputField';
            name: 'soughtExpertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match expertise textIds.
         */
        interface additionalSoughtExpertisesTextIds {
            kind: 'OutputField';
            name: 'additionalSoughtExpertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match industry textIds.
         */
        interface industryTextId {
            kind: 'OutputField';
            name: 'industryTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 expertise textIds -- only used by synchronizer
         */
        interface mm2SoughtExpertisesTextIds {
            kind: 'OutputField';
            name: 'mm2SoughtExpertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 industry textIds -- only used by synchronizer
         */
        interface mm2IndustryTextId {
            kind: 'OutputField';
            name: 'mm2IndustryTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface actionsTaken {
            kind: 'OutputField';
            name: 'actionsTaken';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface currentChallenges {
            kind: 'OutputField';
            name: 'currentChallenges';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface futureGoals {
            kind: 'OutputField';
            name: 'futureGoals';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface motivationsForMentorship {
            kind: 'OutputField';
            name: 'motivationsForMentorship';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface reasonsForStartingBusiness {
            kind: 'OutputField';
            name: 'reasonsForStartingBusiness';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface howCanMentorSupportMe {
            kind: 'OutputField';
            name: 'howCanMentorSupportMe';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface MentorsGroupMembership {
        kind: 'Object';
        name: 'MentorsGroupMembership';
        fields: {
            __typename: MentorsGroupMembership.__typename;
            id: MentorsGroupMembership.id;
            adminNotes: MentorsGroupMembership.adminNotes;
            events: MentorsGroupMembership.events;
            metadata: MentorsGroupMembership.metadata;
            createdAt: MentorsGroupMembership.createdAt;
            createdBy: MentorsGroupMembership.createdBy;
            updatedAt: MentorsGroupMembership.updatedAt;
            updatedBy: MentorsGroupMembership.updatedBy;
            deletedAt: MentorsGroupMembership.deletedAt;
            deletedBy: MentorsGroupMembership.deletedBy;
            groupId: MentorsGroupMembership.groupId;
            groupIdent: MentorsGroupMembership.groupIdent;
            userId: MentorsGroupMembership.userId;
            roles: MentorsGroupMembership.roles;
            expertises: MentorsGroupMembership.expertises;
            industries: MentorsGroupMembership.industries;
            industry: MentorsGroupMembership.industry;
            soughtExpertises: MentorsGroupMembership.soughtExpertises;
            expertisesTextIds: MentorsGroupMembership.expertisesTextIds;
            additionalExpertisesTextIds: MentorsGroupMembership.additionalExpertisesTextIds;
            industriesTextIds: MentorsGroupMembership.industriesTextIds;
            mm2ExpertisesTextIds: MentorsGroupMembership.mm2ExpertisesTextIds;
            mm2IndustriesTextIds: MentorsGroupMembership.mm2IndustriesTextIds;
            helpICanOffer: MentorsGroupMembership.helpICanOffer;
            expectationsForMentees: MentorsGroupMembership.expectationsForMentees;
            menteePreparationInstructions: MentorsGroupMembership.menteePreparationInstructions;
            endorsements: MentorsGroupMembership.endorsements;
            reasonsForMentoring: MentorsGroupMembership.reasonsForMentoring;
            howICanHelpMentees: MentorsGroupMembership.howICanHelpMentees;
        };
    }
    export namespace MentorsGroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MentorsGroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        interface expertises {
            kind: 'OutputField';
            name: 'expertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface industry {
            kind: 'OutputField';
            name: 'industry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Industry;
        }
        interface soughtExpertises {
            kind: 'OutputField';
            name: 'soughtExpertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        /**
         * Must match expertise textIds.
         */
        interface expertisesTextIds {
            kind: 'OutputField';
            name: 'expertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match expertise textIds.
         */
        interface additionalExpertisesTextIds {
            kind: 'OutputField';
            name: 'additionalExpertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match industry textIds.
         */
        interface industriesTextIds {
            kind: 'OutputField';
            name: 'industriesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 expertise textIds -- only used by synchronizer
         */
        interface mm2ExpertisesTextIds {
            kind: 'OutputField';
            name: 'mm2ExpertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 industry textIds -- only used by synchronizer
         */
        interface mm2IndustriesTextIds {
            kind: 'OutputField';
            name: 'mm2IndustriesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface helpICanOffer {
            kind: 'OutputField';
            name: 'helpICanOffer';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface expectationsForMentees {
            kind: 'OutputField';
            name: 'expectationsForMentees';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface menteePreparationInstructions {
            kind: 'OutputField';
            name: 'menteePreparationInstructions';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface endorsements {
            kind: 'OutputField';
            name: 'endorsements';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface reasonsForMentoring {
            kind: 'OutputField';
            name: 'reasonsForMentoring';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface howICanHelpMentees {
            kind: 'OutputField';
            name: 'howICanHelpMentees';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    /**
     * This object contains the profile information describing an MASTERCARD user.
     *
     * MASTERCARD users are members of the "mastercard" group, which comes with extra
     * profile attributes. These fields are used to store the user's
     * MASTERCARD-specific information.
     */
    export interface MastercardGroupMembership {
        kind: 'Object';
        name: 'MastercardGroupMembership';
        fields: {
            __typename: MastercardGroupMembership.__typename;
            id: MastercardGroupMembership.id;
            adminNotes: MastercardGroupMembership.adminNotes;
            events: MastercardGroupMembership.events;
            metadata: MastercardGroupMembership.metadata;
            createdAt: MastercardGroupMembership.createdAt;
            createdBy: MastercardGroupMembership.createdBy;
            updatedAt: MastercardGroupMembership.updatedAt;
            updatedBy: MastercardGroupMembership.updatedBy;
            deletedAt: MastercardGroupMembership.deletedAt;
            deletedBy: MastercardGroupMembership.deletedBy;
            groupId: MastercardGroupMembership.groupId;
            groupIdent: MastercardGroupMembership.groupIdent;
            userId: MastercardGroupMembership.userId;
            roles: MastercardGroupMembership.roles;
            expertises: MastercardGroupMembership.expertises;
            industries: MastercardGroupMembership.industries;
            industry: MastercardGroupMembership.industry;
            soughtExpertises: MastercardGroupMembership.soughtExpertises;
            bankNames: MastercardGroupMembership.bankNames;
            bankTextIds: MastercardGroupMembership.bankTextIds;
            smallBusinessCardTypes: MastercardGroupMembership.smallBusinessCardTypes;
            personalCardTypes: MastercardGroupMembership.personalCardTypes;
        };
    }
    export namespace MastercardGroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MastercardGroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        interface expertises {
            kind: 'OutputField';
            name: 'expertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface industry {
            kind: 'OutputField';
            name: 'industry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Industry;
        }
        interface soughtExpertises {
            kind: 'OutputField';
            name: 'soughtExpertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        /**
         * Names of banks for reports
         */
        interface bankNames {
            kind: 'OutputField';
            name: 'bankNames';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Text IDs of banks for reports
         */
        interface bankTextIds {
            kind: 'OutputField';
            name: 'bankTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Small business card types, e.g. credit, debit, etc
         */
        interface smallBusinessCardTypes {
            kind: 'OutputField';
            name: 'smallBusinessCardTypes';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MastercardCardType;
        }
        /**
         * Personal card types
         */
        interface personalCardTypes {
            kind: 'OutputField';
            name: 'personalCardTypes';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MastercardCardType;
        }
    }
    /**
     * This object contains the profile information describing an IQLAA user.
     *
     * IQLAA users are members of the "iqlaa" group, which comes with extra
     * profile attributes. These fields are used to store the user's
     * IQLAA-specific information.
     */
    export interface IqlaaGroupMembership {
        kind: 'Object';
        name: 'IqlaaGroupMembership';
        fields: {
            __typename: IqlaaGroupMembership.__typename;
            id: IqlaaGroupMembership.id;
            adminNotes: IqlaaGroupMembership.adminNotes;
            events: IqlaaGroupMembership.events;
            metadata: IqlaaGroupMembership.metadata;
            createdAt: IqlaaGroupMembership.createdAt;
            createdBy: IqlaaGroupMembership.createdBy;
            updatedAt: IqlaaGroupMembership.updatedAt;
            updatedBy: IqlaaGroupMembership.updatedBy;
            deletedAt: IqlaaGroupMembership.deletedAt;
            deletedBy: IqlaaGroupMembership.deletedBy;
            groupId: IqlaaGroupMembership.groupId;
            groupIdent: IqlaaGroupMembership.groupIdent;
            userId: IqlaaGroupMembership.userId;
            roles: IqlaaGroupMembership.roles;
            expertises: IqlaaGroupMembership.expertises;
            industries: IqlaaGroupMembership.industries;
            industry: IqlaaGroupMembership.industry;
            soughtExpertises: IqlaaGroupMembership.soughtExpertises;
            fatherName: IqlaaGroupMembership.fatherName;
            birthDate: IqlaaGroupMembership.birthDate;
            isBusinessHomeBased: IqlaaGroupMembership.isBusinessHomeBased;
            isBusinessRegisteredWithCCD: IqlaaGroupMembership.isBusinessRegisteredWithCCD;
            businessRegistrationNumber: IqlaaGroupMembership.businessRegistrationNumber;
            isJordanNational: IqlaaGroupMembership.isJordanNational;
        };
    }
    export namespace IqlaaGroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'IqlaaGroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        interface expertises {
            kind: 'OutputField';
            name: 'expertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface industry {
            kind: 'OutputField';
            name: 'industry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Industry;
        }
        interface soughtExpertises {
            kind: 'OutputField';
            name: 'soughtExpertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        /**
         * Fathers name
         */
        interface fatherName {
            kind: 'OutputField';
            name: 'fatherName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Date of birth
         */
        interface birthDate {
            kind: 'OutputField';
            name: 'birthDate';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * "Is your business a home-based business?"
         */
        interface isBusinessHomeBased {
            kind: 'OutputField';
            name: 'isBusinessHomeBased';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * "Is the Business/ Project registered in the Companies Control Department -Ministry of industries and trading?"
         */
        interface isBusinessRegisteredWithCCD {
            kind: 'OutputField';
            name: 'isBusinessRegisteredWithCCD';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * (Optional) Business registration number
         */
        interface businessRegistrationNumber {
            kind: 'OutputField';
            name: 'businessRegistrationNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Is the user a Jordan national?
         */
        interface isJordanNational {
            kind: 'OutputField';
            name: 'isJordanNational';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    /**
     * This object contains the profile information describing an a Strive Indonesia user.
     */
    export interface StriveIndonesiaGroupMembership {
        kind: 'Object';
        name: 'StriveIndonesiaGroupMembership';
        fields: {
            __typename: StriveIndonesiaGroupMembership.__typename;
            id: StriveIndonesiaGroupMembership.id;
            adminNotes: StriveIndonesiaGroupMembership.adminNotes;
            events: StriveIndonesiaGroupMembership.events;
            metadata: StriveIndonesiaGroupMembership.metadata;
            createdAt: StriveIndonesiaGroupMembership.createdAt;
            createdBy: StriveIndonesiaGroupMembership.createdBy;
            updatedAt: StriveIndonesiaGroupMembership.updatedAt;
            updatedBy: StriveIndonesiaGroupMembership.updatedBy;
            deletedAt: StriveIndonesiaGroupMembership.deletedAt;
            deletedBy: StriveIndonesiaGroupMembership.deletedBy;
            groupId: StriveIndonesiaGroupMembership.groupId;
            groupIdent: StriveIndonesiaGroupMembership.groupIdent;
            userId: StriveIndonesiaGroupMembership.userId;
            roles: StriveIndonesiaGroupMembership.roles;
            expertises: StriveIndonesiaGroupMembership.expertises;
            industries: StriveIndonesiaGroupMembership.industries;
            industry: StriveIndonesiaGroupMembership.industry;
            soughtExpertises: StriveIndonesiaGroupMembership.soughtExpertises;
            ventureStartDate: StriveIndonesiaGroupMembership.ventureStartDate;
            numberOfEmployees: StriveIndonesiaGroupMembership.numberOfEmployees;
        };
    }
    export namespace StriveIndonesiaGroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'StriveIndonesiaGroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        interface expertises {
            kind: 'OutputField';
            name: 'expertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Industry;
        }
        interface industry {
            kind: 'OutputField';
            name: 'industry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Industry;
        }
        interface soughtExpertises {
            kind: 'OutputField';
            name: 'soughtExpertises';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Expertise;
        }
        /**
         * Venture Start Date
         */
        interface ventureStartDate {
            kind: 'OutputField';
            name: 'ventureStartDate';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * Number of employees
         */
        interface numberOfEmployees {
            kind: 'OutputField';
            name: 'numberOfEmployees';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface User {
        kind: 'Object';
        name: 'User';
        fields: {
            __typename: User.__typename;
            id: User.id;
            adminNotes: User.adminNotes;
            events: User.events;
            metadata: User.metadata;
            createdAt: User.createdAt;
            createdBy: User.createdBy;
            updatedAt: User.updatedAt;
            updatedBy: User.updatedBy;
            deletedAt: User.deletedAt;
            deletedBy: User.deletedBy;
            firstName: User.firstName;
            lastName: User.lastName;
            userHandle: User.userHandle;
            phoneNumber: User.phoneNumber;
            phoneNumberUpdatedAt: User.phoneNumberUpdatedAt;
            isPhoneNumberVerified: User.isPhoneNumberVerified;
            email: User.email;
            emailSource: User.emailSource;
            emailUpdatedAt: User.emailUpdatedAt;
            isEmailVerified: User.isEmailVerified;
            genderTextId: User.genderTextId;
            cityOfResidence: User.cityOfResidence;
            regionOfResidence: User.regionOfResidence;
            countryOfResidenceTextId: User.countryOfResidenceTextId;
            postalCode: User.postalCode;
            avatarUrl: User.avatarUrl;
            websites: User.websites;
            inviteCode: User.inviteCode;
            passwordUpdatedAt: User.passwordUpdatedAt;
            preferredLanguageTextId: User.preferredLanguageTextId;
            spokenLanguagesTextIds: User.spokenLanguagesTextIds;
            selectedUiLanguageTextId: User.selectedUiLanguageTextId;
            fallbackUiLanguageTextId: User.fallbackUiLanguageTextId;
            discoverable: User.discoverable;
            roles: User.roles;
            appFeatures: User.appFeatures;
            source: User.source;
            timezone: User.timezone;
            preferences: User.preferences;
            trustLevel: User.trustLevel;
            userDevices: User.userDevices;
            userBlocks: User.userBlocks;
            termsAndConditionsAcceptedAt: User.termsAndConditionsAcceptedAt;
            optIntoNewsletter: User.optIntoNewsletter;
            onboardingStage: User.onboardingStage;
            isTestUser: User.isTestUser;
            signedInAt: User.signedInAt;
            signedOutAt: User.signedOutAt;
            latestActivityAt: User.latestActivityAt;
            inactivatedAt: User.inactivatedAt;
            inactivatedBy: User.inactivatedBy;
            suspendedAt: User.suspendedAt;
            suspendedBy: User.suspendedBy;
            anonymizedAt: User.anonymizedAt;
            companyIds: User.companyIds;
            companies: User.companies;
            groupIds: User.groupIds;
            parentGroupIds: User.parentGroupIds;
            externalGroupIds: User.externalGroupIds;
            groupMemberships: User.groupMemberships;
            mentor: User.mentor;
            mentee: User.mentee;
            pronounsTextIds: User.pronounsTextIds;
            seeksHelp: User.seeksHelp;
            offersHelp: User.offersHelp;
            birthYear: User.birthYear;
            ethnicity: User.ethnicity;
            educationLevelTextId: User.educationLevelTextId;
            personalBio: User.personalBio;
            yearsManagementExperience: User.yearsManagementExperience;
            yearsOwnershipExperience: User.yearsOwnershipExperience;
            academicExperienceIds: User.academicExperienceIds;
            academicExperiences: User.academicExperiences;
            genderSelfDescribed: User.genderSelfDescribed;
            businessExperienceIds: User.businessExperienceIds;
            businessExperiences: User.businessExperiences;
            cityOfOrigin: User.cityOfOrigin;
            regionOfOrigin: User.regionOfOrigin;
            countryOfOriginTextId: User.countryOfOriginTextId;
            isOnVacation: User.isOnVacation;
            avatarAsset: User.avatarAsset;
            profileRoleHistory: User.profileRoleHistory;
            ssoIdp: User.ssoIdp;
            originatedInMm2: User.originatedInMm2;
            syncedWithMm2At: User.syncedWithMm2At;
            mm2PasswordHash: User.mm2PasswordHash;
            mm2Id: User.mm2Id;
            mm2ProfileId: User.mm2ProfileId;
            mm2PhotoOriginal: User.mm2PhotoOriginal;
            mm2BasicAccountCompleted: User.mm2BasicAccountCompleted;
            hasSignedInToMm3: User.hasSignedInToMm3;
            hasSignedInToMm2: User.hasSignedInToMm2;
            countryOfResidence: User.countryOfResidence;
            gender: User.gender;
            latestUserDevice: User.latestUserDevice;
            spokenLanguages: User.spokenLanguages;
            preferredLanguage: User.preferredLanguage;
            fallbackUiLanguage: User.fallbackUiLanguage;
            preferredUiLanguage: User.preferredUiLanguage;
            unreadInAppMessages: User.unreadInAppMessages;
            channels: User.channels;
            channelInvitations: User.channelInvitations;
            channelParticipants: User.channelParticipants;
            countryOfOrigin: User.countryOfOrigin;
            educationLevel: User.educationLevel;
            endorsements: User.endorsements;
            groupMembers: User.groupMembers;
            groups: User.groups;
            hasTrainings: User.hasTrainings;
            profileCompletionPercentage: User.profileCompletionPercentage;
            profileRole: User.profileRole;
            pronouns: User.pronouns;
            pronounsDisplay: User.pronounsDisplay;
            uploadedAssets: User.uploadedAssets;
        };
    }
    export namespace User {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'User';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'OutputField';
            name: 'phoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberUpdatedAt {
            kind: 'OutputField';
            name: 'phoneNumberUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isPhoneNumberVerified {
            kind: 'OutputField';
            name: 'isPhoneNumberVerified';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface email {
            kind: 'OutputField';
            name: 'email';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The source of the email address, e.g. "google", "facebook", etc.
         */
        interface emailSource {
            kind: 'OutputField';
            name: 'emailSource';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailUpdatedAt {
            kind: 'OutputField';
            name: 'emailUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isEmailVerified {
            kind: 'OutputField';
            name: 'isEmailVerified';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface genderTextId {
            kind: 'OutputField';
            name: 'genderTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cityOfResidence {
            kind: 'OutputField';
            name: 'cityOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfResidence {
            kind: 'OutputField';
            name: 'regionOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfResidenceTextId {
            kind: 'OutputField';
            name: 'countryOfResidenceTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface postalCode {
            kind: 'OutputField';
            name: 'postalCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'OutputField';
            name: 'avatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'OutputField';
            name: 'websites';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValue;
        }
        interface inviteCode {
            kind: 'OutputField';
            name: 'inviteCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface passwordUpdatedAt {
            kind: 'OutputField';
            name: 'passwordUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface preferredLanguageTextId {
            kind: 'OutputField';
            name: 'preferredLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface spokenLanguagesTextIds {
            kind: 'OutputField';
            name: 'spokenLanguagesTextIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface selectedUiLanguageTextId {
            kind: 'OutputField';
            name: 'selectedUiLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface fallbackUiLanguageTextId {
            kind: 'OutputField';
            name: 'fallbackUiLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * If discoverable is not true, the user will not be included in search results or recommended to other users. The system will set discoverable to null for various reasons, i.e. for a bad actor. The user can set it to false intentionally.
         */
        interface discoverable {
            kind: 'OutputField';
            name: 'discoverable';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface appFeatures {
            kind: 'OutputField';
            name: 'appFeatures';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AppFeature;
        }
        interface source {
            kind: 'OutputField';
            name: 'source';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'OutputField';
            name: 'timezone';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface preferences {
            kind: 'OutputField';
            name: 'preferences';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserPreferences;
        }
        interface trustLevel {
            kind: 'OutputField';
            name: 'trustLevel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface userDevices {
            kind: 'OutputField';
            name: 'userDevices';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface userBlocks {
            kind: 'OutputField';
            name: 'userBlocks';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserBlock;
        }
        interface termsAndConditionsAcceptedAt {
            kind: 'OutputField';
            name: 'termsAndConditionsAcceptedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface optIntoNewsletter {
            kind: 'OutputField';
            name: 'optIntoNewsletter';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface onboardingStage {
            kind: 'OutputField';
            name: 'onboardingStage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isTestUser {
            kind: 'OutputField';
            name: 'isTestUser';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface signedInAt {
            kind: 'OutputField';
            name: 'signedInAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedOutAt {
            kind: 'OutputField';
            name: 'signedOutAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface latestActivityAt {
            kind: 'OutputField';
            name: 'latestActivityAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedAt {
            kind: 'OutputField';
            name: 'inactivatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedBy {
            kind: 'OutputField';
            name: 'inactivatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface anonymizedAt {
            kind: 'OutputField';
            name: 'anonymizedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface companyIds {
            kind: 'OutputField';
            name: 'companyIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface companies {
            kind: 'OutputField';
            name: 'companies';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Company;
        }
        interface groupIds {
            kind: 'OutputField';
            name: 'groupIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface parentGroupIds {
            kind: 'OutputField';
            name: 'parentGroupIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface externalGroupIds {
            kind: 'OutputField';
            name: 'externalGroupIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupMemberships {
            kind: 'OutputField';
            name: 'groupMemberships';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        /**
         * This attribute is a copy of the mentor group membership.
         */
        interface mentor {
            kind: 'OutputField';
            name: 'mentor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MentorsGroupMembership;
        }
        /**
         * This attribute is a copy of the mentee group membership.
         */
        interface mentee {
            kind: 'OutputField';
            name: 'mentee';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MenteesGroupMembership;
        }
        interface pronounsTextIds {
            kind: 'OutputField';
            name: 'pronounsTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface seeksHelp {
            kind: 'OutputField';
            name: 'seeksHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'OutputField';
            name: 'offersHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface birthYear {
            kind: 'OutputField';
            name: 'birthYear';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface ethnicity {
            kind: 'OutputField';
            name: 'ethnicity';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface educationLevelTextId {
            kind: 'OutputField';
            name: 'educationLevelTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface personalBio {
            kind: 'OutputField';
            name: 'personalBio';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface yearsManagementExperience {
            kind: 'OutputField';
            name: 'yearsManagementExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface yearsOwnershipExperience {
            kind: 'OutputField';
            name: 'yearsOwnershipExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface academicExperienceIds {
            kind: 'OutputField';
            name: 'academicExperienceIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface academicExperiences {
            kind: 'OutputField';
            name: 'academicExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AcademicExperience;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface genderSelfDescribed {
            kind: 'OutputField';
            name: 'genderSelfDescribed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface businessExperienceIds {
            kind: 'OutputField';
            name: 'businessExperienceIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface businessExperiences {
            kind: 'OutputField';
            name: 'businessExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BusinessExperience;
        }
        interface cityOfOrigin {
            kind: 'OutputField';
            name: 'cityOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfOrigin {
            kind: 'OutputField';
            name: 'regionOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfOriginTextId {
            kind: 'OutputField';
            name: 'countryOfOriginTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isOnVacation {
            kind: 'OutputField';
            name: 'isOnVacation';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface avatarAsset {
            kind: 'OutputField';
            name: 'avatarAsset';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface profileRoleHistory {
            kind: 'OutputField';
            name: 'profileRoleHistory';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserProfileRoleHistoryItem;
        }
        interface ssoIdp {
            kind: 'OutputField';
            name: 'ssoIdp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Records whether a user was originally created in MM2.
         */
        interface originatedInMm2 {
            kind: 'OutputField';
            name: 'originatedInMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This is the MM2 password hash.
         */
        interface mm2PasswordHash {
            kind: 'OutputField';
            name: 'mm2PasswordHash';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2ProfileId {
            kind: 'OutputField';
            name: 'mm2ProfileId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2PhotoOriginal {
            kind: 'OutputField';
            name: 'mm2PhotoOriginal';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * For MM2 users, this means a profile is completed.
         */
        interface mm2BasicAccountCompleted {
            kind: 'OutputField';
            name: 'mm2BasicAccountCompleted';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Records whether a user has logged into MM3.
         */
        interface hasSignedInToMm3 {
            kind: 'OutputField';
            name: 'hasSignedInToMm3';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Records whether a user has logged into MM2.
         */
        interface hasSignedInToMm2 {
            kind: 'OutputField';
            name: 'hasSignedInToMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface countryOfResidence {
            kind: 'OutputField';
            name: 'countryOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface gender {
            kind: 'OutputField';
            name: 'gender';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Gender;
        }
        interface latestUserDevice {
            kind: 'OutputField';
            name: 'latestUserDevice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface spokenLanguages {
            kind: 'OutputField';
            name: 'spokenLanguages';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Language;
        }
        interface preferredLanguage {
            kind: 'OutputField';
            name: 'preferredLanguage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Language;
        }
        interface fallbackUiLanguage {
            kind: 'OutputField';
            name: 'fallbackUiLanguage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Language;
        }
        interface preferredUiLanguage {
            kind: 'OutputField';
            name: 'preferredUiLanguage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Language;
        }
        interface unreadInAppMessages {
            kind: 'OutputField';
            name: 'unreadInAppMessages';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Notification;
        }
        interface channels {
            kind: 'OutputField';
            name: 'channels';
            arguments: {
                /**
                 * Set options on channels, e.g. to include archived channels.
                 */
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                /**
                 * Set to True to return only channels which have been accepted. Default is False, which also returns channels with multiple messages that have not been accepted. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
                 */
                mustBeAccepted: {
                    kind: 'InputField';
                    name: 'mustBeAccepted';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                /**
                 * Set to True to return only channels with messages. Default is False, which also returns channels without messages. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
                 */
                mustHaveMessages: {
                    kind: 'InputField';
                    name: 'mustHaveMessages';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Channel;
        }
        interface channelInvitations {
            kind: 'OutputField';
            name: 'channelInvitations';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface channelParticipants {
            kind: 'OutputField';
            name: 'channelParticipants';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface countryOfOrigin {
            kind: 'OutputField';
            name: 'countryOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface educationLevel {
            kind: 'OutputField';
            name: 'educationLevel';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$EducationLevel;
        }
        interface endorsements {
            kind: 'OutputField';
            name: 'endorsements';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$EndorsementWithTypes;
        }
        interface groupMembers {
            kind: 'OutputField';
            name: 'groupMembers';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        interface groups {
            kind: 'OutputField';
            name: 'groups';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Group;
        }
        interface hasTrainings {
            kind: 'OutputField';
            name: 'hasTrainings';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface profileCompletionPercentage {
            kind: 'OutputField';
            name: 'profileCompletionPercentage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface profileRole {
            kind: 'OutputField';
            name: 'profileRole';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface pronouns {
            kind: 'OutputField';
            name: 'pronouns';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Pronoun;
        }
        interface pronounsDisplay {
            kind: 'OutputField';
            name: 'pronounsDisplay';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface uploadedAssets {
            kind: 'OutputField';
            name: 'uploadedAssets';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
    }
    export interface LabeledStringValue {
        kind: 'Object';
        name: 'LabeledStringValue';
        fields: {
            __typename: LabeledStringValue.__typename;
            label: LabeledStringValue.label;
            value: LabeledStringValue.value;
            tags: LabeledStringValue.tags;
        };
    }
    export namespace LabeledStringValue {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'LabeledStringValue';
            };
        }
        interface label {
            kind: 'OutputField';
            name: 'label';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface tags {
            kind: 'OutputField';
            name: 'tags';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserPreferences {
        kind: 'Object';
        name: 'UserPreferences';
        fields: {
            __typename: UserPreferences.__typename;
            id: UserPreferences.id;
            adminNotes: UserPreferences.adminNotes;
            events: UserPreferences.events;
            metadata: UserPreferences.metadata;
            createdAt: UserPreferences.createdAt;
            createdBy: UserPreferences.createdBy;
            updatedAt: UserPreferences.updatedAt;
            updatedBy: UserPreferences.updatedBy;
            deletedAt: UserPreferences.deletedAt;
            deletedBy: UserPreferences.deletedBy;
            shareEmail: UserPreferences.shareEmail;
            sharePhoneNumber: UserPreferences.sharePhoneNumber;
            showWelcomeMessage: UserPreferences.showWelcomeMessage;
            notificationOptions: UserPreferences.notificationOptions;
        };
    }
    export namespace UserPreferences {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserPreferences';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface shareEmail {
            kind: 'OutputField';
            name: 'shareEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sharePhoneNumber {
            kind: 'OutputField';
            name: 'sharePhoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showWelcomeMessage {
            kind: 'OutputField';
            name: 'showWelcomeMessage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface notificationOptions {
            kind: 'OutputField';
            name: 'notificationOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$NotificationOptions;
        }
    }
    export interface NotificationOptions {
        kind: 'Object';
        name: 'NotificationOptions';
        fields: {
            __typename: NotificationOptions.__typename;
            notificationType: NotificationOptions.notificationType;
            enableEmail: NotificationOptions.enableEmail;
            enableInAppMessage: NotificationOptions.enableInAppMessage;
            enablePushNotification: NotificationOptions.enablePushNotification;
            enableSms: NotificationOptions.enableSms;
            frequency: NotificationOptions.frequency;
        };
    }
    export namespace NotificationOptions {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'NotificationOptions';
            };
        }
        interface notificationType {
            kind: 'OutputField';
            name: 'notificationType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$NotificationType;
        }
        interface enableEmail {
            kind: 'OutputField';
            name: 'enableEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface enableInAppMessage {
            kind: 'OutputField';
            name: 'enableInAppMessage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface enablePushNotification {
            kind: 'OutputField';
            name: 'enablePushNotification';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface enableSms {
            kind: 'OutputField';
            name: 'enableSms';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface frequency {
            kind: 'OutputField';
            name: 'frequency';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserDeviceWithoutAuth {
        kind: 'Object';
        name: 'UserDeviceWithoutAuth';
        fields: {
            __typename: UserDeviceWithoutAuth.__typename;
            id: UserDeviceWithoutAuth.id;
            adminNotes: UserDeviceWithoutAuth.adminNotes;
            events: UserDeviceWithoutAuth.events;
            metadata: UserDeviceWithoutAuth.metadata;
            createdAt: UserDeviceWithoutAuth.createdAt;
            createdBy: UserDeviceWithoutAuth.createdBy;
            updatedAt: UserDeviceWithoutAuth.updatedAt;
            updatedBy: UserDeviceWithoutAuth.updatedBy;
            deletedAt: UserDeviceWithoutAuth.deletedAt;
            deletedBy: UserDeviceWithoutAuth.deletedBy;
            userId: UserDeviceWithoutAuth.userId;
            deviceUuid: UserDeviceWithoutAuth.deviceUuid;
            deviceType: UserDeviceWithoutAuth.deviceType;
            trusted: UserDeviceWithoutAuth.trusted;
            phoneNumber: UserDeviceWithoutAuth.phoneNumber;
            phoneNumberUpdatedAt: UserDeviceWithoutAuth.phoneNumberUpdatedAt;
            isPhoneNumberVerified: UserDeviceWithoutAuth.isPhoneNumberVerified;
            brand: UserDeviceWithoutAuth.brand;
            model: UserDeviceWithoutAuth.model;
            isTablet: UserDeviceWithoutAuth.isTablet;
            screenWidth: UserDeviceWithoutAuth.screenWidth;
            screenHeight: UserDeviceWithoutAuth.screenHeight;
            os: UserDeviceWithoutAuth.os;
            osVersion: UserDeviceWithoutAuth.osVersion;
            timezone: UserDeviceWithoutAuth.timezone;
            ipAddress: UserDeviceWithoutAuth.ipAddress;
            consumer: UserDeviceWithoutAuth.consumer;
            consumerVersion: UserDeviceWithoutAuth.consumerVersion;
            acceptedLanguage: UserDeviceWithoutAuth.acceptedLanguage;
            locale: UserDeviceWithoutAuth.locale;
            countryCode: UserDeviceWithoutAuth.countryCode;
            appVersion: UserDeviceWithoutAuth.appVersion;
            signedInAt: UserDeviceWithoutAuth.signedInAt;
            signedOutAt: UserDeviceWithoutAuth.signedOutAt;
            sessionStartedAt: UserDeviceWithoutAuth.sessionStartedAt;
            sessionEndedAt: UserDeviceWithoutAuth.sessionEndedAt;
            identityProvider: UserDeviceWithoutAuth.identityProvider;
            oauthProfileUrl: UserDeviceWithoutAuth.oauthProfileUrl;
            trustedAt: UserDeviceWithoutAuth.trustedAt;
        };
    }
    export namespace UserDeviceWithoutAuth {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserDeviceWithoutAuth';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface deviceUuid {
            kind: 'OutputField';
            name: 'deviceUuid';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface deviceType {
            kind: 'OutputField';
            name: 'deviceType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface trusted {
            kind: 'OutputField';
            name: 'trusted';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface phoneNumber {
            kind: 'OutputField';
            name: 'phoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberUpdatedAt {
            kind: 'OutputField';
            name: 'phoneNumberUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isPhoneNumberVerified {
            kind: 'OutputField';
            name: 'isPhoneNumberVerified';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface brand {
            kind: 'OutputField';
            name: 'brand';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface model {
            kind: 'OutputField';
            name: 'model';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isTablet {
            kind: 'OutputField';
            name: 'isTablet';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface screenWidth {
            kind: 'OutputField';
            name: 'screenWidth';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface screenHeight {
            kind: 'OutputField';
            name: 'screenHeight';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface os {
            kind: 'OutputField';
            name: 'os';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface osVersion {
            kind: 'OutputField';
            name: 'osVersion';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'OutputField';
            name: 'timezone';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface ipAddress {
            kind: 'OutputField';
            name: 'ipAddress';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface consumer {
            kind: 'OutputField';
            name: 'consumer';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface consumerVersion {
            kind: 'OutputField';
            name: 'consumerVersion';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface acceptedLanguage {
            kind: 'OutputField';
            name: 'acceptedLanguage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface locale {
            kind: 'OutputField';
            name: 'locale';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryCode {
            kind: 'OutputField';
            name: 'countryCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface appVersion {
            kind: 'OutputField';
            name: 'appVersion';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface signedInAt {
            kind: 'OutputField';
            name: 'signedInAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedOutAt {
            kind: 'OutputField';
            name: 'signedOutAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface sessionStartedAt {
            kind: 'OutputField';
            name: 'sessionStartedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface sessionEndedAt {
            kind: 'OutputField';
            name: 'sessionEndedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface identityProvider {
            kind: 'OutputField';
            name: 'identityProvider';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$IdentityProvider;
        }
        interface oauthProfileUrl {
            kind: 'OutputField';
            name: 'oauthProfileUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface trustedAt {
            kind: 'OutputField';
            name: 'trustedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserBlock {
        kind: 'Object';
        name: 'UserBlock';
        fields: {
            __typename: UserBlock.__typename;
            userId: UserBlock.userId;
            reasonTextId: UserBlock.reasonTextId;
            notes: UserBlock.notes;
            adminNotes: UserBlock.adminNotes;
            createdAt: UserBlock.createdAt;
            syncedWithMm2At: UserBlock.syncedWithMm2At;
            mm2Id: UserBlock.mm2Id;
        };
    }
    export namespace UserBlock {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserBlock';
            };
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface reasonTextId {
            kind: 'OutputField';
            name: 'reasonTextId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface notes {
            kind: 'OutputField';
            name: 'notes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Company {
        kind: 'Object';
        name: 'Company';
        fields: {
            __typename: Company.__typename;
            id: Company.id;
            adminNotes: Company.adminNotes;
            events: Company.events;
            metadata: Company.metadata;
            createdAt: Company.createdAt;
            createdBy: Company.createdBy;
            updatedAt: Company.updatedAt;
            updatedBy: Company.updatedBy;
            deletedAt: Company.deletedAt;
            deletedBy: Company.deletedBy;
            userIds: Company.userIds;
            name: Company.name;
            description: Company.description;
            location: Company.location;
            companyTypeTextId: Company.companyTypeTextId;
            companyStageTextId: Company.companyStageTextId;
            websites: Company.websites;
            industries: Company.industries;
            isOperational: Company.isOperational;
            isFundraising: Company.isFundraising;
            annualRevenue: Company.annualRevenue;
            employeeCount: Company.employeeCount;
            foundedAt: Company.foundedAt;
            mm2UserId: Company.mm2UserId;
            mm2CompanyRole: Company.mm2CompanyRole;
            syncedWithMm2At: Company.syncedWithMm2At;
            companyStage: Company.companyStage;
            companyType: Company.companyType;
        };
    }
    export namespace Company {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Company';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIds {
            kind: 'OutputField';
            name: 'userIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface location {
            kind: 'OutputField';
            name: 'location';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface companyTypeTextId {
            kind: 'OutputField';
            name: 'companyTypeTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface companyStageTextId {
            kind: 'OutputField';
            name: 'companyStageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'OutputField';
            name: 'websites';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValue;
        }
        interface industries {
            kind: 'OutputField';
            name: 'industries';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface isOperational {
            kind: 'OutputField';
            name: 'isOperational';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isFundraising {
            kind: 'OutputField';
            name: 'isFundraising';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface annualRevenue {
            kind: 'OutputField';
            name: 'annualRevenue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface employeeCount {
            kind: 'OutputField';
            name: 'employeeCount';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface foundedAt {
            kind: 'OutputField';
            name: 'foundedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * If a Company was created from the imported attributes of an MM2 Profile, mm2UserId references the MM2 user ID. This attribute is only used by the MM2 synchronizer.
         */
        interface mm2UserId {
            kind: 'OutputField';
            name: 'mm2UserId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * If a Company was created from the imported from MM2, mm2CompanyRole is either "mentor" or "mentee". This attribute is only used by the MM2 synchronizer.
         */
        interface mm2CompanyRole {
            kind: 'OutputField';
            name: 'mm2CompanyRole';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface companyStage {
            kind: 'OutputField';
            name: 'companyStage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$CompanyStage;
        }
        interface companyType {
            kind: 'OutputField';
            name: 'companyType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$CompanyType;
        }
    }
    export interface CompanyStage {
        kind: 'Object';
        name: 'CompanyStage';
        fields: {
            __typename: CompanyStage.__typename;
            id: CompanyStage.id;
            adminNotes: CompanyStage.adminNotes;
            events: CompanyStage.events;
            metadata: CompanyStage.metadata;
            createdAt: CompanyStage.createdAt;
            createdBy: CompanyStage.createdBy;
            updatedAt: CompanyStage.updatedAt;
            updatedBy: CompanyStage.updatedBy;
            deletedAt: CompanyStage.deletedAt;
            deletedBy: CompanyStage.deletedBy;
            textId: CompanyStage.textId;
            parentTextId: CompanyStage.parentTextId;
            isParent: CompanyStage.isParent;
            optionType: CompanyStage.optionType;
            value: CompanyStage.value;
            translatedValue: CompanyStage.translatedValue;
            supportedLanguages: CompanyStage.supportedLanguages;
            materialIconName: CompanyStage.materialIconName;
            description: CompanyStage.description;
            translatedDescription: CompanyStage.translatedDescription;
            language: CompanyStage.language;
            mm2Id: CompanyStage.mm2Id;
            mm2Value: CompanyStage.mm2Value;
            syncedWithMm2At: CompanyStage.syncedWithMm2At;
            mm2TextId: CompanyStage.mm2TextId;
            mm3TextId: CompanyStage.mm3TextId;
            childOptions: CompanyStage.childOptions;
            parentOption: CompanyStage.parentOption;
        };
    }
    export namespace CompanyStage {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'CompanyStage';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface CompanyType {
        kind: 'Object';
        name: 'CompanyType';
        fields: {
            __typename: CompanyType.__typename;
            id: CompanyType.id;
            adminNotes: CompanyType.adminNotes;
            events: CompanyType.events;
            metadata: CompanyType.metadata;
            createdAt: CompanyType.createdAt;
            createdBy: CompanyType.createdBy;
            updatedAt: CompanyType.updatedAt;
            updatedBy: CompanyType.updatedBy;
            deletedAt: CompanyType.deletedAt;
            deletedBy: CompanyType.deletedBy;
            textId: CompanyType.textId;
            parentTextId: CompanyType.parentTextId;
            isParent: CompanyType.isParent;
            optionType: CompanyType.optionType;
            value: CompanyType.value;
            translatedValue: CompanyType.translatedValue;
            supportedLanguages: CompanyType.supportedLanguages;
            materialIconName: CompanyType.materialIconName;
            description: CompanyType.description;
            translatedDescription: CompanyType.translatedDescription;
            language: CompanyType.language;
            mm2Id: CompanyType.mm2Id;
            mm2Value: CompanyType.mm2Value;
            syncedWithMm2At: CompanyType.syncedWithMm2At;
            mm2TextId: CompanyType.mm2TextId;
            mm3TextId: CompanyType.mm3TextId;
            childOptions: CompanyType.childOptions;
            parentOption: CompanyType.parentOption;
        };
    }
    export namespace CompanyType {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'CompanyType';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface AcademicExperience {
        kind: 'Object';
        name: 'AcademicExperience';
        fields: {
            __typename: AcademicExperience.__typename;
            id: AcademicExperience.id;
            adminNotes: AcademicExperience.adminNotes;
            events: AcademicExperience.events;
            metadata: AcademicExperience.metadata;
            createdAt: AcademicExperience.createdAt;
            createdBy: AcademicExperience.createdBy;
            updatedAt: AcademicExperience.updatedAt;
            updatedBy: AcademicExperience.updatedBy;
            deletedAt: AcademicExperience.deletedAt;
            deletedBy: AcademicExperience.deletedBy;
            institutionName: AcademicExperience.institutionName;
            degreeType: AcademicExperience.degreeType;
            fieldOfStudy: AcademicExperience.fieldOfStudy;
            startDate: AcademicExperience.startDate;
            endDate: AcademicExperience.endDate;
            userId: AcademicExperience.userId;
        };
    }
    export namespace AcademicExperience {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'AcademicExperience';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface institutionName {
            kind: 'OutputField';
            name: 'institutionName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * E.g. "Bachelor of Science"
         */
        interface degreeType {
            kind: 'OutputField';
            name: 'degreeType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * E.g. "Computer Science"
         */
        interface fieldOfStudy {
            kind: 'OutputField';
            name: 'fieldOfStudy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * If no start date is provided, startDate is null.
         */
        interface startDate {
            kind: 'OutputField';
            name: 'startDate';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * If the experience is ongoing, endDate is null.
         */
        interface endDate {
            kind: 'OutputField';
            name: 'endDate';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface BusinessExperience {
        kind: 'Object';
        name: 'BusinessExperience';
        fields: {
            __typename: BusinessExperience.__typename;
            id: BusinessExperience.id;
            adminNotes: BusinessExperience.adminNotes;
            events: BusinessExperience.events;
            metadata: BusinessExperience.metadata;
            createdAt: BusinessExperience.createdAt;
            createdBy: BusinessExperience.createdBy;
            updatedAt: BusinessExperience.updatedAt;
            updatedBy: BusinessExperience.updatedBy;
            deletedAt: BusinessExperience.deletedAt;
            deletedBy: BusinessExperience.deletedBy;
            businessName: BusinessExperience.businessName;
            jobTitle: BusinessExperience.jobTitle;
            city: BusinessExperience.city;
            state: BusinessExperience.state;
            country: BusinessExperience.country;
            startDate: BusinessExperience.startDate;
            endDate: BusinessExperience.endDate;
            userId: BusinessExperience.userId;
        };
    }
    export namespace BusinessExperience {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'BusinessExperience';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface businessName {
            kind: 'OutputField';
            name: 'businessName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface jobTitle {
            kind: 'OutputField';
            name: 'jobTitle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface city {
            kind: 'OutputField';
            name: 'city';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface state {
            kind: 'OutputField';
            name: 'state';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface country {
            kind: 'OutputField';
            name: 'country';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * If no start date is provided, startDate is null.
         */
        interface startDate {
            kind: 'OutputField';
            name: 'startDate';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * If the experience is ongoing, endDate is null.
         */
        interface endDate {
            kind: 'OutputField';
            name: 'endDate';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface UploadedAsset {
        kind: 'Object';
        name: 'UploadedAsset';
        fields: {
            __typename: UploadedAsset.__typename;
            id: UploadedAsset.id;
            adminNotes: UploadedAsset.adminNotes;
            events: UploadedAsset.events;
            metadata: UploadedAsset.metadata;
            createdAt: UploadedAsset.createdAt;
            createdBy: UploadedAsset.createdBy;
            updatedAt: UploadedAsset.updatedAt;
            updatedBy: UploadedAsset.updatedBy;
            deletedAt: UploadedAsset.deletedAt;
            deletedBy: UploadedAsset.deletedBy;
            ownerId: UploadedAsset.ownerId;
            ownerModelType: UploadedAsset.ownerModelType;
            assetType: UploadedAsset.assetType;
            hostingService: UploadedAsset.hostingService;
            url: UploadedAsset.url;
            path: UploadedAsset.path;
            s3Bucket: UploadedAsset.s3Bucket;
            s3Key: UploadedAsset.s3Key;
            mimeType: UploadedAsset.mimeType;
            uploadUrl: UploadedAsset.uploadUrl;
            uploadUrlExpiresAt: UploadedAsset.uploadUrlExpiresAt;
            uploadedAt: UploadedAsset.uploadedAt;
            expiresAt: UploadedAsset.expiresAt;
        };
    }
    export namespace UploadedAsset {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UploadedAsset';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface ownerId {
            kind: 'OutputField';
            name: 'ownerId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface ownerModelType {
            kind: 'OutputField';
            name: 'ownerModelType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ModelType;
        }
        interface assetType {
            kind: 'OutputField';
            name: 'assetType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UploadedAssetType;
        }
        interface hostingService {
            kind: 'OutputField';
            name: 'hostingService';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$AssetHostingService;
        }
        interface url {
            kind: 'OutputField';
            name: 'url';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface path {
            kind: 'OutputField';
            name: 'path';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface s3Bucket {
            kind: 'OutputField';
            name: 's3Bucket';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface s3Key {
            kind: 'OutputField';
            name: 's3Key';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mimeType {
            kind: 'OutputField';
            name: 'mimeType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface uploadUrl {
            kind: 'OutputField';
            name: 'uploadUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface uploadUrlExpiresAt {
            kind: 'OutputField';
            name: 'uploadUrlExpiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface uploadedAt {
            kind: 'OutputField';
            name: 'uploadedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserProfileRoleHistoryItem {
        kind: 'Object';
        name: 'UserProfileRoleHistoryItem';
        fields: {
            __typename: UserProfileRoleHistoryItem.__typename;
            newRole: UserProfileRoleHistoryItem.newRole;
            createdAt: UserProfileRoleHistoryItem.createdAt;
        };
    }
    export namespace UserProfileRoleHistoryItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserProfileRoleHistoryItem';
            };
        }
        interface newRole {
            kind: 'OutputField';
            name: 'newRole';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface Country {
        kind: 'Object';
        name: 'Country';
        fields: {
            __typename: Country.__typename;
            id: Country.id;
            adminNotes: Country.adminNotes;
            events: Country.events;
            metadata: Country.metadata;
            createdAt: Country.createdAt;
            createdBy: Country.createdBy;
            updatedAt: Country.updatedAt;
            updatedBy: Country.updatedBy;
            deletedAt: Country.deletedAt;
            deletedBy: Country.deletedBy;
            textId: Country.textId;
            parentTextId: Country.parentTextId;
            isParent: Country.isParent;
            optionType: Country.optionType;
            value: Country.value;
            translatedValue: Country.translatedValue;
            supportedLanguages: Country.supportedLanguages;
            materialIconName: Country.materialIconName;
            description: Country.description;
            translatedDescription: Country.translatedDescription;
            language: Country.language;
            mm2Id: Country.mm2Id;
            mm2Value: Country.mm2Value;
            syncedWithMm2At: Country.syncedWithMm2At;
            mm2TextId: Country.mm2TextId;
            mm3TextId: Country.mm3TextId;
            childOptions: Country.childOptions;
            parentOption: Country.parentOption;
            alpha2Key: Country.alpha2Key;
            alpha3Key: Country.alpha3Key;
            phoneCode: Country.phoneCode;
        };
    }
    export namespace Country {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Country';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface alpha2Key {
            kind: 'OutputField';
            name: 'alpha2Key';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface alpha3Key {
            kind: 'OutputField';
            name: 'alpha3Key';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneCode {
            kind: 'OutputField';
            name: 'phoneCode';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Gender {
        kind: 'Object';
        name: 'Gender';
        fields: {
            __typename: Gender.__typename;
            id: Gender.id;
            adminNotes: Gender.adminNotes;
            events: Gender.events;
            metadata: Gender.metadata;
            createdAt: Gender.createdAt;
            createdBy: Gender.createdBy;
            updatedAt: Gender.updatedAt;
            updatedBy: Gender.updatedBy;
            deletedAt: Gender.deletedAt;
            deletedBy: Gender.deletedBy;
            textId: Gender.textId;
            parentTextId: Gender.parentTextId;
            isParent: Gender.isParent;
            optionType: Gender.optionType;
            value: Gender.value;
            translatedValue: Gender.translatedValue;
            supportedLanguages: Gender.supportedLanguages;
            materialIconName: Gender.materialIconName;
            description: Gender.description;
            translatedDescription: Gender.translatedDescription;
            language: Gender.language;
            mm2Id: Gender.mm2Id;
            mm2Value: Gender.mm2Value;
            syncedWithMm2At: Gender.syncedWithMm2At;
            mm2TextId: Gender.mm2TextId;
            mm3TextId: Gender.mm3TextId;
            childOptions: Gender.childOptions;
            parentOption: Gender.parentOption;
        };
    }
    export namespace Gender {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Gender';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface Language {
        kind: 'Object';
        name: 'Language';
        fields: {
            __typename: Language.__typename;
            id: Language.id;
            adminNotes: Language.adminNotes;
            events: Language.events;
            metadata: Language.metadata;
            createdAt: Language.createdAt;
            createdBy: Language.createdBy;
            updatedAt: Language.updatedAt;
            updatedBy: Language.updatedBy;
            deletedAt: Language.deletedAt;
            deletedBy: Language.deletedBy;
            textId: Language.textId;
            parentTextId: Language.parentTextId;
            isParent: Language.isParent;
            optionType: Language.optionType;
            value: Language.value;
            translatedValue: Language.translatedValue;
            supportedLanguages: Language.supportedLanguages;
            materialIconName: Language.materialIconName;
            description: Language.description;
            translatedDescription: Language.translatedDescription;
            language: Language.language;
            mm2Id: Language.mm2Id;
            mm2Value: Language.mm2Value;
            syncedWithMm2At: Language.syncedWithMm2At;
            mm2TextId: Language.mm2TextId;
            mm3TextId: Language.mm3TextId;
            childOptions: Language.childOptions;
            parentOption: Language.parentOption;
            shortLangCode: Language.shortLangCode;
            longLangCode: Language.longLangCode;
            isUiLanguage: Language.isUiLanguage;
            isRtl: Language.isRtl;
        };
    }
    export namespace Language {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Language';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        /**
         * ISO 639-1, 2 letter language code. e.g. "en" for English.
         */
        interface shortLangCode {
            kind: 'OutputField';
            name: 'shortLangCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * ISO 639-2, 3 letter language code. e.g. "eng" for English.
         */
        interface longLangCode {
            kind: 'OutputField';
            name: 'longLangCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isUiLanguage {
            kind: 'OutputField';
            name: 'isUiLanguage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Right to left text flow.
         */
        interface isRtl {
            kind: 'OutputField';
            name: 'isRtl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface Notification {
        kind: 'Object';
        name: 'Notification';
        fields: {
            __typename: Notification.__typename;
            id: Notification.id;
            adminNotes: Notification.adminNotes;
            events: Notification.events;
            metadata: Notification.metadata;
            createdAt: Notification.createdAt;
            createdBy: Notification.createdBy;
            updatedAt: Notification.updatedAt;
            updatedBy: Notification.updatedBy;
            deletedAt: Notification.deletedAt;
            deletedBy: Notification.deletedBy;
            notificationType: Notification.notificationType;
            templateId: Notification.templateId;
            recipientId: Notification.recipientId;
            multiStepActionId: Notification.multiStepActionId;
            initiatorId: Notification.initiatorId;
            replyingToId: Notification.replyingToId;
            title: Notification.title;
            messageText: Notification.messageText;
            shortMessageText: Notification.shortMessageText;
            htmlMessage: Notification.htmlMessage;
            language: Notification.language;
            isTranslated: Notification.isTranslated;
            appLink: Notification.appLink;
            action0: Notification.action0;
            action1: Notification.action1;
            action2: Notification.action2;
            actionTaken: Notification.actionTaken;
            sendEmail: Notification.sendEmail;
            sendInAppMessage: Notification.sendInAppMessage;
            sendPushNotification: Notification.sendPushNotification;
            sendSms: Notification.sendSms;
            emailSentAt: Notification.emailSentAt;
            inAppMessageSentAt: Notification.inAppMessageSentAt;
            inAppMessageReceivedAt: Notification.inAppMessageReceivedAt;
            pushNotificationSentAt: Notification.pushNotificationSentAt;
            smsSentAt: Notification.smsSentAt;
            emailSendReport: Notification.emailSendReport;
            pushNotificationSendReport: Notification.pushNotificationSendReport;
            smsSendReport: Notification.smsSendReport;
            sentMessagesCount: Notification.sentMessagesCount;
            context: Notification.context;
        };
    }
    export namespace Notification {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Notification';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface notificationType {
            kind: 'OutputField';
            name: 'notificationType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$NotificationType;
        }
        interface templateId {
            kind: 'OutputField';
            name: 'templateId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientId {
            kind: 'OutputField';
            name: 'recipientId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface multiStepActionId {
            kind: 'OutputField';
            name: 'multiStepActionId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface initiatorId {
            kind: 'OutputField';
            name: 'initiatorId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface replyingToId {
            kind: 'OutputField';
            name: 'replyingToId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface title {
            kind: 'OutputField';
            name: 'title';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageText {
            kind: 'OutputField';
            name: 'shortMessageText';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessage {
            kind: 'OutputField';
            name: 'htmlMessage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface isTranslated {
            kind: 'OutputField';
            name: 'isTranslated';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface appLink {
            kind: 'OutputField';
            name: 'appLink';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface action0 {
            kind: 'OutputField';
            name: 'action0';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action1 {
            kind: 'OutputField';
            name: 'action1';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action2 {
            kind: 'OutputField';
            name: 'action2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface actionTaken {
            kind: 'OutputField';
            name: 'actionTaken';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface sendEmail {
            kind: 'OutputField';
            name: 'sendEmail';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendInAppMessage {
            kind: 'OutputField';
            name: 'sendInAppMessage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendPushNotification {
            kind: 'OutputField';
            name: 'sendPushNotification';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendSms {
            kind: 'OutputField';
            name: 'sendSms';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface emailSentAt {
            kind: 'OutputField';
            name: 'emailSentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inAppMessageSentAt {
            kind: 'OutputField';
            name: 'inAppMessageSentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inAppMessageReceivedAt {
            kind: 'OutputField';
            name: 'inAppMessageReceivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pushNotificationSentAt {
            kind: 'OutputField';
            name: 'pushNotificationSentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface smsSentAt {
            kind: 'OutputField';
            name: 'smsSentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface emailSendReport {
            kind: 'OutputField';
            name: 'emailSendReport';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface pushNotificationSendReport {
            kind: 'OutputField';
            name: 'pushNotificationSendReport';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface smsSendReport {
            kind: 'OutputField';
            name: 'smsSendReport';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface sentMessagesCount {
            kind: 'OutputField';
            name: 'sentMessagesCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface context {
            kind: 'OutputField';
            name: 'context';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationContext;
        }
    }
    export interface NotificationContext {
        kind: 'Object';
        name: 'NotificationContext';
        fields: {
            __typename: NotificationContext.__typename;
            title: NotificationContext.title;
            senderId: NotificationContext.senderId;
            senderFirstName: NotificationContext.senderFirstName;
            senderLastName: NotificationContext.senderLastName;
            senderFullName: NotificationContext.senderFullName;
            senderEmail: NotificationContext.senderEmail;
            senderPhoneNumber: NotificationContext.senderPhoneNumber;
            recipientId: NotificationContext.recipientId;
            recipientFirstName: NotificationContext.recipientFirstName;
            recipientLastName: NotificationContext.recipientLastName;
            recipientFullName: NotificationContext.recipientFullName;
            recipientEmail: NotificationContext.recipientEmail;
            recipientPhoneNumber: NotificationContext.recipientPhoneNumber;
            displayedUserId: NotificationContext.displayedUserId;
            displayedUserFirstName: NotificationContext.displayedUserFirstName;
            displayedUserLastName: NotificationContext.displayedUserLastName;
            displayedUserFullName: NotificationContext.displayedUserFullName;
            displayedUserEmail: NotificationContext.displayedUserEmail;
            displayedUserPhoneNumber: NotificationContext.displayedUserPhoneNumber;
            displayedUserCountry: NotificationContext.displayedUserCountry;
            displayedUserBusinessOrJobTitle: NotificationContext.displayedUserBusinessOrJobTitle;
            appLink: NotificationContext.appLink;
            locale: NotificationContext.locale;
            textDirection: NotificationContext.textDirection;
            confirmToken: NotificationContext.confirmToken;
        };
    }
    export namespace NotificationContext {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'NotificationContext';
            };
        }
        interface title {
            kind: 'OutputField';
            name: 'title';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderId {
            kind: 'OutputField';
            name: 'senderId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderFirstName {
            kind: 'OutputField';
            name: 'senderFirstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderLastName {
            kind: 'OutputField';
            name: 'senderLastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderFullName {
            kind: 'OutputField';
            name: 'senderFullName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderEmail {
            kind: 'OutputField';
            name: 'senderEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderPhoneNumber {
            kind: 'OutputField';
            name: 'senderPhoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientId {
            kind: 'OutputField';
            name: 'recipientId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientFirstName {
            kind: 'OutputField';
            name: 'recipientFirstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientLastName {
            kind: 'OutputField';
            name: 'recipientLastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientFullName {
            kind: 'OutputField';
            name: 'recipientFullName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientEmail {
            kind: 'OutputField';
            name: 'recipientEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientPhoneNumber {
            kind: 'OutputField';
            name: 'recipientPhoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The user id of the user who appears in a notification
         */
        interface displayedUserId {
            kind: 'OutputField';
            name: 'displayedUserId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The first name of the user who appears in a notification
         */
        interface displayedUserFirstName {
            kind: 'OutputField';
            name: 'displayedUserFirstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayedUserLastName {
            kind: 'OutputField';
            name: 'displayedUserLastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayedUserFullName {
            kind: 'OutputField';
            name: 'displayedUserFullName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayedUserEmail {
            kind: 'OutputField';
            name: 'displayedUserEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayedUserPhoneNumber {
            kind: 'OutputField';
            name: 'displayedUserPhoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayedUserCountry {
            kind: 'OutputField';
            name: 'displayedUserCountry';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayedUserBusinessOrJobTitle {
            kind: 'OutputField';
            name: 'displayedUserBusinessOrJobTitle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface appLink {
            kind: 'OutputField';
            name: 'appLink';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface locale {
            kind: 'OutputField';
            name: 'locale';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface textDirection {
            kind: 'OutputField';
            name: 'textDirection';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface confirmToken {
            kind: 'OutputField';
            name: 'confirmToken';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Channel {
        kind: 'Object';
        name: 'Channel';
        fields: {
            __typename: Channel.__typename;
            id: Channel.id;
            adminNotes: Channel.adminNotes;
            events: Channel.events;
            metadata: Channel.metadata;
            createdAt: Channel.createdAt;
            createdBy: Channel.createdBy;
            updatedAt: Channel.updatedAt;
            updatedBy: Channel.updatedBy;
            deletedAt: Channel.deletedAt;
            deletedBy: Channel.deletedBy;
            name: Channel.name;
            topic: Channel.topic;
            description: Channel.description;
            tags: Channel.tags;
            channelType: Channel.channelType;
            statuses: Channel.statuses;
            userIds: Channel.userIds;
            otherUserId: Channel.otherUserId;
            pausedAt: Channel.pausedAt;
            pausedBy: Channel.pausedBy;
            suspendedAt: Channel.suspendedAt;
            suspendedBy: Channel.suspendedBy;
            lockedAt: Channel.lockedAt;
            lockedBy: Channel.lockedBy;
            archivedAt: Channel.archivedAt;
            archivedBy: Channel.archivedBy;
            assumedMentorId: Channel.assumedMentorId;
            mm2Id: Channel.mm2Id;
            syncedWithMm2At: Channel.syncedWithMm2At;
            creator: Channel.creator;
            status: Channel.status;
            invitations: Channel.invitations;
            isArchivedForMe: Channel.isArchivedForMe;
            latestMessage: Channel.latestMessage;
            messages: Channel.messages;
            myContacts: Channel.myContacts;
            participants: Channel.participants;
            pendingInvitations: Channel.pendingInvitations;
        };
    }
    export namespace Channel {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Channel';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface topic {
            kind: 'OutputField';
            name: 'topic';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface tags {
            kind: 'OutputField';
            name: 'tags';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface channelType {
            kind: 'OutputField';
            name: 'channelType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelType;
        }
        interface statuses {
            kind: 'OutputField';
            name: 'statuses';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BgChannelStatus;
        }
        interface userIds {
            kind: 'OutputField';
            name: 'userIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * For 1:1 channels, the ID of the other user. The first user is createdBy.
         */
        interface otherUserId {
            kind: 'OutputField';
            name: 'otherUserId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface pausedAt {
            kind: 'OutputField';
            name: 'pausedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pausedBy {
            kind: 'OutputField';
            name: 'pausedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface lockedAt {
            kind: 'OutputField';
            name: 'lockedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface lockedBy {
            kind: 'OutputField';
            name: 'lockedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface archivedBy {
            kind: 'OutputField';
            name: 'archivedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface assumedMentorId {
            kind: 'OutputField';
            name: 'assumedMentorId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface creator {
            kind: 'OutputField';
            name: 'creator';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$User;
        }
        interface status {
            kind: 'OutputField';
            name: 'status';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BgChannelStatus;
        }
        interface invitations {
            kind: 'OutputField';
            name: 'invitations';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface isArchivedForMe {
            kind: 'OutputField';
            name: 'isArchivedForMe';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface latestMessage {
            kind: 'OutputField';
            name: 'latestMessage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface messages {
            kind: 'OutputField';
            name: 'messages';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface myContacts {
            kind: 'OutputField';
            name: 'myContacts';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Contact;
        }
        interface participants {
            kind: 'OutputField';
            name: 'participants';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface pendingInvitations {
            kind: 'OutputField';
            name: 'pendingInvitations';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
    }
    export interface ChannelMetadata {
        kind: 'Object';
        name: 'ChannelMetadata';
        fields: {
            __typename: ChannelMetadata.__typename;
            updatedAt: ChannelMetadata.updatedAt;
            channelInvitationAccepted: ChannelMetadata.channelInvitationAccepted;
            messagesSentByCreatorCount: ChannelMetadata.messagesSentByCreatorCount;
            messagesSentByFirstParticipantCount: ChannelMetadata.messagesSentByFirstParticipantCount;
        };
    }
    export namespace ChannelMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelMetadata';
            };
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface channelInvitationAccepted {
            kind: 'OutputField';
            name: 'channelInvitationAccepted';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface messagesSentByCreatorCount {
            kind: 'OutputField';
            name: 'messagesSentByCreatorCount';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface messagesSentByFirstParticipantCount {
            kind: 'OutputField';
            name: 'messagesSentByFirstParticipantCount';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface BgChannelStatus {
        kind: 'Object';
        name: 'BgChannelStatus';
        fields: {
            __typename: BgChannelStatus.__typename;
            userId: BgChannelStatus.userId;
            archivedAt: BgChannelStatus.archivedAt;
        };
    }
    export namespace BgChannelStatus {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'BgChannelStatus';
            };
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ChannelInvitation {
        kind: 'Object';
        name: 'ChannelInvitation';
        fields: {
            __typename: ChannelInvitation.__typename;
            id: ChannelInvitation.id;
            adminNotes: ChannelInvitation.adminNotes;
            events: ChannelInvitation.events;
            metadata: ChannelInvitation.metadata;
            createdAt: ChannelInvitation.createdAt;
            createdBy: ChannelInvitation.createdBy;
            updatedAt: ChannelInvitation.updatedAt;
            updatedBy: ChannelInvitation.updatedBy;
            deletedAt: ChannelInvitation.deletedAt;
            deletedBy: ChannelInvitation.deletedBy;
            channelId: ChannelInvitation.channelId;
            recipientId: ChannelInvitation.recipientId;
            channelName: ChannelInvitation.channelName;
            channelTopic: ChannelInvitation.channelTopic;
            messageText: ChannelInvitation.messageText;
            autoAccept: ChannelInvitation.autoAccept;
            declineReasonTextId: ChannelInvitation.declineReasonTextId;
            dismissedFromInboxBySenderAt: ChannelInvitation.dismissedFromInboxBySenderAt;
            dismissedFromInboxByRecipientAt: ChannelInvitation.dismissedFromInboxByRecipientAt;
            readByRecipientAt: ChannelInvitation.readByRecipientAt;
            status: ChannelInvitation.status;
            suspendedAt: ChannelInvitation.suspendedAt;
            suspendedBy: ChannelInvitation.suspendedBy;
            userSearchId: ChannelInvitation.userSearchId;
            searchRank: ChannelInvitation.searchRank;
            mm2ConversationId: ChannelInvitation.mm2ConversationId;
            mm2Id: ChannelInvitation.mm2Id;
            syncedWithMm2At: ChannelInvitation.syncedWithMm2At;
            channel: ChannelInvitation.channel;
            declineReason: ChannelInvitation.declineReason;
            recipient: ChannelInvitation.recipient;
            sender: ChannelInvitation.sender;
        };
    }
    export namespace ChannelInvitation {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelInvitation';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientId {
            kind: 'OutputField';
            name: 'recipientId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelName {
            kind: 'OutputField';
            name: 'channelName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface channelTopic {
            kind: 'OutputField';
            name: 'channelTopic';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * An authorized sender (i.e. role: ["support"]) can skip the acceptance step.
         */
        interface autoAccept {
            kind: 'OutputField';
            name: 'autoAccept';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface declineReasonTextId {
            kind: 'OutputField';
            name: 'declineReasonTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface dismissedFromInboxBySenderAt {
            kind: 'OutputField';
            name: 'dismissedFromInboxBySenderAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface dismissedFromInboxByRecipientAt {
            kind: 'OutputField';
            name: 'dismissedFromInboxByRecipientAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface readByRecipientAt {
            kind: 'OutputField';
            name: 'readByRecipientAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface status {
            kind: 'OutputField';
            name: 'status';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelInvitationStatus;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userSearchId {
            kind: 'OutputField';
            name: 'userSearchId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchRank {
            kind: 'OutputField';
            name: 'searchRank';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2ConversationId {
            kind: 'OutputField';
            name: 'mm2ConversationId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer. Mm2 message ID.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface channel {
            kind: 'OutputField';
            name: 'channel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Channel;
        }
        interface declineReason {
            kind: 'OutputField';
            name: 'declineReason';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DeclineChannelInvitationReason;
        }
        interface recipient {
            kind: 'OutputField';
            name: 'recipient';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$User;
        }
        interface sender {
            kind: 'OutputField';
            name: 'sender';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$User;
        }
    }
    export interface DeclineChannelInvitationReason {
        kind: 'Object';
        name: 'DeclineChannelInvitationReason';
        fields: {
            __typename: DeclineChannelInvitationReason.__typename;
            id: DeclineChannelInvitationReason.id;
            adminNotes: DeclineChannelInvitationReason.adminNotes;
            events: DeclineChannelInvitationReason.events;
            metadata: DeclineChannelInvitationReason.metadata;
            createdAt: DeclineChannelInvitationReason.createdAt;
            createdBy: DeclineChannelInvitationReason.createdBy;
            updatedAt: DeclineChannelInvitationReason.updatedAt;
            updatedBy: DeclineChannelInvitationReason.updatedBy;
            deletedAt: DeclineChannelInvitationReason.deletedAt;
            deletedBy: DeclineChannelInvitationReason.deletedBy;
            textId: DeclineChannelInvitationReason.textId;
            parentTextId: DeclineChannelInvitationReason.parentTextId;
            isParent: DeclineChannelInvitationReason.isParent;
            optionType: DeclineChannelInvitationReason.optionType;
            value: DeclineChannelInvitationReason.value;
            translatedValue: DeclineChannelInvitationReason.translatedValue;
            supportedLanguages: DeclineChannelInvitationReason.supportedLanguages;
            materialIconName: DeclineChannelInvitationReason.materialIconName;
            description: DeclineChannelInvitationReason.description;
            translatedDescription: DeclineChannelInvitationReason.translatedDescription;
            language: DeclineChannelInvitationReason.language;
            mm2Id: DeclineChannelInvitationReason.mm2Id;
            mm2Value: DeclineChannelInvitationReason.mm2Value;
            syncedWithMm2At: DeclineChannelInvitationReason.syncedWithMm2At;
            mm2TextId: DeclineChannelInvitationReason.mm2TextId;
            mm3TextId: DeclineChannelInvitationReason.mm3TextId;
            childOptions: DeclineChannelInvitationReason.childOptions;
            parentOption: DeclineChannelInvitationReason.parentOption;
        };
    }
    export namespace DeclineChannelInvitationReason {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'DeclineChannelInvitationReason';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface ChannelMessage {
        kind: 'Object';
        name: 'ChannelMessage';
        fields: {
            __typename: ChannelMessage.__typename;
            id: ChannelMessage.id;
            adminNotes: ChannelMessage.adminNotes;
            events: ChannelMessage.events;
            metadata: ChannelMessage.metadata;
            createdAt: ChannelMessage.createdAt;
            createdBy: ChannelMessage.createdBy;
            updatedAt: ChannelMessage.updatedAt;
            updatedBy: ChannelMessage.updatedBy;
            deletedAt: ChannelMessage.deletedAt;
            deletedBy: ChannelMessage.deletedBy;
            channelId: ChannelMessage.channelId;
            replyToMessageId: ChannelMessage.replyToMessageId;
            channelMessageType: ChannelMessage.channelMessageType;
            messageText: ChannelMessage.messageText;
            statuses: ChannelMessage.statuses;
            editedAt: ChannelMessage.editedAt;
            suspendedAt: ChannelMessage.suspendedAt;
            suspendedBy: ChannelMessage.suspendedBy;
            mm2ConversationId: ChannelMessage.mm2ConversationId;
            mm2Id: ChannelMessage.mm2Id;
            syncedWithMm2At: ChannelMessage.syncedWithMm2At;
            channel: ChannelMessage.channel;
            sender: ChannelMessage.sender;
        };
    }
    export namespace ChannelMessage {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelMessage';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessageMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface replyToMessageId {
            kind: 'OutputField';
            name: 'replyToMessageId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelMessageType {
            kind: 'OutputField';
            name: 'channelMessageType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessageType;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface statuses {
            kind: 'OutputField';
            name: 'statuses';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelMessageStatus;
        }
        interface editedAt {
            kind: 'OutputField';
            name: 'editedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2ConversationId {
            kind: 'OutputField';
            name: 'mm2ConversationId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer. Mm2 message ID.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface channel {
            kind: 'OutputField';
            name: 'channel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Channel;
        }
        interface sender {
            kind: 'OutputField';
            name: 'sender';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$User;
        }
    }
    export interface ChannelMessageMetadata {
        kind: 'Object';
        name: 'ChannelMessageMetadata';
        fields: {
            __typename: ChannelMessageMetadata.__typename;
            updatedAt: ChannelMessageMetadata.updatedAt;
            senderUserHandle: ChannelMessageMetadata.senderUserHandle;
            senderFirstName: ChannelMessageMetadata.senderFirstName;
            senderLastName: ChannelMessageMetadata.senderLastName;
            senderAvatarUrl: ChannelMessageMetadata.senderAvatarUrl;
        };
    }
    export namespace ChannelMessageMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelMessageMetadata';
            };
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface senderUserHandle {
            kind: 'OutputField';
            name: 'senderUserHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderFirstName {
            kind: 'OutputField';
            name: 'senderFirstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderLastName {
            kind: 'OutputField';
            name: 'senderLastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderAvatarUrl {
            kind: 'OutputField';
            name: 'senderAvatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ChannelMessageStatus {
        kind: 'Object';
        name: 'ChannelMessageStatus';
        fields: {
            __typename: ChannelMessageStatus.__typename;
            userId: ChannelMessageStatus.userId;
            isInArchivedChannel: ChannelMessageStatus.isInArchivedChannel;
            receivedAt: ChannelMessageStatus.receivedAt;
            seenAt: ChannelMessageStatus.seenAt;
        };
    }
    export namespace ChannelMessageStatus {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelMessageStatus';
            };
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface isInArchivedChannel {
            kind: 'OutputField';
            name: 'isInArchivedChannel';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface receivedAt {
            kind: 'OutputField';
            name: 'receivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface seenAt {
            kind: 'OutputField';
            name: 'seenAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface Contact {
        kind: 'Object';
        name: 'Contact';
        fields: {
            __typename: Contact.__typename;
            id: Contact.id;
            adminNotes: Contact.adminNotes;
            events: Contact.events;
            metadata: Contact.metadata;
            createdAt: Contact.createdAt;
            createdBy: Contact.createdBy;
            updatedAt: Contact.updatedAt;
            updatedBy: Contact.updatedBy;
            deletedAt: Contact.deletedAt;
            deletedBy: Contact.deletedBy;
            userId: Contact.userId;
            channelId: Contact.channelId;
            nickname: Contact.nickname;
            typeTextIds: Contact.typeTextIds;
            favorite: Contact.favorite;
            notes: Contact.notes;
            archivedAt: Contact.archivedAt;
            user: Contact.user;
            contactTypes: Contact.contactTypes;
        };
    }
    export namespace Contact {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Contact';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ContactMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface nickname {
            kind: 'OutputField';
            name: 'nickname';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface typeTextIds {
            kind: 'OutputField';
            name: 'typeTextIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface favorite {
            kind: 'OutputField';
            name: 'favorite';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface notes {
            kind: 'OutputField';
            name: 'notes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface user {
            kind: 'OutputField';
            name: 'user';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$User;
        }
        interface contactTypes {
            kind: 'OutputField';
            name: 'contactTypes';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ContactType;
        }
    }
    export interface ContactMetadata {
        kind: 'Object';
        name: 'ContactMetadata';
        fields: {
            __typename: ContactMetadata.__typename;
            updatedAt: ContactMetadata.updatedAt;
            firstName: ContactMetadata.firstName;
            lastName: ContactMetadata.lastName;
            userHandle: ContactMetadata.userHandle;
            avatarUrl: ContactMetadata.avatarUrl;
        };
    }
    export namespace ContactMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ContactMetadata';
            };
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'OutputField';
            name: 'avatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ContactType {
        kind: 'Object';
        name: 'ContactType';
        fields: {
            __typename: ContactType.__typename;
            id: ContactType.id;
            adminNotes: ContactType.adminNotes;
            events: ContactType.events;
            metadata: ContactType.metadata;
            createdAt: ContactType.createdAt;
            createdBy: ContactType.createdBy;
            updatedAt: ContactType.updatedAt;
            updatedBy: ContactType.updatedBy;
            deletedAt: ContactType.deletedAt;
            deletedBy: ContactType.deletedBy;
            textId: ContactType.textId;
            parentTextId: ContactType.parentTextId;
            isParent: ContactType.isParent;
            optionType: ContactType.optionType;
            value: ContactType.value;
            translatedValue: ContactType.translatedValue;
            supportedLanguages: ContactType.supportedLanguages;
            materialIconName: ContactType.materialIconName;
            description: ContactType.description;
            translatedDescription: ContactType.translatedDescription;
            language: ContactType.language;
            mm2Id: ContactType.mm2Id;
            mm2Value: ContactType.mm2Value;
            syncedWithMm2At: ContactType.syncedWithMm2At;
            mm2TextId: ContactType.mm2TextId;
            mm3TextId: ContactType.mm3TextId;
            childOptions: ContactType.childOptions;
            parentOption: ContactType.parentOption;
        };
    }
    export namespace ContactType {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ContactType';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface ChannelParticipant {
        kind: 'Object';
        name: 'ChannelParticipant';
        fields: {
            __typename: ChannelParticipant.__typename;
            id: ChannelParticipant.id;
            adminNotes: ChannelParticipant.adminNotes;
            events: ChannelParticipant.events;
            metadata: ChannelParticipant.metadata;
            createdAt: ChannelParticipant.createdAt;
            createdBy: ChannelParticipant.createdBy;
            updatedAt: ChannelParticipant.updatedAt;
            updatedBy: ChannelParticipant.updatedBy;
            deletedAt: ChannelParticipant.deletedAt;
            deletedBy: ChannelParticipant.deletedBy;
            channelId: ChannelParticipant.channelId;
            userId: ChannelParticipant.userId;
            userInfo: ChannelParticipant.userInfo;
            invitedBy: ChannelParticipant.invitedBy;
            channelName: ChannelParticipant.channelName;
            role: ChannelParticipant.role;
            suspendedAt: ChannelParticipant.suspendedAt;
            suspendedBy: ChannelParticipant.suspendedBy;
            channel: ChannelParticipant.channel;
            myContact: ChannelParticipant.myContact;
            user: ChannelParticipant.user;
        };
    }
    export namespace ChannelParticipant {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelParticipant';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface userInfo {
            kind: 'OutputField';
            name: 'userInfo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BgChannelParticipantUserInfo;
        }
        interface invitedBy {
            kind: 'OutputField';
            name: 'invitedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelName {
            kind: 'OutputField';
            name: 'channelName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface role {
            kind: 'OutputField';
            name: 'role';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelParticipantRole;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channel {
            kind: 'OutputField';
            name: 'channel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Channel;
        }
        interface myContact {
            kind: 'OutputField';
            name: 'myContact';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Contact;
        }
        interface user {
            kind: 'OutputField';
            name: 'user';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserListItem;
        }
    }
    export interface BgChannelParticipantUserInfo {
        kind: 'Object';
        name: 'BgChannelParticipantUserInfo';
        fields: {
            __typename: BgChannelParticipantUserInfo.__typename;
            userHandle: BgChannelParticipantUserInfo.userHandle;
            firstName: BgChannelParticipantUserInfo.firstName;
            lastName: BgChannelParticipantUserInfo.lastName;
            avatarUrl: BgChannelParticipantUserInfo.avatarUrl;
        };
    }
    export namespace BgChannelParticipantUserInfo {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'BgChannelParticipantUserInfo';
            };
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'OutputField';
            name: 'avatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserListItem {
        kind: 'Object';
        name: 'UserListItem';
        fields: {
            __typename: UserListItem.__typename;
            id: UserListItem.id;
            createdAt: UserListItem.createdAt;
            updatedAt: UserListItem.updatedAt;
            deletedAt: UserListItem.deletedAt;
            userHandle: UserListItem.userHandle;
            firstName: UserListItem.firstName;
            lastName: UserListItem.lastName;
            avatarUrl: UserListItem.avatarUrl;
            genderTextId: UserListItem.genderTextId;
            websites: UserListItem.websites;
            preferredLanguageTextId: UserListItem.preferredLanguageTextId;
            spokenLanguagesTextIds: UserListItem.spokenLanguagesTextIds;
            countryOfResidenceTextId: UserListItem.countryOfResidenceTextId;
            regionOfResidence: UserListItem.regionOfResidence;
            cityOfResidence: UserListItem.cityOfResidence;
            timezone: UserListItem.timezone;
            roles: UserListItem.roles;
            discoverable: UserListItem.discoverable;
            trustLevel: UserListItem.trustLevel;
            userBlocks: UserListItem.userBlocks;
            latestActivityAt: UserListItem.latestActivityAt;
            inactivatedAt: UserListItem.inactivatedAt;
            suspendedAt: UserListItem.suspendedAt;
            seeksHelp: UserListItem.seeksHelp;
            offersHelp: UserListItem.offersHelp;
            yearsManagementExperience: UserListItem.yearsManagementExperience;
            yearsOwnershipExperience: UserListItem.yearsOwnershipExperience;
            academicExperiences: UserListItem.academicExperiences;
            businessExperiences: UserListItem.businessExperiences;
            isOnVacation: UserListItem.isOnVacation;
            mentor: UserListItem.mentor;
            mentee: UserListItem.mentee;
            groupMemberships: UserListItem.groupMemberships;
            companies: UserListItem.companies;
            countryOfOrigin: UserListItem.countryOfOrigin;
            countryOfResidence: UserListItem.countryOfResidence;
            educationLevel: UserListItem.educationLevel;
            endorsements: UserListItem.endorsements;
            groups: UserListItem.groups;
            profileCompletionPercentage: UserListItem.profileCompletionPercentage;
            profileRole: UserListItem.profileRole;
            pronouns: UserListItem.pronouns;
            pronounsDisplay: UserListItem.pronounsDisplay;
        };
    }
    export namespace UserListItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserListItem';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'OutputField';
            name: 'avatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface genderTextId {
            kind: 'OutputField';
            name: 'genderTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'OutputField';
            name: 'websites';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValue;
        }
        interface preferredLanguageTextId {
            kind: 'OutputField';
            name: 'preferredLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface spokenLanguagesTextIds {
            kind: 'OutputField';
            name: 'spokenLanguagesTextIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfResidenceTextId {
            kind: 'OutputField';
            name: 'countryOfResidenceTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfResidence {
            kind: 'OutputField';
            name: 'regionOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cityOfResidence {
            kind: 'OutputField';
            name: 'cityOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'OutputField';
            name: 'timezone';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        /**
         * If discoverable is not true, the user will not be included in search results or recommended to other users. The system will set discoverable to null for various reasons, i.e. for a bad actor. The user can set it to false intentionally.
         */
        interface discoverable {
            kind: 'OutputField';
            name: 'discoverable';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface trustLevel {
            kind: 'OutputField';
            name: 'trustLevel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface userBlocks {
            kind: 'OutputField';
            name: 'userBlocks';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserBlock;
        }
        interface latestActivityAt {
            kind: 'OutputField';
            name: 'latestActivityAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedAt {
            kind: 'OutputField';
            name: 'inactivatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface seeksHelp {
            kind: 'OutputField';
            name: 'seeksHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'OutputField';
            name: 'offersHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface yearsManagementExperience {
            kind: 'OutputField';
            name: 'yearsManagementExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface yearsOwnershipExperience {
            kind: 'OutputField';
            name: 'yearsOwnershipExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface academicExperiences {
            kind: 'OutputField';
            name: 'academicExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AcademicExperience;
        }
        interface businessExperiences {
            kind: 'OutputField';
            name: 'businessExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BusinessExperience;
        }
        interface isOnVacation {
            kind: 'OutputField';
            name: 'isOnVacation';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is a copy of the mentor group membership.
         */
        interface mentor {
            kind: 'OutputField';
            name: 'mentor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MentorsGroupMembership;
        }
        /**
         * This attribute is a copy of the mentee group membership.
         */
        interface mentee {
            kind: 'OutputField';
            name: 'mentee';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MenteesGroupMembership;
        }
        interface groupMemberships {
            kind: 'OutputField';
            name: 'groupMemberships';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        interface companies {
            kind: 'OutputField';
            name: 'companies';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Company;
        }
        interface countryOfOrigin {
            kind: 'OutputField';
            name: 'countryOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface countryOfResidence {
            kind: 'OutputField';
            name: 'countryOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface educationLevel {
            kind: 'OutputField';
            name: 'educationLevel';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$EducationLevel;
        }
        interface endorsements {
            kind: 'OutputField';
            name: 'endorsements';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$EndorsementWithTypes;
        }
        interface groups {
            kind: 'OutputField';
            name: 'groups';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Group;
        }
        interface profileCompletionPercentage {
            kind: 'OutputField';
            name: 'profileCompletionPercentage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface profileRole {
            kind: 'OutputField';
            name: 'profileRole';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface pronouns {
            kind: 'OutputField';
            name: 'pronouns';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Pronoun;
        }
        interface pronounsDisplay {
            kind: 'OutputField';
            name: 'pronounsDisplay';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface EducationLevel {
        kind: 'Object';
        name: 'EducationLevel';
        fields: {
            __typename: EducationLevel.__typename;
            id: EducationLevel.id;
            adminNotes: EducationLevel.adminNotes;
            events: EducationLevel.events;
            metadata: EducationLevel.metadata;
            createdAt: EducationLevel.createdAt;
            createdBy: EducationLevel.createdBy;
            updatedAt: EducationLevel.updatedAt;
            updatedBy: EducationLevel.updatedBy;
            deletedAt: EducationLevel.deletedAt;
            deletedBy: EducationLevel.deletedBy;
            textId: EducationLevel.textId;
            parentTextId: EducationLevel.parentTextId;
            isParent: EducationLevel.isParent;
            optionType: EducationLevel.optionType;
            value: EducationLevel.value;
            translatedValue: EducationLevel.translatedValue;
            supportedLanguages: EducationLevel.supportedLanguages;
            materialIconName: EducationLevel.materialIconName;
            description: EducationLevel.description;
            translatedDescription: EducationLevel.translatedDescription;
            language: EducationLevel.language;
            mm2Id: EducationLevel.mm2Id;
            mm2Value: EducationLevel.mm2Value;
            syncedWithMm2At: EducationLevel.syncedWithMm2At;
            mm2TextId: EducationLevel.mm2TextId;
            mm3TextId: EducationLevel.mm3TextId;
            childOptions: EducationLevel.childOptions;
            parentOption: EducationLevel.parentOption;
        };
    }
    export namespace EducationLevel {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'EducationLevel';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface EndorsementWithTypes {
        kind: 'Object';
        name: 'EndorsementWithTypes';
        fields: {
            __typename: EndorsementWithTypes.__typename;
            id: EndorsementWithTypes.id;
            adminNotes: EndorsementWithTypes.adminNotes;
            events: EndorsementWithTypes.events;
            metadata: EndorsementWithTypes.metadata;
            createdAt: EndorsementWithTypes.createdAt;
            createdBy: EndorsementWithTypes.createdBy;
            updatedAt: EndorsementWithTypes.updatedAt;
            updatedBy: EndorsementWithTypes.updatedBy;
            deletedAt: EndorsementWithTypes.deletedAt;
            deletedBy: EndorsementWithTypes.deletedBy;
            objectId: EndorsementWithTypes.objectId;
            contentModelType: EndorsementWithTypes.contentModelType;
            userId: EndorsementWithTypes.userId;
            contentTagTypeTextId: EndorsementWithTypes.contentTagTypeTextId;
            childContentTagTypeTextId: EndorsementWithTypes.childContentTagTypeTextId;
            messageText: EndorsementWithTypes.messageText;
            moderationConcern: EndorsementWithTypes.moderationConcern;
            allModerationConcerns: EndorsementWithTypes.allModerationConcerns;
            approvedByRecipientAt: EndorsementWithTypes.approvedByRecipientAt;
            verifiedBy: EndorsementWithTypes.verifiedBy;
            verifiedAt: EndorsementWithTypes.verifiedAt;
            dismissedBy: EndorsementWithTypes.dismissedBy;
            dismissedAt: EndorsementWithTypes.dismissedAt;
            childContentTagType: EndorsementWithTypes.childContentTagType;
            contentTagType: EndorsementWithTypes.contentTagType;
        };
    }
    export namespace EndorsementWithTypes {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'EndorsementWithTypes';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface objectId {
            kind: 'OutputField';
            name: 'objectId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface contentModelType {
            kind: 'OutputField';
            name: 'contentModelType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ModelType;
        }
        /**
         * ID of the user that created/owns the content referred to in this ContentTag. The ID of the user that created this ContentTag is stored in the createdBy field for ContentTags that were created by a user.
         */
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface contentTagTypeTextId {
            kind: 'OutputField';
            name: 'contentTagTypeTextId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface childContentTagTypeTextId {
            kind: 'OutputField';
            name: 'childContentTagTypeTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface moderationConcern {
            kind: 'OutputField';
            name: 'moderationConcern';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ModerationConcern;
        }
        interface allModerationConcerns {
            kind: 'OutputField';
            name: 'allModerationConcerns';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModerationConcern;
        }
        interface approvedByRecipientAt {
            kind: 'OutputField';
            name: 'approvedByRecipientAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * ID of the admin user that verified the tag.
         */
        interface verifiedBy {
            kind: 'OutputField';
            name: 'verifiedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface verifiedAt {
            kind: 'OutputField';
            name: 'verifiedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * ID of the admin user that dimsissed the tag.
         */
        interface dismissedBy {
            kind: 'OutputField';
            name: 'dismissedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface dismissedAt {
            kind: 'OutputField';
            name: 'dismissedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface childContentTagType {
            kind: 'OutputField';
            name: 'childContentTagType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ContentTagType;
        }
        interface contentTagType {
            kind: 'OutputField';
            name: 'contentTagType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ContentTagType;
        }
    }
    export interface ModerationConcern {
        kind: 'Object';
        name: 'ModerationConcern';
        fields: {
            __typename: ModerationConcern.__typename;
            id: ModerationConcern.id;
            adminNotes: ModerationConcern.adminNotes;
            events: ModerationConcern.events;
            metadata: ModerationConcern.metadata;
            createdAt: ModerationConcern.createdAt;
            createdBy: ModerationConcern.createdBy;
            updatedAt: ModerationConcern.updatedAt;
            updatedBy: ModerationConcern.updatedBy;
            deletedAt: ModerationConcern.deletedAt;
            deletedBy: ModerationConcern.deletedBy;
            moderationConcernType: ModerationConcern.moderationConcernType;
            name: ModerationConcern.name;
            description: ModerationConcern.description;
            value: ModerationConcern.value;
            languageTextId: ModerationConcern.languageTextId;
            isCaseSensitive: ModerationConcern.isCaseSensitive;
            isWord: ModerationConcern.isWord;
            isRegex: ModerationConcern.isRegex;
            isNameOfBadActor: ModerationConcern.isNameOfBadActor;
            isCompanyNameOfBadActor: ModerationConcern.isCompanyNameOfBadActor;
            isEmailOfBadActor: ModerationConcern.isEmailOfBadActor;
            isPhoneNumberOfBadActor: ModerationConcern.isPhoneNumberOfBadActor;
            isWebsiteOfBadActor: ModerationConcern.isWebsiteOfBadActor;
            deleteContent: ModerationConcern.deleteContent;
            trustLevelImpact: ModerationConcern.trustLevelImpact;
            version: ModerationConcern.version;
        };
    }
    export namespace ModerationConcern {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ModerationConcern';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface moderationConcernType {
            kind: 'OutputField';
            name: 'moderationConcernType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ModerationConcernType;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface languageTextId {
            kind: 'OutputField';
            name: 'languageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * must match with capitalization; ignored if isRegex = true; default = true
         */
        interface isCaseSensitive {
            kind: 'OutputField';
            name: 'isCaseSensitive';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * only matches full words; ignored if isRegex = true; default = false
         */
        interface isWord {
            kind: 'OutputField';
            name: 'isWord';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * value is a regex expression without flags; default = false
         */
        interface isRegex {
            kind: 'OutputField';
            name: 'isRegex';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isNameOfBadActor {
            kind: 'OutputField';
            name: 'isNameOfBadActor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isCompanyNameOfBadActor {
            kind: 'OutputField';
            name: 'isCompanyNameOfBadActor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isEmailOfBadActor {
            kind: 'OutputField';
            name: 'isEmailOfBadActor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isPhoneNumberOfBadActor {
            kind: 'OutputField';
            name: 'isPhoneNumberOfBadActor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isWebsiteOfBadActor {
            kind: 'OutputField';
            name: 'isWebsiteOfBadActor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * delete the content, if a match is found; default = false
         */
        interface deleteContent {
            kind: 'OutputField';
            name: 'deleteContent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * number of points to reduce a users trustLevel, if found
         */
        interface trustLevelImpact {
            kind: 'OutputField';
            name: 'trustLevelImpact';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface version {
            kind: 'OutputField';
            name: 'version';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ContentTagType {
        kind: 'Object';
        name: 'ContentTagType';
        fields: {
            __typename: ContentTagType.__typename;
            id: ContentTagType.id;
            adminNotes: ContentTagType.adminNotes;
            events: ContentTagType.events;
            metadata: ContentTagType.metadata;
            createdAt: ContentTagType.createdAt;
            createdBy: ContentTagType.createdBy;
            updatedAt: ContentTagType.updatedAt;
            updatedBy: ContentTagType.updatedBy;
            deletedAt: ContentTagType.deletedAt;
            deletedBy: ContentTagType.deletedBy;
            textId: ContentTagType.textId;
            parentTextId: ContentTagType.parentTextId;
            isParent: ContentTagType.isParent;
            optionType: ContentTagType.optionType;
            value: ContentTagType.value;
            translatedValue: ContentTagType.translatedValue;
            supportedLanguages: ContentTagType.supportedLanguages;
            materialIconName: ContentTagType.materialIconName;
            description: ContentTagType.description;
            translatedDescription: ContentTagType.translatedDescription;
            language: ContentTagType.language;
            mm2Id: ContentTagType.mm2Id;
            mm2Value: ContentTagType.mm2Value;
            syncedWithMm2At: ContentTagType.syncedWithMm2At;
            mm2TextId: ContentTagType.mm2TextId;
            mm3TextId: ContentTagType.mm3TextId;
            childOptions: ContentTagType.childOptions;
            parentOption: ContentTagType.parentOption;
            addToTrustLevel: ContentTagType.addToTrustLevel;
        };
    }
    export namespace ContentTagType {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ContentTagType';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface addToTrustLevel {
            kind: 'OutputField';
            name: 'addToTrustLevel';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface Group {
        kind: 'Object';
        name: 'Group';
        fields: {
            __typename: Group.__typename;
            id: Group.id;
            adminNotes: Group.adminNotes;
            events: Group.events;
            metadata: Group.metadata;
            createdAt: Group.createdAt;
            createdBy: Group.createdBy;
            updatedAt: Group.updatedAt;
            updatedBy: Group.updatedBy;
            deletedAt: Group.deletedAt;
            deletedBy: Group.deletedBy;
            parentGroupId: Group.parentGroupId;
            matchingEngineId: Group.matchingEngineId;
            name: Group.name;
            shortName: Group.shortName;
            ident: Group.ident;
            slug: Group.slug;
            domain: Group.domain;
            badgeName: Group.badgeName;
            description: Group.description;
            planType: Group.planType;
            embedded: Group.embedded;
            appliedGroupRules: Group.appliedGroupRules;
            languageTextId: Group.languageTextId;
            allowProfileRoleOnSignUp: Group.allowProfileRoleOnSignUp;
            mm2Id: Group.mm2Id;
            isMm2Organization: Group.isMm2Organization;
            syncedWithMm2At: Group.syncedWithMm2At;
            isMigratedToMm3: Group.isMigratedToMm3;
            mm2RedirectUrl: Group.mm2RedirectUrl;
            mm3DeepLinksUrl: Group.mm3DeepLinksUrl;
            groupCms: Group.groupCms;
        };
    }
    export namespace Group {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Group';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface parentGroupId {
            kind: 'OutputField';
            name: 'parentGroupId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface matchingEngineId {
            kind: 'OutputField';
            name: 'matchingEngineId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortName {
            kind: 'OutputField';
            name: 'shortName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface ident {
            kind: 'OutputField';
            name: 'ident';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface slug {
            kind: 'OutputField';
            name: 'slug';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface domain {
            kind: 'OutputField';
            name: 'domain';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface badgeName {
            kind: 'OutputField';
            name: 'badgeName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface planType {
            kind: 'OutputField';
            name: 'planType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface embedded {
            kind: 'OutputField';
            name: 'embedded';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface appliedGroupRules {
            kind: 'OutputField';
            name: 'appliedGroupRules';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AppliedGroupRule;
        }
        /**
         * The language of this group. The app will be set to this language, should a new user arrive at this groups landing page.
         */
        interface languageTextId {
            kind: 'OutputField';
            name: 'languageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Deprecated, use GroupCmsOnboarding instead.
         *
         * @deprecated Use GroupCmsOnboarding instead.
         */
        interface allowProfileRoleOnSignUp {
            kind: 'OutputField';
            name: 'allowProfileRoleOnSignUp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface isMm2Organization {
            kind: 'OutputField';
            name: 'isMm2Organization';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This is false for groups which are expected to continue using MM2.
         */
        interface isMigratedToMm3 {
            kind: 'OutputField';
            name: 'isMigratedToMm3';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * The URL which can be used to redirect a group to MM2.
         */
        interface mm2RedirectUrl {
            kind: 'OutputField';
            name: 'mm2RedirectUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The domain name used by the MM3 deep links, if different from the default groups.
         */
        interface mm3DeepLinksUrl {
            kind: 'OutputField';
            name: 'mm3DeepLinksUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface groupCms {
            kind: 'OutputField';
            name: 'groupCms';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupCms;
        }
    }
    export interface AppliedGroupRule {
        kind: 'Object';
        name: 'AppliedGroupRule';
        fields: {
            __typename: AppliedGroupRule.__typename;
            id: AppliedGroupRule.id;
            adminNotes: AppliedGroupRule.adminNotes;
            events: AppliedGroupRule.events;
            metadata: AppliedGroupRule.metadata;
            createdAt: AppliedGroupRule.createdAt;
            createdBy: AppliedGroupRule.createdBy;
            updatedAt: AppliedGroupRule.updatedAt;
            updatedBy: AppliedGroupRule.updatedBy;
            deletedAt: AppliedGroupRule.deletedAt;
            deletedBy: AppliedGroupRule.deletedBy;
            groupRuleId: AppliedGroupRule.groupRuleId;
            groupId: AppliedGroupRule.groupId;
            subscribedToEvents: AppliedGroupRule.subscribedToEvents;
            config: AppliedGroupRule.config;
        };
    }
    export namespace AppliedGroupRule {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'AppliedGroupRule';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupRuleId {
            kind: 'OutputField';
            name: 'groupRuleId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface subscribedToEvents {
            kind: 'OutputField';
            name: 'subscribedToEvents';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupRuleEventType;
        }
        interface config {
            kind: 'OutputField';
            name: 'config';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupRuleBaseConfig;
        }
    }
    export interface GroupRuleBaseConfig {
        kind: 'Object';
        name: 'GroupRuleBaseConfig';
        fields: {
            __typename: GroupRuleBaseConfig.__typename;
            id: GroupRuleBaseConfig.id;
            adminNotes: GroupRuleBaseConfig.adminNotes;
            events: GroupRuleBaseConfig.events;
            metadata: GroupRuleBaseConfig.metadata;
            createdAt: GroupRuleBaseConfig.createdAt;
            createdBy: GroupRuleBaseConfig.createdBy;
            updatedAt: GroupRuleBaseConfig.updatedAt;
            updatedBy: GroupRuleBaseConfig.updatedBy;
            deletedAt: GroupRuleBaseConfig.deletedAt;
            deletedBy: GroupRuleBaseConfig.deletedBy;
            value: GroupRuleBaseConfig.value;
        };
    }
    export namespace GroupRuleBaseConfig {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GroupRuleBaseConfig';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface GroupCms {
        kind: 'Object';
        name: 'GroupCms';
        fields: {
            __typename: GroupCms.__typename;
            id: GroupCms.id;
            adminNotes: GroupCms.adminNotes;
            events: GroupCms.events;
            metadata: GroupCms.metadata;
            createdAt: GroupCms.createdAt;
            createdBy: GroupCms.createdBy;
            updatedAt: GroupCms.updatedAt;
            updatedBy: GroupCms.updatedBy;
            deletedAt: GroupCms.deletedAt;
            deletedBy: GroupCms.deletedBy;
            groupId: GroupCms.groupId;
            onboarding: GroupCms.onboarding;
        };
    }
    export namespace GroupCms {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GroupCms';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface onboarding {
            kind: 'OutputField';
            name: 'onboarding';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupCmsOnboarding;
        }
    }
    export interface GroupCmsOnboarding {
        kind: 'Object';
        name: 'GroupCmsOnboarding';
        fields: {
            __typename: GroupCmsOnboarding.__typename;
            allowProfileRoleOnSignUp: GroupCmsOnboarding.allowProfileRoleOnSignUp;
            showDataConsentPage: GroupCmsOnboarding.showDataConsentPage;
            showPreferredLanguagePage: GroupCmsOnboarding.showPreferredLanguagePage;
            showLocationPage: GroupCmsOnboarding.showLocationPage;
            showPhoneNumberPage: GroupCmsOnboarding.showPhoneNumberPage;
            showGenderPage: GroupCmsOnboarding.showGenderPage;
            showBirthYearPage: GroupCmsOnboarding.showBirthYearPage;
            showProfileRolePage: GroupCmsOnboarding.showProfileRolePage;
            showExpertisesPage: GroupCmsOnboarding.showExpertisesPage;
            showIndustryPage: GroupCmsOnboarding.showIndustryPage;
            showVentureNamePage: GroupCmsOnboarding.showVentureNamePage;
            showVentureStartDatePage: GroupCmsOnboarding.showVentureStartDatePage;
            showVentureStagePage: GroupCmsOnboarding.showVentureStagePage;
            showReasonToJoinPage: GroupCmsOnboarding.showReasonToJoinPage;
            showMentorRolePage: GroupCmsOnboarding.showMentorRolePage;
            showAcceptTermsPage: GroupCmsOnboarding.showAcceptTermsPage;
            nextRoute: GroupCmsOnboarding.nextRoute;
        };
    }
    export namespace GroupCmsOnboarding {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GroupCmsOnboarding';
            };
        }
        /**
         * This defines which profile roles (mentor/mentee) are available to a new user when signing up to this group.
         */
        interface allowProfileRoleOnSignUp {
            kind: 'OutputField';
            name: 'allowProfileRoleOnSignUp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface showDataConsentPage {
            kind: 'OutputField';
            name: 'showDataConsentPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showPreferredLanguagePage {
            kind: 'OutputField';
            name: 'showPreferredLanguagePage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showLocationPage {
            kind: 'OutputField';
            name: 'showLocationPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showPhoneNumberPage {
            kind: 'OutputField';
            name: 'showPhoneNumberPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showGenderPage {
            kind: 'OutputField';
            name: 'showGenderPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showBirthYearPage {
            kind: 'OutputField';
            name: 'showBirthYearPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showProfileRolePage {
            kind: 'OutputField';
            name: 'showProfileRolePage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showExpertisesPage {
            kind: 'OutputField';
            name: 'showExpertisesPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showIndustryPage {
            kind: 'OutputField';
            name: 'showIndustryPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showVentureNamePage {
            kind: 'OutputField';
            name: 'showVentureNamePage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showVentureStartDatePage {
            kind: 'OutputField';
            name: 'showVentureStartDatePage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showVentureStagePage {
            kind: 'OutputField';
            name: 'showVentureStagePage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showReasonToJoinPage {
            kind: 'OutputField';
            name: 'showReasonToJoinPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showMentorRolePage {
            kind: 'OutputField';
            name: 'showMentorRolePage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showAcceptTermsPage {
            kind: 'OutputField';
            name: 'showAcceptTermsPage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface nextRoute {
            kind: 'OutputField';
            name: 'nextRoute';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Pronoun {
        kind: 'Object';
        name: 'Pronoun';
        fields: {
            __typename: Pronoun.__typename;
            id: Pronoun.id;
            adminNotes: Pronoun.adminNotes;
            events: Pronoun.events;
            metadata: Pronoun.metadata;
            createdAt: Pronoun.createdAt;
            createdBy: Pronoun.createdBy;
            updatedAt: Pronoun.updatedAt;
            updatedBy: Pronoun.updatedBy;
            deletedAt: Pronoun.deletedAt;
            deletedBy: Pronoun.deletedBy;
            textId: Pronoun.textId;
            parentTextId: Pronoun.parentTextId;
            isParent: Pronoun.isParent;
            optionType: Pronoun.optionType;
            value: Pronoun.value;
            translatedValue: Pronoun.translatedValue;
            supportedLanguages: Pronoun.supportedLanguages;
            materialIconName: Pronoun.materialIconName;
            description: Pronoun.description;
            translatedDescription: Pronoun.translatedDescription;
            language: Pronoun.language;
            mm2Id: Pronoun.mm2Id;
            mm2Value: Pronoun.mm2Value;
            syncedWithMm2At: Pronoun.syncedWithMm2At;
            mm2TextId: Pronoun.mm2TextId;
            mm3TextId: Pronoun.mm3TextId;
            childOptions: Pronoun.childOptions;
            parentOption: Pronoun.parentOption;
        };
    }
    export namespace Pronoun {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Pronoun';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface UserCms {
        kind: 'Object';
        name: 'UserCms';
        fields: {
            __typename: UserCms.__typename;
            userId: UserCms.userId;
            groupCms: UserCms.groupCms;
        };
    }
    export namespace UserCms {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserCms';
            };
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupCms {
            kind: 'OutputField';
            name: 'groupCms';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupCms;
        }
    }
    export interface UserInbox {
        kind: 'Object';
        name: 'UserInbox';
        fields: {
            __typename: UserInbox.__typename;
            id: UserInbox.id;
            adminNotes: UserInbox.adminNotes;
            events: UserInbox.events;
            metadata: UserInbox.metadata;
            createdAt: UserInbox.createdAt;
            createdBy: UserInbox.createdBy;
            updatedAt: UserInbox.updatedAt;
            updatedBy: UserInbox.updatedBy;
            deletedAt: UserInbox.deletedAt;
            deletedBy: UserInbox.deletedBy;
            userId: UserInbox.userId;
            channels: UserInbox.channels;
        };
    }
    export namespace UserInbox {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserInbox';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface channels {
            kind: 'OutputField';
            name: 'channels';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelInbox;
        }
    }
    export interface ChannelInbox {
        kind: 'Object';
        name: 'ChannelInbox';
        fields: {
            __typename: ChannelInbox.__typename;
            userId: ChannelInbox.userId;
            unseenMessages: ChannelInbox.unseenMessages;
            unseenSystemMessages: ChannelInbox.unseenSystemMessages;
            unseenArchivedMessages: ChannelInbox.unseenArchivedMessages;
            latestMessages: ChannelInbox.latestMessages;
            latestArchivedMessages: ChannelInbox.latestArchivedMessages;
            pendingInvitations: ChannelInbox.pendingInvitations;
            invitations: ChannelInbox.invitations;
            itemIdHash: ChannelInbox.itemIdHash;
            updatedAt: ChannelInbox.updatedAt;
            updatedBy: ChannelInbox.updatedBy;
            channelsExceedMaxCount: ChannelInbox.channelsExceedMaxCount;
            invitationsExceedMaxCount: ChannelInbox.invitationsExceedMaxCount;
        };
    }
    export namespace ChannelInbox {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelInbox';
            };
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface unseenMessages {
            kind: 'OutputField';
            name: 'unseenMessages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemMessage;
        }
        interface unseenSystemMessages {
            kind: 'OutputField';
            name: 'unseenSystemMessages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemMessage;
        }
        interface unseenArchivedMessages {
            kind: 'OutputField';
            name: 'unseenArchivedMessages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemMessage;
        }
        interface latestMessages {
            kind: 'OutputField';
            name: 'latestMessages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemMessage;
        }
        interface latestArchivedMessages {
            kind: 'OutputField';
            name: 'latestArchivedMessages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemMessage;
        }
        interface pendingInvitations {
            kind: 'OutputField';
            name: 'pendingInvitations';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemInvitation;
        }
        interface invitations {
            kind: 'OutputField';
            name: 'invitations';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelInboxItemInvitation;
        }
        /**
         * MD5 hash of all item IDs to check whether there are any new or removed items.
         */
        interface itemIdHash {
            kind: 'OutputField';
            name: 'itemIdHash';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelsExceedMaxCount {
            kind: 'OutputField';
            name: 'channelsExceedMaxCount';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface invitationsExceedMaxCount {
            kind: 'OutputField';
            name: 'invitationsExceedMaxCount';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface ChannelInboxItemMessage {
        kind: 'Object';
        name: 'ChannelInboxItemMessage';
        fields: {
            __typename: ChannelInboxItemMessage.__typename;
            id: ChannelInboxItemMessage.id;
            channelId: ChannelInboxItemMessage.channelId;
            replyToMessageId: ChannelInboxItemMessage.replyToMessageId;
            channelMessageType: ChannelInboxItemMessage.channelMessageType;
            messageText: ChannelInboxItemMessage.messageText;
            senderUserHandle: ChannelInboxItemMessage.senderUserHandle;
            senderFirstName: ChannelInboxItemMessage.senderFirstName;
            senderLastName: ChannelInboxItemMessage.senderLastName;
            senderAvatarUrl: ChannelInboxItemMessage.senderAvatarUrl;
            seenAt: ChannelInboxItemMessage.seenAt;
            isArchived: ChannelInboxItemMessage.isArchived;
            createdAt: ChannelInboxItemMessage.createdAt;
            createdBy: ChannelInboxItemMessage.createdBy;
            updatedAt: ChannelInboxItemMessage.updatedAt;
            updatedBy: ChannelInboxItemMessage.updatedBy;
            userIds: ChannelInboxItemMessage.userIds;
        };
    }
    export namespace ChannelInboxItemMessage {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelInboxItemMessage';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface replyToMessageId {
            kind: 'OutputField';
            name: 'replyToMessageId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelMessageType {
            kind: 'OutputField';
            name: 'channelMessageType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessageType;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderUserHandle {
            kind: 'OutputField';
            name: 'senderUserHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderFirstName {
            kind: 'OutputField';
            name: 'senderFirstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderLastName {
            kind: 'OutputField';
            name: 'senderLastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderAvatarUrl {
            kind: 'OutputField';
            name: 'senderAvatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface seenAt {
            kind: 'OutputField';
            name: 'seenAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isArchived {
            kind: 'OutputField';
            name: 'isArchived';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIds {
            kind: 'OutputField';
            name: 'userIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface ChannelInboxItemInvitation {
        kind: 'Object';
        name: 'ChannelInboxItemInvitation';
        fields: {
            __typename: ChannelInboxItemInvitation.__typename;
            id: ChannelInboxItemInvitation.id;
            channelId: ChannelInboxItemInvitation.channelId;
            messageText: ChannelInboxItemInvitation.messageText;
            readByRecipientAt: ChannelInboxItemInvitation.readByRecipientAt;
            autoAccept: ChannelInboxItemInvitation.autoAccept;
            status: ChannelInboxItemInvitation.status;
            createdAt: ChannelInboxItemInvitation.createdAt;
            createdBy: ChannelInboxItemInvitation.createdBy;
            recipientId: ChannelInboxItemInvitation.recipientId;
        };
    }
    export namespace ChannelInboxItemInvitation {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelInboxItemInvitation';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface readByRecipientAt {
            kind: 'OutputField';
            name: 'readByRecipientAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface autoAccept {
            kind: 'OutputField';
            name: 'autoAccept';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface status {
            kind: 'OutputField';
            name: 'status';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelInvitationStatus;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientId {
            kind: 'OutputField';
            name: 'recipientId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface AdminTask {
        kind: 'Object';
        name: 'AdminTask';
        fields: {
            __typename: AdminTask.__typename;
            id: AdminTask.id;
            adminNotes: AdminTask.adminNotes;
            events: AdminTask.events;
            metadata: AdminTask.metadata;
            createdAt: AdminTask.createdAt;
            createdBy: AdminTask.createdBy;
            updatedAt: AdminTask.updatedAt;
            updatedBy: AdminTask.updatedBy;
            deletedAt: AdminTask.deletedAt;
            deletedBy: AdminTask.deletedBy;
            adminTaskType: AdminTask.adminTaskType;
            result: AdminTask.result;
            resultMessage: AdminTask.resultMessage;
            error: AdminTask.error;
            args: AdminTask.args;
            timeout: AdminTask.timeout;
            autoRun: AdminTask.autoRun;
            synchronous: AdminTask.synchronous;
            startedAt: AdminTask.startedAt;
            expiresAt: AdminTask.expiresAt;
            finishedAt: AdminTask.finishedAt;
        };
    }
    export namespace AdminTask {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'AdminTask';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminTaskType {
            kind: 'OutputField';
            name: 'adminTaskType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$AdminTaskType;
        }
        interface result {
            kind: 'OutputField';
            name: 'result';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AdminTaskResult;
        }
        interface resultMessage {
            kind: 'OutputField';
            name: 'resultMessage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Any error messages that happened during the run
         */
        interface error {
            kind: 'OutputField';
            name: 'error';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * arguments
         */
        interface args {
            kind: 'OutputField';
            name: 'args';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * number of milliseconds before timeout
         */
        interface timeout {
            kind: 'OutputField';
            name: 'timeout';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        /**
         * run ask after creation
         */
        interface autoRun {
            kind: 'OutputField';
            name: 'autoRun';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * should the task run synchronously, or in the background?
         */
        interface synchronous {
            kind: 'OutputField';
            name: 'synchronous';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Date/time this task started to run
         */
        interface startedAt {
            kind: 'OutputField';
            name: 'startedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * Date/time this task will be removed from the db
         */
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * Date/time this task completed its run
         */
        interface finishedAt {
            kind: 'OutputField';
            name: 'finishedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface AdminTaskDef {
        kind: 'Object';
        name: 'AdminTaskDef';
        fields: {
            __typename: AdminTaskDef.__typename;
            adminTaskType: AdminTaskDef.adminTaskType;
            label: AdminTaskDef.label;
            description: AdminTaskDef.description;
            args: AdminTaskDef.args;
            available: AdminTaskDef.available;
            timeout: AdminTaskDef.timeout;
        };
    }
    export namespace AdminTaskDef {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'AdminTaskDef';
            };
        }
        interface adminTaskType {
            kind: 'OutputField';
            name: 'adminTaskType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$AdminTaskType;
        }
        interface label {
            kind: 'OutputField';
            name: 'label';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * arguments
         */
        interface args {
            kind: 'OutputField';
            name: 'args';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AdminTaskArgDef;
        }
        /**
         * is this admin task available?
         */
        interface available {
            kind: 'OutputField';
            name: 'available';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * number of milliseconds before timeout
         */
        interface timeout {
            kind: 'OutputField';
            name: 'timeout';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface AdminTaskArgDef {
        kind: 'Object';
        name: 'AdminTaskArgDef';
        fields: {
            __typename: AdminTaskArgDef.__typename;
            name: AdminTaskArgDef.name;
            label: AdminTaskArgDef.label;
            dataType: AdminTaskArgDef.dataType;
            choices: AdminTaskArgDef.choices;
            optional: AdminTaskArgDef.optional;
            description: AdminTaskArgDef.description;
        };
    }
    export namespace AdminTaskArgDef {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'AdminTaskArgDef';
            };
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface label {
            kind: 'OutputField';
            name: 'label';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface dataType {
            kind: 'OutputField';
            name: 'dataType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface choices {
            kind: 'OutputField';
            name: 'choices';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface optional {
            kind: 'OutputField';
            name: 'optional';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ChannelListItem {
        kind: 'Object';
        name: 'ChannelListItem';
        fields: {
            __typename: ChannelListItem.__typename;
            id: ChannelListItem.id;
            adminNotes: ChannelListItem.adminNotes;
            events: ChannelListItem.events;
            metadata: ChannelListItem.metadata;
            createdAt: ChannelListItem.createdAt;
            createdBy: ChannelListItem.createdBy;
            updatedAt: ChannelListItem.updatedAt;
            updatedBy: ChannelListItem.updatedBy;
            deletedAt: ChannelListItem.deletedAt;
            deletedBy: ChannelListItem.deletedBy;
            name: ChannelListItem.name;
            topic: ChannelListItem.topic;
            description: ChannelListItem.description;
            tags: ChannelListItem.tags;
            channelType: ChannelListItem.channelType;
            statuses: ChannelListItem.statuses;
            userIds: ChannelListItem.userIds;
            otherUserId: ChannelListItem.otherUserId;
            pausedAt: ChannelListItem.pausedAt;
            pausedBy: ChannelListItem.pausedBy;
            suspendedAt: ChannelListItem.suspendedAt;
            suspendedBy: ChannelListItem.suspendedBy;
            lockedAt: ChannelListItem.lockedAt;
            lockedBy: ChannelListItem.lockedBy;
            archivedAt: ChannelListItem.archivedAt;
            archivedBy: ChannelListItem.archivedBy;
            assumedMentorId: ChannelListItem.assumedMentorId;
            mm2Id: ChannelListItem.mm2Id;
            syncedWithMm2At: ChannelListItem.syncedWithMm2At;
            creator: ChannelListItem.creator;
            status: ChannelListItem.status;
            invitations: ChannelListItem.invitations;
            isArchivedForMe: ChannelListItem.isArchivedForMe;
            latestMessage: ChannelListItem.latestMessage;
            messages: ChannelListItem.messages;
            myContacts: ChannelListItem.myContacts;
            participants: ChannelListItem.participants;
            pendingInvitations: ChannelListItem.pendingInvitations;
        };
    }
    export namespace ChannelListItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ChannelListItem';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface topic {
            kind: 'OutputField';
            name: 'topic';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface tags {
            kind: 'OutputField';
            name: 'tags';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface channelType {
            kind: 'OutputField';
            name: 'channelType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelType;
        }
        interface statuses {
            kind: 'OutputField';
            name: 'statuses';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BgChannelStatus;
        }
        interface userIds {
            kind: 'OutputField';
            name: 'userIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * For 1:1 channels, the ID of the other user. The first user is createdBy.
         */
        interface otherUserId {
            kind: 'OutputField';
            name: 'otherUserId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface pausedAt {
            kind: 'OutputField';
            name: 'pausedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pausedBy {
            kind: 'OutputField';
            name: 'pausedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface lockedAt {
            kind: 'OutputField';
            name: 'lockedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface lockedBy {
            kind: 'OutputField';
            name: 'lockedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface archivedBy {
            kind: 'OutputField';
            name: 'archivedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface assumedMentorId {
            kind: 'OutputField';
            name: 'assumedMentorId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface creator {
            kind: 'OutputField';
            name: 'creator';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$User;
        }
        interface status {
            kind: 'OutputField';
            name: 'status';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BgChannelStatus;
        }
        interface invitations {
            kind: 'OutputField';
            name: 'invitations';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface isArchivedForMe {
            kind: 'OutputField';
            name: 'isArchivedForMe';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface latestMessage {
            kind: 'OutputField';
            name: 'latestMessage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface messages {
            kind: 'OutputField';
            name: 'messages';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelMessage;
        }
        interface myContacts {
            kind: 'OutputField';
            name: 'myContacts';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Contact;
        }
        interface participants {
            kind: 'OutputField';
            name: 'participants';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface pendingInvitations {
            kind: 'OutputField';
            name: 'pendingInvitations';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
    }
    export interface ErrorCodeOption {
        kind: 'Object';
        name: 'ErrorCodeOption';
        fields: {
            __typename: ErrorCodeOption.__typename;
            id: ErrorCodeOption.id;
            adminNotes: ErrorCodeOption.adminNotes;
            events: ErrorCodeOption.events;
            metadata: ErrorCodeOption.metadata;
            createdAt: ErrorCodeOption.createdAt;
            createdBy: ErrorCodeOption.createdBy;
            updatedAt: ErrorCodeOption.updatedAt;
            updatedBy: ErrorCodeOption.updatedBy;
            deletedAt: ErrorCodeOption.deletedAt;
            deletedBy: ErrorCodeOption.deletedBy;
            textId: ErrorCodeOption.textId;
            parentTextId: ErrorCodeOption.parentTextId;
            isParent: ErrorCodeOption.isParent;
            optionType: ErrorCodeOption.optionType;
            value: ErrorCodeOption.value;
            translatedValue: ErrorCodeOption.translatedValue;
            supportedLanguages: ErrorCodeOption.supportedLanguages;
            materialIconName: ErrorCodeOption.materialIconName;
            description: ErrorCodeOption.description;
            translatedDescription: ErrorCodeOption.translatedDescription;
            language: ErrorCodeOption.language;
            mm2Id: ErrorCodeOption.mm2Id;
            mm2Value: ErrorCodeOption.mm2Value;
            syncedWithMm2At: ErrorCodeOption.syncedWithMm2At;
            mm2TextId: ErrorCodeOption.mm2TextId;
            mm3TextId: ErrorCodeOption.mm3TextId;
            childOptions: ErrorCodeOption.childOptions;
            parentOption: ErrorCodeOption.parentOption;
        };
    }
    export namespace ErrorCodeOption {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ErrorCodeOption';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface IndonesianCity {
        kind: 'Object';
        name: 'IndonesianCity';
        fields: {
            __typename: IndonesianCity.__typename;
            id: IndonesianCity.id;
            adminNotes: IndonesianCity.adminNotes;
            events: IndonesianCity.events;
            metadata: IndonesianCity.metadata;
            createdAt: IndonesianCity.createdAt;
            createdBy: IndonesianCity.createdBy;
            updatedAt: IndonesianCity.updatedAt;
            updatedBy: IndonesianCity.updatedBy;
            deletedAt: IndonesianCity.deletedAt;
            deletedBy: IndonesianCity.deletedBy;
            textId: IndonesianCity.textId;
            parentTextId: IndonesianCity.parentTextId;
            isParent: IndonesianCity.isParent;
            optionType: IndonesianCity.optionType;
            value: IndonesianCity.value;
            translatedValue: IndonesianCity.translatedValue;
            supportedLanguages: IndonesianCity.supportedLanguages;
            materialIconName: IndonesianCity.materialIconName;
            description: IndonesianCity.description;
            translatedDescription: IndonesianCity.translatedDescription;
            language: IndonesianCity.language;
            mm2Id: IndonesianCity.mm2Id;
            mm2Value: IndonesianCity.mm2Value;
            syncedWithMm2At: IndonesianCity.syncedWithMm2At;
            mm2TextId: IndonesianCity.mm2TextId;
            mm3TextId: IndonesianCity.mm3TextId;
            childOptions: IndonesianCity.childOptions;
            parentOption: IndonesianCity.parentOption;
        };
    }
    export namespace IndonesianCity {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'IndonesianCity';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface IndonesianProvince {
        kind: 'Object';
        name: 'IndonesianProvince';
        fields: {
            __typename: IndonesianProvince.__typename;
            id: IndonesianProvince.id;
            adminNotes: IndonesianProvince.adminNotes;
            events: IndonesianProvince.events;
            metadata: IndonesianProvince.metadata;
            createdAt: IndonesianProvince.createdAt;
            createdBy: IndonesianProvince.createdBy;
            updatedAt: IndonesianProvince.updatedAt;
            updatedBy: IndonesianProvince.updatedBy;
            deletedAt: IndonesianProvince.deletedAt;
            deletedBy: IndonesianProvince.deletedBy;
            textId: IndonesianProvince.textId;
            parentTextId: IndonesianProvince.parentTextId;
            isParent: IndonesianProvince.isParent;
            optionType: IndonesianProvince.optionType;
            value: IndonesianProvince.value;
            translatedValue: IndonesianProvince.translatedValue;
            supportedLanguages: IndonesianProvince.supportedLanguages;
            materialIconName: IndonesianProvince.materialIconName;
            description: IndonesianProvince.description;
            translatedDescription: IndonesianProvince.translatedDescription;
            language: IndonesianProvince.language;
            mm2Id: IndonesianProvince.mm2Id;
            mm2Value: IndonesianProvince.mm2Value;
            syncedWithMm2At: IndonesianProvince.syncedWithMm2At;
            mm2TextId: IndonesianProvince.mm2TextId;
            mm3TextId: IndonesianProvince.mm3TextId;
            childOptions: IndonesianProvince.childOptions;
            parentOption: IndonesianProvince.parentOption;
        };
    }
    export namespace IndonesianProvince {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'IndonesianProvince';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface IqlaaJordanianDistrict {
        kind: 'Object';
        name: 'IqlaaJordanianDistrict';
        fields: {
            __typename: IqlaaJordanianDistrict.__typename;
            id: IqlaaJordanianDistrict.id;
            adminNotes: IqlaaJordanianDistrict.adminNotes;
            events: IqlaaJordanianDistrict.events;
            metadata: IqlaaJordanianDistrict.metadata;
            createdAt: IqlaaJordanianDistrict.createdAt;
            createdBy: IqlaaJordanianDistrict.createdBy;
            updatedAt: IqlaaJordanianDistrict.updatedAt;
            updatedBy: IqlaaJordanianDistrict.updatedBy;
            deletedAt: IqlaaJordanianDistrict.deletedAt;
            deletedBy: IqlaaJordanianDistrict.deletedBy;
            textId: IqlaaJordanianDistrict.textId;
            parentTextId: IqlaaJordanianDistrict.parentTextId;
            isParent: IqlaaJordanianDistrict.isParent;
            optionType: IqlaaJordanianDistrict.optionType;
            value: IqlaaJordanianDistrict.value;
            translatedValue: IqlaaJordanianDistrict.translatedValue;
            supportedLanguages: IqlaaJordanianDistrict.supportedLanguages;
            materialIconName: IqlaaJordanianDistrict.materialIconName;
            description: IqlaaJordanianDistrict.description;
            translatedDescription: IqlaaJordanianDistrict.translatedDescription;
            language: IqlaaJordanianDistrict.language;
            mm2Id: IqlaaJordanianDistrict.mm2Id;
            mm2Value: IqlaaJordanianDistrict.mm2Value;
            syncedWithMm2At: IqlaaJordanianDistrict.syncedWithMm2At;
            mm2TextId: IqlaaJordanianDistrict.mm2TextId;
            mm3TextId: IqlaaJordanianDistrict.mm3TextId;
            childOptions: IqlaaJordanianDistrict.childOptions;
            parentOption: IqlaaJordanianDistrict.parentOption;
        };
    }
    export namespace IqlaaJordanianDistrict {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'IqlaaJordanianDistrict';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface IqlaaJordanianGovernorate {
        kind: 'Object';
        name: 'IqlaaJordanianGovernorate';
        fields: {
            __typename: IqlaaJordanianGovernorate.__typename;
            id: IqlaaJordanianGovernorate.id;
            adminNotes: IqlaaJordanianGovernorate.adminNotes;
            events: IqlaaJordanianGovernorate.events;
            metadata: IqlaaJordanianGovernorate.metadata;
            createdAt: IqlaaJordanianGovernorate.createdAt;
            createdBy: IqlaaJordanianGovernorate.createdBy;
            updatedAt: IqlaaJordanianGovernorate.updatedAt;
            updatedBy: IqlaaJordanianGovernorate.updatedBy;
            deletedAt: IqlaaJordanianGovernorate.deletedAt;
            deletedBy: IqlaaJordanianGovernorate.deletedBy;
            textId: IqlaaJordanianGovernorate.textId;
            parentTextId: IqlaaJordanianGovernorate.parentTextId;
            isParent: IqlaaJordanianGovernorate.isParent;
            optionType: IqlaaJordanianGovernorate.optionType;
            value: IqlaaJordanianGovernorate.value;
            translatedValue: IqlaaJordanianGovernorate.translatedValue;
            supportedLanguages: IqlaaJordanianGovernorate.supportedLanguages;
            materialIconName: IqlaaJordanianGovernorate.materialIconName;
            description: IqlaaJordanianGovernorate.description;
            translatedDescription: IqlaaJordanianGovernorate.translatedDescription;
            language: IqlaaJordanianGovernorate.language;
            mm2Id: IqlaaJordanianGovernorate.mm2Id;
            mm2Value: IqlaaJordanianGovernorate.mm2Value;
            syncedWithMm2At: IqlaaJordanianGovernorate.syncedWithMm2At;
            mm2TextId: IqlaaJordanianGovernorate.mm2TextId;
            mm3TextId: IqlaaJordanianGovernorate.mm3TextId;
            childOptions: IqlaaJordanianGovernorate.childOptions;
            parentOption: IqlaaJordanianGovernorate.parentOption;
        };
    }
    export namespace IqlaaJordanianGovernorate {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'IqlaaJordanianGovernorate';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface MastercardBank {
        kind: 'Object';
        name: 'MastercardBank';
        fields: {
            __typename: MastercardBank.__typename;
            id: MastercardBank.id;
            adminNotes: MastercardBank.adminNotes;
            events: MastercardBank.events;
            metadata: MastercardBank.metadata;
            createdAt: MastercardBank.createdAt;
            createdBy: MastercardBank.createdBy;
            updatedAt: MastercardBank.updatedAt;
            updatedBy: MastercardBank.updatedBy;
            deletedAt: MastercardBank.deletedAt;
            deletedBy: MastercardBank.deletedBy;
            textId: MastercardBank.textId;
            countryTextId: MastercardBank.countryTextId;
            name: MastercardBank.name;
            enDisplayName: MastercardBank.enDisplayName;
            esDisplayName: MastercardBank.esDisplayName;
            displayName: MastercardBank.displayName;
        };
    }
    export namespace MastercardBank {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MastercardBank';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface countryTextId {
            kind: 'OutputField';
            name: 'countryTextId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The name of the bank
         */
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * (<Country name in English>) <Bank name>
         */
        interface enDisplayName {
            kind: 'OutputField';
            name: 'enDisplayName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * (<Country name in Spanish>) <Bank name>
         */
        interface esDisplayName {
            kind: 'OutputField';
            name: 'esDisplayName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Not stored, just used for graphQL API
         */
        interface displayName {
            kind: 'OutputField';
            name: 'displayName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface Brand {
        kind: 'Object';
        name: 'Brand';
        fields: {
            __typename: Brand.__typename;
            id: Brand.id;
            adminNotes: Brand.adminNotes;
            events: Brand.events;
            metadata: Brand.metadata;
            createdAt: Brand.createdAt;
            createdBy: Brand.createdBy;
            updatedAt: Brand.updatedAt;
            updatedBy: Brand.updatedBy;
            deletedAt: Brand.deletedAt;
            deletedBy: Brand.deletedBy;
            name: Brand.name;
            importId: Brand.importId;
            imageSource: Brand.imageSource;
            slug: Brand.slug;
            url: Brand.url;
            balanceLookupUri: Brand.balanceLookupUri;
            listed: Brand.listed;
            logoImageSource: Brand.logoImageSource;
            description: Brand.description;
            alias1: Brand.alias1;
            alias2: Brand.alias2;
            alias3: Brand.alias3;
        };
    }
    export namespace Brand {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Brand';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface importId {
            kind: 'OutputField';
            name: 'importId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSource {
            kind: 'OutputField';
            name: 'imageSource';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slug {
            kind: 'OutputField';
            name: 'slug';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface url {
            kind: 'OutputField';
            name: 'url';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface balanceLookupUri {
            kind: 'OutputField';
            name: 'balanceLookupUri';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface listed {
            kind: 'OutputField';
            name: 'listed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface logoImageSource {
            kind: 'OutputField';
            name: 'logoImageSource';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface alias1 {
            kind: 'OutputField';
            name: 'alias1';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface alias2 {
            kind: 'OutputField';
            name: 'alias2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface alias3 {
            kind: 'OutputField';
            name: 'alias3';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface PurchaseOrderItem {
        kind: 'Object';
        name: 'PurchaseOrderItem';
        fields: {
            __typename: PurchaseOrderItem.__typename;
            id: PurchaseOrderItem.id;
            adminNotes: PurchaseOrderItem.adminNotes;
            events: PurchaseOrderItem.events;
            metadata: PurchaseOrderItem.metadata;
            createdAt: PurchaseOrderItem.createdAt;
            createdBy: PurchaseOrderItem.createdBy;
            updatedAt: PurchaseOrderItem.updatedAt;
            updatedBy: PurchaseOrderItem.updatedBy;
            deletedAt: PurchaseOrderItem.deletedAt;
            deletedBy: PurchaseOrderItem.deletedBy;
            purchaseOrderId: PurchaseOrderItem.purchaseOrderId;
            shoppingCartItemId: PurchaseOrderItem.shoppingCartItemId;
            productId: PurchaseOrderItem.productId;
            brandId: PurchaseOrderItem.brandId;
            quantity: PurchaseOrderItem.quantity;
            price: PurchaseOrderItem.price;
            totalPrice: PurchaseOrderItem.totalPrice;
        };
    }
    export namespace PurchaseOrderItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'PurchaseOrderItem';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface purchaseOrderId {
            kind: 'OutputField';
            name: 'purchaseOrderId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface shoppingCartItemId {
            kind: 'OutputField';
            name: 'shoppingCartItemId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface productId {
            kind: 'OutputField';
            name: 'productId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface brandId {
            kind: 'OutputField';
            name: 'brandId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface quantity {
            kind: 'OutputField';
            name: 'quantity';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface price {
            kind: 'OutputField';
            name: 'price';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'OutputField';
            name: 'totalPrice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface PurchaseOrder {
        kind: 'Object';
        name: 'PurchaseOrder';
        fields: {
            __typename: PurchaseOrder.__typename;
            id: PurchaseOrder.id;
            adminNotes: PurchaseOrder.adminNotes;
            events: PurchaseOrder.events;
            metadata: PurchaseOrder.metadata;
            createdAt: PurchaseOrder.createdAt;
            createdBy: PurchaseOrder.createdBy;
            updatedAt: PurchaseOrder.updatedAt;
            updatedBy: PurchaseOrder.updatedBy;
            deletedAt: PurchaseOrder.deletedAt;
            deletedBy: PurchaseOrder.deletedBy;
            userId: PurchaseOrder.userId;
            shoppingCartId: PurchaseOrder.shoppingCartId;
            sumItemPrice: PurchaseOrder.sumItemPrice;
            totalPrice: PurchaseOrder.totalPrice;
            vat: PurchaseOrder.vat;
            paidAt: PurchaseOrder.paidAt;
            canceledAt: PurchaseOrder.canceledAt;
            refundedAt: PurchaseOrder.refundedAt;
            items: PurchaseOrder.items;
        };
    }
    export namespace PurchaseOrder {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'PurchaseOrder';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface shoppingCartId {
            kind: 'OutputField';
            name: 'shoppingCartId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface sumItemPrice {
            kind: 'OutputField';
            name: 'sumItemPrice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'OutputField';
            name: 'totalPrice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface vat {
            kind: 'OutputField';
            name: 'vat';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface paidAt {
            kind: 'OutputField';
            name: 'paidAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface canceledAt {
            kind: 'OutputField';
            name: 'canceledAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface refundedAt {
            kind: 'OutputField';
            name: 'refundedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface items {
            kind: 'OutputField';
            name: 'items';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$PurchaseOrderItem;
        }
    }
    export interface ShoppingCartItem {
        kind: 'Object';
        name: 'ShoppingCartItem';
        fields: {
            __typename: ShoppingCartItem.__typename;
            id: ShoppingCartItem.id;
            adminNotes: ShoppingCartItem.adminNotes;
            events: ShoppingCartItem.events;
            metadata: ShoppingCartItem.metadata;
            createdAt: ShoppingCartItem.createdAt;
            createdBy: ShoppingCartItem.createdBy;
            updatedAt: ShoppingCartItem.updatedAt;
            updatedBy: ShoppingCartItem.updatedBy;
            deletedAt: ShoppingCartItem.deletedAt;
            deletedBy: ShoppingCartItem.deletedBy;
            shoppingCartId: ShoppingCartItem.shoppingCartId;
            productId: ShoppingCartItem.productId;
            quantity: ShoppingCartItem.quantity;
            price: ShoppingCartItem.price;
            totalPrice: ShoppingCartItem.totalPrice;
        };
    }
    export namespace ShoppingCartItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ShoppingCartItem';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface shoppingCartId {
            kind: 'OutputField';
            name: 'shoppingCartId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface productId {
            kind: 'OutputField';
            name: 'productId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface quantity {
            kind: 'OutputField';
            name: 'quantity';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface price {
            kind: 'OutputField';
            name: 'price';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'OutputField';
            name: 'totalPrice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface ShoppingCart {
        kind: 'Object';
        name: 'ShoppingCart';
        fields: {
            __typename: ShoppingCart.__typename;
            id: ShoppingCart.id;
            adminNotes: ShoppingCart.adminNotes;
            events: ShoppingCart.events;
            metadata: ShoppingCart.metadata;
            createdAt: ShoppingCart.createdAt;
            createdBy: ShoppingCart.createdBy;
            updatedAt: ShoppingCart.updatedAt;
            updatedBy: ShoppingCart.updatedBy;
            deletedAt: ShoppingCart.deletedAt;
            deletedBy: ShoppingCart.deletedBy;
            sumItemPrice: ShoppingCart.sumItemPrice;
            totalPrice: ShoppingCart.totalPrice;
            vat: ShoppingCart.vat;
            items: ShoppingCart.items;
        };
    }
    export namespace ShoppingCart {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ShoppingCart';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface sumItemPrice {
            kind: 'OutputField';
            name: 'sumItemPrice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'OutputField';
            name: 'totalPrice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface vat {
            kind: 'OutputField';
            name: 'vat';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface items {
            kind: 'OutputField';
            name: 'items';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ShoppingCartItem;
        }
    }
    export interface WalletItem {
        kind: 'Object';
        name: 'WalletItem';
        fields: {
            __typename: WalletItem.__typename;
            id: WalletItem.id;
            adminNotes: WalletItem.adminNotes;
            events: WalletItem.events;
            metadata: WalletItem.metadata;
            createdAt: WalletItem.createdAt;
            createdBy: WalletItem.createdBy;
            updatedAt: WalletItem.updatedAt;
            updatedBy: WalletItem.updatedBy;
            deletedAt: WalletItem.deletedAt;
            deletedBy: WalletItem.deletedBy;
            walletId: WalletItem.walletId;
            productId: WalletItem.productId;
            purchaseOrderItemId: WalletItem.purchaseOrderItemId;
            brandId: WalletItem.brandId;
            productType: WalletItem.productType;
            name: WalletItem.name;
            price: WalletItem.price;
            initialBalance: WalletItem.initialBalance;
            balance: WalletItem.balance;
            code: WalletItem.code;
            hasBarcode: WalletItem.hasBarcode;
            barcodeFormat: WalletItem.barcodeFormat;
            pin: WalletItem.pin;
            source: WalletItem.source;
            imageSourceFront: WalletItem.imageSourceFront;
            imageSourceBack: WalletItem.imageSourceBack;
            referenceUrl: WalletItem.referenceUrl;
            termsEn: WalletItem.termsEn;
            termsUrl: WalletItem.termsUrl;
            instructionsEn: WalletItem.instructionsEn;
            instructionsUrl: WalletItem.instructionsUrl;
            sortIndex: WalletItem.sortIndex;
            issuedAt: WalletItem.issuedAt;
            expiresAt: WalletItem.expiresAt;
            balanceUpdatedAt: WalletItem.balanceUpdatedAt;
            transferStartedAt: WalletItem.transferStartedAt;
            transferAcceptedAt: WalletItem.transferAcceptedAt;
            archivedAt: WalletItem.archivedAt;
        };
    }
    export namespace WalletItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'WalletItem';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface walletId {
            kind: 'OutputField';
            name: 'walletId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface productId {
            kind: 'OutputField';
            name: 'productId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface purchaseOrderItemId {
            kind: 'OutputField';
            name: 'purchaseOrderItemId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface brandId {
            kind: 'OutputField';
            name: 'brandId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface productType {
            kind: 'OutputField';
            name: 'productType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ProductType;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface price {
            kind: 'OutputField';
            name: 'price';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface initialBalance {
            kind: 'OutputField';
            name: 'initialBalance';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface balance {
            kind: 'OutputField';
            name: 'balance';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface code {
            kind: 'OutputField';
            name: 'code';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface hasBarcode {
            kind: 'OutputField';
            name: 'hasBarcode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface barcodeFormat {
            kind: 'OutputField';
            name: 'barcodeFormat';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BarcodeType;
        }
        interface pin {
            kind: 'OutputField';
            name: 'pin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface source {
            kind: 'OutputField';
            name: 'source';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItemSource;
        }
        interface imageSourceFront {
            kind: 'OutputField';
            name: 'imageSourceFront';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSourceBack {
            kind: 'OutputField';
            name: 'imageSourceBack';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface referenceUrl {
            kind: 'OutputField';
            name: 'referenceUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface termsEn {
            kind: 'OutputField';
            name: 'termsEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface termsUrl {
            kind: 'OutputField';
            name: 'termsUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsEn {
            kind: 'OutputField';
            name: 'instructionsEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsUrl {
            kind: 'OutputField';
            name: 'instructionsUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface sortIndex {
            kind: 'OutputField';
            name: 'sortIndex';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface issuedAt {
            kind: 'OutputField';
            name: 'issuedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface balanceUpdatedAt {
            kind: 'OutputField';
            name: 'balanceUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface transferStartedAt {
            kind: 'OutputField';
            name: 'transferStartedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface transferAcceptedAt {
            kind: 'OutputField';
            name: 'transferAcceptedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface WalletItemTransferRecipientInfo {
        kind: 'Object';
        name: 'WalletItemTransferRecipientInfo';
        fields: {
            __typename: WalletItemTransferRecipientInfo.__typename;
            walletItem: WalletItemTransferRecipientInfo.walletItem;
            walletItemTransfer: WalletItemTransferRecipientInfo.walletItemTransfer;
            brand: WalletItemTransferRecipientInfo.brand;
            product: WalletItemTransferRecipientInfo.product;
        };
    }
    export namespace WalletItemTransferRecipientInfo {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'WalletItemTransferRecipientInfo';
            };
        }
        interface walletItem {
            kind: 'OutputField';
            name: 'walletItem';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$WalletItem;
        }
        interface walletItemTransfer {
            kind: 'OutputField';
            name: 'walletItemTransfer';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$WalletItemTransfer;
        }
        interface brand {
            kind: 'OutputField';
            name: 'brand';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Brand;
        }
        interface product {
            kind: 'OutputField';
            name: 'product';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$GiftCardProduct;
        }
    }
    export interface WalletItemTransfer {
        kind: 'Object';
        name: 'WalletItemTransfer';
        fields: {
            __typename: WalletItemTransfer.__typename;
            id: WalletItemTransfer.id;
            adminNotes: WalletItemTransfer.adminNotes;
            events: WalletItemTransfer.events;
            metadata: WalletItemTransfer.metadata;
            createdAt: WalletItemTransfer.createdAt;
            createdBy: WalletItemTransfer.createdBy;
            updatedAt: WalletItemTransfer.updatedAt;
            updatedBy: WalletItemTransfer.updatedBy;
            deletedAt: WalletItemTransfer.deletedAt;
            deletedBy: WalletItemTransfer.deletedBy;
            walletItemId: WalletItemTransfer.walletItemId;
            notificationId: WalletItemTransfer.notificationId;
            recipientEmail: WalletItemTransfer.recipientEmail;
            recipientPhoneNumber: WalletItemTransfer.recipientPhoneNumber;
            recipientFullName: WalletItemTransfer.recipientFullName;
            subjectText: WalletItemTransfer.subjectText;
            messageText: WalletItemTransfer.messageText;
            transferSlug: WalletItemTransfer.transferSlug;
            sendMethod: WalletItemTransfer.sendMethod;
            sendPlatform: WalletItemTransfer.sendPlatform;
            showOnline: WalletItemTransfer.showOnline;
            sentAt: WalletItemTransfer.sentAt;
            acceptedAt: WalletItemTransfer.acceptedAt;
            declinedAt: WalletItemTransfer.declinedAt;
            canceledAt: WalletItemTransfer.canceledAt;
            archivedAt: WalletItemTransfer.archivedAt;
        };
    }
    export namespace WalletItemTransfer {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'WalletItemTransfer';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface walletItemId {
            kind: 'OutputField';
            name: 'walletItemId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface notificationId {
            kind: 'OutputField';
            name: 'notificationId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientEmail {
            kind: 'OutputField';
            name: 'recipientEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientPhoneNumber {
            kind: 'OutputField';
            name: 'recipientPhoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientFullName {
            kind: 'OutputField';
            name: 'recipientFullName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface subjectText {
            kind: 'OutputField';
            name: 'subjectText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface transferSlug {
            kind: 'OutputField';
            name: 'transferSlug';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * email | phoneNumber | link
         */
        interface sendMethod {
            kind: 'OutputField';
            name: 'sendMethod';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * i.e. WhatsApp, Signal, ...
         */
        interface sendPlatform {
            kind: 'OutputField';
            name: 'sendPlatform';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * set to false, if the recipient wants to remove the product from the link
         */
        interface showOnline {
            kind: 'OutputField';
            name: 'showOnline';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Date this transfer was sent
         */
        interface sentAt {
            kind: 'OutputField';
            name: 'sentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The recipient accepted this transfer
         */
        interface acceptedAt {
            kind: 'OutputField';
            name: 'acceptedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The recipient declined this transfer
         */
        interface declinedAt {
            kind: 'OutputField';
            name: 'declinedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The sender canceled this transfer
         */
        interface canceledAt {
            kind: 'OutputField';
            name: 'canceledAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The sender archived this transfer
         */
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface GiftCardProduct {
        kind: 'Object';
        name: 'GiftCardProduct';
        fields: {
            __typename: GiftCardProduct.__typename;
            id: GiftCardProduct.id;
            adminNotes: GiftCardProduct.adminNotes;
            events: GiftCardProduct.events;
            metadata: GiftCardProduct.metadata;
            createdAt: GiftCardProduct.createdAt;
            createdBy: GiftCardProduct.createdBy;
            updatedAt: GiftCardProduct.updatedAt;
            updatedBy: GiftCardProduct.updatedBy;
            deletedAt: GiftCardProduct.deletedAt;
            deletedBy: GiftCardProduct.deletedBy;
            importId: GiftCardProduct.importId;
            brandId: GiftCardProduct.brandId;
            brandImportId: GiftCardProduct.brandImportId;
            name: GiftCardProduct.name;
            description: GiftCardProduct.description;
            productType: GiftCardProduct.productType;
            categories: GiftCardProduct.categories;
            slug: GiftCardProduct.slug;
            url: GiftCardProduct.url;
            imageSourceFront: GiftCardProduct.imageSourceFront;
            imageSourceBack: GiftCardProduct.imageSourceBack;
            hasBarcode: GiftCardProduct.hasBarcode;
            barcodeFormat: GiftCardProduct.barcodeFormat;
            genericGiftCardId: GiftCardProduct.genericGiftCardId;
            isGeneric: GiftCardProduct.isGeneric;
            hasPin: GiftCardProduct.hasPin;
            termsEn: GiftCardProduct.termsEn;
            termsUrl: GiftCardProduct.termsUrl;
            instructionsEn: GiftCardProduct.instructionsEn;
            instructionsUrl: GiftCardProduct.instructionsUrl;
            denominations: GiftCardProduct.denominations;
        };
    }
    export namespace GiftCardProduct {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GiftCardProduct';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface importId {
            kind: 'OutputField';
            name: 'importId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface brandId {
            kind: 'OutputField';
            name: 'brandId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface brandImportId {
            kind: 'OutputField';
            name: 'brandImportId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface productType {
            kind: 'OutputField';
            name: 'productType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ProductType;
        }
        interface categories {
            kind: 'OutputField';
            name: 'categories';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface slug {
            kind: 'OutputField';
            name: 'slug';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface url {
            kind: 'OutputField';
            name: 'url';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSourceFront {
            kind: 'OutputField';
            name: 'imageSourceFront';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSourceBack {
            kind: 'OutputField';
            name: 'imageSourceBack';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface hasBarcode {
            kind: 'OutputField';
            name: 'hasBarcode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface barcodeFormat {
            kind: 'OutputField';
            name: 'barcodeFormat';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BarcodeType;
        }
        interface genericGiftCardId {
            kind: 'OutputField';
            name: 'genericGiftCardId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface isGeneric {
            kind: 'OutputField';
            name: 'isGeneric';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface hasPin {
            kind: 'OutputField';
            name: 'hasPin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface termsEn {
            kind: 'OutputField';
            name: 'termsEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface termsUrl {
            kind: 'OutputField';
            name: 'termsUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsEn {
            kind: 'OutputField';
            name: 'instructionsEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsUrl {
            kind: 'OutputField';
            name: 'instructionsUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface denominations {
            kind: 'OutputField';
            name: 'denominations';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GiftCardDenomination;
        }
    }
    export interface GiftCardDenomination {
        kind: 'Object';
        name: 'GiftCardDenomination';
        fields: {
            __typename: GiftCardDenomination.__typename;
            amount: GiftCardDenomination.amount;
            enabled: GiftCardDenomination.enabled;
        };
    }
    export namespace GiftCardDenomination {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'GiftCardDenomination';
            };
        }
        interface amount {
            kind: 'OutputField';
            name: 'amount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface enabled {
            kind: 'OutputField';
            name: 'enabled';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface Wallet {
        kind: 'Object';
        name: 'Wallet';
        fields: {
            __typename: Wallet.__typename;
            id: Wallet.id;
            adminNotes: Wallet.adminNotes;
            events: Wallet.events;
            metadata: Wallet.metadata;
            createdAt: Wallet.createdAt;
            createdBy: Wallet.createdBy;
            updatedAt: Wallet.updatedAt;
            updatedBy: Wallet.updatedBy;
            deletedAt: Wallet.deletedAt;
            deletedBy: Wallet.deletedBy;
        };
    }
    export namespace Wallet {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Wallet';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface WalletServiceRecord {
        kind: 'Object';
        name: 'WalletServiceRecord';
        fields: {
            __typename: WalletServiceRecord.__typename;
            id: WalletServiceRecord.id;
            adminNotes: WalletServiceRecord.adminNotes;
            events: WalletServiceRecord.events;
            metadata: WalletServiceRecord.metadata;
            createdAt: WalletServiceRecord.createdAt;
            createdBy: WalletServiceRecord.createdBy;
            updatedAt: WalletServiceRecord.updatedAt;
            updatedBy: WalletServiceRecord.updatedBy;
            deletedAt: WalletServiceRecord.deletedAt;
            deletedBy: WalletServiceRecord.deletedBy;
            serviceName: WalletServiceRecord.serviceName;
        };
    }
    export namespace WalletServiceRecord {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'WalletServiceRecord';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface serviceName {
            kind: 'OutputField';
            name: 'serviceName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceName;
        }
    }
    export interface MarketplaceServiceRecord {
        kind: 'Object';
        name: 'MarketplaceServiceRecord';
        fields: {
            __typename: MarketplaceServiceRecord.__typename;
            id: MarketplaceServiceRecord.id;
            adminNotes: MarketplaceServiceRecord.adminNotes;
            events: MarketplaceServiceRecord.events;
            metadata: MarketplaceServiceRecord.metadata;
            createdAt: MarketplaceServiceRecord.createdAt;
            createdBy: MarketplaceServiceRecord.createdBy;
            updatedAt: MarketplaceServiceRecord.updatedAt;
            updatedBy: MarketplaceServiceRecord.updatedBy;
            deletedAt: MarketplaceServiceRecord.deletedAt;
            deletedBy: MarketplaceServiceRecord.deletedBy;
            serviceName: MarketplaceServiceRecord.serviceName;
        };
    }
    export namespace MarketplaceServiceRecord {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MarketplaceServiceRecord';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface serviceName {
            kind: 'OutputField';
            name: 'serviceName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceName;
        }
    }
    export interface ProductCategory {
        kind: 'Object';
        name: 'ProductCategory';
        fields: {
            __typename: ProductCategory.__typename;
            id: ProductCategory.id;
            adminNotes: ProductCategory.adminNotes;
            events: ProductCategory.events;
            metadata: ProductCategory.metadata;
            createdAt: ProductCategory.createdAt;
            createdBy: ProductCategory.createdBy;
            updatedAt: ProductCategory.updatedAt;
            updatedBy: ProductCategory.updatedBy;
            deletedAt: ProductCategory.deletedAt;
            deletedBy: ProductCategory.deletedBy;
            importId: ProductCategory.importId;
            name: ProductCategory.name;
            labelEn: ProductCategory.labelEn;
            sortIndex: ProductCategory.sortIndex;
        };
    }
    export namespace ProductCategory {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ProductCategory';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface importId {
            kind: 'OutputField';
            name: 'importId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface labelEn {
            kind: 'OutputField';
            name: 'labelEn';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface sortIndex {
            kind: 'OutputField';
            name: 'sortIndex';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface UserSearch {
        kind: 'Object';
        name: 'UserSearch';
        fields: {
            __typename: UserSearch.__typename;
            id: UserSearch.id;
            adminNotes: UserSearch.adminNotes;
            events: UserSearch.events;
            metadata: UserSearch.metadata;
            createdAt: UserSearch.createdAt;
            createdBy: UserSearch.createdBy;
            updatedAt: UserSearch.updatedAt;
            updatedBy: UserSearch.updatedBy;
            deletedAt: UserSearch.deletedAt;
            deletedBy: UserSearch.deletedBy;
            userId: UserSearch.userId;
            matchingEngineId: UserSearch.matchingEngineId;
            userSearchType: UserSearch.userSearchType;
            name: UserSearch.name;
            filter: UserSearch.filter;
            excludeUserIds: UserSearch.excludeUserIds;
            maxResultCount: UserSearch.maxResultCount;
            subscription: UserSearch.subscription;
            expiresAt: UserSearch.expiresAt;
            resultExpiresAt: UserSearch.resultExpiresAt;
            runInfos: UserSearch.runInfos;
            topFoundUsers: UserSearch.topFoundUsers;
        };
    }
    export namespace UserSearch {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserSearch';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * The ID of the user that is searching and owns this object
         */
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface matchingEngineId {
            kind: 'OutputField';
            name: 'matchingEngineId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userSearchType {
            kind: 'OutputField';
            name: 'userSearchType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserSearchType;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface filter {
            kind: 'OutputField';
            name: 'filter';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchFilter;
        }
        /**
         * A list of user IDs of users that should not be included into the search results, i.e. blocked users.
         */
        interface excludeUserIds {
            kind: 'OutputField';
            name: 'excludeUserIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface maxResultCount {
            kind: 'OutputField';
            name: 'maxResultCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface subscription {
            kind: 'OutputField';
            name: 'subscription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchSubscriptionType;
        }
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface resultExpiresAt {
            kind: 'OutputField';
            name: 'resultExpiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface runInfos {
            kind: 'OutputField';
            name: 'runInfos';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserSearchRunInfo;
        }
        interface topFoundUsers {
            kind: 'OutputField';
            name: 'topFoundUsers';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserListItem;
        }
    }
    export interface UserSearchFilter {
        kind: 'Object';
        name: 'UserSearchFilter';
        fields: {
            __typename: UserSearchFilter.__typename;
            searchText: UserSearchFilter.searchText;
            seeksHelp: UserSearchFilter.seeksHelp;
            offersHelp: UserSearchFilter.offersHelp;
            languagesTextIds: UserSearchFilter.languagesTextIds;
            expertisesTextIds: UserSearchFilter.expertisesTextIds;
            industriesTextIds: UserSearchFilter.industriesTextIds;
            countryTextIds: UserSearchFilter.countryTextIds;
            companyStagesTextIds: UserSearchFilter.companyStagesTextIds;
            latestActivityAfter: UserSearchFilter.latestActivityAfter;
        };
    }
    export namespace UserSearchFilter {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserSearchFilter';
            };
        }
        interface searchText {
            kind: 'OutputField';
            name: 'searchText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface seeksHelp {
            kind: 'OutputField';
            name: 'seeksHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchFieldOption;
        }
        interface offersHelp {
            kind: 'OutputField';
            name: 'offersHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchFieldOption;
        }
        interface languagesTextIds {
            kind: 'OutputField';
            name: 'languagesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface expertisesTextIds {
            kind: 'OutputField';
            name: 'expertisesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface industriesTextIds {
            kind: 'OutputField';
            name: 'industriesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface countryTextIds {
            kind: 'OutputField';
            name: 'countryTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface companyStagesTextIds {
            kind: 'OutputField';
            name: 'companyStagesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface latestActivityAfter {
            kind: 'OutputField';
            name: 'latestActivityAfter';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserSearchRunInfo {
        kind: 'Object';
        name: 'UserSearchRunInfo';
        fields: {
            __typename: UserSearchRunInfo.__typename;
            topUserIds: UserSearchRunInfo.topUserIds;
            userCount: UserSearchRunInfo.userCount;
            matchCount: UserSearchRunInfo.matchCount;
            batchSize: UserSearchRunInfo.batchSize;
            batchCount: UserSearchRunInfo.batchCount;
            startedAt: UserSearchRunInfo.startedAt;
            finishedAt: UserSearchRunInfo.finishedAt;
            durationInSecs: UserSearchRunInfo.durationInSecs;
            durationHuman: UserSearchRunInfo.durationHuman;
            totalDurationSearchInDb: UserSearchRunInfo.totalDurationSearchInDb;
            totalDurationReadFromDb: UserSearchRunInfo.totalDurationReadFromDb;
            totalDurationWriteToDb: UserSearchRunInfo.totalDurationWriteToDb;
            totalDurationMatching: UserSearchRunInfo.totalDurationMatching;
        };
    }
    export namespace UserSearchRunInfo {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserSearchRunInfo';
            };
        }
        interface topUserIds {
            kind: 'OutputField';
            name: 'topUserIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface userCount {
            kind: 'OutputField';
            name: 'userCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface matchCount {
            kind: 'OutputField';
            name: 'matchCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface batchSize {
            kind: 'OutputField';
            name: 'batchSize';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface batchCount {
            kind: 'OutputField';
            name: 'batchCount';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface startedAt {
            kind: 'OutputField';
            name: 'startedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface finishedAt {
            kind: 'OutputField';
            name: 'finishedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface durationInSecs {
            kind: 'OutputField';
            name: 'durationInSecs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface durationHuman {
            kind: 'OutputField';
            name: 'durationHuman';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface totalDurationSearchInDb {
            kind: 'OutputField';
            name: 'totalDurationSearchInDb';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalDurationReadFromDb {
            kind: 'OutputField';
            name: 'totalDurationReadFromDb';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalDurationWriteToDb {
            kind: 'OutputField';
            name: 'totalDurationWriteToDb';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalDurationMatching {
            kind: 'OutputField';
            name: 'totalDurationMatching';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface UserWithScore {
        kind: 'Object';
        name: 'UserWithScore';
        fields: {
            __typename: UserWithScore.__typename;
            id: UserWithScore.id;
            createdAt: UserWithScore.createdAt;
            updatedAt: UserWithScore.updatedAt;
            deletedAt: UserWithScore.deletedAt;
            userHandle: UserWithScore.userHandle;
            firstName: UserWithScore.firstName;
            lastName: UserWithScore.lastName;
            avatarUrl: UserWithScore.avatarUrl;
            genderTextId: UserWithScore.genderTextId;
            websites: UserWithScore.websites;
            preferredLanguageTextId: UserWithScore.preferredLanguageTextId;
            spokenLanguagesTextIds: UserWithScore.spokenLanguagesTextIds;
            countryOfResidenceTextId: UserWithScore.countryOfResidenceTextId;
            regionOfResidence: UserWithScore.regionOfResidence;
            cityOfResidence: UserWithScore.cityOfResidence;
            timezone: UserWithScore.timezone;
            roles: UserWithScore.roles;
            discoverable: UserWithScore.discoverable;
            trustLevel: UserWithScore.trustLevel;
            userBlocks: UserWithScore.userBlocks;
            latestActivityAt: UserWithScore.latestActivityAt;
            inactivatedAt: UserWithScore.inactivatedAt;
            suspendedAt: UserWithScore.suspendedAt;
            seeksHelp: UserWithScore.seeksHelp;
            offersHelp: UserWithScore.offersHelp;
            yearsManagementExperience: UserWithScore.yearsManagementExperience;
            yearsOwnershipExperience: UserWithScore.yearsOwnershipExperience;
            academicExperiences: UserWithScore.academicExperiences;
            businessExperiences: UserWithScore.businessExperiences;
            isOnVacation: UserWithScore.isOnVacation;
            mentor: UserWithScore.mentor;
            mentee: UserWithScore.mentee;
            groupMemberships: UserWithScore.groupMemberships;
            companies: UserWithScore.companies;
            countryOfOrigin: UserWithScore.countryOfOrigin;
            countryOfResidence: UserWithScore.countryOfResidence;
            educationLevel: UserWithScore.educationLevel;
            endorsements: UserWithScore.endorsements;
            groups: UserWithScore.groups;
            profileCompletionPercentage: UserWithScore.profileCompletionPercentage;
            profileRole: UserWithScore.profileRole;
            pronouns: UserWithScore.pronouns;
            pronounsDisplay: UserWithScore.pronounsDisplay;
            score: UserWithScore.score;
        };
    }
    export namespace UserWithScore {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserWithScore';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'OutputField';
            name: 'avatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface genderTextId {
            kind: 'OutputField';
            name: 'genderTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'OutputField';
            name: 'websites';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValue;
        }
        interface preferredLanguageTextId {
            kind: 'OutputField';
            name: 'preferredLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface spokenLanguagesTextIds {
            kind: 'OutputField';
            name: 'spokenLanguagesTextIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfResidenceTextId {
            kind: 'OutputField';
            name: 'countryOfResidenceTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfResidence {
            kind: 'OutputField';
            name: 'regionOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cityOfResidence {
            kind: 'OutputField';
            name: 'cityOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'OutputField';
            name: 'timezone';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        /**
         * If discoverable is not true, the user will not be included in search results or recommended to other users. The system will set discoverable to null for various reasons, i.e. for a bad actor. The user can set it to false intentionally.
         */
        interface discoverable {
            kind: 'OutputField';
            name: 'discoverable';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface trustLevel {
            kind: 'OutputField';
            name: 'trustLevel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface userBlocks {
            kind: 'OutputField';
            name: 'userBlocks';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserBlock;
        }
        interface latestActivityAt {
            kind: 'OutputField';
            name: 'latestActivityAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedAt {
            kind: 'OutputField';
            name: 'inactivatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface seeksHelp {
            kind: 'OutputField';
            name: 'seeksHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'OutputField';
            name: 'offersHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface yearsManagementExperience {
            kind: 'OutputField';
            name: 'yearsManagementExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface yearsOwnershipExperience {
            kind: 'OutputField';
            name: 'yearsOwnershipExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface academicExperiences {
            kind: 'OutputField';
            name: 'academicExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AcademicExperience;
        }
        interface businessExperiences {
            kind: 'OutputField';
            name: 'businessExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BusinessExperience;
        }
        interface isOnVacation {
            kind: 'OutputField';
            name: 'isOnVacation';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is a copy of the mentor group membership.
         */
        interface mentor {
            kind: 'OutputField';
            name: 'mentor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MentorsGroupMembership;
        }
        /**
         * This attribute is a copy of the mentee group membership.
         */
        interface mentee {
            kind: 'OutputField';
            name: 'mentee';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MenteesGroupMembership;
        }
        interface groupMemberships {
            kind: 'OutputField';
            name: 'groupMemberships';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        interface companies {
            kind: 'OutputField';
            name: 'companies';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Company;
        }
        interface countryOfOrigin {
            kind: 'OutputField';
            name: 'countryOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface countryOfResidence {
            kind: 'OutputField';
            name: 'countryOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface educationLevel {
            kind: 'OutputField';
            name: 'educationLevel';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$EducationLevel;
        }
        interface endorsements {
            kind: 'OutputField';
            name: 'endorsements';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$EndorsementWithTypes;
        }
        interface groups {
            kind: 'OutputField';
            name: 'groups';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Group;
        }
        interface profileCompletionPercentage {
            kind: 'OutputField';
            name: 'profileCompletionPercentage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface profileRole {
            kind: 'OutputField';
            name: 'profileRole';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface pronouns {
            kind: 'OutputField';
            name: 'pronouns';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Pronoun;
        }
        interface pronounsDisplay {
            kind: 'OutputField';
            name: 'pronounsDisplay';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The score value that the matching engine assigned to this user.
         */
        interface score {
            kind: 'OutputField';
            name: 'score';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Float;
        }
    }
    export interface ServiceRequest {
        kind: 'Object';
        name: 'ServiceRequest';
        fields: {
            __typename: ServiceRequest.__typename;
            id: ServiceRequest.id;
            adminNotes: ServiceRequest.adminNotes;
            events: ServiceRequest.events;
            metadata: ServiceRequest.metadata;
            createdAt: ServiceRequest.createdAt;
            createdBy: ServiceRequest.createdBy;
            updatedAt: ServiceRequest.updatedAt;
            updatedBy: ServiceRequest.updatedBy;
            deletedAt: ServiceRequest.deletedAt;
            deletedBy: ServiceRequest.deletedBy;
            serviceRequestType: ServiceRequest.serviceRequestType;
            userRoles: ServiceRequest.userRoles;
            objectIds: ServiceRequest.objectIds;
            modelTypes: ServiceRequest.modelTypes;
            result: ServiceRequest.result;
            messageIds: ServiceRequest.messageIds;
            message: ServiceRequest.message;
            errorCode: ServiceRequest.errorCode;
            deviceUuid: ServiceRequest.deviceUuid;
            source: ServiceRequest.source;
            finishedAt: ServiceRequest.finishedAt;
            expiresAt: ServiceRequest.expiresAt;
            userId: ServiceRequest.userId;
        };
    }
    export namespace ServiceRequest {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ServiceRequest';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface serviceRequestType {
            kind: 'OutputField';
            name: 'serviceRequestType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequestType;
        }
        interface userRoles {
            kind: 'OutputField';
            name: 'userRoles';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface objectIds {
            kind: 'OutputField';
            name: 'objectIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface modelTypes {
            kind: 'OutputField';
            name: 'modelTypes';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelType;
        }
        interface result {
            kind: 'OutputField';
            name: 'result';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequestResult;
        }
        interface messageIds {
            kind: 'OutputField';
            name: 'messageIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ServiceRequestMessageId;
        }
        interface message {
            kind: 'OutputField';
            name: 'message';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface errorCode {
            kind: 'OutputField';
            name: 'errorCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ErrorCode;
        }
        interface deviceUuid {
            kind: 'OutputField';
            name: 'deviceUuid';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface source {
            kind: 'OutputField';
            name: 'source';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ServiceRequestSource;
        }
        interface finishedAt {
            kind: 'OutputField';
            name: 'finishedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * @deprecated user createdBy
         */
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ContactListItem {
        kind: 'Object';
        name: 'ContactListItem';
        fields: {
            __typename: ContactListItem.__typename;
            id: ContactListItem.id;
            adminNotes: ContactListItem.adminNotes;
            events: ContactListItem.events;
            metadata: ContactListItem.metadata;
            createdAt: ContactListItem.createdAt;
            createdBy: ContactListItem.createdBy;
            updatedAt: ContactListItem.updatedAt;
            updatedBy: ContactListItem.updatedBy;
            deletedAt: ContactListItem.deletedAt;
            deletedBy: ContactListItem.deletedBy;
            userId: ContactListItem.userId;
            channelId: ContactListItem.channelId;
            nickname: ContactListItem.nickname;
            typeTextIds: ContactListItem.typeTextIds;
            favorite: ContactListItem.favorite;
            notes: ContactListItem.notes;
            archivedAt: ContactListItem.archivedAt;
        };
    }
    export namespace ContactListItem {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ContactListItem';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ContactMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface nickname {
            kind: 'OutputField';
            name: 'nickname';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface typeTextIds {
            kind: 'OutputField';
            name: 'typeTextIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface favorite {
            kind: 'OutputField';
            name: 'favorite';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface notes {
            kind: 'OutputField';
            name: 'notes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface archivedAt {
            kind: 'OutputField';
            name: 'archivedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface SidMultiStepAction {
        kind: 'Object';
        name: 'SidMultiStepAction';
        fields: {
            __typename: SidMultiStepAction.__typename;
            id: SidMultiStepAction.id;
            adminNotes: SidMultiStepAction.adminNotes;
            events: SidMultiStepAction.events;
            metadata: SidMultiStepAction.metadata;
            createdAt: SidMultiStepAction.createdAt;
            createdBy: SidMultiStepAction.createdBy;
            updatedAt: SidMultiStepAction.updatedAt;
            updatedBy: SidMultiStepAction.updatedBy;
            deletedAt: SidMultiStepAction.deletedAt;
            deletedBy: SidMultiStepAction.deletedBy;
            userId: SidMultiStepAction.userId;
            userIdent: SidMultiStepAction.userIdent;
            userHandle: SidMultiStepAction.userHandle;
            email: SidMultiStepAction.email;
            phoneNumber: SidMultiStepAction.phoneNumber;
            deviceUuid: SidMultiStepAction.deviceUuid;
            actionType: SidMultiStepAction.actionType;
            actionStatus: SidMultiStepAction.actionStatus;
            notificationMethod: SidMultiStepAction.notificationMethod;
            result: SidMultiStepAction.result;
            confirmToken: SidMultiStepAction.confirmToken;
            attemptCount: SidMultiStepAction.attemptCount;
            notificationSentAt: SidMultiStepAction.notificationSentAt;
            notificationResult: SidMultiStepAction.notificationResult;
            notificationId: SidMultiStepAction.notificationId;
            textData: SidMultiStepAction.textData;
            report: SidMultiStepAction.report;
            emailPassed: SidMultiStepAction.emailPassed;
            emailUpdatedAt: SidMultiStepAction.emailUpdatedAt;
            emailVerifiedAt: SidMultiStepAction.emailVerifiedAt;
            errors: SidMultiStepAction.errors;
            password: SidMultiStepAction.password;
            passwordPassed: SidMultiStepAction.passwordPassed;
            passwordResettedAt: SidMultiStepAction.passwordResettedAt;
            passwordUpdatedAt: SidMultiStepAction.passwordUpdatedAt;
            phoneNumberPassed: SidMultiStepAction.phoneNumberPassed;
            phoneNumberUpdatedAt: SidMultiStepAction.phoneNumberUpdatedAt;
            phoneNumberVerifiedAt: SidMultiStepAction.phoneNumberVerifiedAt;
            signedInAt: SidMultiStepAction.signedInAt;
            tfaBackupCodes: SidMultiStepAction.tfaBackupCodes;
            expiresAt: SidMultiStepAction.expiresAt;
        };
    }
    export namespace SidMultiStepAction {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'SidMultiStepAction';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIdent {
            kind: 'OutputField';
            name: 'userIdent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface email {
            kind: 'OutputField';
            name: 'email';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'OutputField';
            name: 'phoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface deviceUuid {
            kind: 'OutputField';
            name: 'deviceUuid';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface actionType {
            kind: 'OutputField';
            name: 'actionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MultiStepActionType;
        }
        interface actionStatus {
            kind: 'OutputField';
            name: 'actionStatus';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MultiStepActionStatus;
        }
        interface notificationMethod {
            kind: 'OutputField';
            name: 'notificationMethod';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$NotificationMethod;
        }
        interface result {
            kind: 'OutputField';
            name: 'result';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MultiStepActionResult;
        }
        interface confirmToken {
            kind: 'OutputField';
            name: 'confirmToken';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface attemptCount {
            kind: 'OutputField';
            name: 'attemptCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface notificationSentAt {
            kind: 'OutputField';
            name: 'notificationSentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface notificationResult {
            kind: 'OutputField';
            name: 'notificationResult';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionSendNotificationResult;
        }
        interface notificationId {
            kind: 'OutputField';
            name: 'notificationId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface textData {
            kind: 'OutputField';
            name: 'textData';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface report {
            kind: 'OutputField';
            name: 'report';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailPassed {
            kind: 'OutputField';
            name: 'emailPassed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface emailUpdatedAt {
            kind: 'OutputField';
            name: 'emailUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface emailVerifiedAt {
            kind: 'OutputField';
            name: 'emailVerifiedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface errors {
            kind: 'OutputField';
            name: 'errors';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MultiStepActionError;
        }
        interface password {
            kind: 'OutputField';
            name: 'password';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface passwordPassed {
            kind: 'OutputField';
            name: 'passwordPassed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface passwordResettedAt {
            kind: 'OutputField';
            name: 'passwordResettedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface passwordUpdatedAt {
            kind: 'OutputField';
            name: 'passwordUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface phoneNumberPassed {
            kind: 'OutputField';
            name: 'phoneNumberPassed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface phoneNumberUpdatedAt {
            kind: 'OutputField';
            name: 'phoneNumberUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface phoneNumberVerifiedAt {
            kind: 'OutputField';
            name: 'phoneNumberVerifiedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedInAt {
            kind: 'OutputField';
            name: 'signedInAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface tfaBackupCodes {
            kind: 'OutputField';
            name: 'tfaBackupCodes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface MultiStepActionError {
        kind: 'Object';
        name: 'MultiStepActionError';
        fields: {
            __typename: MultiStepActionError.__typename;
            id: MultiStepActionError.id;
            adminNotes: MultiStepActionError.adminNotes;
            events: MultiStepActionError.events;
            metadata: MultiStepActionError.metadata;
            createdAt: MultiStepActionError.createdAt;
            createdBy: MultiStepActionError.createdBy;
            updatedAt: MultiStepActionError.updatedAt;
            updatedBy: MultiStepActionError.updatedBy;
            deletedAt: MultiStepActionError.deletedAt;
            deletedBy: MultiStepActionError.deletedBy;
            key: MultiStepActionError.key;
            messageId: MultiStepActionError.messageId;
            message: MultiStepActionError.message;
        };
    }
    export namespace MultiStepActionError {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MultiStepActionError';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface key {
            kind: 'OutputField';
            name: 'key';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageId {
            kind: 'OutputField';
            name: 'messageId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface message {
            kind: 'OutputField';
            name: 'message';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface SidMultiStepActionProgress {
        kind: 'Object';
        name: 'SidMultiStepActionProgress';
        fields: {
            __typename: SidMultiStepActionProgress.__typename;
            actionId: SidMultiStepActionProgress.actionId;
            userId: SidMultiStepActionProgress.userId;
            actionType: SidMultiStepActionProgress.actionType;
            actionStatus: SidMultiStepActionProgress.actionStatus;
            notificationMethod: SidMultiStepActionProgress.notificationMethod;
            result: SidMultiStepActionProgress.result;
            attemptCount: SidMultiStepActionProgress.attemptCount;
            notificationSentAt: SidMultiStepActionProgress.notificationSentAt;
            notificationResult: SidMultiStepActionProgress.notificationResult;
            notificationId: SidMultiStepActionProgress.notificationId;
            textData: SidMultiStepActionProgress.textData;
            report: SidMultiStepActionProgress.report;
            emailPassed: SidMultiStepActionProgress.emailPassed;
            emailUpdatedAt: SidMultiStepActionProgress.emailUpdatedAt;
            emailVerifiedAt: SidMultiStepActionProgress.emailVerifiedAt;
            errors: SidMultiStepActionProgress.errors;
            authToken: SidMultiStepActionProgress.authToken;
            authTokenExpiresAt: SidMultiStepActionProgress.authTokenExpiresAt;
            passwordPassed: SidMultiStepActionProgress.passwordPassed;
            passwordResettedAt: SidMultiStepActionProgress.passwordResettedAt;
            passwordUpdatedAt: SidMultiStepActionProgress.passwordUpdatedAt;
            phoneNumberPassed: SidMultiStepActionProgress.phoneNumberPassed;
            phoneNumberUpdatedAt: SidMultiStepActionProgress.phoneNumberUpdatedAt;
            phoneNumberVerifiedAt: SidMultiStepActionProgress.phoneNumberVerifiedAt;
            signedInAt: SidMultiStepActionProgress.signedInAt;
            expiresAt: SidMultiStepActionProgress.expiresAt;
            events: SidMultiStepActionProgress.events;
            metadata: SidMultiStepActionProgress.metadata;
            createdAt: SidMultiStepActionProgress.createdAt;
            createdBy: SidMultiStepActionProgress.createdBy;
            updatedAt: SidMultiStepActionProgress.updatedAt;
            updatedBy: SidMultiStepActionProgress.updatedBy;
            deletedAt: SidMultiStepActionProgress.deletedAt;
            deletedBy: SidMultiStepActionProgress.deletedBy;
        };
    }
    export namespace SidMultiStepActionProgress {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'SidMultiStepActionProgress';
            };
        }
        interface actionId {
            kind: 'OutputField';
            name: 'actionId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface actionType {
            kind: 'OutputField';
            name: 'actionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MultiStepActionType;
        }
        interface actionStatus {
            kind: 'OutputField';
            name: 'actionStatus';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionStatus;
        }
        interface notificationMethod {
            kind: 'OutputField';
            name: 'notificationMethod';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationMethod;
        }
        interface result {
            kind: 'OutputField';
            name: 'result';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$MultiStepActionResult;
        }
        interface attemptCount {
            kind: 'OutputField';
            name: 'attemptCount';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface notificationSentAt {
            kind: 'OutputField';
            name: 'notificationSentAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface notificationResult {
            kind: 'OutputField';
            name: 'notificationResult';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionSendNotificationResult;
        }
        interface notificationId {
            kind: 'OutputField';
            name: 'notificationId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface textData {
            kind: 'OutputField';
            name: 'textData';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface report {
            kind: 'OutputField';
            name: 'report';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailPassed {
            kind: 'OutputField';
            name: 'emailPassed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface emailUpdatedAt {
            kind: 'OutputField';
            name: 'emailUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface emailVerifiedAt {
            kind: 'OutputField';
            name: 'emailVerifiedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface errors {
            kind: 'OutputField';
            name: 'errors';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MultiStepActionError;
        }
        interface authToken {
            kind: 'OutputField';
            name: 'authToken';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface authTokenExpiresAt {
            kind: 'OutputField';
            name: 'authTokenExpiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface passwordPassed {
            kind: 'OutputField';
            name: 'passwordPassed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface passwordResettedAt {
            kind: 'OutputField';
            name: 'passwordResettedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface passwordUpdatedAt {
            kind: 'OutputField';
            name: 'passwordUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface phoneNumberPassed {
            kind: 'OutputField';
            name: 'phoneNumberPassed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface phoneNumberUpdatedAt {
            kind: 'OutputField';
            name: 'phoneNumberUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface phoneNumberVerifiedAt {
            kind: 'OutputField';
            name: 'phoneNumberVerifiedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedInAt {
            kind: 'OutputField';
            name: 'signedInAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface expiresAt {
            kind: 'OutputField';
            name: 'expiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface MyUser {
        kind: 'Object';
        name: 'MyUser';
        fields: {
            __typename: MyUser.__typename;
            id: MyUser.id;
            adminNotes: MyUser.adminNotes;
            events: MyUser.events;
            metadata: MyUser.metadata;
            createdAt: MyUser.createdAt;
            createdBy: MyUser.createdBy;
            updatedAt: MyUser.updatedAt;
            updatedBy: MyUser.updatedBy;
            deletedAt: MyUser.deletedAt;
            deletedBy: MyUser.deletedBy;
            firstName: MyUser.firstName;
            lastName: MyUser.lastName;
            userHandle: MyUser.userHandle;
            phoneNumber: MyUser.phoneNumber;
            phoneNumberUpdatedAt: MyUser.phoneNumberUpdatedAt;
            isPhoneNumberVerified: MyUser.isPhoneNumberVerified;
            email: MyUser.email;
            emailSource: MyUser.emailSource;
            emailUpdatedAt: MyUser.emailUpdatedAt;
            isEmailVerified: MyUser.isEmailVerified;
            genderTextId: MyUser.genderTextId;
            cityOfResidence: MyUser.cityOfResidence;
            regionOfResidence: MyUser.regionOfResidence;
            countryOfResidenceTextId: MyUser.countryOfResidenceTextId;
            postalCode: MyUser.postalCode;
            avatarUrl: MyUser.avatarUrl;
            websites: MyUser.websites;
            inviteCode: MyUser.inviteCode;
            passwordUpdatedAt: MyUser.passwordUpdatedAt;
            preferredLanguageTextId: MyUser.preferredLanguageTextId;
            spokenLanguagesTextIds: MyUser.spokenLanguagesTextIds;
            selectedUiLanguageTextId: MyUser.selectedUiLanguageTextId;
            fallbackUiLanguageTextId: MyUser.fallbackUiLanguageTextId;
            discoverable: MyUser.discoverable;
            roles: MyUser.roles;
            appFeatures: MyUser.appFeatures;
            source: MyUser.source;
            timezone: MyUser.timezone;
            preferences: MyUser.preferences;
            trustLevel: MyUser.trustLevel;
            userDevices: MyUser.userDevices;
            userBlocks: MyUser.userBlocks;
            termsAndConditionsAcceptedAt: MyUser.termsAndConditionsAcceptedAt;
            optIntoNewsletter: MyUser.optIntoNewsletter;
            onboardingStage: MyUser.onboardingStage;
            isTestUser: MyUser.isTestUser;
            signedInAt: MyUser.signedInAt;
            signedOutAt: MyUser.signedOutAt;
            latestActivityAt: MyUser.latestActivityAt;
            inactivatedAt: MyUser.inactivatedAt;
            inactivatedBy: MyUser.inactivatedBy;
            suspendedAt: MyUser.suspendedAt;
            suspendedBy: MyUser.suspendedBy;
            anonymizedAt: MyUser.anonymizedAt;
            companyIds: MyUser.companyIds;
            companies: MyUser.companies;
            groupIds: MyUser.groupIds;
            parentGroupIds: MyUser.parentGroupIds;
            externalGroupIds: MyUser.externalGroupIds;
            groupMemberships: MyUser.groupMemberships;
            mentor: MyUser.mentor;
            mentee: MyUser.mentee;
            pronounsTextIds: MyUser.pronounsTextIds;
            seeksHelp: MyUser.seeksHelp;
            offersHelp: MyUser.offersHelp;
            birthYear: MyUser.birthYear;
            ethnicity: MyUser.ethnicity;
            educationLevelTextId: MyUser.educationLevelTextId;
            personalBio: MyUser.personalBio;
            yearsManagementExperience: MyUser.yearsManagementExperience;
            yearsOwnershipExperience: MyUser.yearsOwnershipExperience;
            academicExperienceIds: MyUser.academicExperienceIds;
            academicExperiences: MyUser.academicExperiences;
            genderSelfDescribed: MyUser.genderSelfDescribed;
            businessExperienceIds: MyUser.businessExperienceIds;
            businessExperiences: MyUser.businessExperiences;
            cityOfOrigin: MyUser.cityOfOrigin;
            regionOfOrigin: MyUser.regionOfOrigin;
            countryOfOriginTextId: MyUser.countryOfOriginTextId;
            isOnVacation: MyUser.isOnVacation;
            avatarAsset: MyUser.avatarAsset;
            profileRoleHistory: MyUser.profileRoleHistory;
            ssoIdp: MyUser.ssoIdp;
            originatedInMm2: MyUser.originatedInMm2;
            syncedWithMm2At: MyUser.syncedWithMm2At;
            mm2PasswordHash: MyUser.mm2PasswordHash;
            mm2Id: MyUser.mm2Id;
            mm2ProfileId: MyUser.mm2ProfileId;
            mm2PhotoOriginal: MyUser.mm2PhotoOriginal;
            mm2BasicAccountCompleted: MyUser.mm2BasicAccountCompleted;
            hasSignedInToMm3: MyUser.hasSignedInToMm3;
            hasSignedInToMm2: MyUser.hasSignedInToMm2;
            countryOfResidence: MyUser.countryOfResidence;
            gender: MyUser.gender;
            latestUserDevice: MyUser.latestUserDevice;
            spokenLanguages: MyUser.spokenLanguages;
            preferredLanguage: MyUser.preferredLanguage;
            fallbackUiLanguage: MyUser.fallbackUiLanguage;
            preferredUiLanguage: MyUser.preferredUiLanguage;
            unreadInAppMessages: MyUser.unreadInAppMessages;
            channels: MyUser.channels;
            channelInvitations: MyUser.channelInvitations;
            channelParticipants: MyUser.channelParticipants;
            countryOfOrigin: MyUser.countryOfOrigin;
            educationLevel: MyUser.educationLevel;
            endorsements: MyUser.endorsements;
            groupMembers: MyUser.groupMembers;
            groups: MyUser.groups;
            hasTrainings: MyUser.hasTrainings;
            profileCompletionPercentage: MyUser.profileCompletionPercentage;
            profileRole: MyUser.profileRole;
            pronouns: MyUser.pronouns;
            pronounsDisplay: MyUser.pronounsDisplay;
            uploadedAssets: MyUser.uploadedAssets;
            inbox: MyUser.inbox;
        };
    }
    export namespace MyUser {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'MyUser';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'OutputField';
            name: 'phoneNumber';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberUpdatedAt {
            kind: 'OutputField';
            name: 'phoneNumberUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isPhoneNumberVerified {
            kind: 'OutputField';
            name: 'isPhoneNumberVerified';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface email {
            kind: 'OutputField';
            name: 'email';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The source of the email address, e.g. "google", "facebook", etc.
         */
        interface emailSource {
            kind: 'OutputField';
            name: 'emailSource';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailUpdatedAt {
            kind: 'OutputField';
            name: 'emailUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isEmailVerified {
            kind: 'OutputField';
            name: 'isEmailVerified';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface genderTextId {
            kind: 'OutputField';
            name: 'genderTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cityOfResidence {
            kind: 'OutputField';
            name: 'cityOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfResidence {
            kind: 'OutputField';
            name: 'regionOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfResidenceTextId {
            kind: 'OutputField';
            name: 'countryOfResidenceTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface postalCode {
            kind: 'OutputField';
            name: 'postalCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'OutputField';
            name: 'avatarUrl';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'OutputField';
            name: 'websites';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValue;
        }
        interface inviteCode {
            kind: 'OutputField';
            name: 'inviteCode';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface passwordUpdatedAt {
            kind: 'OutputField';
            name: 'passwordUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface preferredLanguageTextId {
            kind: 'OutputField';
            name: 'preferredLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface spokenLanguagesTextIds {
            kind: 'OutputField';
            name: 'spokenLanguagesTextIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface selectedUiLanguageTextId {
            kind: 'OutputField';
            name: 'selectedUiLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface fallbackUiLanguageTextId {
            kind: 'OutputField';
            name: 'fallbackUiLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * If discoverable is not true, the user will not be included in search results or recommended to other users. The system will set discoverable to null for various reasons, i.e. for a bad actor. The user can set it to false intentionally.
         */
        interface discoverable {
            kind: 'OutputField';
            name: 'discoverable';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface appFeatures {
            kind: 'OutputField';
            name: 'appFeatures';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AppFeature;
        }
        interface source {
            kind: 'OutputField';
            name: 'source';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'OutputField';
            name: 'timezone';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface preferences {
            kind: 'OutputField';
            name: 'preferences';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UserPreferences;
        }
        interface trustLevel {
            kind: 'OutputField';
            name: 'trustLevel';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface userDevices {
            kind: 'OutputField';
            name: 'userDevices';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface userBlocks {
            kind: 'OutputField';
            name: 'userBlocks';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserBlock;
        }
        interface termsAndConditionsAcceptedAt {
            kind: 'OutputField';
            name: 'termsAndConditionsAcceptedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface optIntoNewsletter {
            kind: 'OutputField';
            name: 'optIntoNewsletter';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface onboardingStage {
            kind: 'OutputField';
            name: 'onboardingStage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isTestUser {
            kind: 'OutputField';
            name: 'isTestUser';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface signedInAt {
            kind: 'OutputField';
            name: 'signedInAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedOutAt {
            kind: 'OutputField';
            name: 'signedOutAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface latestActivityAt {
            kind: 'OutputField';
            name: 'latestActivityAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedAt {
            kind: 'OutputField';
            name: 'inactivatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedBy {
            kind: 'OutputField';
            name: 'inactivatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'OutputField';
            name: 'suspendedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'OutputField';
            name: 'suspendedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface anonymizedAt {
            kind: 'OutputField';
            name: 'anonymizedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface companyIds {
            kind: 'OutputField';
            name: 'companyIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface companies {
            kind: 'OutputField';
            name: 'companies';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Company;
        }
        interface groupIds {
            kind: 'OutputField';
            name: 'groupIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface parentGroupIds {
            kind: 'OutputField';
            name: 'parentGroupIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface externalGroupIds {
            kind: 'OutputField';
            name: 'externalGroupIds';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupMemberships {
            kind: 'OutputField';
            name: 'groupMemberships';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        /**
         * This attribute is a copy of the mentor group membership.
         */
        interface mentor {
            kind: 'OutputField';
            name: 'mentor';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MentorsGroupMembership;
        }
        /**
         * This attribute is a copy of the mentee group membership.
         */
        interface mentee {
            kind: 'OutputField';
            name: 'mentee';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$MenteesGroupMembership;
        }
        interface pronounsTextIds {
            kind: 'OutputField';
            name: 'pronounsTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface seeksHelp {
            kind: 'OutputField';
            name: 'seeksHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'OutputField';
            name: 'offersHelp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface birthYear {
            kind: 'OutputField';
            name: 'birthYear';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface ethnicity {
            kind: 'OutputField';
            name: 'ethnicity';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface educationLevelTextId {
            kind: 'OutputField';
            name: 'educationLevelTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface personalBio {
            kind: 'OutputField';
            name: 'personalBio';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface yearsManagementExperience {
            kind: 'OutputField';
            name: 'yearsManagementExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface yearsOwnershipExperience {
            kind: 'OutputField';
            name: 'yearsOwnershipExperience';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface academicExperienceIds {
            kind: 'OutputField';
            name: 'academicExperienceIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface academicExperiences {
            kind: 'OutputField';
            name: 'academicExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AcademicExperience;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface genderSelfDescribed {
            kind: 'OutputField';
            name: 'genderSelfDescribed';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface businessExperienceIds {
            kind: 'OutputField';
            name: 'businessExperienceIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface businessExperiences {
            kind: 'OutputField';
            name: 'businessExperiences';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BusinessExperience;
        }
        interface cityOfOrigin {
            kind: 'OutputField';
            name: 'cityOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfOrigin {
            kind: 'OutputField';
            name: 'regionOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfOriginTextId {
            kind: 'OutputField';
            name: 'countryOfOriginTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isOnVacation {
            kind: 'OutputField';
            name: 'isOnVacation';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface avatarAsset {
            kind: 'OutputField';
            name: 'avatarAsset';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        interface profileRoleHistory {
            kind: 'OutputField';
            name: 'profileRoleHistory';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserProfileRoleHistoryItem;
        }
        interface ssoIdp {
            kind: 'OutputField';
            name: 'ssoIdp';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Records whether a user was originally created in MM2.
         */
        interface originatedInMm2 {
            kind: 'OutputField';
            name: 'originatedInMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This is the MM2 password hash.
         */
        interface mm2PasswordHash {
            kind: 'OutputField';
            name: 'mm2PasswordHash';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2ProfileId {
            kind: 'OutputField';
            name: 'mm2ProfileId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2PhotoOriginal {
            kind: 'OutputField';
            name: 'mm2PhotoOriginal';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * For MM2 users, this means a profile is completed.
         */
        interface mm2BasicAccountCompleted {
            kind: 'OutputField';
            name: 'mm2BasicAccountCompleted';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Records whether a user has logged into MM3.
         */
        interface hasSignedInToMm3 {
            kind: 'OutputField';
            name: 'hasSignedInToMm3';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Records whether a user has logged into MM2.
         */
        interface hasSignedInToMm2 {
            kind: 'OutputField';
            name: 'hasSignedInToMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface countryOfResidence {
            kind: 'OutputField';
            name: 'countryOfResidence';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface gender {
            kind: 'OutputField';
            name: 'gender';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Gender;
        }
        interface latestUserDevice {
            kind: 'OutputField';
            name: 'latestUserDevice';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserDeviceWithoutAuth;
        }
        interface spokenLanguages {
            kind: 'OutputField';
            name: 'spokenLanguages';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Language;
        }
        interface preferredLanguage {
            kind: 'OutputField';
            name: 'preferredLanguage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Language;
        }
        interface fallbackUiLanguage {
            kind: 'OutputField';
            name: 'fallbackUiLanguage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Language;
        }
        interface preferredUiLanguage {
            kind: 'OutputField';
            name: 'preferredUiLanguage';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Language;
        }
        interface unreadInAppMessages {
            kind: 'OutputField';
            name: 'unreadInAppMessages';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Notification;
        }
        interface channels {
            kind: 'OutputField';
            name: 'channels';
            arguments: {
                /**
                 * Set options on channels, e.g. to include archived channels.
                 */
                options: {
                    kind: 'InputField';
                    name: 'options';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$FindObjectsOptions;
                };
                /**
                 * Set to True to return only channels which have been accepted. Default is False, which also returns channels with multiple messages that have not been accepted. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
                 */
                mustBeAccepted: {
                    kind: 'InputField';
                    name: 'mustBeAccepted';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
                /**
                 * Set to True to return only channels with messages. Default is False, which also returns channels without messages. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
                 */
                mustHaveMessages: {
                    kind: 'InputField';
                    name: 'mustHaveMessages';
                    inlineType: [0];
                    namedType: $$NamedTypes.$$Boolean;
                };
            };
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Channel;
        }
        interface channelInvitations {
            kind: 'OutputField';
            name: 'channelInvitations';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelInvitation;
        }
        interface channelParticipants {
            kind: 'OutputField';
            name: 'channelParticipants';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ChannelParticipant;
        }
        interface countryOfOrigin {
            kind: 'OutputField';
            name: 'countryOfOrigin';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Country;
        }
        interface educationLevel {
            kind: 'OutputField';
            name: 'educationLevel';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$EducationLevel;
        }
        interface endorsements {
            kind: 'OutputField';
            name: 'endorsements';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$EndorsementWithTypes;
        }
        interface groupMembers {
            kind: 'OutputField';
            name: 'groupMembers';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$IGroupMembership;
        }
        interface groups {
            kind: 'OutputField';
            name: 'groups';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Group;
        }
        interface hasTrainings {
            kind: 'OutputField';
            name: 'hasTrainings';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface profileCompletionPercentage {
            kind: 'OutputField';
            name: 'profileCompletionPercentage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface profileRole {
            kind: 'OutputField';
            name: 'profileRole';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface pronouns {
            kind: 'OutputField';
            name: 'pronouns';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$Pronoun;
        }
        interface pronounsDisplay {
            kind: 'OutputField';
            name: 'pronounsDisplay';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface uploadedAssets {
            kind: 'OutputField';
            name: 'uploadedAssets';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UploadedAsset;
        }
        /**
         * @deprecated Use findMyInbox
         */
        interface inbox {
            kind: 'OutputField';
            name: 'inbox';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$UserInbox;
        }
    }
    export interface ReportUserReason {
        kind: 'Object';
        name: 'ReportUserReason';
        fields: {
            __typename: ReportUserReason.__typename;
            id: ReportUserReason.id;
            adminNotes: ReportUserReason.adminNotes;
            events: ReportUserReason.events;
            metadata: ReportUserReason.metadata;
            createdAt: ReportUserReason.createdAt;
            createdBy: ReportUserReason.createdBy;
            updatedAt: ReportUserReason.updatedAt;
            updatedBy: ReportUserReason.updatedBy;
            deletedAt: ReportUserReason.deletedAt;
            deletedBy: ReportUserReason.deletedBy;
            textId: ReportUserReason.textId;
            parentTextId: ReportUserReason.parentTextId;
            isParent: ReportUserReason.isParent;
            optionType: ReportUserReason.optionType;
            value: ReportUserReason.value;
            translatedValue: ReportUserReason.translatedValue;
            supportedLanguages: ReportUserReason.supportedLanguages;
            materialIconName: ReportUserReason.materialIconName;
            description: ReportUserReason.description;
            translatedDescription: ReportUserReason.translatedDescription;
            language: ReportUserReason.language;
            mm2Id: ReportUserReason.mm2Id;
            mm2Value: ReportUserReason.mm2Value;
            syncedWithMm2At: ReportUserReason.syncedWithMm2At;
            mm2TextId: ReportUserReason.mm2TextId;
            mm3TextId: ReportUserReason.mm3TextId;
            childOptions: ReportUserReason.childOptions;
            parentOption: ReportUserReason.parentOption;
        };
    }
    export namespace ReportUserReason {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ReportUserReason';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface textId {
            kind: 'OutputField';
            name: 'textId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface parentTextId {
            kind: 'OutputField';
            name: 'parentTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isParent {
            kind: 'OutputField';
            name: 'isParent';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface optionType {
            kind: 'OutputField';
            name: 'optionType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$OptionType;
        }
        interface value {
            kind: 'OutputField';
            name: 'value';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedValue {
            kind: 'OutputField';
            name: 'translatedValue';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface supportedLanguages {
            kind: 'OutputField';
            name: 'supportedLanguages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * Material icon name. Intended to be used by the Flutter app for the expertises and industries icons.
         */
        interface materialIconName {
            kind: 'OutputField';
            name: 'materialIconName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface translatedDescription {
            kind: 'OutputField';
            name: 'translatedDescription';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'OutputField';
            name: 'language';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mm2Value {
            kind: 'OutputField';
            name: 'mm2Value';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2TextId {
            kind: 'OutputField';
            name: 'mm2TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm3TextId {
            kind: 'OutputField';
            name: 'mm3TextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childOptions {
            kind: 'OutputField';
            name: 'childOptions';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
        interface parentOption {
            kind: 'OutputField';
            name: 'parentOption';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$Option;
        }
    }
    export interface Training {
        kind: 'Object';
        name: 'Training';
        fields: {
            __typename: Training.__typename;
            id: Training.id;
            adminNotes: Training.adminNotes;
            events: Training.events;
            metadata: Training.metadata;
            createdAt: Training.createdAt;
            createdBy: Training.createdBy;
            updatedAt: Training.updatedAt;
            updatedBy: Training.updatedBy;
            deletedAt: Training.deletedAt;
            deletedBy: Training.deletedBy;
            title: Training.title;
            titleAr: Training.titleAr;
            titleEn: Training.titleEn;
            titleEs: Training.titleEs;
            titleInd: Training.titleInd;
            titleRu: Training.titleRu;
            titleSo: Training.titleSo;
            slug: Training.slug;
            slugAr: Training.slugAr;
            slugEn: Training.slugEn;
            slugEs: Training.slugEs;
            slugInd: Training.slugInd;
            slugRu: Training.slugRu;
            slugSo: Training.slugSo;
            urlPath: Training.urlPath;
            urlPathAr: Training.urlPathAr;
            urlPathEn: Training.urlPathEn;
            urlPathEs: Training.urlPathEs;
            urlPathInd: Training.urlPathInd;
            urlPathRu: Training.urlPathRu;
            urlPathSo: Training.urlPathSo;
            relativeUrlPath: Training.relativeUrlPath;
            relativeUrlPathAr: Training.relativeUrlPathAr;
            relativeUrlPathEn: Training.relativeUrlPathEn;
            relativeUrlPathEs: Training.relativeUrlPathEs;
            relativeUrlPathInd: Training.relativeUrlPathInd;
            relativeUrlPathRu: Training.relativeUrlPathRu;
            relativeUrlPathSo: Training.relativeUrlPathSo;
            live: Training.live;
            locked: Training.locked;
            expired: Training.expired;
            mm2Id: Training.mm2Id;
            syncedWithMm2At: Training.syncedWithMm2At;
            numCorrectAnswersToPass: Training.numCorrectAnswersToPass;
            about: Training.about;
            aboutAr: Training.aboutAr;
            aboutEn: Training.aboutEn;
            aboutEs: Training.aboutEs;
            aboutInd: Training.aboutInd;
            aboutRu: Training.aboutRu;
            aboutSo: Training.aboutSo;
            aboutMm2: Training.aboutMm2;
            aboutArMm2: Training.aboutArMm2;
            aboutEnMm2: Training.aboutEnMm2;
            aboutEsMm2: Training.aboutEsMm2;
            aboutIndMm2: Training.aboutIndMm2;
            aboutRuMm2: Training.aboutRuMm2;
            aboutSoMm2: Training.aboutSoMm2;
            introduction: Training.introduction;
            introductionAr: Training.introductionAr;
            introductionEn: Training.introductionEn;
            introductionEs: Training.introductionEs;
            introductionInd: Training.introductionInd;
            introductionRu: Training.introductionRu;
            introductionSo: Training.introductionSo;
            introductionMm2: Training.introductionMm2;
            introductionArMm2: Training.introductionArMm2;
            introductionEnMm2: Training.introductionEnMm2;
            introductionEsMm2: Training.introductionEsMm2;
            introductionIndMm2: Training.introductionIndMm2;
            introductionRuMm2: Training.introductionRuMm2;
            introductionSoMm2: Training.introductionSoMm2;
            lessonPlanLevels: Training.lessonPlanLevels;
            certificateTemplateId: Training.certificateTemplateId;
            code: Training.code;
            tags: Training.tags;
            restricted: Training.restricted;
            showInMenus: Training.showInMenus;
            countriesTextIds: Training.countriesTextIds;
            groupIds: Training.groupIds;
            languagesTextIds: Training.languagesTextIds;
            seeksHelp: Training.seeksHelp;
            offersHelp: Training.offersHelp;
            imageUrls: Training.imageUrls;
            lessonPlan: Training.lessonPlan;
            lessonPlanAr: Training.lessonPlanAr;
            lessonPlanEn: Training.lessonPlanEn;
            lessonPlanEs: Training.lessonPlanEs;
            lessonPlanInd: Training.lessonPlanInd;
            lessonPlanRu: Training.lessonPlanRu;
            lessonPlanSo: Training.lessonPlanSo;
            trainingContentPages: Training.trainingContentPages;
            myTrainingSessions: Training.myTrainingSessions;
            myLatestTrainingSession: Training.myLatestTrainingSession;
            isTrainingCompletedForMe: Training.isTrainingCompletedForMe;
            isTrainingPassedForMe: Training.isTrainingPassedForMe;
        };
    }
    export namespace Training {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'Training';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface title {
            kind: 'OutputField';
            name: 'title';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleAr {
            kind: 'OutputField';
            name: 'titleAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEn {
            kind: 'OutputField';
            name: 'titleEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEs {
            kind: 'OutputField';
            name: 'titleEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleInd {
            kind: 'OutputField';
            name: 'titleInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleRu {
            kind: 'OutputField';
            name: 'titleRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleSo {
            kind: 'OutputField';
            name: 'titleSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slug {
            kind: 'OutputField';
            name: 'slug';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugAr {
            kind: 'OutputField';
            name: 'slugAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugEn {
            kind: 'OutputField';
            name: 'slugEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugEs {
            kind: 'OutputField';
            name: 'slugEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugInd {
            kind: 'OutputField';
            name: 'slugInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugRu {
            kind: 'OutputField';
            name: 'slugRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugSo {
            kind: 'OutputField';
            name: 'slugSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPath {
            kind: 'OutputField';
            name: 'urlPath';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathAr {
            kind: 'OutputField';
            name: 'urlPathAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathEn {
            kind: 'OutputField';
            name: 'urlPathEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathEs {
            kind: 'OutputField';
            name: 'urlPathEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathInd {
            kind: 'OutputField';
            name: 'urlPathInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathRu {
            kind: 'OutputField';
            name: 'urlPathRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathSo {
            kind: 'OutputField';
            name: 'urlPathSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPath {
            kind: 'OutputField';
            name: 'relativeUrlPath';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathAr {
            kind: 'OutputField';
            name: 'relativeUrlPathAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathEn {
            kind: 'OutputField';
            name: 'relativeUrlPathEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathEs {
            kind: 'OutputField';
            name: 'relativeUrlPathEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathInd {
            kind: 'OutputField';
            name: 'relativeUrlPathInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathRu {
            kind: 'OutputField';
            name: 'relativeUrlPathRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathSo {
            kind: 'OutputField';
            name: 'relativeUrlPathSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface live {
            kind: 'OutputField';
            name: 'live';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface locked {
            kind: 'OutputField';
            name: 'locked';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface expired {
            kind: 'OutputField';
            name: 'expired';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is only used by the MM2/VTS synchronizer. MM2 Wagtail page PK/ MM2 training page ID.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface numCorrectAnswersToPass {
            kind: 'OutputField';
            name: 'numCorrectAnswersToPass';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface about {
            kind: 'OutputField';
            name: 'about';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutAr {
            kind: 'OutputField';
            name: 'aboutAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutEn {
            kind: 'OutputField';
            name: 'aboutEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutEs {
            kind: 'OutputField';
            name: 'aboutEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutInd {
            kind: 'OutputField';
            name: 'aboutInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutRu {
            kind: 'OutputField';
            name: 'aboutRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutSo {
            kind: 'OutputField';
            name: 'aboutSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutMm2 {
            kind: 'OutputField';
            name: 'aboutMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutArMm2 {
            kind: 'OutputField';
            name: 'aboutArMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutEnMm2 {
            kind: 'OutputField';
            name: 'aboutEnMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutEsMm2 {
            kind: 'OutputField';
            name: 'aboutEsMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutIndMm2 {
            kind: 'OutputField';
            name: 'aboutIndMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutRuMm2 {
            kind: 'OutputField';
            name: 'aboutRuMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface aboutSoMm2 {
            kind: 'OutputField';
            name: 'aboutSoMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introduction {
            kind: 'OutputField';
            name: 'introduction';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionAr {
            kind: 'OutputField';
            name: 'introductionAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionEn {
            kind: 'OutputField';
            name: 'introductionEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionEs {
            kind: 'OutputField';
            name: 'introductionEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionInd {
            kind: 'OutputField';
            name: 'introductionInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionRu {
            kind: 'OutputField';
            name: 'introductionRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionSo {
            kind: 'OutputField';
            name: 'introductionSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionMm2 {
            kind: 'OutputField';
            name: 'introductionMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionArMm2 {
            kind: 'OutputField';
            name: 'introductionArMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionEnMm2 {
            kind: 'OutputField';
            name: 'introductionEnMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionEsMm2 {
            kind: 'OutputField';
            name: 'introductionEsMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionIndMm2 {
            kind: 'OutputField';
            name: 'introductionIndMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionRuMm2 {
            kind: 'OutputField';
            name: 'introductionRuMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface introductionSoMm2 {
            kind: 'OutputField';
            name: 'introductionSoMm2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lessonPlanLevels {
            kind: 'OutputField';
            name: 'lessonPlanLevels';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface certificateTemplateId {
            kind: 'OutputField';
            name: 'certificateTemplateId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface code {
            kind: 'OutputField';
            name: 'code';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface tags {
            kind: 'OutputField';
            name: 'tags';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface restricted {
            kind: 'OutputField';
            name: 'restricted';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Maps to wagtailcore_page.show_in_menus from MM2
         */
        interface showInMenus {
            kind: 'OutputField';
            name: 'showInMenus';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Maps to TrainingPageCountry from MM2
         */
        interface countriesTextIds {
            kind: 'OutputField';
            name: 'countriesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Maps to TrainingPageCommunity from MM2
         */
        interface groupIds {
            kind: 'OutputField';
            name: 'groupIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Maps to TrainingPageLanguage from MM2
         */
        interface languagesTextIds {
            kind: 'OutputField';
            name: 'languagesTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Restrict the training to mentees. Maps to MM2 TrainingPage.role.
         */
        interface seeksHelp {
            kind: 'OutputField';
            name: 'seeksHelp';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Restrict the training to mentors. Maps to MM2 TrainingPage.role.
         */
        interface offersHelp {
            kind: 'OutputField';
            name: 'offersHelp';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface imageUrls {
            kind: 'OutputField';
            name: 'imageUrls';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan
         */
        interface lessonPlan {
            kind: 'OutputField';
            name: 'lessonPlan';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan in Arabic
         */
        interface lessonPlanAr {
            kind: 'OutputField';
            name: 'lessonPlanAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan in English
         */
        interface lessonPlanEn {
            kind: 'OutputField';
            name: 'lessonPlanEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan in Spanish
         */
        interface lessonPlanEs {
            kind: 'OutputField';
            name: 'lessonPlanEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan in Bahasa Indonesian
         */
        interface lessonPlanInd {
            kind: 'OutputField';
            name: 'lessonPlanInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan in Russian
         */
        interface lessonPlanRu {
            kind: 'OutputField';
            name: 'lessonPlanRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Markdown field which contains the trainings lesson plan in Somali
         */
        interface lessonPlanSo {
            kind: 'OutputField';
            name: 'lessonPlanSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Training content pages used for the lesson plan
         */
        interface trainingContentPages {
            kind: 'OutputField';
            name: 'trainingContentPages';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$TrainingContentPage;
        }
        interface myTrainingSessions {
            kind: 'OutputField';
            name: 'myTrainingSessions';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$TrainingSession;
        }
        interface myLatestTrainingSession {
            kind: 'OutputField';
            name: 'myLatestTrainingSession';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$TrainingSession;
        }
        interface isTrainingCompletedForMe {
            kind: 'OutputField';
            name: 'isTrainingCompletedForMe';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isTrainingPassedForMe {
            kind: 'OutputField';
            name: 'isTrainingPassedForMe';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface TrainingContentPage {
        kind: 'Object';
        name: 'TrainingContentPage';
        fields: {
            __typename: TrainingContentPage.__typename;
            id: TrainingContentPage.id;
            adminNotes: TrainingContentPage.adminNotes;
            events: TrainingContentPage.events;
            metadata: TrainingContentPage.metadata;
            createdAt: TrainingContentPage.createdAt;
            createdBy: TrainingContentPage.createdBy;
            updatedAt: TrainingContentPage.updatedAt;
            updatedBy: TrainingContentPage.updatedBy;
            deletedAt: TrainingContentPage.deletedAt;
            deletedBy: TrainingContentPage.deletedBy;
            title: TrainingContentPage.title;
            titleAr: TrainingContentPage.titleAr;
            titleEn: TrainingContentPage.titleEn;
            titleEs: TrainingContentPage.titleEs;
            titleInd: TrainingContentPage.titleInd;
            titleRu: TrainingContentPage.titleRu;
            titleSo: TrainingContentPage.titleSo;
            slug: TrainingContentPage.slug;
            slugAr: TrainingContentPage.slugAr;
            slugEn: TrainingContentPage.slugEn;
            slugEs: TrainingContentPage.slugEs;
            slugInd: TrainingContentPage.slugInd;
            slugRu: TrainingContentPage.slugRu;
            slugSo: TrainingContentPage.slugSo;
            urlPath: TrainingContentPage.urlPath;
            urlPathAr: TrainingContentPage.urlPathAr;
            urlPathEn: TrainingContentPage.urlPathEn;
            urlPathEs: TrainingContentPage.urlPathEs;
            urlPathInd: TrainingContentPage.urlPathInd;
            urlPathRu: TrainingContentPage.urlPathRu;
            urlPathSo: TrainingContentPage.urlPathSo;
            relativeUrlPath: TrainingContentPage.relativeUrlPath;
            relativeUrlPathAr: TrainingContentPage.relativeUrlPathAr;
            relativeUrlPathEn: TrainingContentPage.relativeUrlPathEn;
            relativeUrlPathEs: TrainingContentPage.relativeUrlPathEs;
            relativeUrlPathInd: TrainingContentPage.relativeUrlPathInd;
            relativeUrlPathRu: TrainingContentPage.relativeUrlPathRu;
            relativeUrlPathSo: TrainingContentPage.relativeUrlPathSo;
            live: TrainingContentPage.live;
            locked: TrainingContentPage.locked;
            expired: TrainingContentPage.expired;
            mm2Id: TrainingContentPage.mm2Id;
            syncedWithMm2At: TrainingContentPage.syncedWithMm2At;
            children: TrainingContentPage.children;
            trainingId: TrainingContentPage.trainingId;
        };
    }
    export namespace TrainingContentPage {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'TrainingContentPage';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface title {
            kind: 'OutputField';
            name: 'title';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleAr {
            kind: 'OutputField';
            name: 'titleAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEn {
            kind: 'OutputField';
            name: 'titleEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEs {
            kind: 'OutputField';
            name: 'titleEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleInd {
            kind: 'OutputField';
            name: 'titleInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleRu {
            kind: 'OutputField';
            name: 'titleRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleSo {
            kind: 'OutputField';
            name: 'titleSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slug {
            kind: 'OutputField';
            name: 'slug';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugAr {
            kind: 'OutputField';
            name: 'slugAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugEn {
            kind: 'OutputField';
            name: 'slugEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugEs {
            kind: 'OutputField';
            name: 'slugEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugInd {
            kind: 'OutputField';
            name: 'slugInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugRu {
            kind: 'OutputField';
            name: 'slugRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slugSo {
            kind: 'OutputField';
            name: 'slugSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPath {
            kind: 'OutputField';
            name: 'urlPath';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathAr {
            kind: 'OutputField';
            name: 'urlPathAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathEn {
            kind: 'OutputField';
            name: 'urlPathEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathEs {
            kind: 'OutputField';
            name: 'urlPathEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathInd {
            kind: 'OutputField';
            name: 'urlPathInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathRu {
            kind: 'OutputField';
            name: 'urlPathRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface urlPathSo {
            kind: 'OutputField';
            name: 'urlPathSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPath {
            kind: 'OutputField';
            name: 'relativeUrlPath';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathAr {
            kind: 'OutputField';
            name: 'relativeUrlPathAr';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathEn {
            kind: 'OutputField';
            name: 'relativeUrlPathEn';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathEs {
            kind: 'OutputField';
            name: 'relativeUrlPathEs';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathInd {
            kind: 'OutputField';
            name: 'relativeUrlPathInd';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathRu {
            kind: 'OutputField';
            name: 'relativeUrlPathRu';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface relativeUrlPathSo {
            kind: 'OutputField';
            name: 'relativeUrlPathSo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface live {
            kind: 'OutputField';
            name: 'live';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface locked {
            kind: 'OutputField';
            name: 'locked';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface expired {
            kind: 'OutputField';
            name: 'expired';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * This attribute is only used by the MM2/VTS synchronizer. MM2 Wagtail page PK/ MM2 trainingContentPage page ID.
         */
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * TrainingContentPages can have children TrainingContentPages. This is used to represent the tree structure of the training content.
         */
        interface children {
            kind: 'OutputField';
            name: 'children';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$TrainingContentPage;
        }
        /**
         * FK to Training model
         */
        interface trainingId {
            kind: 'OutputField';
            name: 'trainingId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface TrainingSession {
        kind: 'Object';
        name: 'TrainingSession';
        fields: {
            __typename: TrainingSession.__typename;
            id: TrainingSession.id;
            adminNotes: TrainingSession.adminNotes;
            events: TrainingSession.events;
            metadata: TrainingSession.metadata;
            createdAt: TrainingSession.createdAt;
            createdBy: TrainingSession.createdBy;
            updatedAt: TrainingSession.updatedAt;
            updatedBy: TrainingSession.updatedBy;
            deletedAt: TrainingSession.deletedAt;
            deletedBy: TrainingSession.deletedBy;
            mm2Id: TrainingSession.mm2Id;
            syncedWithMm2At: TrainingSession.syncedWithMm2At;
            startedAt: TrainingSession.startedAt;
            trainingId: TrainingSession.trainingId;
            userId: TrainingSession.userId;
            isInProgress: TrainingSession.isInProgress;
            percentCompleted: TrainingSession.percentCompleted;
            completionInfo: TrainingSession.completionInfo;
        };
    }
    export namespace TrainingSession {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'TrainingSession';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface startedAt {
            kind: 'OutputField';
            name: 'startedAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The ID of the training in MM3.
         */
        interface trainingId {
            kind: 'OutputField';
            name: 'trainingId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface isInProgress {
            kind: 'OutputField';
            name: 'isInProgress';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface percentCompleted {
            kind: 'OutputField';
            name: 'percentCompleted';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Float;
        }
        interface completionInfo {
            kind: 'OutputField';
            name: 'completionInfo';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$TrainingSessionCompletionInfo;
        }
    }
    export interface TrainingSessionCompletionInfo {
        kind: 'Object';
        name: 'TrainingSessionCompletionInfo';
        fields: {
            __typename: TrainingSessionCompletionInfo.__typename;
            updatedAt: TrainingSessionCompletionInfo.updatedAt;
            mm2Id: TrainingSessionCompletionInfo.mm2Id;
            syncedWithMm2At: TrainingSessionCompletionInfo.syncedWithMm2At;
            completedAt: TrainingSessionCompletionInfo.completedAt;
            questionsAnsweredCorrectly: TrainingSessionCompletionInfo.questionsAnsweredCorrectly;
            numberOfQuestions: TrainingSessionCompletionInfo.numberOfQuestions;
            numCorrectAnswersToPass: TrainingSessionCompletionInfo.numCorrectAnswersToPass;
            isPassingScore: TrainingSessionCompletionInfo.isPassingScore;
            preTestQuestionsAnsweredCorrectly: TrainingSessionCompletionInfo.preTestQuestionsAnsweredCorrectly;
            numberOfPreTestQuestions: TrainingSessionCompletionInfo.numberOfPreTestQuestions;
        };
    }
    export namespace TrainingSessionCompletionInfo {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'TrainingSessionCompletionInfo';
            };
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface mm2Id {
            kind: 'OutputField';
            name: 'mm2Id';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'OutputField';
            name: 'syncedWithMm2At';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface completedAt {
            kind: 'OutputField';
            name: 'completedAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface questionsAnsweredCorrectly {
            kind: 'OutputField';
            name: 'questionsAnsweredCorrectly';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface numberOfQuestions {
            kind: 'OutputField';
            name: 'numberOfQuestions';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface numCorrectAnswersToPass {
            kind: 'OutputField';
            name: 'numCorrectAnswersToPass';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface isPassingScore {
            kind: 'OutputField';
            name: 'isPassingScore';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface preTestQuestionsAnsweredCorrectly {
            kind: 'OutputField';
            name: 'preTestQuestionsAnsweredCorrectly';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface numberOfPreTestQuestions {
            kind: 'OutputField';
            name: 'numberOfPreTestQuestions';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
    }
    /**
     * API response to signInUser/signUpUser/signInOauthUser
     */
    export interface UserAuthResponse {
        kind: 'Object';
        name: 'UserAuthResponse';
        fields: {
            __typename: UserAuthResponse.__typename;
            userId: UserAuthResponse.userId;
            firstName: UserAuthResponse.firstName;
            lastName: UserAuthResponse.lastName;
            userHandle: UserAuthResponse.userHandle;
            email: UserAuthResponse.email;
            phoneNumber: UserAuthResponse.phoneNumber;
            roles: UserAuthResponse.roles;
            onboardingStage: UserAuthResponse.onboardingStage;
            foundUser: UserAuthResponse.foundUser;
            authType: UserAuthResponse.authType;
            authToken: UserAuthResponse.authToken;
            authTokenExpiresAt: UserAuthResponse.authTokenExpiresAt;
        };
    }
    export namespace UserAuthResponse {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'UserAuthResponse';
            };
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface firstName {
            kind: 'OutputField';
            name: 'firstName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'OutputField';
            name: 'lastName';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'OutputField';
            name: 'userHandle';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface email {
            kind: 'OutputField';
            name: 'email';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'OutputField';
            name: 'phoneNumber';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface onboardingStage {
            kind: 'OutputField';
            name: 'onboardingStage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface foundUser {
            kind: 'OutputField';
            name: 'foundUser';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface authType {
            kind: 'OutputField';
            name: 'authType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$AuthType;
        }
        interface authToken {
            kind: 'OutputField';
            name: 'authToken';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface authTokenExpiresAt {
            kind: 'OutputField';
            name: 'authTokenExpiresAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ContentTag {
        kind: 'Object';
        name: 'ContentTag';
        fields: {
            __typename: ContentTag.__typename;
            id: ContentTag.id;
            adminNotes: ContentTag.adminNotes;
            events: ContentTag.events;
            metadata: ContentTag.metadata;
            createdAt: ContentTag.createdAt;
            createdBy: ContentTag.createdBy;
            updatedAt: ContentTag.updatedAt;
            updatedBy: ContentTag.updatedBy;
            deletedAt: ContentTag.deletedAt;
            deletedBy: ContentTag.deletedBy;
            objectId: ContentTag.objectId;
            contentModelType: ContentTag.contentModelType;
            userId: ContentTag.userId;
            contentTagTypeTextId: ContentTag.contentTagTypeTextId;
            childContentTagTypeTextId: ContentTag.childContentTagTypeTextId;
            messageText: ContentTag.messageText;
            moderationConcern: ContentTag.moderationConcern;
            allModerationConcerns: ContentTag.allModerationConcerns;
            approvedByRecipientAt: ContentTag.approvedByRecipientAt;
            verifiedBy: ContentTag.verifiedBy;
            verifiedAt: ContentTag.verifiedAt;
            dismissedBy: ContentTag.dismissedBy;
            dismissedAt: ContentTag.dismissedAt;
            childContentTagType: ContentTag.childContentTagType;
            contentTagType: ContentTag.contentTagType;
        };
    }
    export namespace ContentTag {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ContentTag';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface objectId {
            kind: 'OutputField';
            name: 'objectId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface contentModelType {
            kind: 'OutputField';
            name: 'contentModelType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ModelType;
        }
        /**
         * ID of the user that created/owns the content referred to in this ContentTag. The ID of the user that created this ContentTag is stored in the createdBy field for ContentTags that were created by a user.
         */
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface contentTagTypeTextId {
            kind: 'OutputField';
            name: 'contentTagTypeTextId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface childContentTagTypeTextId {
            kind: 'OutputField';
            name: 'childContentTagTypeTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'OutputField';
            name: 'messageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface moderationConcern {
            kind: 'OutputField';
            name: 'moderationConcern';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ModerationConcern;
        }
        interface allModerationConcerns {
            kind: 'OutputField';
            name: 'allModerationConcerns';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModerationConcern;
        }
        interface approvedByRecipientAt {
            kind: 'OutputField';
            name: 'approvedByRecipientAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * ID of the admin user that verified the tag.
         */
        interface verifiedBy {
            kind: 'OutputField';
            name: 'verifiedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface verifiedAt {
            kind: 'OutputField';
            name: 'verifiedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * ID of the admin user that dimsissed the tag.
         */
        interface dismissedBy {
            kind: 'OutputField';
            name: 'dismissedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface dismissedAt {
            kind: 'OutputField';
            name: 'dismissedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface childContentTagType {
            kind: 'OutputField';
            name: 'childContentTagType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ContentTagType;
        }
        interface contentTagType {
            kind: 'OutputField';
            name: 'contentTagType';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ContentTagType;
        }
    }
    export interface SupportChannelConfig {
        kind: 'Object';
        name: 'SupportChannelConfig';
        fields: {
            __typename: SupportChannelConfig.__typename;
            id: SupportChannelConfig.id;
            adminNotes: SupportChannelConfig.adminNotes;
            events: SupportChannelConfig.events;
            metadata: SupportChannelConfig.metadata;
            createdAt: SupportChannelConfig.createdAt;
            createdBy: SupportChannelConfig.createdBy;
            updatedAt: SupportChannelConfig.updatedAt;
            updatedBy: SupportChannelConfig.updatedBy;
            deletedAt: SupportChannelConfig.deletedAt;
            deletedBy: SupportChannelConfig.deletedBy;
            groupId: SupportChannelConfig.groupId;
            senderUserId: SupportChannelConfig.senderUserId;
            isActive: SupportChannelConfig.isActive;
            createSupportChannelForMentees: SupportChannelConfig.createSupportChannelForMentees;
            createSupportChannelForMentors: SupportChannelConfig.createSupportChannelForMentors;
            channelLanguageTextId: SupportChannelConfig.channelLanguageTextId;
            filterByGenderTextIds: SupportChannelConfig.filterByGenderTextIds;
            firstMessageText: SupportChannelConfig.firstMessageText;
            sendNotifications: SupportChannelConfig.sendNotifications;
        };
    }
    export namespace SupportChannelConfig {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'SupportChannelConfig';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface senderUserId {
            kind: 'OutputField';
            name: 'senderUserId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Is this welcome message active / should we send it to users?
         */
        interface isActive {
            kind: 'OutputField';
            name: 'isActive';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createSupportChannelForMentees {
            kind: 'OutputField';
            name: 'createSupportChannelForMentees';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createSupportChannelForMentors {
            kind: 'OutputField';
            name: 'createSupportChannelForMentors';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Any language option can be selected, not just a UiLanguage
         */
        interface channelLanguageTextId {
            kind: 'OutputField';
            name: 'channelLanguageTextId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface filterByGenderTextIds {
            kind: 'OutputField';
            name: 'filterByGenderTextIds';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The welcome message is a plain text field
         */
        interface firstMessageText {
            kind: 'OutputField';
            name: 'firstMessageText';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Setting to false will ensure no notifications are sent. Setting to true will still check notification template settings.
         */
        interface sendNotifications {
            kind: 'OutputField';
            name: 'sendNotifications';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface NotificationTemplate {
        kind: 'Object';
        name: 'NotificationTemplate';
        fields: {
            __typename: NotificationTemplate.__typename;
            id: NotificationTemplate.id;
            adminNotes: NotificationTemplate.adminNotes;
            events: NotificationTemplate.events;
            metadata: NotificationTemplate.metadata;
            createdAt: NotificationTemplate.createdAt;
            createdBy: NotificationTemplate.createdBy;
            updatedAt: NotificationTemplate.updatedAt;
            updatedBy: NotificationTemplate.updatedBy;
            deletedAt: NotificationTemplate.deletedAt;
            deletedBy: NotificationTemplate.deletedBy;
            name: NotificationTemplate.name;
            description: NotificationTemplate.description;
            titleAr: NotificationTemplate.titleAr;
            messageTextAr: NotificationTemplate.messageTextAr;
            shortMessageTextAr: NotificationTemplate.shortMessageTextAr;
            htmlMessageAr: NotificationTemplate.htmlMessageAr;
            titleEn: NotificationTemplate.titleEn;
            messageTextEn: NotificationTemplate.messageTextEn;
            shortMessageTextEn: NotificationTemplate.shortMessageTextEn;
            htmlMessageEn: NotificationTemplate.htmlMessageEn;
            titleEs: NotificationTemplate.titleEs;
            messageTextEs: NotificationTemplate.messageTextEs;
            shortMessageTextEs: NotificationTemplate.shortMessageTextEs;
            htmlMessageEs: NotificationTemplate.htmlMessageEs;
            titleId: NotificationTemplate.titleId;
            messageTextId: NotificationTemplate.messageTextId;
            shortMessageTextId: NotificationTemplate.shortMessageTextId;
            htmlMessageId: NotificationTemplate.htmlMessageId;
            titleRu: NotificationTemplate.titleRu;
            messageTextRu: NotificationTemplate.messageTextRu;
            shortMessageTextRu: NotificationTemplate.shortMessageTextRu;
            htmlMessageRu: NotificationTemplate.htmlMessageRu;
            titleSo: NotificationTemplate.titleSo;
            messageTextSo: NotificationTemplate.messageTextSo;
            shortMessageTextSo: NotificationTemplate.shortMessageTextSo;
            htmlMessageSo: NotificationTemplate.htmlMessageSo;
            version: NotificationTemplate.version;
            senderName: NotificationTemplate.senderName;
            senderEmail: NotificationTemplate.senderEmail;
            action0: NotificationTemplate.action0;
            action1: NotificationTemplate.action1;
            action2: NotificationTemplate.action2;
            sendEmail: NotificationTemplate.sendEmail;
            sendInAppMessage: NotificationTemplate.sendInAppMessage;
            sendPushNotification: NotificationTemplate.sendPushNotification;
            sendSms: NotificationTemplate.sendSms;
            isCore: NotificationTemplate.isCore;
        };
    }
    export namespace NotificationTemplate {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'NotificationTemplate';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'OutputField';
            name: 'name';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$NotificationTemplateName;
        }
        interface description {
            kind: 'OutputField';
            name: 'description';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface titleAr {
            kind: 'OutputField';
            name: 'titleAr';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextAr {
            kind: 'OutputField';
            name: 'messageTextAr';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextAr {
            kind: 'OutputField';
            name: 'shortMessageTextAr';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageAr {
            kind: 'OutputField';
            name: 'htmlMessageAr';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEn {
            kind: 'OutputField';
            name: 'titleEn';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextEn {
            kind: 'OutputField';
            name: 'messageTextEn';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextEn {
            kind: 'OutputField';
            name: 'shortMessageTextEn';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageEn {
            kind: 'OutputField';
            name: 'htmlMessageEn';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEs {
            kind: 'OutputField';
            name: 'titleEs';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextEs {
            kind: 'OutputField';
            name: 'messageTextEs';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextEs {
            kind: 'OutputField';
            name: 'shortMessageTextEs';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageEs {
            kind: 'OutputField';
            name: 'htmlMessageEs';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface titleId {
            kind: 'OutputField';
            name: 'titleId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextId {
            kind: 'OutputField';
            name: 'messageTextId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextId {
            kind: 'OutputField';
            name: 'shortMessageTextId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageId {
            kind: 'OutputField';
            name: 'htmlMessageId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface titleRu {
            kind: 'OutputField';
            name: 'titleRu';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextRu {
            kind: 'OutputField';
            name: 'messageTextRu';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextRu {
            kind: 'OutputField';
            name: 'shortMessageTextRu';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageRu {
            kind: 'OutputField';
            name: 'htmlMessageRu';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface titleSo {
            kind: 'OutputField';
            name: 'titleSo';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextSo {
            kind: 'OutputField';
            name: 'messageTextSo';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextSo {
            kind: 'OutputField';
            name: 'shortMessageTextSo';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageSo {
            kind: 'OutputField';
            name: 'htmlMessageSo';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface version {
            kind: 'OutputField';
            name: 'version';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface senderName {
            kind: 'OutputField';
            name: 'senderName';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderEmail {
            kind: 'OutputField';
            name: 'senderEmail';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface action0 {
            kind: 'OutputField';
            name: 'action0';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action1 {
            kind: 'OutputField';
            name: 'action1';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action2 {
            kind: 'OutputField';
            name: 'action2';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface sendEmail {
            kind: 'OutputField';
            name: 'sendEmail';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendInAppMessage {
            kind: 'OutputField';
            name: 'sendInAppMessage';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendPushNotification {
            kind: 'OutputField';
            name: 'sendPushNotification';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendSms {
            kind: 'OutputField';
            name: 'sendSms';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isCore {
            kind: 'OutputField';
            name: 'isCore';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface ContentStatus {
        kind: 'Object';
        name: 'ContentStatus';
        fields: {
            __typename: ContentStatus.__typename;
            id: ContentStatus.id;
            adminNotes: ContentStatus.adminNotes;
            events: ContentStatus.events;
            metadata: ContentStatus.metadata;
            createdAt: ContentStatus.createdAt;
            createdBy: ContentStatus.createdBy;
            updatedAt: ContentStatus.updatedAt;
            updatedBy: ContentStatus.updatedBy;
            deletedAt: ContentStatus.deletedAt;
            deletedBy: ContentStatus.deletedBy;
            optionsUpdatedAt: ContentStatus.optionsUpdatedAt;
            myUserUpdatedAt: ContentStatus.myUserUpdatedAt;
            myUserInboxUpdatedAt: ContentStatus.myUserInboxUpdatedAt;
        };
    }
    export namespace ContentStatus {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ContentStatus';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface optionsUpdatedAt {
            kind: 'OutputField';
            name: 'optionsUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Long;
        }
        interface myUserUpdatedAt {
            kind: 'OutputField';
            name: 'myUserUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Long;
        }
        interface myUserInboxUpdatedAt {
            kind: 'OutputField';
            name: 'myUserInboxUpdatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$Long;
        }
    }
    export interface BgChannelChangedEvent {
        kind: 'Object';
        name: 'BgChannelChangedEvent';
        fields: {
            __typename: BgChannelChangedEvent.__typename;
            serviceRequest: BgChannelChangedEvent.serviceRequest;
            channelId: BgChannelChangedEvent.channelId;
            invitationId: BgChannelChangedEvent.invitationId;
            messageId: BgChannelChangedEvent.messageId;
            participantId: BgChannelChangedEvent.participantId;
            eventType: BgChannelChangedEvent.eventType;
            requestId: BgChannelChangedEvent.requestId;
        };
    }
    export namespace BgChannelChangedEvent {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'BgChannelChangedEvent';
            };
        }
        interface serviceRequest {
            kind: 'OutputField';
            name: 'serviceRequest';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface channelId {
            kind: 'OutputField';
            name: 'channelId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface invitationId {
            kind: 'OutputField';
            name: 'invitationId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface messageId {
            kind: 'OutputField';
            name: 'messageId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface participantId {
            kind: 'OutputField';
            name: 'participantId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface eventType {
            kind: 'OutputField';
            name: 'eventType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelChangedEventType;
        }
        interface requestId {
            kind: 'OutputField';
            name: 'requestId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface ObjectChangedEvent {
        kind: 'Object';
        name: 'ObjectChangedEvent';
        fields: {
            __typename: ObjectChangedEvent.__typename;
            serviceRequest: ObjectChangedEvent.serviceRequest;
            objectId: ObjectChangedEvent.objectId;
            modelType: ObjectChangedEvent.modelType;
            ownerUserId: ObjectChangedEvent.ownerUserId;
            messageType: ObjectChangedEvent.messageType;
            requestId: ObjectChangedEvent.requestId;
            object: ObjectChangedEvent.$object;
        };
    }
    export namespace ObjectChangedEvent {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'ObjectChangedEvent';
            };
        }
        interface serviceRequest {
            kind: 'OutputField';
            name: 'serviceRequest';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ServiceRequest;
        }
        interface objectId {
            kind: 'OutputField';
            name: 'objectId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface modelType {
            kind: 'OutputField';
            name: 'modelType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ModelType;
        }
        interface ownerUserId {
            kind: 'OutputField';
            name: 'ownerUserId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface messageType {
            kind: 'OutputField';
            name: 'messageType';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ObjectChangedEventType;
        }
        interface requestId {
            kind: 'OutputField';
            name: 'requestId';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface $object {
            kind: 'OutputField';
            name: 'object';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModel;
        }
    }
    export interface BaseModel {
        kind: 'Object';
        name: 'BaseModel';
        fields: {
            __typename: BaseModel.__typename;
            id: BaseModel.id;
            adminNotes: BaseModel.adminNotes;
            events: BaseModel.events;
            metadata: BaseModel.metadata;
            createdAt: BaseModel.createdAt;
            createdBy: BaseModel.createdBy;
            updatedAt: BaseModel.updatedAt;
            updatedBy: BaseModel.updatedBy;
            deletedAt: BaseModel.deletedAt;
            deletedBy: BaseModel.deletedBy;
        };
    }
    export namespace BaseModel {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'BaseModel';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'OutputField';
            name: 'adminNotes';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'OutputField';
            name: 'events';
            arguments: {};
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEvent;
        }
        interface metadata {
            kind: 'OutputField';
            name: 'metadata';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadata;
        }
        interface createdAt {
            kind: 'OutputField';
            name: 'createdAt';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'OutputField';
            name: 'createdBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'OutputField';
            name: 'updatedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'OutputField';
            name: 'deletedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'OutputField';
            name: 'deletedBy';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface FindObjectsOptions {
        kind: 'InputObject';
        name: 'FindObjectsOptions';
        isAllFieldsNullable: true;
        fields: {
            limit: FindObjectsOptions.limit;
            sort: FindObjectsOptions.sort;
            skip: FindObjectsOptions.skip;
            timeout: FindObjectsOptions.timeout;
            tailable: FindObjectsOptions.tailable;
            awaitData: FindObjectsOptions.awaitData;
            batchSize: FindObjectsOptions.batchSize;
            returnKey: FindObjectsOptions.returnKey;
            maxTimeMS: FindObjectsOptions.maxTimeMS;
            maxAwaitTimeMS: FindObjectsOptions.maxAwaitTimeMS;
            noCursorTimeout: FindObjectsOptions.noCursorTimeout;
            singleBatch: FindObjectsOptions.singleBatch;
            allowPartialResults: FindObjectsOptions.allowPartialResults;
            showRecordId: FindObjectsOptions.showRecordId;
            includeArchived: FindObjectsOptions.includeArchived;
            includeBlocked: FindObjectsOptions.includeBlocked;
            includeDeleted: FindObjectsOptions.includeDeleted;
            includeSuspended: FindObjectsOptions.includeSuspended;
        };
    }
    export namespace FindObjectsOptions {
        interface limit {
            kind: 'InputField';
            name: 'limit';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface sort {
            kind: 'InputField';
            name: 'sort';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$SortItem;
        }
        interface skip {
            kind: 'InputField';
            name: 'skip';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface timeout {
            kind: 'InputField';
            name: 'timeout';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface tailable {
            kind: 'InputField';
            name: 'tailable';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface awaitData {
            kind: 'InputField';
            name: 'awaitData';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface batchSize {
            kind: 'InputField';
            name: 'batchSize';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface returnKey {
            kind: 'InputField';
            name: 'returnKey';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface maxTimeMS {
            kind: 'InputField';
            name: 'maxTimeMS';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface maxAwaitTimeMS {
            kind: 'InputField';
            name: 'maxAwaitTimeMS';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface noCursorTimeout {
            kind: 'InputField';
            name: 'noCursorTimeout';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface singleBatch {
            kind: 'InputField';
            name: 'singleBatch';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface allowPartialResults {
            kind: 'InputField';
            name: 'allowPartialResults';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showRecordId {
            kind: 'InputField';
            name: 'showRecordId';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface includeArchived {
            kind: 'InputField';
            name: 'includeArchived';
            inlineType: [0];
            namedType: $$NamedTypes.$$IncludeFilterOption;
        }
        interface includeBlocked {
            kind: 'InputField';
            name: 'includeBlocked';
            inlineType: [0];
            namedType: $$NamedTypes.$$IncludeFilterOption;
        }
        interface includeDeleted {
            kind: 'InputField';
            name: 'includeDeleted';
            inlineType: [0];
            namedType: $$NamedTypes.$$IncludeFilterOption;
        }
        interface includeSuspended {
            kind: 'InputField';
            name: 'includeSuspended';
            inlineType: [0];
            namedType: $$NamedTypes.$$IncludeFilterOption;
        }
    }
    export interface SortItem {
        kind: 'InputObject';
        name: 'SortItem';
        isAllFieldsNullable: true;
        fields: {
            field: SortItem.field;
            direction: SortItem.direction;
        };
    }
    export namespace SortItem {
        interface field {
            kind: 'InputField';
            name: 'field';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface direction {
            kind: 'InputField';
            name: 'direction';
            inlineType: [0];
            namedType: $$NamedTypes.$$SortDirection;
        }
    }
    export interface FindUserByIdentOptions {
        kind: 'InputObject';
        name: 'FindUserByIdentOptions';
        isAllFieldsNullable: true;
        fields: {
            includeDeleted: FindUserByIdentOptions.includeDeleted;
            includeGroupProfiles: FindUserByIdentOptions.includeGroupProfiles;
        };
    }
    export namespace FindUserByIdentOptions {
        interface includeDeleted {
            kind: 'InputField';
            name: 'includeDeleted';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface includeGroupProfiles {
            kind: 'InputField';
            name: 'includeGroupProfiles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserInput {
        kind: 'InputObject';
        name: 'UserInput';
        isAllFieldsNullable: true;
        fields: {
            id: UserInput.id;
            adminNotes: UserInput.adminNotes;
            events: UserInput.events;
            metadata: UserInput.metadata;
            createdAt: UserInput.createdAt;
            createdBy: UserInput.createdBy;
            updatedAt: UserInput.updatedAt;
            updatedBy: UserInput.updatedBy;
            deletedAt: UserInput.deletedAt;
            deletedBy: UserInput.deletedBy;
            firstName: UserInput.firstName;
            lastName: UserInput.lastName;
            fullName: UserInput.fullName;
            userHandle: UserInput.userHandle;
            phoneNumber: UserInput.phoneNumber;
            phoneNumberUpdatedAt: UserInput.phoneNumberUpdatedAt;
            isPhoneNumberVerified: UserInput.isPhoneNumberVerified;
            email: UserInput.email;
            emailUpdatedAt: UserInput.emailUpdatedAt;
            isEmailVerified: UserInput.isEmailVerified;
            emailSource: UserInput.emailSource;
            genderTextId: UserInput.genderTextId;
            cityOfResidence: UserInput.cityOfResidence;
            regionOfResidence: UserInput.regionOfResidence;
            countryOfResidenceTextId: UserInput.countryOfResidenceTextId;
            postalCode: UserInput.postalCode;
            avatarUrl: UserInput.avatarUrl;
            websites: UserInput.websites;
            authType: UserInput.authType;
            inviteCode: UserInput.inviteCode;
            currentPassword: UserInput.currentPassword;
            newPassword: UserInput.newPassword;
            preferredLanguageTextId: UserInput.preferredLanguageTextId;
            spokenLanguagesTextIds: UserInput.spokenLanguagesTextIds;
            selectedUiLanguageTextId: UserInput.selectedUiLanguageTextId;
            fallbackUiLanguageTextId: UserInput.fallbackUiLanguageTextId;
            discoverable: UserInput.discoverable;
            roles: UserInput.roles;
            appFeatures: UserInput.appFeatures;
            source: UserInput.source;
            timezone: UserInput.timezone;
            preferences: UserInput.preferences;
            trustLevel: UserInput.trustLevel;
            termsAndConditionsAcceptedAt: UserInput.termsAndConditionsAcceptedAt;
            optIntoNewsletter: UserInput.optIntoNewsletter;
            onboardingStage: UserInput.onboardingStage;
            isTestUser: UserInput.isTestUser;
            signedInAt: UserInput.signedInAt;
            signedOutAt: UserInput.signedOutAt;
            latestActivityAt: UserInput.latestActivityAt;
            inactivatedAt: UserInput.inactivatedAt;
            inactivatedBy: UserInput.inactivatedBy;
            suspendedAt: UserInput.suspendedAt;
            suspendedBy: UserInput.suspendedBy;
            syncedToAnalyticsAt: UserInput.syncedToAnalyticsAt;
            companyIds: UserInput.companyIds;
            companies: UserInput.companies;
            groupIds: UserInput.groupIds;
            parentGroupIds: UserInput.parentGroupIds;
            externalGroupIds: UserInput.externalGroupIds;
            pronounsTextIds: UserInput.pronounsTextIds;
            groupMemberships: UserInput.groupMemberships;
            addToGroupIds: UserInput.addToGroupIds;
            removeFromGroupIds: UserInput.removeFromGroupIds;
            seeksHelp: UserInput.seeksHelp;
            offersHelp: UserInput.offersHelp;
            birthYear: UserInput.birthYear;
            ethnicity: UserInput.ethnicity;
            educationLevelTextId: UserInput.educationLevelTextId;
            personalBio: UserInput.personalBio;
            yearsManagementExperience: UserInput.yearsManagementExperience;
            yearsOwnershipExperience: UserInput.yearsOwnershipExperience;
            academicExperienceIds: UserInput.academicExperienceIds;
            company: UserInput.company;
            academicExperiences: UserInput.academicExperiences;
            businessExperienceIds: UserInput.businessExperienceIds;
            businessExperiences: UserInput.businessExperiences;
            cityOfOrigin: UserInput.cityOfOrigin;
            regionOfOrigin: UserInput.regionOfOrigin;
            countryOfOriginTextId: UserInput.countryOfOriginTextId;
            isOnVacation: UserInput.isOnVacation;
            profileRoleHistory: UserInput.profileRoleHistory;
            ssoIdp: UserInput.ssoIdp;
        };
    }
    export namespace UserInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface firstName {
            kind: 'InputField';
            name: 'firstName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'InputField';
            name: 'lastName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface fullName {
            kind: 'InputField';
            name: 'fullName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'InputField';
            name: 'userHandle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberUpdatedAt {
            kind: 'InputField';
            name: 'phoneNumberUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isPhoneNumberVerified {
            kind: 'InputField';
            name: 'isPhoneNumberVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailUpdatedAt {
            kind: 'InputField';
            name: 'emailUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isEmailVerified {
            kind: 'InputField';
            name: 'isEmailVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * The source of the email address, e.g. "google", "facebook", etc.
         */
        interface emailSource {
            kind: 'InputField';
            name: 'emailSource';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface genderTextId {
            kind: 'InputField';
            name: 'genderTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cityOfResidence {
            kind: 'InputField';
            name: 'cityOfResidence';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfResidence {
            kind: 'InputField';
            name: 'regionOfResidence';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfResidenceTextId {
            kind: 'InputField';
            name: 'countryOfResidenceTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface postalCode {
            kind: 'InputField';
            name: 'postalCode';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'InputField';
            name: 'avatarUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'InputField';
            name: 'websites';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValueInput;
        }
        interface authType {
            kind: 'InputField';
            name: 'authType';
            inlineType: [0];
            namedType: $$NamedTypes.$$AuthType;
        }
        interface inviteCode {
            kind: 'InputField';
            name: 'inviteCode';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface currentPassword {
            kind: 'InputField';
            name: 'currentPassword';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface newPassword {
            kind: 'InputField';
            name: 'newPassword';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface preferredLanguageTextId {
            kind: 'InputField';
            name: 'preferredLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface spokenLanguagesTextIds {
            kind: 'InputField';
            name: 'spokenLanguagesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface selectedUiLanguageTextId {
            kind: 'InputField';
            name: 'selectedUiLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface fallbackUiLanguageTextId {
            kind: 'InputField';
            name: 'fallbackUiLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface discoverable {
            kind: 'InputField';
            name: 'discoverable';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface appFeatures {
            kind: 'InputField';
            name: 'appFeatures';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AppFeature;
        }
        interface source {
            kind: 'InputField';
            name: 'source';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'InputField';
            name: 'timezone';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface preferences {
            kind: 'InputField';
            name: 'preferences';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserPreferencesInput;
        }
        interface trustLevel {
            kind: 'InputField';
            name: 'trustLevel';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface termsAndConditionsAcceptedAt {
            kind: 'InputField';
            name: 'termsAndConditionsAcceptedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface optIntoNewsletter {
            kind: 'InputField';
            name: 'optIntoNewsletter';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface onboardingStage {
            kind: 'InputField';
            name: 'onboardingStage';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isTestUser {
            kind: 'InputField';
            name: 'isTestUser';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface signedInAt {
            kind: 'InputField';
            name: 'signedInAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedOutAt {
            kind: 'InputField';
            name: 'signedOutAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface latestActivityAt {
            kind: 'InputField';
            name: 'latestActivityAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedAt {
            kind: 'InputField';
            name: 'inactivatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedBy {
            kind: 'InputField';
            name: 'inactivatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'InputField';
            name: 'suspendedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'InputField';
            name: 'suspendedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface syncedToAnalyticsAt {
            kind: 'InputField';
            name: 'syncedToAnalyticsAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface companyIds {
            kind: 'InputField';
            name: 'companyIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Used internally, will not work in GraphQL queries.
         */
        interface companies {
            kind: 'InputField';
            name: 'companies';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$CompanyInput;
        }
        interface groupIds {
            kind: 'InputField';
            name: 'groupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface parentGroupIds {
            kind: 'InputField';
            name: 'parentGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface externalGroupIds {
            kind: 'InputField';
            name: 'externalGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface pronounsTextIds {
            kind: 'InputField';
            name: 'pronounsTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface groupMemberships {
            kind: 'InputField';
            name: 'groupMemberships';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipInput;
        }
        interface addToGroupIds {
            kind: 'InputField';
            name: 'addToGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface removeFromGroupIds {
            kind: 'InputField';
            name: 'removeFromGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface seeksHelp {
            kind: 'InputField';
            name: 'seeksHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'InputField';
            name: 'offersHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface birthYear {
            kind: 'InputField';
            name: 'birthYear';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface ethnicity {
            kind: 'InputField';
            name: 'ethnicity';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface educationLevelTextId {
            kind: 'InputField';
            name: 'educationLevelTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface personalBio {
            kind: 'InputField';
            name: 'personalBio';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface yearsManagementExperience {
            kind: 'InputField';
            name: 'yearsManagementExperience';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface yearsOwnershipExperience {
            kind: 'InputField';
            name: 'yearsOwnershipExperience';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface academicExperienceIds {
            kind: 'InputField';
            name: 'academicExperienceIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Specify a company you want to create and add the user to.
         */
        interface company {
            kind: 'InputField';
            name: 'company';
            inlineType: [0];
            namedType: $$NamedTypes.$$CompanyInput;
        }
        /**
         * Specify a list of academic experiences you want to create for the user.
         */
        interface academicExperiences {
            kind: 'InputField';
            name: 'academicExperiences';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AcademicExperienceInput;
        }
        interface businessExperienceIds {
            kind: 'InputField';
            name: 'businessExperienceIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Specify a list of business experiences you want to create for the user.
         */
        interface businessExperiences {
            kind: 'InputField';
            name: 'businessExperiences';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BusinessExperienceInput;
        }
        interface cityOfOrigin {
            kind: 'InputField';
            name: 'cityOfOrigin';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfOrigin {
            kind: 'InputField';
            name: 'regionOfOrigin';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Users Country of origin. Use a Country Options textId.
         */
        interface countryOfOriginTextId {
            kind: 'InputField';
            name: 'countryOfOriginTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isOnVacation {
            kind: 'InputField';
            name: 'isOnVacation';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface profileRoleHistory {
            kind: 'InputField';
            name: 'profileRoleHistory';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserProfileRoleHistoryItemInput;
        }
        interface ssoIdp {
            kind: 'InputField';
            name: 'ssoIdp';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ModelEventInput {
        kind: 'InputObject';
        name: 'ModelEventInput';
        isAllFieldsNullable: true;
        fields: {
            time: ModelEventInput.time;
            modelEventType: ModelEventInput.modelEventType;
            message: ModelEventInput.message;
        };
    }
    export namespace ModelEventInput {
        interface time {
            kind: 'InputField';
            name: 'time';
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface modelEventType {
            kind: 'InputField';
            name: 'modelEventType';
            inlineType: [1];
            namedType: $$NamedTypes.$$ModelEventType;
        }
        interface message {
            kind: 'InputField';
            name: 'message';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface BaseModelMetadataInput {
        kind: 'InputObject';
        name: 'BaseModelMetadataInput';
        isAllFieldsNullable: true;
        fields: {
            updatedAt: BaseModelMetadataInput.updatedAt;
        };
    }
    export namespace BaseModelMetadataInput {
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface LabeledStringValueInput {
        kind: 'InputObject';
        name: 'LabeledStringValueInput';
        isAllFieldsNullable: true;
        fields: {
            label: LabeledStringValueInput.label;
            value: LabeledStringValueInput.value;
            tags: LabeledStringValueInput.tags;
        };
    }
    export namespace LabeledStringValueInput {
        interface label {
            kind: 'InputField';
            name: 'label';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface value {
            kind: 'InputField';
            name: 'value';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface tags {
            kind: 'InputField';
            name: 'tags';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserPreferencesInput {
        kind: 'InputObject';
        name: 'UserPreferencesInput';
        isAllFieldsNullable: true;
        fields: {
            id: UserPreferencesInput.id;
            adminNotes: UserPreferencesInput.adminNotes;
            events: UserPreferencesInput.events;
            metadata: UserPreferencesInput.metadata;
            createdAt: UserPreferencesInput.createdAt;
            createdBy: UserPreferencesInput.createdBy;
            updatedAt: UserPreferencesInput.updatedAt;
            updatedBy: UserPreferencesInput.updatedBy;
            deletedAt: UserPreferencesInput.deletedAt;
            deletedBy: UserPreferencesInput.deletedBy;
            shareEmail: UserPreferencesInput.shareEmail;
            sharePhoneNumber: UserPreferencesInput.sharePhoneNumber;
            showWelcomeMessage: UserPreferencesInput.showWelcomeMessage;
            notificationOptionsInput: UserPreferencesInput.notificationOptionsInput;
        };
    }
    export namespace UserPreferencesInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface shareEmail {
            kind: 'InputField';
            name: 'shareEmail';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sharePhoneNumber {
            kind: 'InputField';
            name: 'sharePhoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface showWelcomeMessage {
            kind: 'InputField';
            name: 'showWelcomeMessage';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface notificationOptionsInput {
            kind: 'InputField';
            name: 'notificationOptionsInput';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$NotificationOptionsInput;
        }
    }
    export interface NotificationOptionsInput {
        kind: 'InputObject';
        name: 'NotificationOptionsInput';
        isAllFieldsNullable: true;
        fields: {
            notificationType: NotificationOptionsInput.notificationType;
            enableEmail: NotificationOptionsInput.enableEmail;
            enableInAppMessage: NotificationOptionsInput.enableInAppMessage;
            enablePushNotification: NotificationOptionsInput.enablePushNotification;
            enableSms: NotificationOptionsInput.enableSms;
            frequency: NotificationOptionsInput.frequency;
        };
    }
    export namespace NotificationOptionsInput {
        interface notificationType {
            kind: 'InputField';
            name: 'notificationType';
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationType;
        }
        interface enableEmail {
            kind: 'InputField';
            name: 'enableEmail';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface enableInAppMessage {
            kind: 'InputField';
            name: 'enableInAppMessage';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface enablePushNotification {
            kind: 'InputField';
            name: 'enablePushNotification';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface enableSms {
            kind: 'InputField';
            name: 'enableSms';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface frequency {
            kind: 'InputField';
            name: 'frequency';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface CompanyInput {
        kind: 'InputObject';
        name: 'CompanyInput';
        isAllFieldsNullable: true;
        fields: {
            id: CompanyInput.id;
            adminNotes: CompanyInput.adminNotes;
            events: CompanyInput.events;
            metadata: CompanyInput.metadata;
            createdAt: CompanyInput.createdAt;
            createdBy: CompanyInput.createdBy;
            updatedAt: CompanyInput.updatedAt;
            updatedBy: CompanyInput.updatedBy;
            deletedAt: CompanyInput.deletedAt;
            deletedBy: CompanyInput.deletedBy;
            name: CompanyInput.name;
            description: CompanyInput.description;
            location: CompanyInput.location;
            companyTypeTextId: CompanyInput.companyTypeTextId;
            companyStageTextId: CompanyInput.companyStageTextId;
            websites: CompanyInput.websites;
            industries: CompanyInput.industries;
            isOperational: CompanyInput.isOperational;
            isFundraising: CompanyInput.isFundraising;
            annualRevenue: CompanyInput.annualRevenue;
            employeeCount: CompanyInput.employeeCount;
            foundedAt: CompanyInput.foundedAt;
            addUserIds: CompanyInput.addUserIds;
        };
    }
    export namespace CompanyInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface location {
            kind: 'InputField';
            name: 'location';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface companyTypeTextId {
            kind: 'InputField';
            name: 'companyTypeTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface companyStageTextId {
            kind: 'InputField';
            name: 'companyStageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'InputField';
            name: 'websites';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValueInput;
        }
        interface industries {
            kind: 'InputField';
            name: 'industries';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface isOperational {
            kind: 'InputField';
            name: 'isOperational';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isFundraising {
            kind: 'InputField';
            name: 'isFundraising';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface annualRevenue {
            kind: 'InputField';
            name: 'annualRevenue';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface employeeCount {
            kind: 'InputField';
            name: 'employeeCount';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface foundedAt {
            kind: 'InputField';
            name: 'foundedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface addUserIds {
            kind: 'InputField';
            name: 'addUserIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface GroupMembershipInput {
        kind: 'InputObject';
        name: 'GroupMembershipInput';
        isAllFieldsNullable: true;
        fields: {
            id: GroupMembershipInput.id;
            adminNotes: GroupMembershipInput.adminNotes;
            events: GroupMembershipInput.events;
            metadata: GroupMembershipInput.metadata;
            createdAt: GroupMembershipInput.createdAt;
            createdBy: GroupMembershipInput.createdBy;
            updatedAt: GroupMembershipInput.updatedAt;
            updatedBy: GroupMembershipInput.updatedBy;
            deletedAt: GroupMembershipInput.deletedAt;
            deletedBy: GroupMembershipInput.deletedBy;
            groupId: GroupMembershipInput.groupId;
            groupIdent: GroupMembershipInput.groupIdent;
            userId: GroupMembershipInput.userId;
            roles: GroupMembershipInput.roles;
        };
    }
    export namespace GroupMembershipInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'InputField';
            name: 'groupIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
    }
    export interface AcademicExperienceInput {
        kind: 'InputObject';
        name: 'AcademicExperienceInput';
        isAllFieldsNullable: true;
        fields: {
            id: AcademicExperienceInput.id;
            adminNotes: AcademicExperienceInput.adminNotes;
            events: AcademicExperienceInput.events;
            metadata: AcademicExperienceInput.metadata;
            createdAt: AcademicExperienceInput.createdAt;
            createdBy: AcademicExperienceInput.createdBy;
            updatedAt: AcademicExperienceInput.updatedAt;
            updatedBy: AcademicExperienceInput.updatedBy;
            deletedAt: AcademicExperienceInput.deletedAt;
            deletedBy: AcademicExperienceInput.deletedBy;
            institutionName: AcademicExperienceInput.institutionName;
            degreeType: AcademicExperienceInput.degreeType;
            fieldOfStudy: AcademicExperienceInput.fieldOfStudy;
            startDate: AcademicExperienceInput.startDate;
            endDate: AcademicExperienceInput.endDate;
            userId: AcademicExperienceInput.userId;
        };
    }
    export namespace AcademicExperienceInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface institutionName {
            kind: 'InputField';
            name: 'institutionName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * E.g. "Bachelor of Science"
         */
        interface degreeType {
            kind: 'InputField';
            name: 'degreeType';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * E.g. "Computer Science"
         */
        interface fieldOfStudy {
            kind: 'InputField';
            name: 'fieldOfStudy';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface startDate {
            kind: 'InputField';
            name: 'startDate';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * If the experience is ongoing, endDate is null.
         */
        interface endDate {
            kind: 'InputField';
            name: 'endDate';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface BusinessExperienceInput {
        kind: 'InputObject';
        name: 'BusinessExperienceInput';
        isAllFieldsNullable: true;
        fields: {
            id: BusinessExperienceInput.id;
            adminNotes: BusinessExperienceInput.adminNotes;
            events: BusinessExperienceInput.events;
            metadata: BusinessExperienceInput.metadata;
            createdAt: BusinessExperienceInput.createdAt;
            createdBy: BusinessExperienceInput.createdBy;
            updatedAt: BusinessExperienceInput.updatedAt;
            updatedBy: BusinessExperienceInput.updatedBy;
            deletedAt: BusinessExperienceInput.deletedAt;
            deletedBy: BusinessExperienceInput.deletedBy;
            businessName: BusinessExperienceInput.businessName;
            jobTitle: BusinessExperienceInput.jobTitle;
            city: BusinessExperienceInput.city;
            state: BusinessExperienceInput.state;
            country: BusinessExperienceInput.country;
            startDate: BusinessExperienceInput.startDate;
            endDate: BusinessExperienceInput.endDate;
            userId: BusinessExperienceInput.userId;
        };
    }
    export namespace BusinessExperienceInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface businessName {
            kind: 'InputField';
            name: 'businessName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface jobTitle {
            kind: 'InputField';
            name: 'jobTitle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface city {
            kind: 'InputField';
            name: 'city';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface state {
            kind: 'InputField';
            name: 'state';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface country {
            kind: 'InputField';
            name: 'country';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface startDate {
            kind: 'InputField';
            name: 'startDate';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * If the experience is ongoing, endDate is null.
         */
        interface endDate {
            kind: 'InputField';
            name: 'endDate';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface UserProfileRoleHistoryItemInput {
        kind: 'InputObject';
        name: 'UserProfileRoleHistoryItemInput';
        isAllFieldsNullable: false;
        fields: {
            newRole: UserProfileRoleHistoryItemInput.newRole;
            createdAt: UserProfileRoleHistoryItemInput.createdAt;
        };
    }
    export namespace UserProfileRoleHistoryItemInput {
        interface newRole {
            kind: 'InputField';
            name: 'newRole';
            inlineType: [1];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [1];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserListFilter {
        kind: 'InputObject';
        name: 'UserListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: UserListFilter.ids;
            excludeIds: UserListFilter.excludeIds;
            searchText: UserListFilter.searchText;
            caseSensitive: UserListFilter.caseSensitive;
            textSearchFields: UserListFilter.textSearchFields;
            createdAtFrom: UserListFilter.createdAtFrom;
            createdAtUntil: UserListFilter.createdAtUntil;
            updatedAtFrom: UserListFilter.updatedAtFrom;
            updatedAtUntil: UserListFilter.updatedAtUntil;
            ident: UserListFilter.ident;
            emailIn: UserListFilter.emailIn;
            phoneNumberIn: UserListFilter.phoneNumberIn;
            inviteCodeIn: UserListFilter.inviteCodeIn;
            rolesIn: UserListFilter.rolesIn;
            excludeRoles: UserListFilter.excludeRoles;
            excludeContacts: UserListFilter.excludeContacts;
            createdAtGreaterThan: UserListFilter.createdAtGreaterThan;
            latestActivityAtGreaterThan: UserListFilter.latestActivityAtGreaterThan;
            companyId: UserListFilter.companyId;
            syncedWithMm2: UserListFilter.syncedWithMm2;
            isMm2User: UserListFilter.isMm2User;
        };
    }
    export namespace UserListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface ident {
            kind: 'InputField';
            name: 'ident';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailIn {
            kind: 'InputField';
            name: 'emailIn';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberIn {
            kind: 'InputField';
            name: 'phoneNumberIn';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface inviteCodeIn {
            kind: 'InputField';
            name: 'inviteCodeIn';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface rolesIn {
            kind: 'InputField';
            name: 'rolesIn';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface excludeRoles {
            kind: 'InputField';
            name: 'excludeRoles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeContacts {
            kind: 'InputField';
            name: 'excludeContacts';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createdAtGreaterThan {
            kind: 'InputField';
            name: 'createdAtGreaterThan';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface latestActivityAtGreaterThan {
            kind: 'InputField';
            name: 'latestActivityAtGreaterThan';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface companyId {
            kind: 'InputField';
            name: 'companyId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface syncedWithMm2 {
            kind: 'InputField';
            name: 'syncedWithMm2';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isMm2User {
            kind: 'InputField';
            name: 'isMm2User';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface UserDeviceInput {
        kind: 'InputObject';
        name: 'UserDeviceInput';
        isAllFieldsNullable: true;
        fields: {
            id: UserDeviceInput.id;
            adminNotes: UserDeviceInput.adminNotes;
            events: UserDeviceInput.events;
            metadata: UserDeviceInput.metadata;
            createdAt: UserDeviceInput.createdAt;
            createdBy: UserDeviceInput.createdBy;
            updatedAt: UserDeviceInput.updatedAt;
            updatedBy: UserDeviceInput.updatedBy;
            deletedAt: UserDeviceInput.deletedAt;
            deletedBy: UserDeviceInput.deletedBy;
            userId: UserDeviceInput.userId;
            deviceUuid: UserDeviceInput.deviceUuid;
            deviceType: UserDeviceInput.deviceType;
            trusted: UserDeviceInput.trusted;
            phoneNumber: UserDeviceInput.phoneNumber;
            phoneNumberUpdatedAt: UserDeviceInput.phoneNumberUpdatedAt;
            isPhoneNumberVerified: UserDeviceInput.isPhoneNumberVerified;
            brand: UserDeviceInput.brand;
            model: UserDeviceInput.model;
            isTablet: UserDeviceInput.isTablet;
            screenWidth: UserDeviceInput.screenWidth;
            screenHeight: UserDeviceInput.screenHeight;
            os: UserDeviceInput.os;
            osVersion: UserDeviceInput.osVersion;
            timezone: UserDeviceInput.timezone;
            ipAddress: UserDeviceInput.ipAddress;
            consumer: UserDeviceInput.consumer;
            consumerVersion: UserDeviceInput.consumerVersion;
            acceptedLanguage: UserDeviceInput.acceptedLanguage;
            locale: UserDeviceInput.locale;
            countryCode: UserDeviceInput.countryCode;
            appVersion: UserDeviceInput.appVersion;
            signedInAt: UserDeviceInput.signedInAt;
            signedOutAt: UserDeviceInput.signedOutAt;
            sessionStartedAt: UserDeviceInput.sessionStartedAt;
            sessionEndedAt: UserDeviceInput.sessionEndedAt;
            authType: UserDeviceInput.authType;
            identityProvider: UserDeviceInput.identityProvider;
            oauthFederatedProvider: UserDeviceInput.oauthFederatedProvider;
            oauthUserId: UserDeviceInput.oauthUserId;
            oauthDelegateUserId: UserDeviceInput.oauthDelegateUserId;
            oauthProfileUrl: UserDeviceInput.oauthProfileUrl;
            oauthToken: UserDeviceInput.oauthToken;
            oauthTokenCreatedAt: UserDeviceInput.oauthTokenCreatedAt;
            oauthTokenExpiresAt: UserDeviceInput.oauthTokenExpiresAt;
            oauthRefreshToken: UserDeviceInput.oauthRefreshToken;
            oauthRefreshTokenCreatedAt: UserDeviceInput.oauthRefreshTokenCreatedAt;
            oauthRefreshTokenExpiresAt: UserDeviceInput.oauthRefreshTokenExpiresAt;
            pushNotificationToken: UserDeviceInput.pushNotificationToken;
            trustedAt: UserDeviceInput.trustedAt;
        };
    }
    export namespace UserDeviceInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deviceUuid {
            kind: 'InputField';
            name: 'deviceUuid';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface deviceType {
            kind: 'InputField';
            name: 'deviceType';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface trusted {
            kind: 'InputField';
            name: 'trusted';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberUpdatedAt {
            kind: 'InputField';
            name: 'phoneNumberUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isPhoneNumberVerified {
            kind: 'InputField';
            name: 'isPhoneNumberVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface brand {
            kind: 'InputField';
            name: 'brand';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface model {
            kind: 'InputField';
            name: 'model';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isTablet {
            kind: 'InputField';
            name: 'isTablet';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface screenWidth {
            kind: 'InputField';
            name: 'screenWidth';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface screenHeight {
            kind: 'InputField';
            name: 'screenHeight';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface os {
            kind: 'InputField';
            name: 'os';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface osVersion {
            kind: 'InputField';
            name: 'osVersion';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'InputField';
            name: 'timezone';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface ipAddress {
            kind: 'InputField';
            name: 'ipAddress';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface consumer {
            kind: 'InputField';
            name: 'consumer';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface consumerVersion {
            kind: 'InputField';
            name: 'consumerVersion';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface acceptedLanguage {
            kind: 'InputField';
            name: 'acceptedLanguage';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface locale {
            kind: 'InputField';
            name: 'locale';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryCode {
            kind: 'InputField';
            name: 'countryCode';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface appVersion {
            kind: 'InputField';
            name: 'appVersion';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface signedInAt {
            kind: 'InputField';
            name: 'signedInAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedOutAt {
            kind: 'InputField';
            name: 'signedOutAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface sessionStartedAt {
            kind: 'InputField';
            name: 'sessionStartedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface sessionEndedAt {
            kind: 'InputField';
            name: 'sessionEndedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface authType {
            kind: 'InputField';
            name: 'authType';
            inlineType: [0];
            namedType: $$NamedTypes.$$AuthType;
        }
        interface identityProvider {
            kind: 'InputField';
            name: 'identityProvider';
            inlineType: [0];
            namedType: $$NamedTypes.$$IdentityProvider;
        }
        interface oauthFederatedProvider {
            kind: 'InputField';
            name: 'oauthFederatedProvider';
            inlineType: [0];
            namedType: $$NamedTypes.$$FederatedIdentityProvider;
        }
        interface oauthUserId {
            kind: 'InputField';
            name: 'oauthUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthDelegateUserId {
            kind: 'InputField';
            name: 'oauthDelegateUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthProfileUrl {
            kind: 'InputField';
            name: 'oauthProfileUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthToken {
            kind: 'InputField';
            name: 'oauthToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthTokenCreatedAt {
            kind: 'InputField';
            name: 'oauthTokenCreatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface oauthTokenExpiresAt {
            kind: 'InputField';
            name: 'oauthTokenExpiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface oauthRefreshToken {
            kind: 'InputField';
            name: 'oauthRefreshToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthRefreshTokenCreatedAt {
            kind: 'InputField';
            name: 'oauthRefreshTokenCreatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface oauthRefreshTokenExpiresAt {
            kind: 'InputField';
            name: 'oauthRefreshTokenExpiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pushNotificationToken {
            kind: 'InputField';
            name: 'pushNotificationToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface trustedAt {
            kind: 'InputField';
            name: 'trustedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserDeviceListFilter {
        kind: 'InputObject';
        name: 'UserDeviceListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: UserDeviceListFilter.ids;
            excludeIds: UserDeviceListFilter.excludeIds;
            searchText: UserDeviceListFilter.searchText;
            caseSensitive: UserDeviceListFilter.caseSensitive;
            textSearchFields: UserDeviceListFilter.textSearchFields;
            createdAtFrom: UserDeviceListFilter.createdAtFrom;
            createdAtUntil: UserDeviceListFilter.createdAtUntil;
            updatedAtFrom: UserDeviceListFilter.updatedAtFrom;
            updatedAtUntil: UserDeviceListFilter.updatedAtUntil;
        };
    }
    export namespace UserDeviceListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UploadedAssetInput {
        kind: 'InputObject';
        name: 'UploadedAssetInput';
        isAllFieldsNullable: true;
        fields: {
            id: UploadedAssetInput.id;
            adminNotes: UploadedAssetInput.adminNotes;
            events: UploadedAssetInput.events;
            metadata: UploadedAssetInput.metadata;
            createdAt: UploadedAssetInput.createdAt;
            createdBy: UploadedAssetInput.createdBy;
            updatedAt: UploadedAssetInput.updatedAt;
            updatedBy: UploadedAssetInput.updatedBy;
            deletedAt: UploadedAssetInput.deletedAt;
            deletedBy: UploadedAssetInput.deletedBy;
            ownerId: UploadedAssetInput.ownerId;
            ownerModelType: UploadedAssetInput.ownerModelType;
            assetType: UploadedAssetInput.assetType;
            hostingService: UploadedAssetInput.hostingService;
            url: UploadedAssetInput.url;
            path: UploadedAssetInput.path;
            s3Bucket: UploadedAssetInput.s3Bucket;
            s3Key: UploadedAssetInput.s3Key;
            mimeType: UploadedAssetInput.mimeType;
            uploadUrl: UploadedAssetInput.uploadUrl;
            uploadUrlExpiresAt: UploadedAssetInput.uploadUrlExpiresAt;
            uploadedAt: UploadedAssetInput.uploadedAt;
            expiresAt: UploadedAssetInput.expiresAt;
        };
    }
    export namespace UploadedAssetInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface ownerId {
            kind: 'InputField';
            name: 'ownerId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface ownerModelType {
            kind: 'InputField';
            name: 'ownerModelType';
            inlineType: [0];
            namedType: $$NamedTypes.$$ModelType;
        }
        interface assetType {
            kind: 'InputField';
            name: 'assetType';
            inlineType: [0];
            namedType: $$NamedTypes.$$UploadedAssetType;
        }
        interface hostingService {
            kind: 'InputField';
            name: 'hostingService';
            inlineType: [0];
            namedType: $$NamedTypes.$$AssetHostingService;
        }
        interface url {
            kind: 'InputField';
            name: 'url';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface path {
            kind: 'InputField';
            name: 'path';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface s3Bucket {
            kind: 'InputField';
            name: 's3Bucket';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface s3Key {
            kind: 'InputField';
            name: 's3Key';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface mimeType {
            kind: 'InputField';
            name: 'mimeType';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface uploadUrl {
            kind: 'InputField';
            name: 'uploadUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface uploadUrlExpiresAt {
            kind: 'InputField';
            name: 'uploadUrlExpiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface uploadedAt {
            kind: 'InputField';
            name: 'uploadedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface expiresAt {
            kind: 'InputField';
            name: 'expiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UploadedAssetListFilter {
        kind: 'InputObject';
        name: 'UploadedAssetListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: UploadedAssetListFilter.ids;
            excludeIds: UploadedAssetListFilter.excludeIds;
            searchText: UploadedAssetListFilter.searchText;
            caseSensitive: UploadedAssetListFilter.caseSensitive;
            textSearchFields: UploadedAssetListFilter.textSearchFields;
            createdAtFrom: UploadedAssetListFilter.createdAtFrom;
            createdAtUntil: UploadedAssetListFilter.createdAtUntil;
            updatedAtFrom: UploadedAssetListFilter.updatedAtFrom;
            updatedAtUntil: UploadedAssetListFilter.updatedAtUntil;
        };
    }
    export namespace UploadedAssetListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ChannelInput {
        kind: 'InputObject';
        name: 'ChannelInput';
        isAllFieldsNullable: true;
        fields: {
            id: ChannelInput.id;
            adminNotes: ChannelInput.adminNotes;
            events: ChannelInput.events;
            metadata: ChannelInput.metadata;
            createdAt: ChannelInput.createdAt;
            createdBy: ChannelInput.createdBy;
            updatedAt: ChannelInput.updatedAt;
            updatedBy: ChannelInput.updatedBy;
            deletedAt: ChannelInput.deletedAt;
            deletedBy: ChannelInput.deletedBy;
            name: ChannelInput.name;
            topic: ChannelInput.topic;
            description: ChannelInput.description;
            tags: ChannelInput.tags;
            channelType: ChannelInput.channelType;
            statuses: ChannelInput.statuses;
            userIds: ChannelInput.userIds;
            otherUserId: ChannelInput.otherUserId;
            inviteUserIds: ChannelInput.inviteUserIds;
            pausedAt: ChannelInput.pausedAt;
            pausedBy: ChannelInput.pausedBy;
            suspendedAt: ChannelInput.suspendedAt;
            suspendedBy: ChannelInput.suspendedBy;
            archivedAt: ChannelInput.archivedAt;
            archivedBy: ChannelInput.archivedBy;
            assumedMentorId: ChannelInput.assumedMentorId;
            mm2Id: ChannelInput.mm2Id;
            syncedWithMm2At: ChannelInput.syncedWithMm2At;
        };
    }
    export namespace ChannelInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface topic {
            kind: 'InputField';
            name: 'topic';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface tags {
            kind: 'InputField';
            name: 'tags';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface channelType {
            kind: 'InputField';
            name: 'channelType';
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelType;
        }
        interface statuses {
            kind: 'InputField';
            name: 'statuses';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BgChannelStatusInput;
        }
        interface userIds {
            kind: 'InputField';
            name: 'userIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * For 1:1 channels, the ID of the other user. The first user is createdBy.
         */
        interface otherUserId {
            kind: 'InputField';
            name: 'otherUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface inviteUserIds {
            kind: 'InputField';
            name: 'inviteUserIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface pausedAt {
            kind: 'InputField';
            name: 'pausedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pausedBy {
            kind: 'InputField';
            name: 'pausedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'InputField';
            name: 'suspendedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'InputField';
            name: 'suspendedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface archivedAt {
            kind: 'InputField';
            name: 'archivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface archivedBy {
            kind: 'InputField';
            name: 'archivedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface assumedMentorId {
            kind: 'InputField';
            name: 'assumedMentorId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2Id {
            kind: 'InputField';
            name: 'mm2Id';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'InputField';
            name: 'syncedWithMm2At';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface BgChannelStatusInput {
        kind: 'InputObject';
        name: 'BgChannelStatusInput';
        isAllFieldsNullable: true;
        fields: {
            userId: BgChannelStatusInput.userId;
            archivedAt: BgChannelStatusInput.archivedAt;
        };
    }
    export namespace BgChannelStatusInput {
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface archivedAt {
            kind: 'InputField';
            name: 'archivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ChannelListFilter {
        kind: 'InputObject';
        name: 'ChannelListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: ChannelListFilter.ids;
            excludeIds: ChannelListFilter.excludeIds;
            searchText: ChannelListFilter.searchText;
            caseSensitive: ChannelListFilter.caseSensitive;
            textSearchFields: ChannelListFilter.textSearchFields;
            createdAtFrom: ChannelListFilter.createdAtFrom;
            createdAtUntil: ChannelListFilter.createdAtUntil;
            updatedAtFrom: ChannelListFilter.updatedAtFrom;
            updatedAtUntil: ChannelListFilter.updatedAtUntil;
            userId: ChannelListFilter.userId;
            userIds: ChannelListFilter.userIds;
            mustHaveMessages: ChannelListFilter.mustHaveMessages;
            invitationMustBeAccepted: ChannelListFilter.invitationMustBeAccepted;
            includeArchivedMessages: ChannelListFilter.includeArchivedMessages;
            includeSystemMessages: ChannelListFilter.includeSystemMessages;
        };
    }
    export namespace ChannelListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIds {
            kind: 'InputField';
            name: 'userIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface mustHaveMessages {
            kind: 'InputField';
            name: 'mustHaveMessages';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface invitationMustBeAccepted {
            kind: 'InputField';
            name: 'invitationMustBeAccepted';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface includeArchivedMessages {
            kind: 'InputField';
            name: 'includeArchivedMessages';
            inlineType: [0];
            namedType: $$NamedTypes.$$IncludeFilterOption;
        }
        interface includeSystemMessages {
            kind: 'InputField';
            name: 'includeSystemMessages';
            inlineType: [0];
            namedType: $$NamedTypes.$$IncludeFilterOption;
        }
    }
    export interface ChannelMessageInput {
        kind: 'InputObject';
        name: 'ChannelMessageInput';
        isAllFieldsNullable: true;
        fields: {
            id: ChannelMessageInput.id;
            adminNotes: ChannelMessageInput.adminNotes;
            events: ChannelMessageInput.events;
            metadata: ChannelMessageInput.metadata;
            createdAt: ChannelMessageInput.createdAt;
            createdBy: ChannelMessageInput.createdBy;
            updatedAt: ChannelMessageInput.updatedAt;
            updatedBy: ChannelMessageInput.updatedBy;
            deletedAt: ChannelMessageInput.deletedAt;
            deletedBy: ChannelMessageInput.deletedBy;
            channelId: ChannelMessageInput.channelId;
            replyToMessageId: ChannelMessageInput.replyToMessageId;
            channelMessageType: ChannelMessageInput.channelMessageType;
            messageText: ChannelMessageInput.messageText;
            statuses: ChannelMessageInput.statuses;
            editedAt: ChannelMessageInput.editedAt;
            suspendedAt: ChannelMessageInput.suspendedAt;
            suspendedBy: ChannelMessageInput.suspendedBy;
            mm2ConversationId: ChannelMessageInput.mm2ConversationId;
            mm2Id: ChannelMessageInput.mm2Id;
            syncedWithMm2At: ChannelMessageInput.syncedWithMm2At;
        };
    }
    export namespace ChannelMessageInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'InputField';
            name: 'channelId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface replyToMessageId {
            kind: 'InputField';
            name: 'replyToMessageId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelMessageType {
            kind: 'InputField';
            name: 'channelMessageType';
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelMessageType;
        }
        interface messageText {
            kind: 'InputField';
            name: 'messageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface statuses {
            kind: 'InputField';
            name: 'statuses';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelMessageStatusInput;
        }
        interface editedAt {
            kind: 'InputField';
            name: 'editedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedAt {
            kind: 'InputField';
            name: 'suspendedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'InputField';
            name: 'suspendedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2ConversationId {
            kind: 'InputField';
            name: 'mm2ConversationId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer. Mm2 message ID.
         */
        interface mm2Id {
            kind: 'InputField';
            name: 'mm2Id';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'InputField';
            name: 'syncedWithMm2At';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ChannelMessageStatusInput {
        kind: 'InputObject';
        name: 'ChannelMessageStatusInput';
        isAllFieldsNullable: true;
        fields: {
            userId: ChannelMessageStatusInput.userId;
            receivedAt: ChannelMessageStatusInput.receivedAt;
            seenAt: ChannelMessageStatusInput.seenAt;
        };
    }
    export namespace ChannelMessageStatusInput {
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface receivedAt {
            kind: 'InputField';
            name: 'receivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface seenAt {
            kind: 'InputField';
            name: 'seenAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ChannelMessageListFilter {
        kind: 'InputObject';
        name: 'ChannelMessageListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: ChannelMessageListFilter.ids;
            excludeIds: ChannelMessageListFilter.excludeIds;
            searchText: ChannelMessageListFilter.searchText;
            caseSensitive: ChannelMessageListFilter.caseSensitive;
            textSearchFields: ChannelMessageListFilter.textSearchFields;
            createdAtFrom: ChannelMessageListFilter.createdAtFrom;
            createdAtUntil: ChannelMessageListFilter.createdAtUntil;
            updatedAtFrom: ChannelMessageListFilter.updatedAtFrom;
            updatedAtUntil: ChannelMessageListFilter.updatedAtUntil;
            channelId: ChannelMessageListFilter.channelId;
            userIds: ChannelMessageListFilter.userIds;
            receiverUserId: ChannelMessageListFilter.receiverUserId;
            replyToMessageId: ChannelMessageListFilter.replyToMessageId;
            includeChannelMessageType: ChannelMessageListFilter.includeChannelMessageType;
            received: ChannelMessageListFilter.received;
            seen: ChannelMessageListFilter.seen;
        };
    }
    export namespace ChannelMessageListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface channelId {
            kind: 'InputField';
            name: 'channelId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIds {
            kind: 'InputField';
            name: 'userIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface receiverUserId {
            kind: 'InputField';
            name: 'receiverUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface replyToMessageId {
            kind: 'InputField';
            name: 'replyToMessageId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface includeChannelMessageType {
            kind: 'InputField';
            name: 'includeChannelMessageType';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ChannelMessageType;
        }
        interface received {
            kind: 'InputField';
            name: 'received';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface seen {
            kind: 'InputField';
            name: 'seen';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface ChannelParticipantInput {
        kind: 'InputObject';
        name: 'ChannelParticipantInput';
        isAllFieldsNullable: true;
        fields: {
            id: ChannelParticipantInput.id;
            adminNotes: ChannelParticipantInput.adminNotes;
            events: ChannelParticipantInput.events;
            metadata: ChannelParticipantInput.metadata;
            createdAt: ChannelParticipantInput.createdAt;
            createdBy: ChannelParticipantInput.createdBy;
            updatedAt: ChannelParticipantInput.updatedAt;
            updatedBy: ChannelParticipantInput.updatedBy;
            deletedAt: ChannelParticipantInput.deletedAt;
            deletedBy: ChannelParticipantInput.deletedBy;
            channelId: ChannelParticipantInput.channelId;
            userId: ChannelParticipantInput.userId;
            invitedBy: ChannelParticipantInput.invitedBy;
            channelName: ChannelParticipantInput.channelName;
            role: ChannelParticipantInput.role;
            suspendedAt: ChannelParticipantInput.suspendedAt;
            suspendedBy: ChannelParticipantInput.suspendedBy;
        };
    }
    export namespace ChannelParticipantInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'InputField';
            name: 'channelId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface invitedBy {
            kind: 'InputField';
            name: 'invitedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelName {
            kind: 'InputField';
            name: 'channelName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface role {
            kind: 'InputField';
            name: 'role';
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelParticipantRole;
        }
        interface suspendedAt {
            kind: 'InputField';
            name: 'suspendedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'InputField';
            name: 'suspendedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface ChannelParticipantListFilter {
        kind: 'InputObject';
        name: 'ChannelParticipantListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: ChannelParticipantListFilter.ids;
            excludeIds: ChannelParticipantListFilter.excludeIds;
            searchText: ChannelParticipantListFilter.searchText;
            caseSensitive: ChannelParticipantListFilter.caseSensitive;
            textSearchFields: ChannelParticipantListFilter.textSearchFields;
            createdAtFrom: ChannelParticipantListFilter.createdAtFrom;
            createdAtUntil: ChannelParticipantListFilter.createdAtUntil;
            updatedAtFrom: ChannelParticipantListFilter.updatedAtFrom;
            updatedAtUntil: ChannelParticipantListFilter.updatedAtUntil;
            channelIds: ChannelParticipantListFilter.channelIds;
        };
    }
    export namespace ChannelParticipantListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface channelIds {
            kind: 'InputField';
            name: 'channelIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface GroupMembershipListFilter {
        kind: 'InputObject';
        name: 'GroupMembershipListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: GroupMembershipListFilter.ids;
            excludeIds: GroupMembershipListFilter.excludeIds;
            searchText: GroupMembershipListFilter.searchText;
            caseSensitive: GroupMembershipListFilter.caseSensitive;
            textSearchFields: GroupMembershipListFilter.textSearchFields;
            createdAtFrom: GroupMembershipListFilter.createdAtFrom;
            createdAtUntil: GroupMembershipListFilter.createdAtUntil;
            updatedAtFrom: GroupMembershipListFilter.updatedAtFrom;
            updatedAtUntil: GroupMembershipListFilter.updatedAtUntil;
            userIds: GroupMembershipListFilter.userIds;
            embedded: GroupMembershipListFilter.embedded;
            anyOfRoles: GroupMembershipListFilter.anyOfRoles;
        };
    }
    export namespace GroupMembershipListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userIds {
            kind: 'InputField';
            name: 'userIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface embedded {
            kind: 'InputField';
            name: 'embedded';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * will find memberships that have any of the specified roles
         */
        interface anyOfRoles {
            kind: 'InputField';
            name: 'anyOfRoles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
    }
    export interface GroupInput {
        kind: 'InputObject';
        name: 'GroupInput';
        isAllFieldsNullable: true;
        fields: {
            id: GroupInput.id;
            adminNotes: GroupInput.adminNotes;
            events: GroupInput.events;
            metadata: GroupInput.metadata;
            createdAt: GroupInput.createdAt;
            createdBy: GroupInput.createdBy;
            updatedAt: GroupInput.updatedAt;
            updatedBy: GroupInput.updatedBy;
            deletedAt: GroupInput.deletedAt;
            deletedBy: GroupInput.deletedBy;
            parentGroupId: GroupInput.parentGroupId;
            matchingEngineId: GroupInput.matchingEngineId;
            name: GroupInput.name;
            shortName: GroupInput.shortName;
            ident: GroupInput.ident;
            slug: GroupInput.slug;
            domain: GroupInput.domain;
            badgeName: GroupInput.badgeName;
            description: GroupInput.description;
            planType: GroupInput.planType;
            embedded: GroupInput.embedded;
            appliedGroupRules: GroupInput.appliedGroupRules;
            languageTextId: GroupInput.languageTextId;
            allowProfileRoleOnSignUp: GroupInput.allowProfileRoleOnSignUp;
        };
    }
    export namespace GroupInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface parentGroupId {
            kind: 'InputField';
            name: 'parentGroupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface matchingEngineId {
            kind: 'InputField';
            name: 'matchingEngineId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortName {
            kind: 'InputField';
            name: 'shortName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface ident {
            kind: 'InputField';
            name: 'ident';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slug {
            kind: 'InputField';
            name: 'slug';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface domain {
            kind: 'InputField';
            name: 'domain';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface badgeName {
            kind: 'InputField';
            name: 'badgeName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface planType {
            kind: 'InputField';
            name: 'planType';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface embedded {
            kind: 'InputField';
            name: 'embedded';
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface appliedGroupRules {
            kind: 'InputField';
            name: 'appliedGroupRules';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AppliedGroupRuleInput;
        }
        /**
         * The language of this group. The app will be set to this language, should a new user arrive at this groups landing page.
         */
        interface languageTextId {
            kind: 'InputField';
            name: 'languageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This defines which profile roles (mentor/mentee) are available to a new user when signing up to this group.
         */
        interface allowProfileRoleOnSignUp {
            kind: 'InputField';
            name: 'allowProfileRoleOnSignUp';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserProfileRole;
        }
    }
    export interface AppliedGroupRuleInput {
        kind: 'InputObject';
        name: 'AppliedGroupRuleInput';
        isAllFieldsNullable: true;
        fields: {
            id: AppliedGroupRuleInput.id;
            adminNotes: AppliedGroupRuleInput.adminNotes;
            events: AppliedGroupRuleInput.events;
            metadata: AppliedGroupRuleInput.metadata;
            createdAt: AppliedGroupRuleInput.createdAt;
            createdBy: AppliedGroupRuleInput.createdBy;
            updatedAt: AppliedGroupRuleInput.updatedAt;
            updatedBy: AppliedGroupRuleInput.updatedBy;
            deletedAt: AppliedGroupRuleInput.deletedAt;
            deletedBy: AppliedGroupRuleInput.deletedBy;
            groupRuleId: AppliedGroupRuleInput.groupRuleId;
            groupId: AppliedGroupRuleInput.groupId;
            subscribedToEvents: AppliedGroupRuleInput.subscribedToEvents;
            config: AppliedGroupRuleInput.config;
        };
    }
    export namespace AppliedGroupRuleInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupRuleId {
            kind: 'InputField';
            name: 'groupRuleId';
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface subscribedToEvents {
            kind: 'InputField';
            name: 'subscribedToEvents';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupRuleEventType;
        }
        interface config {
            kind: 'InputField';
            name: 'config';
            inlineType: [0];
            namedType: $$NamedTypes.$$GroupRuleBaseConfigInput;
        }
    }
    export interface GroupRuleBaseConfigInput {
        kind: 'InputObject';
        name: 'GroupRuleBaseConfigInput';
        isAllFieldsNullable: false;
        fields: {
            value: GroupRuleBaseConfigInput.value;
        };
    }
    export namespace GroupRuleBaseConfigInput {
        interface value {
            kind: 'InputField';
            name: 'value';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface GroupListFilter {
        kind: 'InputObject';
        name: 'GroupListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: GroupListFilter.ids;
            excludeIds: GroupListFilter.excludeIds;
            searchText: GroupListFilter.searchText;
            caseSensitive: GroupListFilter.caseSensitive;
            textSearchFields: GroupListFilter.textSearchFields;
            createdAtFrom: GroupListFilter.createdAtFrom;
            createdAtUntil: GroupListFilter.createdAtUntil;
            updatedAtFrom: GroupListFilter.updatedAtFrom;
            updatedAtUntil: GroupListFilter.updatedAtUntil;
            embedded: GroupListFilter.embedded;
            syncedWithMm2: GroupListFilter.syncedWithMm2;
        };
    }
    export namespace GroupListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface embedded {
            kind: 'InputField';
            name: 'embedded';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface syncedWithMm2 {
            kind: 'InputField';
            name: 'syncedWithMm2';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface BrandInput {
        kind: 'InputObject';
        name: 'BrandInput';
        isAllFieldsNullable: true;
        fields: {
            id: BrandInput.id;
            adminNotes: BrandInput.adminNotes;
            events: BrandInput.events;
            metadata: BrandInput.metadata;
            createdAt: BrandInput.createdAt;
            createdBy: BrandInput.createdBy;
            updatedAt: BrandInput.updatedAt;
            updatedBy: BrandInput.updatedBy;
            deletedAt: BrandInput.deletedAt;
            deletedBy: BrandInput.deletedBy;
            name: BrandInput.name;
            importId: BrandInput.importId;
            imageSource: BrandInput.imageSource;
            slug: BrandInput.slug;
            url: BrandInput.url;
            balanceLookupUri: BrandInput.balanceLookupUri;
            listed: BrandInput.listed;
            logoUrl: BrandInput.logoUrl;
            description: BrandInput.description;
            alias1: BrandInput.alias1;
            alias2: BrandInput.alias2;
            alias3: BrandInput.alias3;
        };
    }
    export namespace BrandInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface importId {
            kind: 'InputField';
            name: 'importId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSource {
            kind: 'InputField';
            name: 'imageSource';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface slug {
            kind: 'InputField';
            name: 'slug';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface url {
            kind: 'InputField';
            name: 'url';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface balanceLookupUri {
            kind: 'InputField';
            name: 'balanceLookupUri';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface listed {
            kind: 'InputField';
            name: 'listed';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface logoUrl {
            kind: 'InputField';
            name: 'logoUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface alias1 {
            kind: 'InputField';
            name: 'alias1';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface alias2 {
            kind: 'InputField';
            name: 'alias2';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface alias3 {
            kind: 'InputField';
            name: 'alias3';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface BrandListFilter {
        kind: 'InputObject';
        name: 'BrandListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: BrandListFilter.ids;
            excludeIds: BrandListFilter.excludeIds;
            searchText: BrandListFilter.searchText;
            caseSensitive: BrandListFilter.caseSensitive;
            textSearchFields: BrandListFilter.textSearchFields;
            createdAtFrom: BrandListFilter.createdAtFrom;
            createdAtUntil: BrandListFilter.createdAtUntil;
            updatedAtFrom: BrandListFilter.updatedAtFrom;
            updatedAtUntil: BrandListFilter.updatedAtUntil;
        };
    }
    export namespace BrandListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface PurchaseOrderItemInput {
        kind: 'InputObject';
        name: 'PurchaseOrderItemInput';
        isAllFieldsNullable: true;
        fields: {
            id: PurchaseOrderItemInput.id;
            adminNotes: PurchaseOrderItemInput.adminNotes;
            events: PurchaseOrderItemInput.events;
            metadata: PurchaseOrderItemInput.metadata;
            createdAt: PurchaseOrderItemInput.createdAt;
            createdBy: PurchaseOrderItemInput.createdBy;
            updatedAt: PurchaseOrderItemInput.updatedAt;
            updatedBy: PurchaseOrderItemInput.updatedBy;
            deletedAt: PurchaseOrderItemInput.deletedAt;
            deletedBy: PurchaseOrderItemInput.deletedBy;
            purchaseOrderId: PurchaseOrderItemInput.purchaseOrderId;
            shoppingCartItemId: PurchaseOrderItemInput.shoppingCartItemId;
            productId: PurchaseOrderItemInput.productId;
            brandId: PurchaseOrderItemInput.brandId;
            quantity: PurchaseOrderItemInput.quantity;
            price: PurchaseOrderItemInput.price;
            totalPrice: PurchaseOrderItemInput.totalPrice;
        };
    }
    export namespace PurchaseOrderItemInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface purchaseOrderId {
            kind: 'InputField';
            name: 'purchaseOrderId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface shoppingCartItemId {
            kind: 'InputField';
            name: 'shoppingCartItemId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface productId {
            kind: 'InputField';
            name: 'productId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface brandId {
            kind: 'InputField';
            name: 'brandId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface quantity {
            kind: 'InputField';
            name: 'quantity';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface price {
            kind: 'InputField';
            name: 'price';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'InputField';
            name: 'totalPrice';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface PurchaseOrderItemListFilter {
        kind: 'InputObject';
        name: 'PurchaseOrderItemListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: PurchaseOrderItemListFilter.ids;
            excludeIds: PurchaseOrderItemListFilter.excludeIds;
            searchText: PurchaseOrderItemListFilter.searchText;
            caseSensitive: PurchaseOrderItemListFilter.caseSensitive;
            textSearchFields: PurchaseOrderItemListFilter.textSearchFields;
            createdAtFrom: PurchaseOrderItemListFilter.createdAtFrom;
            createdAtUntil: PurchaseOrderItemListFilter.createdAtUntil;
            updatedAtFrom: PurchaseOrderItemListFilter.updatedAtFrom;
            updatedAtUntil: PurchaseOrderItemListFilter.updatedAtUntil;
        };
    }
    export namespace PurchaseOrderItemListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface PurchaseOrderInput {
        kind: 'InputObject';
        name: 'PurchaseOrderInput';
        isAllFieldsNullable: true;
        fields: {
            id: PurchaseOrderInput.id;
            adminNotes: PurchaseOrderInput.adminNotes;
            events: PurchaseOrderInput.events;
            metadata: PurchaseOrderInput.metadata;
            createdAt: PurchaseOrderInput.createdAt;
            createdBy: PurchaseOrderInput.createdBy;
            updatedAt: PurchaseOrderInput.updatedAt;
            updatedBy: PurchaseOrderInput.updatedBy;
            deletedAt: PurchaseOrderInput.deletedAt;
            deletedBy: PurchaseOrderInput.deletedBy;
            userId: PurchaseOrderInput.userId;
            shoppingCartId: PurchaseOrderInput.shoppingCartId;
            sumItemPrice: PurchaseOrderInput.sumItemPrice;
            totalPrice: PurchaseOrderInput.totalPrice;
            vat: PurchaseOrderInput.vat;
            paidAt: PurchaseOrderInput.paidAt;
            canceledAt: PurchaseOrderInput.canceledAt;
            refundedAt: PurchaseOrderInput.refundedAt;
        };
    }
    export namespace PurchaseOrderInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface shoppingCartId {
            kind: 'InputField';
            name: 'shoppingCartId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface sumItemPrice {
            kind: 'InputField';
            name: 'sumItemPrice';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'InputField';
            name: 'totalPrice';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface vat {
            kind: 'InputField';
            name: 'vat';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface paidAt {
            kind: 'InputField';
            name: 'paidAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface canceledAt {
            kind: 'InputField';
            name: 'canceledAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface refundedAt {
            kind: 'InputField';
            name: 'refundedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface PurchaseOrderListFilter {
        kind: 'InputObject';
        name: 'PurchaseOrderListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: PurchaseOrderListFilter.ids;
            excludeIds: PurchaseOrderListFilter.excludeIds;
            searchText: PurchaseOrderListFilter.searchText;
            caseSensitive: PurchaseOrderListFilter.caseSensitive;
            textSearchFields: PurchaseOrderListFilter.textSearchFields;
            createdAtFrom: PurchaseOrderListFilter.createdAtFrom;
            createdAtUntil: PurchaseOrderListFilter.createdAtUntil;
            updatedAtFrom: PurchaseOrderListFilter.updatedAtFrom;
            updatedAtUntil: PurchaseOrderListFilter.updatedAtUntil;
        };
    }
    export namespace PurchaseOrderListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ShoppingCartItemInput {
        kind: 'InputObject';
        name: 'ShoppingCartItemInput';
        isAllFieldsNullable: true;
        fields: {
            id: ShoppingCartItemInput.id;
            adminNotes: ShoppingCartItemInput.adminNotes;
            events: ShoppingCartItemInput.events;
            metadata: ShoppingCartItemInput.metadata;
            createdAt: ShoppingCartItemInput.createdAt;
            createdBy: ShoppingCartItemInput.createdBy;
            updatedAt: ShoppingCartItemInput.updatedAt;
            updatedBy: ShoppingCartItemInput.updatedBy;
            deletedAt: ShoppingCartItemInput.deletedAt;
            deletedBy: ShoppingCartItemInput.deletedBy;
            shoppingCartId: ShoppingCartItemInput.shoppingCartId;
            productId: ShoppingCartItemInput.productId;
            quantity: ShoppingCartItemInput.quantity;
            price: ShoppingCartItemInput.price;
            totalPrice: ShoppingCartItemInput.totalPrice;
        };
    }
    export namespace ShoppingCartItemInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface shoppingCartId {
            kind: 'InputField';
            name: 'shoppingCartId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface productId {
            kind: 'InputField';
            name: 'productId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface quantity {
            kind: 'InputField';
            name: 'quantity';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface price {
            kind: 'InputField';
            name: 'price';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'InputField';
            name: 'totalPrice';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface ShoppingCartItemListFilter {
        kind: 'InputObject';
        name: 'ShoppingCartItemListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: ShoppingCartItemListFilter.ids;
            excludeIds: ShoppingCartItemListFilter.excludeIds;
            searchText: ShoppingCartItemListFilter.searchText;
            caseSensitive: ShoppingCartItemListFilter.caseSensitive;
            textSearchFields: ShoppingCartItemListFilter.textSearchFields;
            createdAtFrom: ShoppingCartItemListFilter.createdAtFrom;
            createdAtUntil: ShoppingCartItemListFilter.createdAtUntil;
            updatedAtFrom: ShoppingCartItemListFilter.updatedAtFrom;
            updatedAtUntil: ShoppingCartItemListFilter.updatedAtUntil;
        };
    }
    export namespace ShoppingCartItemListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ShoppingCartInput {
        kind: 'InputObject';
        name: 'ShoppingCartInput';
        isAllFieldsNullable: true;
        fields: {
            id: ShoppingCartInput.id;
            adminNotes: ShoppingCartInput.adminNotes;
            events: ShoppingCartInput.events;
            metadata: ShoppingCartInput.metadata;
            createdAt: ShoppingCartInput.createdAt;
            createdBy: ShoppingCartInput.createdBy;
            updatedAt: ShoppingCartInput.updatedAt;
            updatedBy: ShoppingCartInput.updatedBy;
            deletedAt: ShoppingCartInput.deletedAt;
            deletedBy: ShoppingCartInput.deletedBy;
            sumItemPrice: ShoppingCartInput.sumItemPrice;
            totalPrice: ShoppingCartInput.totalPrice;
            vat: ShoppingCartInput.vat;
        };
    }
    export namespace ShoppingCartInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface sumItemPrice {
            kind: 'InputField';
            name: 'sumItemPrice';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface totalPrice {
            kind: 'InputField';
            name: 'totalPrice';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface vat {
            kind: 'InputField';
            name: 'vat';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface ShoppingCartListFilter {
        kind: 'InputObject';
        name: 'ShoppingCartListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: ShoppingCartListFilter.ids;
            excludeIds: ShoppingCartListFilter.excludeIds;
            searchText: ShoppingCartListFilter.searchText;
            caseSensitive: ShoppingCartListFilter.caseSensitive;
            textSearchFields: ShoppingCartListFilter.textSearchFields;
            createdAtFrom: ShoppingCartListFilter.createdAtFrom;
            createdAtUntil: ShoppingCartListFilter.createdAtUntil;
            updatedAtFrom: ShoppingCartListFilter.updatedAtFrom;
            updatedAtUntil: ShoppingCartListFilter.updatedAtUntil;
        };
    }
    export namespace ShoppingCartListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface WalletItemInput {
        kind: 'InputObject';
        name: 'WalletItemInput';
        isAllFieldsNullable: true;
        fields: {
            id: WalletItemInput.id;
            adminNotes: WalletItemInput.adminNotes;
            events: WalletItemInput.events;
            metadata: WalletItemInput.metadata;
            createdAt: WalletItemInput.createdAt;
            createdBy: WalletItemInput.createdBy;
            updatedAt: WalletItemInput.updatedAt;
            updatedBy: WalletItemInput.updatedBy;
            deletedAt: WalletItemInput.deletedAt;
            deletedBy: WalletItemInput.deletedBy;
            walletId: WalletItemInput.walletId;
            productId: WalletItemInput.productId;
            purchaseOrderItemId: WalletItemInput.purchaseOrderItemId;
            brandId: WalletItemInput.brandId;
            productType: WalletItemInput.productType;
            name: WalletItemInput.name;
            price: WalletItemInput.price;
            initialBalance: WalletItemInput.initialBalance;
            balance: WalletItemInput.balance;
            code: WalletItemInput.code;
            hasBarcode: WalletItemInput.hasBarcode;
            barcodeFormat: WalletItemInput.barcodeFormat;
            pin: WalletItemInput.pin;
            source: WalletItemInput.source;
            imageSourceFront: WalletItemInput.imageSourceFront;
            imageSourceBack: WalletItemInput.imageSourceBack;
            referenceUrl: WalletItemInput.referenceUrl;
            termsEn: WalletItemInput.termsEn;
            termsUrl: WalletItemInput.termsUrl;
            instructionsEn: WalletItemInput.instructionsEn;
            instructionsUrl: WalletItemInput.instructionsUrl;
            sortIndex: WalletItemInput.sortIndex;
            issuedAt: WalletItemInput.issuedAt;
            expiresAt: WalletItemInput.expiresAt;
            balanceUpdatedAt: WalletItemInput.balanceUpdatedAt;
            transferStartedAt: WalletItemInput.transferStartedAt;
            transferAcceptedAt: WalletItemInput.transferAcceptedAt;
            archivedAt: WalletItemInput.archivedAt;
        };
    }
    export namespace WalletItemInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface walletId {
            kind: 'InputField';
            name: 'walletId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface productId {
            kind: 'InputField';
            name: 'productId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface purchaseOrderItemId {
            kind: 'InputField';
            name: 'purchaseOrderItemId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface brandId {
            kind: 'InputField';
            name: 'brandId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface productType {
            kind: 'InputField';
            name: 'productType';
            inlineType: [0];
            namedType: $$NamedTypes.$$ProductType;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface price {
            kind: 'InputField';
            name: 'price';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface initialBalance {
            kind: 'InputField';
            name: 'initialBalance';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface balance {
            kind: 'InputField';
            name: 'balance';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface code {
            kind: 'InputField';
            name: 'code';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface hasBarcode {
            kind: 'InputField';
            name: 'hasBarcode';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface barcodeFormat {
            kind: 'InputField';
            name: 'barcodeFormat';
            inlineType: [0];
            namedType: $$NamedTypes.$$BarcodeType;
        }
        interface pin {
            kind: 'InputField';
            name: 'pin';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface source {
            kind: 'InputField';
            name: 'source';
            inlineType: [0];
            namedType: $$NamedTypes.$$WalletItemSource;
        }
        interface imageSourceFront {
            kind: 'InputField';
            name: 'imageSourceFront';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSourceBack {
            kind: 'InputField';
            name: 'imageSourceBack';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface referenceUrl {
            kind: 'InputField';
            name: 'referenceUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface termsEn {
            kind: 'InputField';
            name: 'termsEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface termsUrl {
            kind: 'InputField';
            name: 'termsUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsEn {
            kind: 'InputField';
            name: 'instructionsEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsUrl {
            kind: 'InputField';
            name: 'instructionsUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface sortIndex {
            kind: 'InputField';
            name: 'sortIndex';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface issuedAt {
            kind: 'InputField';
            name: 'issuedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface expiresAt {
            kind: 'InputField';
            name: 'expiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface balanceUpdatedAt {
            kind: 'InputField';
            name: 'balanceUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface transferStartedAt {
            kind: 'InputField';
            name: 'transferStartedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface transferAcceptedAt {
            kind: 'InputField';
            name: 'transferAcceptedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface archivedAt {
            kind: 'InputField';
            name: 'archivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface WalletItemListFilter {
        kind: 'InputObject';
        name: 'WalletItemListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: WalletItemListFilter.ids;
            excludeIds: WalletItemListFilter.excludeIds;
            searchText: WalletItemListFilter.searchText;
            caseSensitive: WalletItemListFilter.caseSensitive;
            textSearchFields: WalletItemListFilter.textSearchFields;
            createdAtFrom: WalletItemListFilter.createdAtFrom;
            createdAtUntil: WalletItemListFilter.createdAtUntil;
            updatedAtFrom: WalletItemListFilter.updatedAtFrom;
            updatedAtUntil: WalletItemListFilter.updatedAtUntil;
        };
    }
    export namespace WalletItemListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface WalletItemTransferInput {
        kind: 'InputObject';
        name: 'WalletItemTransferInput';
        isAllFieldsNullable: true;
        fields: {
            id: WalletItemTransferInput.id;
            adminNotes: WalletItemTransferInput.adminNotes;
            events: WalletItemTransferInput.events;
            metadata: WalletItemTransferInput.metadata;
            createdAt: WalletItemTransferInput.createdAt;
            createdBy: WalletItemTransferInput.createdBy;
            updatedAt: WalletItemTransferInput.updatedAt;
            updatedBy: WalletItemTransferInput.updatedBy;
            deletedAt: WalletItemTransferInput.deletedAt;
            deletedBy: WalletItemTransferInput.deletedBy;
            walletItemId: WalletItemTransferInput.walletItemId;
            notificationId: WalletItemTransferInput.notificationId;
            recipientEmail: WalletItemTransferInput.recipientEmail;
            recipientPhoneNumber: WalletItemTransferInput.recipientPhoneNumber;
            recipientFullName: WalletItemTransferInput.recipientFullName;
            subjectText: WalletItemTransferInput.subjectText;
            messageText: WalletItemTransferInput.messageText;
            transferSlug: WalletItemTransferInput.transferSlug;
            transferSecret: WalletItemTransferInput.transferSecret;
            password: WalletItemTransferInput.password;
            sendMethod: WalletItemTransferInput.sendMethod;
            sendPlatform: WalletItemTransferInput.sendPlatform;
            showOnline: WalletItemTransferInput.showOnline;
            sentAt: WalletItemTransferInput.sentAt;
            acceptedAt: WalletItemTransferInput.acceptedAt;
            declinedAt: WalletItemTransferInput.declinedAt;
            canceledAt: WalletItemTransferInput.canceledAt;
            archivedAt: WalletItemTransferInput.archivedAt;
        };
    }
    export namespace WalletItemTransferInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface walletItemId {
            kind: 'InputField';
            name: 'walletItemId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface notificationId {
            kind: 'InputField';
            name: 'notificationId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientEmail {
            kind: 'InputField';
            name: 'recipientEmail';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientPhoneNumber {
            kind: 'InputField';
            name: 'recipientPhoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface recipientFullName {
            kind: 'InputField';
            name: 'recipientFullName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface subjectText {
            kind: 'InputField';
            name: 'subjectText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'InputField';
            name: 'messageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface transferSlug {
            kind: 'InputField';
            name: 'transferSlug';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface transferSecret {
            kind: 'InputField';
            name: 'transferSecret';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface password {
            kind: 'InputField';
            name: 'password';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * email | phoneNumber | link
         */
        interface sendMethod {
            kind: 'InputField';
            name: 'sendMethod';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * i.e. WhatsApp, Signal, ...
         */
        interface sendPlatform {
            kind: 'InputField';
            name: 'sendPlatform';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * set to false, if the recipient wants to remove the product from the link.
         */
        interface showOnline {
            kind: 'InputField';
            name: 'showOnline';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Date this transfer was sent
         */
        interface sentAt {
            kind: 'InputField';
            name: 'sentAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The recipient accepted this transfer
         */
        interface acceptedAt {
            kind: 'InputField';
            name: 'acceptedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The recipient declined this transfer
         */
        interface declinedAt {
            kind: 'InputField';
            name: 'declinedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The sender canceled this transfer
         */
        interface canceledAt {
            kind: 'InputField';
            name: 'canceledAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * The sender archived this transfer
         */
        interface archivedAt {
            kind: 'InputField';
            name: 'archivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface WalletItemTransferListFilter {
        kind: 'InputObject';
        name: 'WalletItemTransferListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: WalletItemTransferListFilter.ids;
            excludeIds: WalletItemTransferListFilter.excludeIds;
            searchText: WalletItemTransferListFilter.searchText;
            caseSensitive: WalletItemTransferListFilter.caseSensitive;
            textSearchFields: WalletItemTransferListFilter.textSearchFields;
            createdAtFrom: WalletItemTransferListFilter.createdAtFrom;
            createdAtUntil: WalletItemTransferListFilter.createdAtUntil;
            updatedAtFrom: WalletItemTransferListFilter.updatedAtFrom;
            updatedAtUntil: WalletItemTransferListFilter.updatedAtUntil;
        };
    }
    export namespace WalletItemTransferListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface WalletInput {
        kind: 'InputObject';
        name: 'WalletInput';
        isAllFieldsNullable: true;
        fields: {
            id: WalletInput.id;
            adminNotes: WalletInput.adminNotes;
            events: WalletInput.events;
            metadata: WalletInput.metadata;
            createdAt: WalletInput.createdAt;
            createdBy: WalletInput.createdBy;
            updatedAt: WalletInput.updatedAt;
            updatedBy: WalletInput.updatedBy;
            deletedAt: WalletInput.deletedAt;
            deletedBy: WalletInput.deletedBy;
        };
    }
    export namespace WalletInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface WalletListFilter {
        kind: 'InputObject';
        name: 'WalletListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: WalletListFilter.ids;
            excludeIds: WalletListFilter.excludeIds;
            searchText: WalletListFilter.searchText;
            caseSensitive: WalletListFilter.caseSensitive;
            textSearchFields: WalletListFilter.textSearchFields;
            createdAtFrom: WalletListFilter.createdAtFrom;
            createdAtUntil: WalletListFilter.createdAtUntil;
            updatedAtFrom: WalletListFilter.updatedAtFrom;
            updatedAtUntil: WalletListFilter.updatedAtUntil;
        };
    }
    export namespace WalletListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface GiftCardProductInput {
        kind: 'InputObject';
        name: 'GiftCardProductInput';
        isAllFieldsNullable: true;
        fields: {
            id: GiftCardProductInput.id;
            adminNotes: GiftCardProductInput.adminNotes;
            events: GiftCardProductInput.events;
            metadata: GiftCardProductInput.metadata;
            createdAt: GiftCardProductInput.createdAt;
            createdBy: GiftCardProductInput.createdBy;
            updatedAt: GiftCardProductInput.updatedAt;
            updatedBy: GiftCardProductInput.updatedBy;
            deletedAt: GiftCardProductInput.deletedAt;
            deletedBy: GiftCardProductInput.deletedBy;
            importId: GiftCardProductInput.importId;
            brandId: GiftCardProductInput.brandId;
            brandImportId: GiftCardProductInput.brandImportId;
            name: GiftCardProductInput.name;
            description: GiftCardProductInput.description;
            productType: GiftCardProductInput.productType;
            categories: GiftCardProductInput.categories;
            slug: GiftCardProductInput.slug;
            url: GiftCardProductInput.url;
            imageSourceFront: GiftCardProductInput.imageSourceFront;
            imageSourceBack: GiftCardProductInput.imageSourceBack;
            hasBarcode: GiftCardProductInput.hasBarcode;
            barcodeFormat: GiftCardProductInput.barcodeFormat;
            genericGiftCardId: GiftCardProductInput.genericGiftCardId;
            isGeneric: GiftCardProductInput.isGeneric;
            hasPin: GiftCardProductInput.hasPin;
            termsEn: GiftCardProductInput.termsEn;
            termsUrl: GiftCardProductInput.termsUrl;
            instructionsEn: GiftCardProductInput.instructionsEn;
            instructionsUrl: GiftCardProductInput.instructionsUrl;
            denominations: GiftCardProductInput.denominations;
        };
    }
    export namespace GiftCardProductInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface importId {
            kind: 'InputField';
            name: 'importId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface brandId {
            kind: 'InputField';
            name: 'brandId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface brandImportId {
            kind: 'InputField';
            name: 'brandImportId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface productType {
            kind: 'InputField';
            name: 'productType';
            inlineType: [0];
            namedType: $$NamedTypes.$$ProductType;
        }
        interface categories {
            kind: 'InputField';
            name: 'categories';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface slug {
            kind: 'InputField';
            name: 'slug';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface url {
            kind: 'InputField';
            name: 'url';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSourceFront {
            kind: 'InputField';
            name: 'imageSourceFront';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface imageSourceBack {
            kind: 'InputField';
            name: 'imageSourceBack';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface hasBarcode {
            kind: 'InputField';
            name: 'hasBarcode';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface barcodeFormat {
            kind: 'InputField';
            name: 'barcodeFormat';
            inlineType: [0];
            namedType: $$NamedTypes.$$BarcodeType;
        }
        interface genericGiftCardId {
            kind: 'InputField';
            name: 'genericGiftCardId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface isGeneric {
            kind: 'InputField';
            name: 'isGeneric';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface hasPin {
            kind: 'InputField';
            name: 'hasPin';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface termsEn {
            kind: 'InputField';
            name: 'termsEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface termsUrl {
            kind: 'InputField';
            name: 'termsUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsEn {
            kind: 'InputField';
            name: 'instructionsEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface instructionsUrl {
            kind: 'InputField';
            name: 'instructionsUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface denominations {
            kind: 'InputField';
            name: 'denominations';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GiftCardDenominationInput;
        }
    }
    export interface GiftCardDenominationInput {
        kind: 'InputObject';
        name: 'GiftCardDenominationInput';
        isAllFieldsNullable: false;
        fields: {
            amount: GiftCardDenominationInput.amount;
            enabled: GiftCardDenominationInput.enabled;
        };
    }
    export namespace GiftCardDenominationInput {
        interface amount {
            kind: 'InputField';
            name: 'amount';
            inlineType: [1];
            namedType: $$NamedTypes.$$Int;
        }
        interface enabled {
            kind: 'InputField';
            name: 'enabled';
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface GiftCardProductListFilter {
        kind: 'InputObject';
        name: 'GiftCardProductListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: GiftCardProductListFilter.ids;
            excludeIds: GiftCardProductListFilter.excludeIds;
            searchText: GiftCardProductListFilter.searchText;
            caseSensitive: GiftCardProductListFilter.caseSensitive;
            textSearchFields: GiftCardProductListFilter.textSearchFields;
            createdAtFrom: GiftCardProductListFilter.createdAtFrom;
            createdAtUntil: GiftCardProductListFilter.createdAtUntil;
            updatedAtFrom: GiftCardProductListFilter.updatedAtFrom;
            updatedAtUntil: GiftCardProductListFilter.updatedAtUntil;
        };
    }
    export namespace GiftCardProductListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ProductCategoryInput {
        kind: 'InputObject';
        name: 'ProductCategoryInput';
        isAllFieldsNullable: true;
        fields: {
            id: ProductCategoryInput.id;
            adminNotes: ProductCategoryInput.adminNotes;
            events: ProductCategoryInput.events;
            metadata: ProductCategoryInput.metadata;
            createdAt: ProductCategoryInput.createdAt;
            createdBy: ProductCategoryInput.createdBy;
            updatedAt: ProductCategoryInput.updatedAt;
            updatedBy: ProductCategoryInput.updatedBy;
            deletedAt: ProductCategoryInput.deletedAt;
            deletedBy: ProductCategoryInput.deletedBy;
            name: ProductCategoryInput.name;
            labelEn: ProductCategoryInput.labelEn;
            sortIndex: ProductCategoryInput.sortIndex;
        };
    }
    export namespace ProductCategoryInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface labelEn {
            kind: 'InputField';
            name: 'labelEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface sortIndex {
            kind: 'InputField';
            name: 'sortIndex';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
    }
    export interface ProductCategoryListFilter {
        kind: 'InputObject';
        name: 'ProductCategoryListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: ProductCategoryListFilter.ids;
            excludeIds: ProductCategoryListFilter.excludeIds;
            searchText: ProductCategoryListFilter.searchText;
            caseSensitive: ProductCategoryListFilter.caseSensitive;
            textSearchFields: ProductCategoryListFilter.textSearchFields;
            createdAtFrom: ProductCategoryListFilter.createdAtFrom;
            createdAtUntil: ProductCategoryListFilter.createdAtUntil;
            updatedAtFrom: ProductCategoryListFilter.updatedAtFrom;
            updatedAtUntil: ProductCategoryListFilter.updatedAtUntil;
        };
    }
    export namespace ProductCategoryListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserSearchInput {
        kind: 'InputObject';
        name: 'UserSearchInput';
        isAllFieldsNullable: true;
        fields: {
            id: UserSearchInput.id;
            adminNotes: UserSearchInput.adminNotes;
            events: UserSearchInput.events;
            metadata: UserSearchInput.metadata;
            createdAt: UserSearchInput.createdAt;
            createdBy: UserSearchInput.createdBy;
            updatedAt: UserSearchInput.updatedAt;
            updatedBy: UserSearchInput.updatedBy;
            deletedAt: UserSearchInput.deletedAt;
            deletedBy: UserSearchInput.deletedBy;
            userId: UserSearchInput.userId;
            matchingEngineId: UserSearchInput.matchingEngineId;
            userSearchType: UserSearchInput.userSearchType;
            name: UserSearchInput.name;
            filter: UserSearchInput.filter;
            excludeUserIds: UserSearchInput.excludeUserIds;
            maxResultCount: UserSearchInput.maxResultCount;
            subscription: UserSearchInput.subscription;
            expiresAt: UserSearchInput.expiresAt;
            resultExpiresAt: UserSearchInput.resultExpiresAt;
            startSearch: UserSearchInput.startSearch;
        };
    }
    export namespace UserSearchInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * The ID of the user that is searching and owns this object
         */
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface matchingEngineId {
            kind: 'InputField';
            name: 'matchingEngineId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userSearchType {
            kind: 'InputField';
            name: 'userSearchType';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchType;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface filter {
            kind: 'InputField';
            name: 'filter';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchFilterInput;
        }
        /**
         * A list of user IDs of users that should not be included into the search results, i.e. blocked users.
         */
        interface excludeUserIds {
            kind: 'InputField';
            name: 'excludeUserIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface maxResultCount {
            kind: 'InputField';
            name: 'maxResultCount';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface subscription {
            kind: 'InputField';
            name: 'subscription';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchSubscriptionType;
        }
        interface expiresAt {
            kind: 'InputField';
            name: 'expiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface resultExpiresAt {
            kind: 'InputField';
            name: 'resultExpiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface startSearch {
            kind: 'InputField';
            name: 'startSearch';
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface UserSearchFilterInput {
        kind: 'InputObject';
        name: 'UserSearchFilterInput';
        isAllFieldsNullable: true;
        fields: {
            searchText: UserSearchFilterInput.searchText;
            seeksHelp: UserSearchFilterInput.seeksHelp;
            offersHelp: UserSearchFilterInput.offersHelp;
            languagesTextIds: UserSearchFilterInput.languagesTextIds;
            expertisesTextIds: UserSearchFilterInput.expertisesTextIds;
            industriesTextIds: UserSearchFilterInput.industriesTextIds;
            countryTextIds: UserSearchFilterInput.countryTextIds;
            companyStagesTextIds: UserSearchFilterInput.companyStagesTextIds;
            latestActivityAfter: UserSearchFilterInput.latestActivityAfter;
        };
    }
    export namespace UserSearchFilterInput {
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface seeksHelp {
            kind: 'InputField';
            name: 'seeksHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchFieldOption;
        }
        interface offersHelp {
            kind: 'InputField';
            name: 'offersHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserSearchFieldOption;
        }
        interface languagesTextIds {
            kind: 'InputField';
            name: 'languagesTextIds';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface expertisesTextIds {
            kind: 'InputField';
            name: 'expertisesTextIds';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface industriesTextIds {
            kind: 'InputField';
            name: 'industriesTextIds';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface countryTextIds {
            kind: 'InputField';
            name: 'countryTextIds';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface companyStagesTextIds {
            kind: 'InputField';
            name: 'companyStagesTextIds';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface latestActivityAfter {
            kind: 'InputField';
            name: 'latestActivityAfter';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface UserSearchListFilter {
        kind: 'InputObject';
        name: 'UserSearchListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: UserSearchListFilter.ids;
            excludeIds: UserSearchListFilter.excludeIds;
            searchText: UserSearchListFilter.searchText;
            caseSensitive: UserSearchListFilter.caseSensitive;
            textSearchFields: UserSearchListFilter.textSearchFields;
            createdAtFrom: UserSearchListFilter.createdAtFrom;
            createdAtUntil: UserSearchListFilter.createdAtUntil;
            updatedAtFrom: UserSearchListFilter.updatedAtFrom;
            updatedAtUntil: UserSearchListFilter.updatedAtUntil;
        };
    }
    export namespace UserSearchListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ContactInput {
        kind: 'InputObject';
        name: 'ContactInput';
        isAllFieldsNullable: true;
        fields: {
            id: ContactInput.id;
            adminNotes: ContactInput.adminNotes;
            events: ContactInput.events;
            metadata: ContactInput.metadata;
            createdAt: ContactInput.createdAt;
            createdBy: ContactInput.createdBy;
            updatedAt: ContactInput.updatedAt;
            updatedBy: ContactInput.updatedBy;
            deletedAt: ContactInput.deletedAt;
            deletedBy: ContactInput.deletedBy;
            userId: ContactInput.userId;
            channelId: ContactInput.channelId;
            nickname: ContactInput.nickname;
            typeTextIds: ContactInput.typeTextIds;
            favorite: ContactInput.favorite;
            notes: ContactInput.notes;
            archivedAt: ContactInput.archivedAt;
        };
    }
    export namespace ContactInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'InputField';
            name: 'channelId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface nickname {
            kind: 'InputField';
            name: 'nickname';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface typeTextIds {
            kind: 'InputField';
            name: 'typeTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface favorite {
            kind: 'InputField';
            name: 'favorite';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface notes {
            kind: 'InputField';
            name: 'notes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface archivedAt {
            kind: 'InputField';
            name: 'archivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface SidContactListFilter {
        kind: 'InputObject';
        name: 'SidContactListFilter';
        isAllFieldsNullable: true;
        fields: {
            ids: SidContactListFilter.ids;
            excludeIds: SidContactListFilter.excludeIds;
            searchText: SidContactListFilter.searchText;
            caseSensitive: SidContactListFilter.caseSensitive;
            textSearchFields: SidContactListFilter.textSearchFields;
            createdAtFrom: SidContactListFilter.createdAtFrom;
            createdAtUntil: SidContactListFilter.createdAtUntil;
            updatedAtFrom: SidContactListFilter.updatedAtFrom;
            updatedAtUntil: SidContactListFilter.updatedAtUntil;
            userIdIn: SidContactListFilter.userIdIn;
        };
    }
    export namespace SidContactListFilter {
        interface ids {
            kind: 'InputField';
            name: 'ids';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface excludeIds {
            kind: 'InputField';
            name: 'excludeIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchText {
            kind: 'InputField';
            name: 'searchText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface caseSensitive {
            kind: 'InputField';
            name: 'caseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface textSearchFields {
            kind: 'InputField';
            name: 'textSearchFields';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface createdAtFrom {
            kind: 'InputField';
            name: 'createdAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdAtUntil {
            kind: 'InputField';
            name: 'createdAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtFrom {
            kind: 'InputField';
            name: 'updatedAtFrom';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedAtUntil {
            kind: 'InputField';
            name: 'updatedAtUntil';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface userIdIn {
            kind: 'InputField';
            name: 'userIdIn';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
    }
    /**
     * User sign up input data
     */
    export interface SignInUserInput {
        kind: 'InputObject';
        name: 'SignInUserInput';
        isAllFieldsNullable: true;
        fields: {
            authType: SignInUserInput.authType;
            ident: SignInUserInput.ident;
            identType: SignInUserInput.identType;
            password: SignInUserInput.password;
            pushNotificationToken: SignInUserInput.pushNotificationToken;
            cookieConsentChoice: SignInUserInput.cookieConsentChoice;
            allowToTrack: SignInUserInput.allowToTrack;
            captchaService: SignInUserInput.captchaService;
            captchaToken: SignInUserInput.captchaToken;
        };
    }
    export namespace SignInUserInput {
        interface authType {
            kind: 'InputField';
            name: 'authType';
            inlineType: [1];
            namedType: $$NamedTypes.$$AuthType;
        }
        interface ident {
            kind: 'InputField';
            name: 'ident';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface identType {
            kind: 'InputField';
            name: 'identType';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserIdentType;
        }
        interface password {
            kind: 'InputField';
            name: 'password';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface pushNotificationToken {
            kind: 'InputField';
            name: 'pushNotificationToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cookieConsentChoice {
            kind: 'InputField';
            name: 'cookieConsentChoice';
            inlineType: [0];
            namedType: $$NamedTypes.$$CookieChoiceTextId;
        }
        interface allowToTrack {
            kind: 'InputField';
            name: 'allowToTrack';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface captchaService {
            kind: 'InputField';
            name: 'captchaService';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface captchaToken {
            kind: 'InputField';
            name: 'captchaToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    /**
     * User sign up input data
     */
    export interface SignInOauthUserInput {
        kind: 'InputObject';
        name: 'SignInOauthUserInput';
        isAllFieldsNullable: true;
        fields: {
            ident: SignInOauthUserInput.ident;
            identType: SignInOauthUserInput.identType;
            firstName: SignInOauthUserInput.firstName;
            lastName: SignInOauthUserInput.lastName;
            displayName: SignInOauthUserInput.displayName;
            userHandle: SignInOauthUserInput.userHandle;
            email: SignInOauthUserInput.email;
            emailVerified: SignInOauthUserInput.emailVerified;
            phoneNumber: SignInOauthUserInput.phoneNumber;
            phoneNumberVerified: SignInOauthUserInput.phoneNumberVerified;
            identityProvider: SignInOauthUserInput.identityProvider;
            oauthFederatedProvider: SignInOauthUserInput.oauthFederatedProvider;
            oauthUserId: SignInOauthUserInput.oauthUserId;
            oauthDelegateUserId: SignInOauthUserInput.oauthDelegateUserId;
            oauthProfileUrl: SignInOauthUserInput.oauthProfileUrl;
            oauthToken: SignInOauthUserInput.oauthToken;
            oauthTokenId: SignInOauthUserInput.oauthTokenId;
            oauthIdToken: SignInOauthUserInput.oauthIdToken;
            oauthTokenCreatedAt: SignInOauthUserInput.oauthTokenCreatedAt;
            oauthTokenExpiresAt: SignInOauthUserInput.oauthTokenExpiresAt;
            oauthRefreshToken: SignInOauthUserInput.oauthRefreshToken;
            oauthRefreshTokenCreatedAt: SignInOauthUserInput.oauthRefreshTokenCreatedAt;
            oauthRefreshTokenExpiresAt: SignInOauthUserInput.oauthRefreshTokenExpiresAt;
            pushNotificationToken: SignInOauthUserInput.pushNotificationToken;
            source: SignInOauthUserInput.source;
            trackId: SignInOauthUserInput.trackId;
            cookieConsentChoice: SignInOauthUserInput.cookieConsentChoice;
            allowToTrack: SignInOauthUserInput.allowToTrack;
            checkAvailable: SignInOauthUserInput.checkAvailable;
        };
    }
    export namespace SignInOauthUserInput {
        interface ident {
            kind: 'InputField';
            name: 'ident';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface identType {
            kind: 'InputField';
            name: 'identType';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserIdentType;
        }
        interface firstName {
            kind: 'InputField';
            name: 'firstName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'InputField';
            name: 'lastName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface displayName {
            kind: 'InputField';
            name: 'displayName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'InputField';
            name: 'userHandle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailVerified {
            kind: 'InputField';
            name: 'emailVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberVerified {
            kind: 'InputField';
            name: 'phoneNumberVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface identityProvider {
            kind: 'InputField';
            name: 'identityProvider';
            inlineType: [1];
            namedType: $$NamedTypes.$$IdentityProvider;
        }
        interface oauthFederatedProvider {
            kind: 'InputField';
            name: 'oauthFederatedProvider';
            inlineType: [0];
            namedType: $$NamedTypes.$$FederatedIdentityProvider;
        }
        interface oauthUserId {
            kind: 'InputField';
            name: 'oauthUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthDelegateUserId {
            kind: 'InputField';
            name: 'oauthDelegateUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthProfileUrl {
            kind: 'InputField';
            name: 'oauthProfileUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthToken {
            kind: 'InputField';
            name: 'oauthToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthTokenId {
            kind: 'InputField';
            name: 'oauthTokenId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthIdToken {
            kind: 'InputField';
            name: 'oauthIdToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthTokenCreatedAt {
            kind: 'InputField';
            name: 'oauthTokenCreatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface oauthTokenExpiresAt {
            kind: 'InputField';
            name: 'oauthTokenExpiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface oauthRefreshToken {
            kind: 'InputField';
            name: 'oauthRefreshToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface oauthRefreshTokenCreatedAt {
            kind: 'InputField';
            name: 'oauthRefreshTokenCreatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface oauthRefreshTokenExpiresAt {
            kind: 'InputField';
            name: 'oauthRefreshTokenExpiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pushNotificationToken {
            kind: 'InputField';
            name: 'pushNotificationToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface source {
            kind: 'InputField';
            name: 'source';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface trackId {
            kind: 'InputField';
            name: 'trackId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cookieConsentChoice {
            kind: 'InputField';
            name: 'cookieConsentChoice';
            inlineType: [0];
            namedType: $$NamedTypes.$$CookieChoiceTextId;
        }
        interface allowToTrack {
            kind: 'InputField';
            name: 'allowToTrack';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface checkAvailable {
            kind: 'InputField';
            name: 'checkAvailable';
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    /**
     * User sign up input data
     */
    export interface SignUpUserInput {
        kind: 'InputObject';
        name: 'SignUpUserInput';
        isAllFieldsNullable: true;
        fields: {
            id: SignUpUserInput.id;
            adminNotes: SignUpUserInput.adminNotes;
            events: SignUpUserInput.events;
            metadata: SignUpUserInput.metadata;
            createdAt: SignUpUserInput.createdAt;
            createdBy: SignUpUserInput.createdBy;
            updatedAt: SignUpUserInput.updatedAt;
            updatedBy: SignUpUserInput.updatedBy;
            deletedAt: SignUpUserInput.deletedAt;
            deletedBy: SignUpUserInput.deletedBy;
            firstName: SignUpUserInput.firstName;
            lastName: SignUpUserInput.lastName;
            userHandle: SignUpUserInput.userHandle;
            email: SignUpUserInput.email;
            emailVerifiedAt: SignUpUserInput.emailVerifiedAt;
            emailSource: SignUpUserInput.emailSource;
            phoneNumber: SignUpUserInput.phoneNumber;
            authType: SignUpUserInput.authType;
            password: SignUpUserInput.password;
            avatarUrl: SignUpUserInput.avatarUrl;
            source: SignUpUserInput.source;
            timezone: SignUpUserInput.timezone;
            optIntoNewsletter: SignUpUserInput.optIntoNewsletter;
            pushNotificationToken: SignUpUserInput.pushNotificationToken;
            cookieConsentChoice: SignUpUserInput.cookieConsentChoice;
            allowToTrack: SignUpUserInput.allowToTrack;
            trackId: SignUpUserInput.trackId;
            captchaService: SignUpUserInput.captchaService;
            captchaToken: SignUpUserInput.captchaToken;
            checkAvailable: SignUpUserInput.checkAvailable;
            isTestUser: SignUpUserInput.isTestUser;
            offersHelp: SignUpUserInput.offersHelp;
            seeksHelp: SignUpUserInput.seeksHelp;
        };
    }
    export namespace SignUpUserInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface firstName {
            kind: 'InputField';
            name: 'firstName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'InputField';
            name: 'lastName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'InputField';
            name: 'userHandle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailVerifiedAt {
            kind: 'InputField';
            name: 'emailVerifiedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface emailSource {
            kind: 'InputField';
            name: 'emailSource';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface authType {
            kind: 'InputField';
            name: 'authType';
            inlineType: [1];
            namedType: $$NamedTypes.$$AuthType;
        }
        interface password {
            kind: 'InputField';
            name: 'password';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'InputField';
            name: 'avatarUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface source {
            kind: 'InputField';
            name: 'source';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'InputField';
            name: 'timezone';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface optIntoNewsletter {
            kind: 'InputField';
            name: 'optIntoNewsletter';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface pushNotificationToken {
            kind: 'InputField';
            name: 'pushNotificationToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cookieConsentChoice {
            kind: 'InputField';
            name: 'cookieConsentChoice';
            inlineType: [0];
            namedType: $$NamedTypes.$$CookieChoiceTextId;
        }
        interface allowToTrack {
            kind: 'InputField';
            name: 'allowToTrack';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface trackId {
            kind: 'InputField';
            name: 'trackId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface captchaService {
            kind: 'InputField';
            name: 'captchaService';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface captchaToken {
            kind: 'InputField';
            name: 'captchaToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface checkAvailable {
            kind: 'InputField';
            name: 'checkAvailable';
            inlineType: [1];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isTestUser {
            kind: 'InputField';
            name: 'isTestUser';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'InputField';
            name: 'offersHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface seeksHelp {
            kind: 'InputField';
            name: 'seeksHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface VerifyOneTimeAuthTokenInput {
        kind: 'InputObject';
        name: 'VerifyOneTimeAuthTokenInput';
        isAllFieldsNullable: true;
        fields: {
            id: VerifyOneTimeAuthTokenInput.id;
            adminNotes: VerifyOneTimeAuthTokenInput.adminNotes;
            events: VerifyOneTimeAuthTokenInput.events;
            metadata: VerifyOneTimeAuthTokenInput.metadata;
            createdAt: VerifyOneTimeAuthTokenInput.createdAt;
            createdBy: VerifyOneTimeAuthTokenInput.createdBy;
            updatedAt: VerifyOneTimeAuthTokenInput.updatedAt;
            updatedBy: VerifyOneTimeAuthTokenInput.updatedBy;
            deletedAt: VerifyOneTimeAuthTokenInput.deletedAt;
            deletedBy: VerifyOneTimeAuthTokenInput.deletedBy;
            userIdent: VerifyOneTimeAuthTokenInput.userIdent;
            userIdentType: VerifyOneTimeAuthTokenInput.userIdentType;
            deviceUuid: VerifyOneTimeAuthTokenInput.deviceUuid;
            token: VerifyOneTimeAuthTokenInput.token;
        };
    }
    export namespace VerifyOneTimeAuthTokenInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIdent {
            kind: 'InputField';
            name: 'userIdent';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userIdentType {
            kind: 'InputField';
            name: 'userIdentType';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserIdentType;
        }
        interface deviceUuid {
            kind: 'InputField';
            name: 'deviceUuid';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface token {
            kind: 'InputField';
            name: 'token';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface ReportUserInput {
        kind: 'InputObject';
        name: 'ReportUserInput';
        isAllFieldsNullable: true;
        fields: {
            userId: ReportUserInput.userId;
            reasonTextId: ReportUserInput.reasonTextId;
            messageText: ReportUserInput.messageText;
            createdBy: ReportUserInput.createdBy;
        };
    }
    export namespace ReportUserInput {
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface reasonTextId {
            kind: 'InputField';
            name: 'reasonTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ReportUserReasonTextId;
        }
        interface messageText {
            kind: 'InputField';
            name: 'messageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
    }
    export interface AdminTaskInput {
        kind: 'InputObject';
        name: 'AdminTaskInput';
        isAllFieldsNullable: true;
        fields: {
            id: AdminTaskInput.id;
            adminNotes: AdminTaskInput.adminNotes;
            events: AdminTaskInput.events;
            metadata: AdminTaskInput.metadata;
            createdAt: AdminTaskInput.createdAt;
            createdBy: AdminTaskInput.createdBy;
            updatedAt: AdminTaskInput.updatedAt;
            updatedBy: AdminTaskInput.updatedBy;
            deletedAt: AdminTaskInput.deletedAt;
            deletedBy: AdminTaskInput.deletedBy;
            adminTaskType: AdminTaskInput.adminTaskType;
            result: AdminTaskInput.result;
            resultMessage: AdminTaskInput.resultMessage;
            error: AdminTaskInput.error;
            args: AdminTaskInput.args;
            timeout: AdminTaskInput.timeout;
            autoRun: AdminTaskInput.autoRun;
            synchronous: AdminTaskInput.synchronous;
            startedAt: AdminTaskInput.startedAt;
            expiresAt: AdminTaskInput.expiresAt;
            finishedAt: AdminTaskInput.finishedAt;
        };
    }
    export namespace AdminTaskInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminTaskType {
            kind: 'InputField';
            name: 'adminTaskType';
            inlineType: [0];
            namedType: $$NamedTypes.$$AdminTaskType;
        }
        interface result {
            kind: 'InputField';
            name: 'result';
            inlineType: [0];
            namedType: $$NamedTypes.$$AdminTaskResult;
        }
        interface resultMessage {
            kind: 'InputField';
            name: 'resultMessage';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Any error messages that happened during the run
         */
        interface error {
            kind: 'InputField';
            name: 'error';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * arguments
         */
        interface args {
            kind: 'InputField';
            name: 'args';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * number of milliseconds before timeout
         */
        interface timeout {
            kind: 'InputField';
            name: 'timeout';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        /**
         * run ask after creation
         */
        interface autoRun {
            kind: 'InputField';
            name: 'autoRun';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * should the task run synchronously, or in the background?
         */
        interface synchronous {
            kind: 'InputField';
            name: 'synchronous';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Date/time this task started to run
         */
        interface startedAt {
            kind: 'InputField';
            name: 'startedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * Date/time this task will be removed from the db
         */
        interface expiresAt {
            kind: 'InputField';
            name: 'expiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * Date/time this task completed its run
         */
        interface finishedAt {
            kind: 'InputField';
            name: 'finishedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ChannelInvitationInput {
        kind: 'InputObject';
        name: 'ChannelInvitationInput';
        isAllFieldsNullable: true;
        fields: {
            id: ChannelInvitationInput.id;
            adminNotes: ChannelInvitationInput.adminNotes;
            events: ChannelInvitationInput.events;
            metadata: ChannelInvitationInput.metadata;
            createdAt: ChannelInvitationInput.createdAt;
            createdBy: ChannelInvitationInput.createdBy;
            updatedAt: ChannelInvitationInput.updatedAt;
            updatedBy: ChannelInvitationInput.updatedBy;
            deletedAt: ChannelInvitationInput.deletedAt;
            deletedBy: ChannelInvitationInput.deletedBy;
            channelId: ChannelInvitationInput.channelId;
            recipientId: ChannelInvitationInput.recipientId;
            channelName: ChannelInvitationInput.channelName;
            channelTopic: ChannelInvitationInput.channelTopic;
            messageText: ChannelInvitationInput.messageText;
            autoAccept: ChannelInvitationInput.autoAccept;
            declineReasonTextId: ChannelInvitationInput.declineReasonTextId;
            dismissedFromInboxBySenderAt: ChannelInvitationInput.dismissedFromInboxBySenderAt;
            dismissedFromInboxByRecipientAt: ChannelInvitationInput.dismissedFromInboxByRecipientAt;
            readByRecipientAt: ChannelInvitationInput.readByRecipientAt;
            status: ChannelInvitationInput.status;
            suspendedAt: ChannelInvitationInput.suspendedAt;
            suspendedBy: ChannelInvitationInput.suspendedBy;
            userSearchId: ChannelInvitationInput.userSearchId;
            searchRank: ChannelInvitationInput.searchRank;
            mm2ConversationId: ChannelInvitationInput.mm2ConversationId;
            mm2Id: ChannelInvitationInput.mm2Id;
            syncedWithMm2At: ChannelInvitationInput.syncedWithMm2At;
        };
    }
    export namespace ChannelInvitationInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelId {
            kind: 'InputField';
            name: 'channelId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientId {
            kind: 'InputField';
            name: 'recipientId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface channelName {
            kind: 'InputField';
            name: 'channelName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface channelTopic {
            kind: 'InputField';
            name: 'channelTopic';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'InputField';
            name: 'messageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * An authorized sender (i.e. role: ["support"]) can skip the acceptance step.
         */
        interface autoAccept {
            kind: 'InputField';
            name: 'autoAccept';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface declineReasonTextId {
            kind: 'InputField';
            name: 'declineReasonTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface dismissedFromInboxBySenderAt {
            kind: 'InputField';
            name: 'dismissedFromInboxBySenderAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface dismissedFromInboxByRecipientAt {
            kind: 'InputField';
            name: 'dismissedFromInboxByRecipientAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface readByRecipientAt {
            kind: 'InputField';
            name: 'readByRecipientAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface status {
            kind: 'InputField';
            name: 'status';
            inlineType: [0];
            namedType: $$NamedTypes.$$ChannelInvitationStatus;
        }
        interface suspendedAt {
            kind: 'InputField';
            name: 'suspendedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'InputField';
            name: 'suspendedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userSearchId {
            kind: 'InputField';
            name: 'userSearchId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface searchRank {
            kind: 'InputField';
            name: 'searchRank';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface mm2ConversationId {
            kind: 'InputField';
            name: 'mm2ConversationId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer. Mm2 message ID.
         */
        interface mm2Id {
            kind: 'InputField';
            name: 'mm2Id';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This attribute is only used by the MM2 synchronizer.
         */
        interface syncedWithMm2At {
            kind: 'InputField';
            name: 'syncedWithMm2At';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface BgAddChannelMessageEventInput {
        kind: 'InputObject';
        name: 'BgAddChannelMessageEventInput';
        isAllFieldsNullable: false;
        fields: {
            channelId: BgAddChannelMessageEventInput.channelId;
            messageIds: BgAddChannelMessageEventInput.messageIds;
            recipientId: BgAddChannelMessageEventInput.recipientId;
            event: BgAddChannelMessageEventInput.event;
        };
    }
    export namespace BgAddChannelMessageEventInput {
        interface channelId {
            kind: 'InputField';
            name: 'channelId';
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface messageIds {
            kind: 'InputField';
            name: 'messageIds';
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientId {
            kind: 'InputField';
            name: 'recipientId';
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface event {
            kind: 'InputField';
            name: 'event';
            inlineType: [1];
            namedType: $$NamedTypes.$$ChannelMessageEvent;
        }
    }
    export interface ContentTagInput {
        kind: 'InputObject';
        name: 'ContentTagInput';
        isAllFieldsNullable: true;
        fields: {
            id: ContentTagInput.id;
            adminNotes: ContentTagInput.adminNotes;
            events: ContentTagInput.events;
            metadata: ContentTagInput.metadata;
            createdAt: ContentTagInput.createdAt;
            createdBy: ContentTagInput.createdBy;
            updatedAt: ContentTagInput.updatedAt;
            updatedBy: ContentTagInput.updatedBy;
            deletedAt: ContentTagInput.deletedAt;
            deletedBy: ContentTagInput.deletedBy;
            objectId: ContentTagInput.objectId;
            contentModelType: ContentTagInput.contentModelType;
            userId: ContentTagInput.userId;
            contentTagTypeTextId: ContentTagInput.contentTagTypeTextId;
            childContentTagTypeTextId: ContentTagInput.childContentTagTypeTextId;
            messageText: ContentTagInput.messageText;
            moderationConcern: ContentTagInput.moderationConcern;
            allModerationConcerns: ContentTagInput.allModerationConcerns;
            approvedByRecipientAt: ContentTagInput.approvedByRecipientAt;
            verifiedBy: ContentTagInput.verifiedBy;
            verifiedAt: ContentTagInput.verifiedAt;
            dismissedBy: ContentTagInput.dismissedBy;
            dismissedAt: ContentTagInput.dismissedAt;
        };
    }
    export namespace ContentTagInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface objectId {
            kind: 'InputField';
            name: 'objectId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface contentModelType {
            kind: 'InputField';
            name: 'contentModelType';
            inlineType: [0];
            namedType: $$NamedTypes.$$ModelType;
        }
        /**
         * ID of the user that created/owns the content referred to in this ContentTag. The ID of the user that created this ContentTag is stored in the createdBy field for ContentTags that were created by a user.
         */
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface contentTagTypeTextId {
            kind: 'InputField';
            name: 'contentTagTypeTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface childContentTagTypeTextId {
            kind: 'InputField';
            name: 'childContentTagTypeTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'InputField';
            name: 'messageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface moderationConcern {
            kind: 'InputField';
            name: 'moderationConcern';
            inlineType: [0];
            namedType: $$NamedTypes.$$ModerationConcernInput;
        }
        interface allModerationConcerns {
            kind: 'InputField';
            name: 'allModerationConcerns';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModerationConcernInput;
        }
        interface approvedByRecipientAt {
            kind: 'InputField';
            name: 'approvedByRecipientAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * ID of the admin user that verified the tag.
         */
        interface verifiedBy {
            kind: 'InputField';
            name: 'verifiedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface verifiedAt {
            kind: 'InputField';
            name: 'verifiedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * ID of the admin user that dimsissed the tag.
         */
        interface dismissedBy {
            kind: 'InputField';
            name: 'dismissedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface dismissedAt {
            kind: 'InputField';
            name: 'dismissedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface ModerationConcernInput {
        kind: 'InputObject';
        name: 'ModerationConcernInput';
        isAllFieldsNullable: true;
        fields: {
            id: ModerationConcernInput.id;
            adminNotes: ModerationConcernInput.adminNotes;
            events: ModerationConcernInput.events;
            metadata: ModerationConcernInput.metadata;
            createdAt: ModerationConcernInput.createdAt;
            createdBy: ModerationConcernInput.createdBy;
            updatedAt: ModerationConcernInput.updatedAt;
            updatedBy: ModerationConcernInput.updatedBy;
            deletedAt: ModerationConcernInput.deletedAt;
            deletedBy: ModerationConcernInput.deletedBy;
            moderationConcernType: ModerationConcernInput.moderationConcernType;
            name: ModerationConcernInput.name;
            description: ModerationConcernInput.description;
            value: ModerationConcernInput.value;
            languageTextId: ModerationConcernInput.languageTextId;
            isCaseSensitive: ModerationConcernInput.isCaseSensitive;
            isWord: ModerationConcernInput.isWord;
            isRegex: ModerationConcernInput.isRegex;
            isNameOfBadActor: ModerationConcernInput.isNameOfBadActor;
            isCompanyNameOfBadActor: ModerationConcernInput.isCompanyNameOfBadActor;
            isEmailOfBadActor: ModerationConcernInput.isEmailOfBadActor;
            isPhoneNumberOfBadActor: ModerationConcernInput.isPhoneNumberOfBadActor;
            isWebsiteOfBadActor: ModerationConcernInput.isWebsiteOfBadActor;
            deleteContent: ModerationConcernInput.deleteContent;
            trustLevelImpact: ModerationConcernInput.trustLevelImpact;
            version: ModerationConcernInput.version;
        };
    }
    export namespace ModerationConcernInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface moderationConcernType {
            kind: 'InputField';
            name: 'moderationConcernType';
            inlineType: [1];
            namedType: $$NamedTypes.$$ModerationConcernType;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface value {
            kind: 'InputField';
            name: 'value';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface languageTextId {
            kind: 'InputField';
            name: 'languageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * must match with capitalization; ignored if isRegex = true; default = true
         */
        interface isCaseSensitive {
            kind: 'InputField';
            name: 'isCaseSensitive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * only matches full words; ignored if isRegex = true; default = true
         */
        interface isWord {
            kind: 'InputField';
            name: 'isWord';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * value is a regex expression without flags; default = false
         */
        interface isRegex {
            kind: 'InputField';
            name: 'isRegex';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isNameOfBadActor {
            kind: 'InputField';
            name: 'isNameOfBadActor';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isCompanyNameOfBadActor {
            kind: 'InputField';
            name: 'isCompanyNameOfBadActor';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isEmailOfBadActor {
            kind: 'InputField';
            name: 'isEmailOfBadActor';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isPhoneNumberOfBadActor {
            kind: 'InputField';
            name: 'isPhoneNumberOfBadActor';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * default = false
         */
        interface isWebsiteOfBadActor {
            kind: 'InputField';
            name: 'isWebsiteOfBadActor';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * delete the content, if a match is found; default = false
         */
        interface deleteContent {
            kind: 'InputField';
            name: 'deleteContent';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * number of points to reduce a users trustLevel, if found
         */
        interface trustLevelImpact {
            kind: 'InputField';
            name: 'trustLevelImpact';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface version {
            kind: 'InputField';
            name: 'version';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface MenteesGroupMembershipInput {
        kind: 'InputObject';
        name: 'MenteesGroupMembershipInput';
        isAllFieldsNullable: true;
        fields: {
            id: MenteesGroupMembershipInput.id;
            adminNotes: MenteesGroupMembershipInput.adminNotes;
            events: MenteesGroupMembershipInput.events;
            metadata: MenteesGroupMembershipInput.metadata;
            createdAt: MenteesGroupMembershipInput.createdAt;
            createdBy: MenteesGroupMembershipInput.createdBy;
            updatedAt: MenteesGroupMembershipInput.updatedAt;
            updatedBy: MenteesGroupMembershipInput.updatedBy;
            deletedAt: MenteesGroupMembershipInput.deletedAt;
            deletedBy: MenteesGroupMembershipInput.deletedBy;
            groupId: MenteesGroupMembershipInput.groupId;
            groupIdent: MenteesGroupMembershipInput.groupIdent;
            userId: MenteesGroupMembershipInput.userId;
            roles: MenteesGroupMembershipInput.roles;
            soughtExpertisesTextIds: MenteesGroupMembershipInput.soughtExpertisesTextIds;
            additionalSoughtExpertisesTextIds: MenteesGroupMembershipInput.additionalSoughtExpertisesTextIds;
            industryTextId: MenteesGroupMembershipInput.industryTextId;
            mm2SoughtExpertisesTextIds: MenteesGroupMembershipInput.mm2SoughtExpertisesTextIds;
            mm2IndustryTextId: MenteesGroupMembershipInput.mm2IndustryTextId;
            actionsTaken: MenteesGroupMembershipInput.actionsTaken;
            currentChallenges: MenteesGroupMembershipInput.currentChallenges;
            futureGoals: MenteesGroupMembershipInput.futureGoals;
            motivationsForMentorship: MenteesGroupMembershipInput.motivationsForMentorship;
            reasonsForStartingBusiness: MenteesGroupMembershipInput.reasonsForStartingBusiness;
            howCanMentorSupportMe: MenteesGroupMembershipInput.howCanMentorSupportMe;
        };
    }
    export namespace MenteesGroupMembershipInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'InputField';
            name: 'groupIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        /**
         * Must match expertise textIds.
         */
        interface soughtExpertisesTextIds {
            kind: 'InputField';
            name: 'soughtExpertisesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match expertise textIds.
         */
        interface additionalSoughtExpertisesTextIds {
            kind: 'InputField';
            name: 'additionalSoughtExpertisesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match industry textId.
         */
        interface industryTextId {
            kind: 'InputField';
            name: 'industryTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 expertise textIds -- only used by synchronizer
         */
        interface mm2SoughtExpertisesTextIds {
            kind: 'InputField';
            name: 'mm2SoughtExpertisesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 industry textIds -- only used by synchronizer
         */
        interface mm2IndustryTextId {
            kind: 'InputField';
            name: 'mm2IndustryTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface actionsTaken {
            kind: 'InputField';
            name: 'actionsTaken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface currentChallenges {
            kind: 'InputField';
            name: 'currentChallenges';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface futureGoals {
            kind: 'InputField';
            name: 'futureGoals';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * From MM2, not used in MM3 (yet)
         */
        interface motivationsForMentorship {
            kind: 'InputField';
            name: 'motivationsForMentorship';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface reasonsForStartingBusiness {
            kind: 'InputField';
            name: 'reasonsForStartingBusiness';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface howCanMentorSupportMe {
            kind: 'InputField';
            name: 'howCanMentorSupportMe';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface MentorsGroupMembershipInput {
        kind: 'InputObject';
        name: 'MentorsGroupMembershipInput';
        isAllFieldsNullable: true;
        fields: {
            id: MentorsGroupMembershipInput.id;
            adminNotes: MentorsGroupMembershipInput.adminNotes;
            events: MentorsGroupMembershipInput.events;
            metadata: MentorsGroupMembershipInput.metadata;
            createdAt: MentorsGroupMembershipInput.createdAt;
            createdBy: MentorsGroupMembershipInput.createdBy;
            updatedAt: MentorsGroupMembershipInput.updatedAt;
            updatedBy: MentorsGroupMembershipInput.updatedBy;
            deletedAt: MentorsGroupMembershipInput.deletedAt;
            deletedBy: MentorsGroupMembershipInput.deletedBy;
            groupId: MentorsGroupMembershipInput.groupId;
            groupIdent: MentorsGroupMembershipInput.groupIdent;
            userId: MentorsGroupMembershipInput.userId;
            roles: MentorsGroupMembershipInput.roles;
            expertisesTextIds: MentorsGroupMembershipInput.expertisesTextIds;
            additionalExpertisesTextIds: MentorsGroupMembershipInput.additionalExpertisesTextIds;
            industriesTextIds: MentorsGroupMembershipInput.industriesTextIds;
            mm2ExpertisesTextIds: MentorsGroupMembershipInput.mm2ExpertisesTextIds;
            mm2IndustriesTextIds: MentorsGroupMembershipInput.mm2IndustriesTextIds;
            helpICanOffer: MentorsGroupMembershipInput.helpICanOffer;
            expectationsForMentees: MentorsGroupMembershipInput.expectationsForMentees;
            menteePreparationInstructions: MentorsGroupMembershipInput.menteePreparationInstructions;
            endorsements: MentorsGroupMembershipInput.endorsements;
            reasonsForMentoring: MentorsGroupMembershipInput.reasonsForMentoring;
            howICanHelpMentees: MentorsGroupMembershipInput.howICanHelpMentees;
        };
    }
    export namespace MentorsGroupMembershipInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'InputField';
            name: 'groupIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        /**
         * Must match expertise textIds.
         */
        interface expertisesTextIds {
            kind: 'InputField';
            name: 'expertisesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match expertise textIds.
         */
        interface additionalExpertisesTextIds {
            kind: 'InputField';
            name: 'additionalExpertisesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match industry textIds.
         */
        interface industriesTextIds {
            kind: 'InputField';
            name: 'industriesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 expertise textIds -- only used by synchronizer
         */
        interface mm2ExpertisesTextIds {
            kind: 'InputField';
            name: 'mm2ExpertisesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Must match mm2 industry textIds -- only used by synchronizer
         */
        interface mm2IndustriesTextIds {
            kind: 'InputField';
            name: 'mm2IndustriesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface helpICanOffer {
            kind: 'InputField';
            name: 'helpICanOffer';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface expectationsForMentees {
            kind: 'InputField';
            name: 'expectationsForMentees';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface menteePreparationInstructions {
            kind: 'InputField';
            name: 'menteePreparationInstructions';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface endorsements {
            kind: 'InputField';
            name: 'endorsements';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface reasonsForMentoring {
            kind: 'InputField';
            name: 'reasonsForMentoring';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface howICanHelpMentees {
            kind: 'InputField';
            name: 'howICanHelpMentees';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface IqlaaGroupMembershipInput {
        kind: 'InputObject';
        name: 'IqlaaGroupMembershipInput';
        isAllFieldsNullable: true;
        fields: {
            id: IqlaaGroupMembershipInput.id;
            adminNotes: IqlaaGroupMembershipInput.adminNotes;
            events: IqlaaGroupMembershipInput.events;
            metadata: IqlaaGroupMembershipInput.metadata;
            createdAt: IqlaaGroupMembershipInput.createdAt;
            createdBy: IqlaaGroupMembershipInput.createdBy;
            updatedAt: IqlaaGroupMembershipInput.updatedAt;
            updatedBy: IqlaaGroupMembershipInput.updatedBy;
            deletedAt: IqlaaGroupMembershipInput.deletedAt;
            deletedBy: IqlaaGroupMembershipInput.deletedBy;
            groupId: IqlaaGroupMembershipInput.groupId;
            groupIdent: IqlaaGroupMembershipInput.groupIdent;
            userId: IqlaaGroupMembershipInput.userId;
            roles: IqlaaGroupMembershipInput.roles;
            fatherName: IqlaaGroupMembershipInput.fatherName;
            birthDate: IqlaaGroupMembershipInput.birthDate;
            isBusinessHomeBased: IqlaaGroupMembershipInput.isBusinessHomeBased;
            isBusinessRegisteredWithCCD: IqlaaGroupMembershipInput.isBusinessRegisteredWithCCD;
            businessRegistrationNumber: IqlaaGroupMembershipInput.businessRegistrationNumber;
            isJordanNational: IqlaaGroupMembershipInput.isJordanNational;
        };
    }
    export namespace IqlaaGroupMembershipInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'InputField';
            name: 'groupIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        /**
         * Fathers name
         */
        interface fatherName {
            kind: 'InputField';
            name: 'fatherName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Date of birth
         */
        interface birthDate {
            kind: 'InputField';
            name: 'birthDate';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        /**
         * "Is your business a home-based business?"
         */
        interface isBusinessHomeBased {
            kind: 'InputField';
            name: 'isBusinessHomeBased';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * "Is the Business/ Project registered in the Companies Control Department -Ministry of industries and trading?"
         */
        interface isBusinessRegisteredWithCCD {
            kind: 'InputField';
            name: 'isBusinessRegisteredWithCCD';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * (Optional) Business registration number
         */
        interface businessRegistrationNumber {
            kind: 'InputField';
            name: 'businessRegistrationNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Is the user a Jordan national?
         */
        interface isJordanNational {
            kind: 'InputField';
            name: 'isJordanNational';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface MastercardGroupMembershipInput {
        kind: 'InputObject';
        name: 'MastercardGroupMembershipInput';
        isAllFieldsNullable: true;
        fields: {
            id: MastercardGroupMembershipInput.id;
            adminNotes: MastercardGroupMembershipInput.adminNotes;
            events: MastercardGroupMembershipInput.events;
            metadata: MastercardGroupMembershipInput.metadata;
            createdAt: MastercardGroupMembershipInput.createdAt;
            createdBy: MastercardGroupMembershipInput.createdBy;
            updatedAt: MastercardGroupMembershipInput.updatedAt;
            updatedBy: MastercardGroupMembershipInput.updatedBy;
            deletedAt: MastercardGroupMembershipInput.deletedAt;
            deletedBy: MastercardGroupMembershipInput.deletedBy;
            groupId: MastercardGroupMembershipInput.groupId;
            groupIdent: MastercardGroupMembershipInput.groupIdent;
            userId: MastercardGroupMembershipInput.userId;
            roles: MastercardGroupMembershipInput.roles;
            bankNames: MastercardGroupMembershipInput.bankNames;
            bankTextIds: MastercardGroupMembershipInput.bankTextIds;
            smallBusinessCardTypes: MastercardGroupMembershipInput.smallBusinessCardTypes;
            personalCardTypes: MastercardGroupMembershipInput.personalCardTypes;
        };
    }
    export namespace MastercardGroupMembershipInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'InputField';
            name: 'groupIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
        /**
         * Names of banks for reports
         */
        interface bankNames {
            kind: 'InputField';
            name: 'bankNames';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Text IDs of banks for reports
         */
        interface bankTextIds {
            kind: 'InputField';
            name: 'bankTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Small business card types
         */
        interface smallBusinessCardTypes {
            kind: 'InputField';
            name: 'smallBusinessCardTypes';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MastercardCardType;
        }
        /**
         * Personal card types
         */
        interface personalCardTypes {
            kind: 'InputField';
            name: 'personalCardTypes';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MastercardCardType;
        }
    }
    export interface SupportChannelConfigInput {
        kind: 'InputObject';
        name: 'SupportChannelConfigInput';
        isAllFieldsNullable: true;
        fields: {
            id: SupportChannelConfigInput.id;
            adminNotes: SupportChannelConfigInput.adminNotes;
            events: SupportChannelConfigInput.events;
            metadata: SupportChannelConfigInput.metadata;
            createdAt: SupportChannelConfigInput.createdAt;
            createdBy: SupportChannelConfigInput.createdBy;
            updatedAt: SupportChannelConfigInput.updatedAt;
            updatedBy: SupportChannelConfigInput.updatedBy;
            deletedAt: SupportChannelConfigInput.deletedAt;
            deletedBy: SupportChannelConfigInput.deletedBy;
            groupId: SupportChannelConfigInput.groupId;
            groupIdent: SupportChannelConfigInput.groupIdent;
            senderUserId: SupportChannelConfigInput.senderUserId;
            isActive: SupportChannelConfigInput.isActive;
            createSupportChannelForMentees: SupportChannelConfigInput.createSupportChannelForMentees;
            createSupportChannelForMentors: SupportChannelConfigInput.createSupportChannelForMentors;
            channelLanguageTextId: SupportChannelConfigInput.channelLanguageTextId;
            filterByGenderTextIds: SupportChannelConfigInput.filterByGenderTextIds;
            firstMessageText: SupportChannelConfigInput.firstMessageText;
            sendNotifications: SupportChannelConfigInput.sendNotifications;
        };
    }
    export namespace SupportChannelConfigInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'InputField';
            name: 'groupId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'InputField';
            name: 'groupIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderUserId {
            kind: 'InputField';
            name: 'senderUserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Is this welcome message active / should we send it to users?
         */
        interface isActive {
            kind: 'InputField';
            name: 'isActive';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createSupportChannelForMentees {
            kind: 'InputField';
            name: 'createSupportChannelForMentees';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface createSupportChannelForMentors {
            kind: 'InputField';
            name: 'createSupportChannelForMentors';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * Any language option can be selected, not just a UiLanguage
         */
        interface channelLanguageTextId {
            kind: 'InputField';
            name: 'channelLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface filterByGenderTextIds {
            kind: 'InputField';
            name: 'filterByGenderTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * The welcome message is a plain text
         */
        interface firstMessageText {
            kind: 'InputField';
            name: 'firstMessageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Setting to false will ensure no notifications are sent. Setting to true will still check notification template settings.
         */
        interface sendNotifications {
            kind: 'InputField';
            name: 'sendNotifications';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface UpdateObjectOptions {
        kind: 'InputObject';
        name: 'UpdateObjectOptions';
        isAllFieldsNullable: true;
        fields: {
            replace: UpdateObjectOptions.replace;
            upsert: UpdateObjectOptions.upsert;
            returnReloadedObject: UpdateObjectOptions.returnReloadedObject;
        };
    }
    export namespace UpdateObjectOptions {
        interface replace {
            kind: 'InputField';
            name: 'replace';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface upsert {
            kind: 'InputField';
            name: 'upsert';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface returnReloadedObject {
            kind: 'InputField';
            name: 'returnReloadedObject';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface NotificationInput {
        kind: 'InputObject';
        name: 'NotificationInput';
        isAllFieldsNullable: true;
        fields: {
            id: NotificationInput.id;
            adminNotes: NotificationInput.adminNotes;
            events: NotificationInput.events;
            metadata: NotificationInput.metadata;
            createdAt: NotificationInput.createdAt;
            createdBy: NotificationInput.createdBy;
            updatedAt: NotificationInput.updatedAt;
            updatedBy: NotificationInput.updatedBy;
            deletedAt: NotificationInput.deletedAt;
            deletedBy: NotificationInput.deletedBy;
            notificationType: NotificationInput.notificationType;
            templateId: NotificationInput.templateId;
            templateName: NotificationInput.templateName;
            recipientId: NotificationInput.recipientId;
            multiStepActionId: NotificationInput.multiStepActionId;
            initiatorId: NotificationInput.initiatorId;
            replyingToId: NotificationInput.replyingToId;
            title: NotificationInput.title;
            messageText: NotificationInput.messageText;
            shortMessageText: NotificationInput.shortMessageText;
            htmlMessage: NotificationInput.htmlMessage;
            language: NotificationInput.language;
            isTranslated: NotificationInput.isTranslated;
            appLink: NotificationInput.appLink;
            action0: NotificationInput.action0;
            action1: NotificationInput.action1;
            action2: NotificationInput.action2;
            actionTaken: NotificationInput.actionTaken;
            sendEmail: NotificationInput.sendEmail;
            sendInAppMessage: NotificationInput.sendInAppMessage;
            sendPushNotification: NotificationInput.sendPushNotification;
            sendSms: NotificationInput.sendSms;
            allowSendingToSuspendedUser: NotificationInput.allowSendingToSuspendedUser;
            emailSentAt: NotificationInput.emailSentAt;
            inAppMessageSentAt: NotificationInput.inAppMessageSentAt;
            inAppMessageReceivedAt: NotificationInput.inAppMessageReceivedAt;
            pushNotificationSentAt: NotificationInput.pushNotificationSentAt;
            smsSentAt: NotificationInput.smsSentAt;
            emailSendReport: NotificationInput.emailSendReport;
            pushNotificationSendReport: NotificationInput.pushNotificationSendReport;
            smsSendReport: NotificationInput.smsSendReport;
            sentMessagesCount: NotificationInput.sentMessagesCount;
            context: NotificationInput.context;
        };
    }
    export namespace NotificationInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface notificationType {
            kind: 'InputField';
            name: 'notificationType';
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationType;
        }
        interface templateId {
            kind: 'InputField';
            name: 'templateId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface templateName {
            kind: 'InputField';
            name: 'templateName';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface recipientId {
            kind: 'InputField';
            name: 'recipientId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface multiStepActionId {
            kind: 'InputField';
            name: 'multiStepActionId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface initiatorId {
            kind: 'InputField';
            name: 'initiatorId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface replyingToId {
            kind: 'InputField';
            name: 'replyingToId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface title {
            kind: 'InputField';
            name: 'title';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageText {
            kind: 'InputField';
            name: 'messageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageText {
            kind: 'InputField';
            name: 'shortMessageText';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessage {
            kind: 'InputField';
            name: 'htmlMessage';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface language {
            kind: 'InputField';
            name: 'language';
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface isTranslated {
            kind: 'InputField';
            name: 'isTranslated';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface appLink {
            kind: 'InputField';
            name: 'appLink';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface action0 {
            kind: 'InputField';
            name: 'action0';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action1 {
            kind: 'InputField';
            name: 'action1';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action2 {
            kind: 'InputField';
            name: 'action2';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface actionTaken {
            kind: 'InputField';
            name: 'actionTaken';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface sendEmail {
            kind: 'InputField';
            name: 'sendEmail';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendInAppMessage {
            kind: 'InputField';
            name: 'sendInAppMessage';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendPushNotification {
            kind: 'InputField';
            name: 'sendPushNotification';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendSms {
            kind: 'InputField';
            name: 'sendSms';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface allowSendingToSuspendedUser {
            kind: 'InputField';
            name: 'allowSendingToSuspendedUser';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface emailSentAt {
            kind: 'InputField';
            name: 'emailSentAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inAppMessageSentAt {
            kind: 'InputField';
            name: 'inAppMessageSentAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inAppMessageReceivedAt {
            kind: 'InputField';
            name: 'inAppMessageReceivedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface pushNotificationSentAt {
            kind: 'InputField';
            name: 'pushNotificationSentAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface smsSentAt {
            kind: 'InputField';
            name: 'smsSentAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface emailSendReport {
            kind: 'InputField';
            name: 'emailSendReport';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface pushNotificationSendReport {
            kind: 'InputField';
            name: 'pushNotificationSendReport';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface smsSendReport {
            kind: 'InputField';
            name: 'smsSendReport';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface sentMessagesCount {
            kind: 'InputField';
            name: 'sentMessagesCount';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface context {
            kind: 'InputField';
            name: 'context';
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationInput;
        }
    }
    export interface SendMultiStepActionNotificationInput {
        kind: 'InputObject';
        name: 'SendMultiStepActionNotificationInput';
        isAllFieldsNullable: true;
        fields: {
            actionId: SendMultiStepActionNotificationInput.actionId;
            email: SendMultiStepActionNotificationInput.email;
            phoneNumber: SendMultiStepActionNotificationInput.phoneNumber;
            notificationMethod: SendMultiStepActionNotificationInput.notificationMethod;
        };
    }
    export namespace SendMultiStepActionNotificationInput {
        interface actionId {
            kind: 'InputField';
            name: 'actionId';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Only allowed for certain flows, i.e. during sign-up with only an email or phone number.
         */
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Only allowed for certain flows, i.e. during sign-up with only an email or phone number.
         */
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface notificationMethod {
            kind: 'InputField';
            name: 'notificationMethod';
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationMethod;
        }
    }
    export interface NotificationTemplateInput {
        kind: 'InputObject';
        name: 'NotificationTemplateInput';
        isAllFieldsNullable: true;
        fields: {
            id: NotificationTemplateInput.id;
            adminNotes: NotificationTemplateInput.adminNotes;
            events: NotificationTemplateInput.events;
            metadata: NotificationTemplateInput.metadata;
            createdAt: NotificationTemplateInput.createdAt;
            createdBy: NotificationTemplateInput.createdBy;
            updatedAt: NotificationTemplateInput.updatedAt;
            updatedBy: NotificationTemplateInput.updatedBy;
            deletedAt: NotificationTemplateInput.deletedAt;
            deletedBy: NotificationTemplateInput.deletedBy;
            templateId: NotificationTemplateInput.templateId;
            name: NotificationTemplateInput.name;
            description: NotificationTemplateInput.description;
            titleAr: NotificationTemplateInput.titleAr;
            messageTextAr: NotificationTemplateInput.messageTextAr;
            shortMessageTextAr: NotificationTemplateInput.shortMessageTextAr;
            htmlMessageAr: NotificationTemplateInput.htmlMessageAr;
            titleEn: NotificationTemplateInput.titleEn;
            messageTextEn: NotificationTemplateInput.messageTextEn;
            shortMessageTextEn: NotificationTemplateInput.shortMessageTextEn;
            htmlMessageEn: NotificationTemplateInput.htmlMessageEn;
            titleEs: NotificationTemplateInput.titleEs;
            messageTextEs: NotificationTemplateInput.messageTextEs;
            shortMessageTextEs: NotificationTemplateInput.shortMessageTextEs;
            htmlMessageEs: NotificationTemplateInput.htmlMessageEs;
            titleId: NotificationTemplateInput.titleId;
            messageTextId: NotificationTemplateInput.messageTextId;
            shortMessageTextId: NotificationTemplateInput.shortMessageTextId;
            htmlMessageId: NotificationTemplateInput.htmlMessageId;
            titleRu: NotificationTemplateInput.titleRu;
            messageTextRu: NotificationTemplateInput.messageTextRu;
            shortMessageTextRu: NotificationTemplateInput.shortMessageTextRu;
            htmlMessageRu: NotificationTemplateInput.htmlMessageRu;
            titleSo: NotificationTemplateInput.titleSo;
            messageTextSo: NotificationTemplateInput.messageTextSo;
            shortMessageTextSo: NotificationTemplateInput.shortMessageTextSo;
            htmlMessageSo: NotificationTemplateInput.htmlMessageSo;
            version: NotificationTemplateInput.version;
            senderName: NotificationTemplateInput.senderName;
            senderEmail: NotificationTemplateInput.senderEmail;
            action0: NotificationTemplateInput.action0;
            action1: NotificationTemplateInput.action1;
            action2: NotificationTemplateInput.action2;
            sendEmail: NotificationTemplateInput.sendEmail;
            sendInAppMessage: NotificationTemplateInput.sendInAppMessage;
            sendPushNotification: NotificationTemplateInput.sendPushNotification;
            sendSms: NotificationTemplateInput.sendSms;
            isCore: NotificationTemplateInput.isCore;
        };
    }
    export namespace NotificationTemplateInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface templateId {
            kind: 'InputField';
            name: 'templateId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface name {
            kind: 'InputField';
            name: 'name';
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationTemplateName;
        }
        interface description {
            kind: 'InputField';
            name: 'description';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleAr {
            kind: 'InputField';
            name: 'titleAr';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextAr {
            kind: 'InputField';
            name: 'messageTextAr';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextAr {
            kind: 'InputField';
            name: 'shortMessageTextAr';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageAr {
            kind: 'InputField';
            name: 'htmlMessageAr';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEn {
            kind: 'InputField';
            name: 'titleEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextEn {
            kind: 'InputField';
            name: 'messageTextEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextEn {
            kind: 'InputField';
            name: 'shortMessageTextEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageEn {
            kind: 'InputField';
            name: 'htmlMessageEn';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleEs {
            kind: 'InputField';
            name: 'titleEs';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextEs {
            kind: 'InputField';
            name: 'messageTextEs';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextEs {
            kind: 'InputField';
            name: 'shortMessageTextEs';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageEs {
            kind: 'InputField';
            name: 'htmlMessageEs';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleId {
            kind: 'InputField';
            name: 'titleId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextId {
            kind: 'InputField';
            name: 'messageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextId {
            kind: 'InputField';
            name: 'shortMessageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageId {
            kind: 'InputField';
            name: 'htmlMessageId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleRu {
            kind: 'InputField';
            name: 'titleRu';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextRu {
            kind: 'InputField';
            name: 'messageTextRu';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextRu {
            kind: 'InputField';
            name: 'shortMessageTextRu';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageRu {
            kind: 'InputField';
            name: 'htmlMessageRu';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface titleSo {
            kind: 'InputField';
            name: 'titleSo';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageTextSo {
            kind: 'InputField';
            name: 'messageTextSo';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface shortMessageTextSo {
            kind: 'InputField';
            name: 'shortMessageTextSo';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface htmlMessageSo {
            kind: 'InputField';
            name: 'htmlMessageSo';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface version {
            kind: 'InputField';
            name: 'version';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderName {
            kind: 'InputField';
            name: 'senderName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface senderEmail {
            kind: 'InputField';
            name: 'senderEmail';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface action0 {
            kind: 'InputField';
            name: 'action0';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action1 {
            kind: 'InputField';
            name: 'action1';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface action2 {
            kind: 'InputField';
            name: 'action2';
            inlineType: [0];
            namedType: $$NamedTypes.$$AppAction;
        }
        interface sendEmail {
            kind: 'InputField';
            name: 'sendEmail';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendInAppMessage {
            kind: 'InputField';
            name: 'sendInAppMessage';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendPushNotification {
            kind: 'InputField';
            name: 'sendPushNotification';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface sendSms {
            kind: 'InputField';
            name: 'sendSms';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface isCore {
            kind: 'InputField';
            name: 'isCore';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
    }
    export interface SidMultiStepActionInput {
        kind: 'InputObject';
        name: 'SidMultiStepActionInput';
        isAllFieldsNullable: true;
        fields: {
            id: SidMultiStepActionInput.id;
            adminNotes: SidMultiStepActionInput.adminNotes;
            events: SidMultiStepActionInput.events;
            metadata: SidMultiStepActionInput.metadata;
            createdAt: SidMultiStepActionInput.createdAt;
            createdBy: SidMultiStepActionInput.createdBy;
            updatedAt: SidMultiStepActionInput.updatedAt;
            updatedBy: SidMultiStepActionInput.updatedBy;
            deletedAt: SidMultiStepActionInput.deletedAt;
            deletedBy: SidMultiStepActionInput.deletedBy;
            userId: SidMultiStepActionInput.userId;
            userIdent: SidMultiStepActionInput.userIdent;
            userHandle: SidMultiStepActionInput.userHandle;
            email: SidMultiStepActionInput.email;
            phoneNumber: SidMultiStepActionInput.phoneNumber;
            actionType: SidMultiStepActionInput.actionType;
            actionStatus: SidMultiStepActionInput.actionStatus;
            notificationMethod: SidMultiStepActionInput.notificationMethod;
            result: SidMultiStepActionInput.result;
            confirmToken: SidMultiStepActionInput.confirmToken;
            attemptCount: SidMultiStepActionInput.attemptCount;
            notificationSentAt: SidMultiStepActionInput.notificationSentAt;
            notificationResult: SidMultiStepActionInput.notificationResult;
            notificationId: SidMultiStepActionInput.notificationId;
            textData: SidMultiStepActionInput.textData;
            report: SidMultiStepActionInput.report;
            emailPassed: SidMultiStepActionInput.emailPassed;
            emailUpdatedAt: SidMultiStepActionInput.emailUpdatedAt;
            emailVerifiedAt: SidMultiStepActionInput.emailVerifiedAt;
            errors: SidMultiStepActionInput.errors;
            password: SidMultiStepActionInput.password;
            passwordPassed: SidMultiStepActionInput.passwordPassed;
            passwordResettedAt: SidMultiStepActionInput.passwordResettedAt;
            passwordUpdatedAt: SidMultiStepActionInput.passwordUpdatedAt;
            phoneNumberPassed: SidMultiStepActionInput.phoneNumberPassed;
            phoneNumberUpdatedAt: SidMultiStepActionInput.phoneNumberUpdatedAt;
            phoneNumberVerifiedAt: SidMultiStepActionInput.phoneNumberVerifiedAt;
            signedInAt: SidMultiStepActionInput.signedInAt;
            tfaBackupCodes: SidMultiStepActionInput.tfaBackupCodes;
            expiresAt: SidMultiStepActionInput.expiresAt;
        };
    }
    export namespace SidMultiStepActionInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userIdent {
            kind: 'InputField';
            name: 'userIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'InputField';
            name: 'userHandle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface actionType {
            kind: 'InputField';
            name: 'actionType';
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionType;
        }
        interface actionStatus {
            kind: 'InputField';
            name: 'actionStatus';
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionStatus;
        }
        interface notificationMethod {
            kind: 'InputField';
            name: 'notificationMethod';
            inlineType: [0];
            namedType: $$NamedTypes.$$NotificationMethod;
        }
        interface result {
            kind: 'InputField';
            name: 'result';
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionResult;
        }
        interface confirmToken {
            kind: 'InputField';
            name: 'confirmToken';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface attemptCount {
            kind: 'InputField';
            name: 'attemptCount';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface notificationSentAt {
            kind: 'InputField';
            name: 'notificationSentAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface notificationResult {
            kind: 'InputField';
            name: 'notificationResult';
            inlineType: [0];
            namedType: $$NamedTypes.$$MultiStepActionSendNotificationResult;
        }
        interface notificationId {
            kind: 'InputField';
            name: 'notificationId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface textData {
            kind: 'InputField';
            name: 'textData';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface report {
            kind: 'InputField';
            name: 'report';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailPassed {
            kind: 'InputField';
            name: 'emailPassed';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface emailUpdatedAt {
            kind: 'InputField';
            name: 'emailUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface emailVerifiedAt {
            kind: 'InputField';
            name: 'emailVerifiedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface errors {
            kind: 'InputField';
            name: 'errors';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$MultiStepActionErrorInput;
        }
        interface password {
            kind: 'InputField';
            name: 'password';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface passwordPassed {
            kind: 'InputField';
            name: 'passwordPassed';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface passwordResettedAt {
            kind: 'InputField';
            name: 'passwordResettedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface passwordUpdatedAt {
            kind: 'InputField';
            name: 'passwordUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface phoneNumberPassed {
            kind: 'InputField';
            name: 'phoneNumberPassed';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface phoneNumberUpdatedAt {
            kind: 'InputField';
            name: 'phoneNumberUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface phoneNumberVerifiedAt {
            kind: 'InputField';
            name: 'phoneNumberVerifiedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedInAt {
            kind: 'InputField';
            name: 'signedInAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface tfaBackupCodes {
            kind: 'InputField';
            name: 'tfaBackupCodes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface expiresAt {
            kind: 'InputField';
            name: 'expiresAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface MultiStepActionErrorInput {
        kind: 'InputObject';
        name: 'MultiStepActionErrorInput';
        isAllFieldsNullable: true;
        fields: {
            id: MultiStepActionErrorInput.id;
            adminNotes: MultiStepActionErrorInput.adminNotes;
            events: MultiStepActionErrorInput.events;
            metadata: MultiStepActionErrorInput.metadata;
            createdAt: MultiStepActionErrorInput.createdAt;
            createdBy: MultiStepActionErrorInput.createdBy;
            updatedAt: MultiStepActionErrorInput.updatedAt;
            updatedBy: MultiStepActionErrorInput.updatedBy;
            deletedAt: MultiStepActionErrorInput.deletedAt;
            deletedBy: MultiStepActionErrorInput.deletedBy;
            key: MultiStepActionErrorInput.key;
            messageId: MultiStepActionErrorInput.messageId;
            message: MultiStepActionErrorInput.message;
        };
    }
    export namespace MultiStepActionErrorInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface key {
            kind: 'InputField';
            name: 'key';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface messageId {
            kind: 'InputField';
            name: 'messageId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface message {
            kind: 'InputField';
            name: 'message';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserIdentInput {
        kind: 'InputObject';
        name: 'UserIdentInput';
        isAllFieldsNullable: true;
        fields: {
            userId: UserIdentInput.userId;
            userIdent: UserIdentInput.userIdent;
            userHandle: UserIdentInput.userHandle;
            email: UserIdentInput.email;
            phoneNumber: UserIdentInput.phoneNumber;
            inviteCode: UserIdentInput.inviteCode;
        };
    }
    export namespace UserIdentInput {
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userIdent {
            kind: 'InputField';
            name: 'userIdent';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'InputField';
            name: 'userHandle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface inviteCode {
            kind: 'InputField';
            name: 'inviteCode';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface VerifyMultiStepActionTokenInput {
        kind: 'InputObject';
        name: 'VerifyMultiStepActionTokenInput';
        isAllFieldsNullable: true;
        fields: {
            actionId: VerifyMultiStepActionTokenInput.actionId;
            token: VerifyMultiStepActionTokenInput.token;
            newPassword: VerifyMultiStepActionTokenInput.newPassword;
        };
    }
    export namespace VerifyMultiStepActionTokenInput {
        interface actionId {
            kind: 'InputField';
            name: 'actionId';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface token {
            kind: 'InputField';
            name: 'token';
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface newPassword {
            kind: 'InputField';
            name: 'newPassword';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface MyUserInput {
        kind: 'InputObject';
        name: 'MyUserInput';
        isAllFieldsNullable: true;
        fields: {
            id: MyUserInput.id;
            adminNotes: MyUserInput.adminNotes;
            events: MyUserInput.events;
            metadata: MyUserInput.metadata;
            createdAt: MyUserInput.createdAt;
            createdBy: MyUserInput.createdBy;
            updatedAt: MyUserInput.updatedAt;
            updatedBy: MyUserInput.updatedBy;
            deletedAt: MyUserInput.deletedAt;
            deletedBy: MyUserInput.deletedBy;
            firstName: MyUserInput.firstName;
            lastName: MyUserInput.lastName;
            fullName: MyUserInput.fullName;
            userHandle: MyUserInput.userHandle;
            phoneNumber: MyUserInput.phoneNumber;
            phoneNumberUpdatedAt: MyUserInput.phoneNumberUpdatedAt;
            isPhoneNumberVerified: MyUserInput.isPhoneNumberVerified;
            email: MyUserInput.email;
            emailUpdatedAt: MyUserInput.emailUpdatedAt;
            isEmailVerified: MyUserInput.isEmailVerified;
            emailSource: MyUserInput.emailSource;
            genderTextId: MyUserInput.genderTextId;
            cityOfResidence: MyUserInput.cityOfResidence;
            regionOfResidence: MyUserInput.regionOfResidence;
            countryOfResidenceTextId: MyUserInput.countryOfResidenceTextId;
            postalCode: MyUserInput.postalCode;
            avatarUrl: MyUserInput.avatarUrl;
            websites: MyUserInput.websites;
            authType: MyUserInput.authType;
            inviteCode: MyUserInput.inviteCode;
            currentPassword: MyUserInput.currentPassword;
            newPassword: MyUserInput.newPassword;
            preferredLanguageTextId: MyUserInput.preferredLanguageTextId;
            spokenLanguagesTextIds: MyUserInput.spokenLanguagesTextIds;
            selectedUiLanguageTextId: MyUserInput.selectedUiLanguageTextId;
            fallbackUiLanguageTextId: MyUserInput.fallbackUiLanguageTextId;
            discoverable: MyUserInput.discoverable;
            roles: MyUserInput.roles;
            appFeatures: MyUserInput.appFeatures;
            source: MyUserInput.source;
            timezone: MyUserInput.timezone;
            preferences: MyUserInput.preferences;
            trustLevel: MyUserInput.trustLevel;
            termsAndConditionsAcceptedAt: MyUserInput.termsAndConditionsAcceptedAt;
            optIntoNewsletter: MyUserInput.optIntoNewsletter;
            onboardingStage: MyUserInput.onboardingStage;
            isTestUser: MyUserInput.isTestUser;
            signedInAt: MyUserInput.signedInAt;
            signedOutAt: MyUserInput.signedOutAt;
            latestActivityAt: MyUserInput.latestActivityAt;
            inactivatedAt: MyUserInput.inactivatedAt;
            inactivatedBy: MyUserInput.inactivatedBy;
            suspendedAt: MyUserInput.suspendedAt;
            suspendedBy: MyUserInput.suspendedBy;
            syncedToAnalyticsAt: MyUserInput.syncedToAnalyticsAt;
            companyIds: MyUserInput.companyIds;
            companies: MyUserInput.companies;
            groupIds: MyUserInput.groupIds;
            parentGroupIds: MyUserInput.parentGroupIds;
            externalGroupIds: MyUserInput.externalGroupIds;
            pronounsTextIds: MyUserInput.pronounsTextIds;
            groupMemberships: MyUserInput.groupMemberships;
            addToGroupIds: MyUserInput.addToGroupIds;
            removeFromGroupIds: MyUserInput.removeFromGroupIds;
            seeksHelp: MyUserInput.seeksHelp;
            offersHelp: MyUserInput.offersHelp;
            birthYear: MyUserInput.birthYear;
            ethnicity: MyUserInput.ethnicity;
            educationLevelTextId: MyUserInput.educationLevelTextId;
            personalBio: MyUserInput.personalBio;
            yearsManagementExperience: MyUserInput.yearsManagementExperience;
            yearsOwnershipExperience: MyUserInput.yearsOwnershipExperience;
            academicExperienceIds: MyUserInput.academicExperienceIds;
            company: MyUserInput.company;
            academicExperiences: MyUserInput.academicExperiences;
            businessExperienceIds: MyUserInput.businessExperienceIds;
            businessExperiences: MyUserInput.businessExperiences;
            cityOfOrigin: MyUserInput.cityOfOrigin;
            regionOfOrigin: MyUserInput.regionOfOrigin;
            countryOfOriginTextId: MyUserInput.countryOfOriginTextId;
            isOnVacation: MyUserInput.isOnVacation;
            profileRoleHistory: MyUserInput.profileRoleHistory;
            ssoIdp: MyUserInput.ssoIdp;
        };
    }
    export namespace MyUserInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface firstName {
            kind: 'InputField';
            name: 'firstName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface lastName {
            kind: 'InputField';
            name: 'lastName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface fullName {
            kind: 'InputField';
            name: 'fullName';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface userHandle {
            kind: 'InputField';
            name: 'userHandle';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumber {
            kind: 'InputField';
            name: 'phoneNumber';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface phoneNumberUpdatedAt {
            kind: 'InputField';
            name: 'phoneNumberUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isPhoneNumberVerified {
            kind: 'InputField';
            name: 'isPhoneNumberVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface email {
            kind: 'InputField';
            name: 'email';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface emailUpdatedAt {
            kind: 'InputField';
            name: 'emailUpdatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface isEmailVerified {
            kind: 'InputField';
            name: 'isEmailVerified';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        /**
         * The source of the email address, e.g. "google", "facebook", etc.
         */
        interface emailSource {
            kind: 'InputField';
            name: 'emailSource';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface genderTextId {
            kind: 'InputField';
            name: 'genderTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cityOfResidence {
            kind: 'InputField';
            name: 'cityOfResidence';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfResidence {
            kind: 'InputField';
            name: 'regionOfResidence';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface countryOfResidenceTextId {
            kind: 'InputField';
            name: 'countryOfResidenceTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface postalCode {
            kind: 'InputField';
            name: 'postalCode';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface avatarUrl {
            kind: 'InputField';
            name: 'avatarUrl';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface websites {
            kind: 'InputField';
            name: 'websites';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$LabeledStringValueInput;
        }
        interface authType {
            kind: 'InputField';
            name: 'authType';
            inlineType: [0];
            namedType: $$NamedTypes.$$AuthType;
        }
        interface inviteCode {
            kind: 'InputField';
            name: 'inviteCode';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface currentPassword {
            kind: 'InputField';
            name: 'currentPassword';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface newPassword {
            kind: 'InputField';
            name: 'newPassword';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface preferredLanguageTextId {
            kind: 'InputField';
            name: 'preferredLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface spokenLanguagesTextIds {
            kind: 'InputField';
            name: 'spokenLanguagesTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface selectedUiLanguageTextId {
            kind: 'InputField';
            name: 'selectedUiLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface fallbackUiLanguageTextId {
            kind: 'InputField';
            name: 'fallbackUiLanguageTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$UiLanguage;
        }
        interface discoverable {
            kind: 'InputField';
            name: 'discoverable';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface roles {
            kind: 'InputField';
            name: 'roles';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserRole;
        }
        interface appFeatures {
            kind: 'InputField';
            name: 'appFeatures';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AppFeature;
        }
        interface source {
            kind: 'InputField';
            name: 'source';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface timezone {
            kind: 'InputField';
            name: 'timezone';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface preferences {
            kind: 'InputField';
            name: 'preferences';
            inlineType: [0];
            namedType: $$NamedTypes.$$UserPreferencesInput;
        }
        interface trustLevel {
            kind: 'InputField';
            name: 'trustLevel';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface termsAndConditionsAcceptedAt {
            kind: 'InputField';
            name: 'termsAndConditionsAcceptedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface optIntoNewsletter {
            kind: 'InputField';
            name: 'optIntoNewsletter';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface onboardingStage {
            kind: 'InputField';
            name: 'onboardingStage';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isTestUser {
            kind: 'InputField';
            name: 'isTestUser';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface signedInAt {
            kind: 'InputField';
            name: 'signedInAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface signedOutAt {
            kind: 'InputField';
            name: 'signedOutAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface latestActivityAt {
            kind: 'InputField';
            name: 'latestActivityAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedAt {
            kind: 'InputField';
            name: 'inactivatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface inactivatedBy {
            kind: 'InputField';
            name: 'inactivatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface suspendedAt {
            kind: 'InputField';
            name: 'suspendedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface suspendedBy {
            kind: 'InputField';
            name: 'suspendedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface syncedToAnalyticsAt {
            kind: 'InputField';
            name: 'syncedToAnalyticsAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface companyIds {
            kind: 'InputField';
            name: 'companyIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Used internally, will not work in GraphQL queries.
         */
        interface companies {
            kind: 'InputField';
            name: 'companies';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$CompanyInput;
        }
        interface groupIds {
            kind: 'InputField';
            name: 'groupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface parentGroupIds {
            kind: 'InputField';
            name: 'parentGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface externalGroupIds {
            kind: 'InputField';
            name: 'externalGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        interface pronounsTextIds {
            kind: 'InputField';
            name: 'pronounsTextIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface groupMemberships {
            kind: 'InputField';
            name: 'groupMemberships';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$GroupMembershipInput;
        }
        interface addToGroupIds {
            kind: 'InputField';
            name: 'addToGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface removeFromGroupIds {
            kind: 'InputField';
            name: 'removeFromGroupIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$String;
        }
        interface seeksHelp {
            kind: 'InputField';
            name: 'seeksHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface offersHelp {
            kind: 'InputField';
            name: 'offersHelp';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface birthYear {
            kind: 'InputField';
            name: 'birthYear';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface ethnicity {
            kind: 'InputField';
            name: 'ethnicity';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface educationLevelTextId {
            kind: 'InputField';
            name: 'educationLevelTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface personalBio {
            kind: 'InputField';
            name: 'personalBio';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface yearsManagementExperience {
            kind: 'InputField';
            name: 'yearsManagementExperience';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface yearsOwnershipExperience {
            kind: 'InputField';
            name: 'yearsOwnershipExperience';
            inlineType: [0];
            namedType: $$NamedTypes.$$Int;
        }
        interface academicExperienceIds {
            kind: 'InputField';
            name: 'academicExperienceIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Specify a company you want to create and add the user to.
         */
        interface company {
            kind: 'InputField';
            name: 'company';
            inlineType: [0];
            namedType: $$NamedTypes.$$CompanyInput;
        }
        /**
         * Specify a list of academic experiences you want to create for the user.
         */
        interface academicExperiences {
            kind: 'InputField';
            name: 'academicExperiences';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$AcademicExperienceInput;
        }
        interface businessExperienceIds {
            kind: 'InputField';
            name: 'businessExperienceIds';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ID;
        }
        /**
         * Specify a list of business experiences you want to create for the user.
         */
        interface businessExperiences {
            kind: 'InputField';
            name: 'businessExperiences';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$BusinessExperienceInput;
        }
        interface cityOfOrigin {
            kind: 'InputField';
            name: 'cityOfOrigin';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface regionOfOrigin {
            kind: 'InputField';
            name: 'regionOfOrigin';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * Users Country of origin. Use a Country Options textId.
         */
        interface countryOfOriginTextId {
            kind: 'InputField';
            name: 'countryOfOriginTextId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface isOnVacation {
            kind: 'InputField';
            name: 'isOnVacation';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface profileRoleHistory {
            kind: 'InputField';
            name: 'profileRoleHistory';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$UserProfileRoleHistoryItemInput;
        }
        interface ssoIdp {
            kind: 'InputField';
            name: 'ssoIdp';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
    }
    export interface UserTrackingInput {
        kind: 'InputObject';
        name: 'UserTrackingInput';
        isAllFieldsNullable: true;
        fields: {
            id: UserTrackingInput.id;
            adminNotes: UserTrackingInput.adminNotes;
            events: UserTrackingInput.events;
            metadata: UserTrackingInput.metadata;
            createdAt: UserTrackingInput.createdAt;
            createdBy: UserTrackingInput.createdBy;
            updatedAt: UserTrackingInput.updatedAt;
            updatedBy: UserTrackingInput.updatedBy;
            deletedAt: UserTrackingInput.deletedAt;
            deletedBy: UserTrackingInput.deletedBy;
            userId: UserTrackingInput.userId;
            trackId: UserTrackingInput.trackId;
            metaPixelId: UserTrackingInput.metaPixelId;
            metaClickId: UserTrackingInput.metaClickId;
            metaBrowserId: UserTrackingInput.metaBrowserId;
            googleId: UserTrackingInput.googleId;
            googleClickId: UserTrackingInput.googleClickId;
            cookieConsentChoice: UserTrackingInput.cookieConsentChoice;
            allowToTrack: UserTrackingInput.allowToTrack;
            syncedToAnalyticsAt: UserTrackingInput.syncedToAnalyticsAt;
        };
    }
    export namespace UserTrackingInput {
        interface id {
            kind: 'InputField';
            name: 'id';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface adminNotes {
            kind: 'InputField';
            name: 'adminNotes';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface events {
            kind: 'InputField';
            name: 'events';
            inlineType: [0, [1]];
            namedType: $$NamedTypes.$$ModelEventInput;
        }
        interface metadata {
            kind: 'InputField';
            name: 'metadata';
            inlineType: [0];
            namedType: $$NamedTypes.$$BaseModelMetadataInput;
        }
        interface createdAt {
            kind: 'InputField';
            name: 'createdAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface createdBy {
            kind: 'InputField';
            name: 'createdBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface updatedAt {
            kind: 'InputField';
            name: 'updatedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface updatedBy {
            kind: 'InputField';
            name: 'updatedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface deletedAt {
            kind: 'InputField';
            name: 'deletedAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
        interface deletedBy {
            kind: 'InputField';
            name: 'deletedBy';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface userId {
            kind: 'InputField';
            name: 'userId';
            inlineType: [0];
            namedType: $$NamedTypes.$$ID;
        }
        interface trackId {
            kind: 'InputField';
            name: 'trackId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface metaPixelId {
            kind: 'InputField';
            name: 'metaPixelId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * fbc cookie (FBCLID)
         */
        interface metaClickId {
            kind: 'InputField';
            name: 'metaClickId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * fbp cookie
         */
        interface metaBrowserId {
            kind: 'InputField';
            name: 'metaBrowserId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        /**
         * This is the Google Analytics tracking ID
         */
        interface googleId {
            kind: 'InputField';
            name: 'googleId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface googleClickId {
            kind: 'InputField';
            name: 'googleClickId';
            inlineType: [0];
            namedType: $$NamedTypes.$$String;
        }
        interface cookieConsentChoice {
            kind: 'InputField';
            name: 'cookieConsentChoice';
            inlineType: [0];
            namedType: $$NamedTypes.$$CookieChoiceTextId;
        }
        interface allowToTrack {
            kind: 'InputField';
            name: 'allowToTrack';
            inlineType: [0];
            namedType: $$NamedTypes.$$Boolean;
        }
        interface syncedToAnalyticsAt {
            kind: 'InputField';
            name: 'syncedToAnalyticsAt';
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface BaseModelMetadata {
        kind: 'Interface';
        fields: {
            updatedAt: BaseModelMetadata.updatedAt;
        };
        name: 'BaseModelMetadata';
        implementors: [UserMetadata];
        implementorsUnion: UserMetadata;
        implementorsIndex: {
            UserMetadata: UserMetadata;
        };
    }
    export namespace BaseModelMetadata {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'BaseModelMetadata';
            };
        }
        interface updatedAt {
            kind: 'OutputField';
            name: 'updatedAt';
            arguments: {};
            inlineType: [0];
            namedType: $$NamedTypes.$$DateTimeISO;
        }
    }
    export interface IGroupMembership {
        kind: 'Interface';
        fields: {
            id: IGroupMembership.id;
            groupId: IGroupMembership.groupId;
            groupIdent: IGroupMembership.groupIdent;
            userId: IGroupMembership.userId;
            roles: IGroupMembership.roles;
        };
        name: 'IGroupMembership';
        implementors: [
            GroupMembership,
            MenteesGroupMembership,
            MentorsGroupMembership,
            MastercardGroupMembership,
            IqlaaGroupMembership,
            StriveIndonesiaGroupMembership
        ];
        implementorsUnion: GroupMembership | MenteesGroupMembership | MentorsGroupMembership | MastercardGroupMembership | IqlaaGroupMembership | StriveIndonesiaGroupMembership;
        implementorsIndex: {
            GroupMembership: GroupMembership;
            MenteesGroupMembership: MenteesGroupMembership;
            MentorsGroupMembership: MentorsGroupMembership;
            MastercardGroupMembership: MastercardGroupMembership;
            IqlaaGroupMembership: IqlaaGroupMembership;
            StriveIndonesiaGroupMembership: StriveIndonesiaGroupMembership;
        };
    }
    export namespace IGroupMembership {
        interface __typename {
            kind: 'OutputField';
            name: '__typename';
            arguments: {};
            inlineType: [1];
            namedType: {
                kind: '__typename';
                value: 'IGroupMembership';
            };
        }
        interface id {
            kind: 'OutputField';
            name: 'id';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupId {
            kind: 'OutputField';
            name: 'groupId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface groupIdent {
            kind: 'OutputField';
            name: 'groupIdent';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$String;
        }
        interface userId {
            kind: 'OutputField';
            name: 'userId';
            arguments: {};
            inlineType: [1];
            namedType: $$NamedTypes.$$ID;
        }
        interface roles {
            kind: 'OutputField';
            name: 'roles';
            arguments: {};
            inlineType: [1, [1]];
            namedType: $$NamedTypes.$$GroupMembershipRole;
        }
    }
    export interface GroupMembershipRole {
        kind: 'Enum';
        name: 'GroupMembershipRole';
        members: ['admin', 'coordinator', 'moderator', 'owner'];
        membersUnion: 'admin' | 'coordinator' | 'moderator' | 'owner';
    }
    export interface ModelEventType {
        kind: 'Enum';
        name: 'ModelEventType';
        members: ['error', 'warning', 'info'];
        membersUnion: 'error' | 'warning' | 'info';
    }
    export interface OptionType {
        kind: 'Enum';
        name: 'OptionType';
        members: [
            'errorCode',
            'companyStage',
            'companyType',
            'contactType',
            'educationLevel',
            'ethnicity',
            'expertise',
            'gender',
            'pronoun',
            'declineChannelInvitationReason',
            'country',
            'industry',
            'language',
            'unset',
            'contentTagType',
            'indonesianCity',
            'indonesianProvince',
            'iqlaaJordanianDistrict',
            'iqlaaJordanianGovernorate',
            'mm2Expertise',
            'mm2Industry',
            'blockUserReason',
            'notificationTypeOption',
            'reportUserReason'
        ];
        membersUnion: 'errorCode' | 'companyStage' | 'companyType' | 'contactType' | 'educationLevel' | 'ethnicity' | 'expertise' | 'gender' | 'pronoun' | 'declineChannelInvitationReason' | 'country' | 'industry' | 'language' | 'unset' | 'contentTagType' | 'indonesianCity' | 'indonesianProvince' | 'iqlaaJordanianDistrict' | 'iqlaaJordanianGovernorate' | 'mm2Expertise' | 'mm2Industry' | 'blockUserReason' | 'notificationTypeOption' | 'reportUserReason';
    }
    export interface UiLanguage {
        kind: 'Enum';
        name: 'UiLanguage';
        members: ['ar', 'en', 'es', 'id', 'ru', 'so'];
        membersUnion: 'ar' | 'en' | 'es' | 'id' | 'ru' | 'so';
    }
    export interface MastercardCardType {
        kind: 'Enum';
        name: 'MastercardCardType';
        members: ['credit', 'debit', 'prepaid', 'none', 'notProvided'];
        membersUnion: 'credit' | 'debit' | 'prepaid' | 'none' | 'notProvided';
    }
    export interface UserIdentType {
        kind: 'Enum';
        name: 'UserIdentType';
        members: ['any', 'email', 'id', 'inviteCode', 'oauthProfileUrl', 'oauthUserId', 'phoneNumber', 'userHandle'];
        membersUnion: 'any' | 'email' | 'id' | 'inviteCode' | 'oauthProfileUrl' | 'oauthUserId' | 'phoneNumber' | 'userHandle';
    }
    export interface UserRole {
        kind: 'Enum';
        name: 'UserRole';
        members: ['admin', 'support', 'staff', 'qa', 'test'];
        membersUnion: 'admin' | 'support' | 'staff' | 'qa' | 'test';
    }
    export interface AppFeature {
        kind: 'Enum';
        name: 'AppFeature';
        members: ['testFeatures1', 'testFeatures2'];
        membersUnion: 'testFeatures1' | 'testFeatures2';
    }
    export interface NotificationType {
        kind: 'Enum';
        name: 'NotificationType';
        members: [
            'accountDeletedConfirmation',
            'channelInvitationAccepted',
            'channelInvitationDeclined',
            'channelInvitationReceived',
            'channelMessageReceived',
            'completeProfile',
            'completeSignUp',
            'matchesRecommendations',
            'newPrivacyRules',
            'newsletter',
            'resetPasswordConfirmation',
            'resetPasswordConfirmToken',
            'sendFirstInvitation',
            'unset',
            'welcome'
        ];
        membersUnion: 'accountDeletedConfirmation' | 'channelInvitationAccepted' | 'channelInvitationDeclined' | 'channelInvitationReceived' | 'channelMessageReceived' | 'completeProfile' | 'completeSignUp' | 'matchesRecommendations' | 'newPrivacyRules' | 'newsletter' | 'resetPasswordConfirmation' | 'resetPasswordConfirmToken' | 'sendFirstInvitation' | 'unset' | 'welcome';
    }
    export interface IdentityProvider {
        kind: 'Enum';
        name: 'IdentityProvider';
        members: [
            'apple',
            'facebook',
            'google',
            'instagram',
            'linkedIn',
            'microsoft',
            'own',
            'sso',
            'telegram',
            'twitter',
            'whatsApp'
        ];
        membersUnion: 'apple' | 'facebook' | 'google' | 'instagram' | 'linkedIn' | 'microsoft' | 'own' | 'sso' | 'telegram' | 'twitter' | 'whatsApp';
    }
    export interface ModelType {
        kind: 'Enum';
        name: 'ModelType';
        members: [
            'AcademicExperience',
            'BusinessExperience',
            'Company',
            'DataDeletionRecord',
            'MentorBoard',
            'MentoringSession',
            'UserInbox',
            'UserMetadata',
            'UserPreferences',
            'AdminTask',
            'AnalyticsServiceRecord',
            'AnalyticsSynchronization',
            'UploadedAsset',
            'Channel',
            'ChannelInbox',
            'ChannelInvitation',
            'ChannelMessage',
            'ChannelParticipant',
            'ContentStatus',
            'Option',
            'ContentTag',
            'AppliedGroupRule',
            'Group',
            'GroupCms',
            'GroupMembership',
            'GroupRule',
            'GroupRuleConfig',
            'MastercardBank',
            'SupportChannelConfig',
            'GiftCardProduct',
            'MarketplaceServiceRecord',
            'Product',
            'ProductCategory',
            'Brand',
            'Match',
            'MatchProfile',
            'MatchingEngine',
            'UserSearch',
            'Notification',
            'NotificationTemplate',
            'Mm2Integration',
            'Mm2Synchronization',
            'Mm2SynchronizationResultItem',
            'ModerationConcern',
            'NatsMessage',
            'ApiAuthInfo',
            'Contact',
            'MultiStepAction',
            'MyUser',
            'ServiceRequest',
            'User',
            'UserDevice',
            'ServiceRecord',
            'TrackingEvent',
            'UserTracking',
            'Training',
            'TrainingContentPage',
            'TrainingSession',
            'PurchaseOrder',
            'PurchaseOrderItem',
            'ShoppingCart',
            'ShoppingCartItem',
            'Wallet',
            'WalletItem',
            'WalletItemTransfer',
            'WalletServiceRecord',
            'unset'
        ];
        membersUnion: 'AcademicExperience' | 'BusinessExperience' | 'Company' | 'DataDeletionRecord' | 'MentorBoard' | 'MentoringSession' | 'UserInbox' | 'UserMetadata' | 'UserPreferences' | 'AdminTask' | 'AnalyticsServiceRecord' | 'AnalyticsSynchronization' | 'UploadedAsset' | 'Channel' | 'ChannelInbox' | 'ChannelInvitation' | 'ChannelMessage' | 'ChannelParticipant' | 'ContentStatus' | 'Option' | 'ContentTag' | 'AppliedGroupRule' | 'Group' | 'GroupCms' | 'GroupMembership' | 'GroupRule' | 'GroupRuleConfig' | 'MastercardBank' | 'SupportChannelConfig' | 'GiftCardProduct' | 'MarketplaceServiceRecord' | 'Product' | 'ProductCategory' | 'Brand' | 'Match' | 'MatchProfile' | 'MatchingEngine' | 'UserSearch' | 'Notification' | 'NotificationTemplate' | 'Mm2Integration' | 'Mm2Synchronization' | 'Mm2SynchronizationResultItem' | 'ModerationConcern' | 'NatsMessage' | 'ApiAuthInfo' | 'Contact' | 'MultiStepAction' | 'MyUser' | 'ServiceRequest' | 'User' | 'UserDevice' | 'ServiceRecord' | 'TrackingEvent' | 'UserTracking' | 'Training' | 'TrainingContentPage' | 'TrainingSession' | 'PurchaseOrder' | 'PurchaseOrderItem' | 'ShoppingCart' | 'ShoppingCartItem' | 'Wallet' | 'WalletItem' | 'WalletItemTransfer' | 'WalletServiceRecord' | 'unset';
    }
    export interface UploadedAssetType {
        kind: 'Enum';
        name: 'UploadedAssetType';
        members: ['unset', 'avatar', 'profileHeroImage'];
        membersUnion: 'unset' | 'avatar' | 'profileHeroImage';
    }
    export interface AssetHostingService {
        kind: 'Enum';
        name: 'AssetHostingService';
        members: ['s3', 'unset'];
        membersUnion: 's3' | 'unset';
    }
    export interface UserProfileRole {
        kind: 'Enum';
        name: 'UserProfileRole';
        members: ['mentee', 'mentor', 'both', 'none'];
        membersUnion: 'mentee' | 'mentor' | 'both' | 'none';
    }
    export interface AppAction {
        kind: 'Enum';
        name: 'AppAction';
        members: ['editProfile', 'updateApp', 'unset'];
        membersUnion: 'editProfile' | 'updateApp' | 'unset';
    }
    export interface ChannelType {
        kind: 'Enum';
        name: 'ChannelType';
        members: ['unset', 'mentoring', 'support', 'welcome'];
        membersUnion: 'unset' | 'mentoring' | 'support' | 'welcome';
    }
    export interface ChannelInvitationStatus {
        kind: 'Enum';
        name: 'ChannelInvitationStatus';
        members: ['created', 'accepted', 'declined', 'unset'];
        membersUnion: 'created' | 'accepted' | 'declined' | 'unset';
    }
    export interface ChannelMessageType {
        kind: 'Enum';
        name: 'ChannelMessageType';
        members: ['unset', 'invitation', 'support', 'system', 'welcome'];
        membersUnion: 'unset' | 'invitation' | 'support' | 'system' | 'welcome';
    }
    export interface ChannelParticipantRole {
        kind: 'Enum';
        name: 'ChannelParticipantRole';
        members: ['admin', 'moderator', 'owner', 'unset'];
        membersUnion: 'admin' | 'moderator' | 'owner' | 'unset';
    }
    export interface ModerationConcernType {
        kind: 'Enum';
        name: 'ModerationConcernType';
        members: ['phrase', 'unknown'];
        membersUnion: 'phrase' | 'unknown';
    }
    export interface GroupRuleEventType {
        kind: 'Enum';
        name: 'GroupRuleEventType';
        members: ['enterGroup', 'exitGroup', 'signUp', 'sendMessage', 'userSearch', 'updateUser', 'unknown'];
        membersUnion: 'enterGroup' | 'exitGroup' | 'signUp' | 'sendMessage' | 'userSearch' | 'updateUser' | 'unknown';
    }
    export interface SortDirection {
        kind: 'Enum';
        name: 'SortDirection';
        members: ['asc', 'desc'];
        membersUnion: 'asc' | 'desc';
    }
    export interface IncludeFilterOption {
        kind: 'Enum';
        name: 'IncludeFilterOption';
        members: ['include', 'exclude', 'only'];
        membersUnion: 'include' | 'exclude' | 'only';
    }
    export interface AuthType {
        kind: 'Enum';
        name: 'AuthType';
        members: ['none', 'oauth', 'token', 'hmac', 'saml'];
        membersUnion: 'none' | 'oauth' | 'token' | 'hmac' | 'saml';
    }
    export interface FederatedIdentityProvider {
        kind: 'Enum';
        name: 'FederatedIdentityProvider';
        members: ['none', 'firebase'];
        membersUnion: 'none' | 'firebase';
    }
    export interface AdminTaskType {
        kind: 'Enum';
        name: 'AdminTaskType';
        members: [
            'addAppFeature',
            'deleteUser',
            'formatPhoneNumbers',
            'mergeUsers',
            'refreshAllEmbeddedCompanies',
            'refreshAllUserInboxes',
            'removeAppFeature',
            'resetUserPassword',
            'setUserPassword',
            'suspendUser',
            'verifyUserPassword',
            'decryptString',
            'unset',
            'createAnalyticsSynchronization',
            'pauseAnalyticsSynchronization',
            'runAnalyticsSynchronization',
            'updateChannelMetadata',
            'updateChannelOtherUserId',
            'runDataGenerator',
            'loadDbCache',
            'queryDbVersion',
            'recreateDbIndexes',
            'updateEmbeddedGroupMembershipsOfAllUsers',
            'updateGroupIdentsInAllGroupMemberships',
            'addLanguageText',
            'importMarketplaceData',
            'recreateDefaultMatchingEngine',
            'refreshAllMatchProfiles',
            'clearBusMessages',
            'removeBusMessage',
            'sendPushNotification',
            'compareMm2Object',
            'compareMm2ObjectIdsOfModel',
            'fillAllMm2ProfileIds',
            'fixAllSyncedChannelInvitationInitialMessages',
            'mergeAllDuplicateMm3ChatObjects',
            'mergeAllDuplicateMm3Users',
            'pauseMm2Synchronization',
            'runMm2Synchronization',
            'syncAllUsersWhoSignedUpInMm3',
            'syncDocsWithoutMm2Ids',
            'syncUsersWithLanguageMismatch',
            'triggerRandomSynchronizations',
            'addOrRemoveAppFeature',
            'createApiAuthInfo',
            'removeAllInvalidUserBlocks',
            'doDataMaintenance',
            'sendPendingTrackingEvents',
            'setTrainingTags'
        ];
        membersUnion: 'addAppFeature' | 'deleteUser' | 'formatPhoneNumbers' | 'mergeUsers' | 'refreshAllEmbeddedCompanies' | 'refreshAllUserInboxes' | 'removeAppFeature' | 'resetUserPassword' | 'setUserPassword' | 'suspendUser' | 'verifyUserPassword' | 'decryptString' | 'unset' | 'createAnalyticsSynchronization' | 'pauseAnalyticsSynchronization' | 'runAnalyticsSynchronization' | 'updateChannelMetadata' | 'updateChannelOtherUserId' | 'runDataGenerator' | 'loadDbCache' | 'queryDbVersion' | 'recreateDbIndexes' | 'updateEmbeddedGroupMembershipsOfAllUsers' | 'updateGroupIdentsInAllGroupMemberships' | 'addLanguageText' | 'importMarketplaceData' | 'recreateDefaultMatchingEngine' | 'refreshAllMatchProfiles' | 'clearBusMessages' | 'removeBusMessage' | 'sendPushNotification' | 'compareMm2Object' | 'compareMm2ObjectIdsOfModel' | 'fillAllMm2ProfileIds' | 'fixAllSyncedChannelInvitationInitialMessages' | 'mergeAllDuplicateMm3ChatObjects' | 'mergeAllDuplicateMm3Users' | 'pauseMm2Synchronization' | 'runMm2Synchronization' | 'syncAllUsersWhoSignedUpInMm3' | 'syncDocsWithoutMm2Ids' | 'syncUsersWithLanguageMismatch' | 'triggerRandomSynchronizations' | 'addOrRemoveAppFeature' | 'createApiAuthInfo' | 'removeAllInvalidUserBlocks' | 'doDataMaintenance' | 'sendPendingTrackingEvents' | 'setTrainingTags';
    }
    export interface AdminTaskResult {
        kind: 'Enum';
        name: 'AdminTaskResult';
        members: ['ok', 'error'];
        membersUnion: 'ok' | 'error';
    }
    export interface ChannelInvitationDirection {
        kind: 'Enum';
        name: 'ChannelInvitationDirection';
        members: ['sent', 'received'];
        membersUnion: 'sent' | 'received';
    }
    export interface ProductType {
        kind: 'Enum';
        name: 'ProductType';
        members: ['giftCard', 'other'];
        membersUnion: 'giftCard' | 'other';
    }
    export interface BarcodeType {
        kind: 'Enum';
        name: 'BarcodeType';
        members: [
            'TYPE_39',
            'TYPE_128',
            'CODE_25',
            'ITF',
            'I125',
            'UPC_A',
            'UPC_E',
            'EAN_13',
            'EAN_8',
            'QR_CODE',
            'PDF417',
            'DATA_MATRIX'
        ];
        membersUnion: 'TYPE_39' | 'TYPE_128' | 'CODE_25' | 'ITF' | 'I125' | 'UPC_A' | 'UPC_E' | 'EAN_13' | 'EAN_8' | 'QR_CODE' | 'PDF417' | 'DATA_MATRIX';
    }
    export interface WalletItemSource {
        kind: 'Enum';
        name: 'WalletItemSource';
        members: ['user', 'purchased', 'gifted'];
        membersUnion: 'user' | 'purchased' | 'gifted';
    }
    export interface ServiceName {
        kind: 'Enum';
        name: 'ServiceName';
        members: [
            'accounts',
            'admin',
            'adminJs',
            'analytics',
            'appEvents',
            'assets',
            'aws',
            'bgChannels',
            'bullBoard',
            'channels',
            'content',
            'contentTags',
            'dataGenerator',
            'db',
            'firebase',
            'graphqlApi',
            'groups',
            'http',
            'i18N',
            'logger',
            'marketplace',
            'matching',
            'messageBus',
            'messaging',
            'mm2',
            'models',
            'moderation',
            'nats',
            'nlp',
            'redis',
            'restApi',
            'secureId',
            'slack',
            'system',
            'tracking',
            'unset',
            'vts',
            'wallet'
        ];
        membersUnion: 'accounts' | 'admin' | 'adminJs' | 'analytics' | 'appEvents' | 'assets' | 'aws' | 'bgChannels' | 'bullBoard' | 'channels' | 'content' | 'contentTags' | 'dataGenerator' | 'db' | 'firebase' | 'graphqlApi' | 'groups' | 'http' | 'i18N' | 'logger' | 'marketplace' | 'matching' | 'messageBus' | 'messaging' | 'mm2' | 'models' | 'moderation' | 'nats' | 'nlp' | 'redis' | 'restApi' | 'secureId' | 'slack' | 'system' | 'tracking' | 'unset' | 'vts' | 'wallet';
    }
    export interface UserSearchType {
        kind: 'Enum';
        name: 'UserSearchType';
        members: ['search', 'mentorRecommendation', 'menteeRecommendation'];
        membersUnion: 'search' | 'mentorRecommendation' | 'menteeRecommendation';
    }
    export interface UserSearchFieldOption {
        kind: 'Enum';
        name: 'UserSearchFieldOption';
        members: ['isTrue', 'isFalse', 'any', 'match'];
        membersUnion: 'isTrue' | 'isFalse' | 'any' | 'match';
    }
    export interface UserSearchSubscriptionType {
        kind: 'Enum';
        name: 'UserSearchSubscriptionType';
        members: ['none', 'daily', 'weekly', 'monthly'];
        membersUnion: 'none' | 'daily' | 'weekly' | 'monthly';
    }
    export interface ServiceRequestType {
        kind: 'Enum';
        name: 'ServiceRequestType';
        members: [
            'graphQlMutationCreateAcademicExperience',
            'graphQlMutationDeleteAcademicExperience',
            'graphQlMutationUpdateAcademicExperience',
            'graphQlMutationCreateBusinessExperience',
            'graphQlMutationDeleteBusinessExperience',
            'graphQlMutationUpdateBusinessExperience',
            'graphQlMutationCreateCompany',
            'graphQlMutationDeleteCompany',
            'graphQlMutationUpdateCompany',
            'graphQlQueryFindAndUpdateAllMm2Users',
            'graphQlQueryUserInboxUser',
            'graphQlMutationCreateAdminTask',
            'graphQlMutationFindAdminTaskById',
            'graphQlMutationDeleteAdminTask',
            'graphQlMutationUpdateAdminTask',
            'graphQlQueryFindAdminTask',
            'graphQlQueryAdminTaskDefinitions',
            'graphQlMutationClearAllAnalyticsSyncInfo',
            'graphQlMutationCreateAnalyticsSynchronization',
            'graphQlMutationDeleteAnalyticsSynchronization',
            'graphQlMutationPauseAnalyticsSynchronization',
            'graphQlMutationRunAnalyticsSynchronization',
            'graphQlQueryFindAnalyticsServiceRecord',
            'graphQlQueryFindAnalyticsSynchronizationById',
            'graphQlMutationCreateUploadedAsset',
            'graphQlMutationDeleteUploadedAsset',
            'graphQlMutationFindUploadedAssetById',
            'graphQlMutationFindUploadedAssetForUser',
            'graphQlMutationInitAssetUpload',
            'graphQlMutationUpdateUploadedAsset',
            'graphQlQueryFindUploadedAssetById',
            'graphQlQueryFindUploadedAssets',
            'graphQlQueryFindUploadedAssetsForUser',
            'graphQlMutationAddChannelMessageEvent',
            'graphQlMutationArchiveChannelForUserByMe',
            'graphQlMutationCreateChannel',
            'graphQlMutationCreateChannelInvitation',
            'graphQlMutationCreateChannelMessage',
            'graphQlMutationCreateChannelParticipant',
            'graphQlMutationDeleteChannel',
            'graphQlMutationDeleteChannelInvitation',
            'graphQlMutationDeleteChannelMessage',
            'graphQlMutationDeleteChannelParticipant',
            'graphQlMutationDeleteGroup',
            'graphQlMutationDeleteGroupMembership',
            'graphQlMutationMarkChannelMessagesAsSeenByMe',
            'graphQlMutationUpdateChannel',
            'graphQlMutationUpdateChannelInvitation',
            'graphQlMutationUpdateChannelMessage',
            'graphQlMutationUpdateChannelParticipant',
            'graphQlQueryChannelInvitations',
            'graphQlQueryChannelMessageChannel',
            'graphQlQueryChannelParticipants',
            'graphQlQueryFindChannelById',
            'graphQlQueryFindChannelInvitationById',
            'graphQlQueryFindChannelInvitationsBetweenUsers',
            'graphQlQueryFindChannelInvitationsForUser',
            'graphQlQueryFindChannelMessageById',
            'graphQlQueryFindChannelMessages',
            'graphQlQueryFindChannelParticipantById',
            'graphQlQueryFindChannelParticipants',
            'graphQlQueryFindChannels',
            'graphQlQueryFindChannelsForUser',
            'graphQlQueryFindMyChannels',
            'graphQlQueryFindPendingChannelInvitationsForUser',
            'graphQlQueryMyContacts',
            'graphQlQueryMyInbox',
            'graphQlQueryUserChannels',
            'graphQlQueryUserCompanies',
            'graphQlQueryUserGroupMembers',
            'graphQlQueryUserGroups',
            'graphQlQueryFindCountries',
            'graphQlQueryFindExpertises',
            'graphQlQueryFindIndustries',
            'graphQlQueryFindOptions',
            'unset',
            'graphQlQueryContentTag',
            'graphQlMutationCreateContentTag',
            'graphQlMutationDeleteContentTag',
            'graphQlMutationUpdateContentTag',
            'graphQlMutationRunDataGenerator',
            'graphQlQueryNotificationTemplate',
            'graphQlQueryAvailableUserHandle',
            'graphQlQueryUser',
            'graphQlMutationAddUserToGroup',
            'graphQlMutationCreateGroup',
            'graphQlMutationCreateGroupMembership',
            'graphQlMutationCreateSupportChannelConfig',
            'graphQlMutationDeleteGroupCms',
            'graphQlMutationDeleteSupportChannelConfig',
            'graphQlMutationRemoveUserFromAllGroups',
            'graphQlMutationRemoveUserFromGroup',
            'graphQlMutationUpdateGroup',
            'graphQlMutationUpdateGroupMembership',
            'graphQlMutationUpdateSupportChannelConfig',
            'graphQlQueryFindGroupById',
            'graphQlQueryFindGroupByIdent',
            'graphQlQueryFindGroupCmsByGroupId',
            'graphQlQueryFindGroupCmsByGroupIdent',
            'graphQlQueryFindGroupCmsById',
            'graphQlQueryFindGroupMembershipByIdField',
            'graphQlQueryFindGroupMemberships',
            'graphQlQueryFindGroupsField',
            'graphQlQueryMyGroupMemberships',
            'graphQlQueryFindGiftCardProducts',
            'graphQlQueryFindMarketplaceServiceRecord',
            'graphQlQueryFindProductCategories',
            'graphQlQueryFindBrands',
            'graphQlMutationCreateUserSearch',
            'graphQlMutationDeleteUserSearch',
            'graphQlMutationUpdateUserSearch',
            'graphQlQueryFindUserSearchById',
            'graphQlQueryFindUserSearchResults',
            'graphQlQueryUserSearchFoundUsers',
            'graphQlMutationCreateNotification',
            'graphQlMutationCreateNotificationTemplate',
            'graphQlMutationDeleteNotification',
            'graphQlMutationDeleteNotificationTemplate',
            'graphQlMutationMarkInAppMessageReceived',
            'graphQlMutationSendMultiStepActionNotification',
            'graphQlMutationUpdateNotification',
            'graphQlMutationUpdateNotificationTemplate',
            'graphQlMutationCreateNatsMessage',
            'graphQlMutationClearAllSyncInfo',
            'graphQlMutationCreateMm2Synchronization',
            'graphQlMutationDeleteAllMm2DataInMm3',
            'graphQlMutationDeleteMm2Synchronization',
            'graphQlMutationRunMm2Synchronization',
            'graphQlQueryFindMm2SynchronizationById',
            'graphQlQueryGetMm2Integration',
            'graphQlMutationNlpLabelMessage',
            'graphQlMutationUpdateNlpConversation',
            'graphQlMutationUpdateNlpMessage',
            'graphQlQueryFindNlpConversation',
            'graphQlMutationAddFeatureToUser',
            'graphQlMutationBlockUser',
            'graphQlMutationCreateContact',
            'graphQlMutationCreateMultiStepAction',
            'graphQlMutationCreateUserDevice',
            'graphQlMutationDeleteMyUser',
            'graphQlMutationDeleteUser',
            'graphQlMutationEndMySession',
            'graphQlMutationRemoveFeatureFromUser',
            'graphQlMutationReportUser',
            'graphQlMutationSignInUser',
            'graphQlMutationSignMeOut',
            'graphQlMutationSignUpOauthUser',
            'graphQlMutationSignUpUser',
            'graphQlMutationStartMySession',
            'graphQlMutationUnblockUser',
            'graphQlMutationUpdateContact',
            'graphQlMutationUpdateMyUser',
            'graphQlMutationUpdateUser',
            'graphQlMutationUpdateUserDevice',
            'graphQlMutationUpsertBackgroundTask',
            'graphQlMutationVerifyMultiStepActionToken',
            'graphQlQueryBackgroundTask',
            'graphQlQueryContacts',
            'graphQlQueryContactTypes',
            'graphQlQueryFindAvailableUserHandle',
            'graphQlQueryFindContact',
            'graphQlQueryFindContactById',
            'graphQlQueryFindContacts',
            'graphQlQueryFindMyBlockedUsers',
            'graphQlQueryFindMyUser',
            'graphQlQueryFindMyUserDevices',
            'graphQlQueryFindUserById',
            'graphQlQueryFindUserByIdent',
            'graphQlQueryFindUserDeviceById',
            'graphQlQueryFindUserDevices',
            'graphQlQueryFindUsers',
            'graphQlQueryGetMultiStepActionProgress',
            'graphQlQueryLatestUserDevice',
            'graphQlQueryUnreadInAppMessages',
            'graphQlQueryVerifyMyPassword',
            'graphQlMutationCreateUserTracking',
            'graphQlMutationUpdateUserTracking',
            'graphQlQueryFindTrainingById',
            'graphQlQueryFindTrainingsForMe',
            'graphQlQueryFindTrainingsForUser',
            'graphQlQueryFindTrainingSessionById',
            'graphQlQueryFindTrainingSessionsByTrainingId',
            'graphQlQueryFindTrainingSessionsForMe',
            'graphQlMutationAcceptWalletItemTransfer',
            'graphQlMutationClearMyShoppingCart',
            'graphQlMutationClearShoppingCart',
            'graphQlMutationCreatePurchaseOrderField',
            'graphQlMutationCreateShoppingCartItem',
            'graphQlMutationCreateWalletItem',
            'graphQlMutationCreateWalletItemTransfer',
            'graphQlMutationCreateWalletTransfer',
            'graphQlMutationDeclineWalletItemTransfer',
            'graphQlMutationDeleteShoppingCartItem',
            'graphQlMutationDeleteWalletItem',
            'graphQlMutationDeleteWalletItemTransfer',
            'graphQlMutationUpdateShoppingCartItem',
            'graphQlMutationUpdateUpdateWalletItemTransferShowOnlineFlag',
            'graphQlMutationUpdateWalletItem',
            'graphQlMutationUpdateWalletItemTransfer',
            'graphQlMutationUpdateWalletItemTransferPassword',
            'graphQlQueryFindMyShoppingCart',
            'graphQlQueryFindMyWallet',
            'graphQlQueryFindPurchaseOrderItems',
            'graphQlQueryFindPurchaseOrders',
            'graphQlQueryFindShoppingCartItems',
            'graphQlQueryFindShoppingCarts',
            'graphQlQueryFindWalletItemById',
            'graphQlQueryFindWalletItemByTransferSlug',
            'graphQlQueryFindWalletItems',
            'graphQlQueryFindWalletItemTransferById',
            'graphQlQueryFindWalletItemTransferByTransferSlug',
            'graphQlQueryFindWalletItemTransferRecipientInfoByTransferSlug',
            'graphQlQueryFindWalletItemTransfers',
            'graphQlQueryFindWallets',
            'graphQlQueryFindWalletServiceRecord',
            'graphQlQueryVerifyWalletItemTransferPassword'
        ];
        membersUnion: 'graphQlMutationCreateAcademicExperience' | 'graphQlMutationDeleteAcademicExperience' | 'graphQlMutationUpdateAcademicExperience' | 'graphQlMutationCreateBusinessExperience' | 'graphQlMutationDeleteBusinessExperience' | 'graphQlMutationUpdateBusinessExperience' | 'graphQlMutationCreateCompany' | 'graphQlMutationDeleteCompany' | 'graphQlMutationUpdateCompany' | 'graphQlQueryFindAndUpdateAllMm2Users' | 'graphQlQueryUserInboxUser' | 'graphQlMutationCreateAdminTask' | 'graphQlMutationFindAdminTaskById' | 'graphQlMutationDeleteAdminTask' | 'graphQlMutationUpdateAdminTask' | 'graphQlQueryFindAdminTask' | 'graphQlQueryAdminTaskDefinitions' | 'graphQlMutationClearAllAnalyticsSyncInfo' | 'graphQlMutationCreateAnalyticsSynchronization' | 'graphQlMutationDeleteAnalyticsSynchronization' | 'graphQlMutationPauseAnalyticsSynchronization' | 'graphQlMutationRunAnalyticsSynchronization' | 'graphQlQueryFindAnalyticsServiceRecord' | 'graphQlQueryFindAnalyticsSynchronizationById' | 'graphQlMutationCreateUploadedAsset' | 'graphQlMutationDeleteUploadedAsset' | 'graphQlMutationFindUploadedAssetById' | 'graphQlMutationFindUploadedAssetForUser' | 'graphQlMutationInitAssetUpload' | 'graphQlMutationUpdateUploadedAsset' | 'graphQlQueryFindUploadedAssetById' | 'graphQlQueryFindUploadedAssets' | 'graphQlQueryFindUploadedAssetsForUser' | 'graphQlMutationAddChannelMessageEvent' | 'graphQlMutationArchiveChannelForUserByMe' | 'graphQlMutationCreateChannel' | 'graphQlMutationCreateChannelInvitation' | 'graphQlMutationCreateChannelMessage' | 'graphQlMutationCreateChannelParticipant' | 'graphQlMutationDeleteChannel' | 'graphQlMutationDeleteChannelInvitation' | 'graphQlMutationDeleteChannelMessage' | 'graphQlMutationDeleteChannelParticipant' | 'graphQlMutationDeleteGroup' | 'graphQlMutationDeleteGroupMembership' | 'graphQlMutationMarkChannelMessagesAsSeenByMe' | 'graphQlMutationUpdateChannel' | 'graphQlMutationUpdateChannelInvitation' | 'graphQlMutationUpdateChannelMessage' | 'graphQlMutationUpdateChannelParticipant' | 'graphQlQueryChannelInvitations' | 'graphQlQueryChannelMessageChannel' | 'graphQlQueryChannelParticipants' | 'graphQlQueryFindChannelById' | 'graphQlQueryFindChannelInvitationById' | 'graphQlQueryFindChannelInvitationsBetweenUsers' | 'graphQlQueryFindChannelInvitationsForUser' | 'graphQlQueryFindChannelMessageById' | 'graphQlQueryFindChannelMessages' | 'graphQlQueryFindChannelParticipantById' | 'graphQlQueryFindChannelParticipants' | 'graphQlQueryFindChannels' | 'graphQlQueryFindChannelsForUser' | 'graphQlQueryFindMyChannels' | 'graphQlQueryFindPendingChannelInvitationsForUser' | 'graphQlQueryMyContacts' | 'graphQlQueryMyInbox' | 'graphQlQueryUserChannels' | 'graphQlQueryUserCompanies' | 'graphQlQueryUserGroupMembers' | 'graphQlQueryUserGroups' | 'graphQlQueryFindCountries' | 'graphQlQueryFindExpertises' | 'graphQlQueryFindIndustries' | 'graphQlQueryFindOptions' | 'unset' | 'graphQlQueryContentTag' | 'graphQlMutationCreateContentTag' | 'graphQlMutationDeleteContentTag' | 'graphQlMutationUpdateContentTag' | 'graphQlMutationRunDataGenerator' | 'graphQlQueryNotificationTemplate' | 'graphQlQueryAvailableUserHandle' | 'graphQlQueryUser' | 'graphQlMutationAddUserToGroup' | 'graphQlMutationCreateGroup' | 'graphQlMutationCreateGroupMembership' | 'graphQlMutationCreateSupportChannelConfig' | 'graphQlMutationDeleteGroupCms' | 'graphQlMutationDeleteSupportChannelConfig' | 'graphQlMutationRemoveUserFromAllGroups' | 'graphQlMutationRemoveUserFromGroup' | 'graphQlMutationUpdateGroup' | 'graphQlMutationUpdateGroupMembership' | 'graphQlMutationUpdateSupportChannelConfig' | 'graphQlQueryFindGroupById' | 'graphQlQueryFindGroupByIdent' | 'graphQlQueryFindGroupCmsByGroupId' | 'graphQlQueryFindGroupCmsByGroupIdent' | 'graphQlQueryFindGroupCmsById' | 'graphQlQueryFindGroupMembershipByIdField' | 'graphQlQueryFindGroupMemberships' | 'graphQlQueryFindGroupsField' | 'graphQlQueryMyGroupMemberships' | 'graphQlQueryFindGiftCardProducts' | 'graphQlQueryFindMarketplaceServiceRecord' | 'graphQlQueryFindProductCategories' | 'graphQlQueryFindBrands' | 'graphQlMutationCreateUserSearch' | 'graphQlMutationDeleteUserSearch' | 'graphQlMutationUpdateUserSearch' | 'graphQlQueryFindUserSearchById' | 'graphQlQueryFindUserSearchResults' | 'graphQlQueryUserSearchFoundUsers' | 'graphQlMutationCreateNotification' | 'graphQlMutationCreateNotificationTemplate' | 'graphQlMutationDeleteNotification' | 'graphQlMutationDeleteNotificationTemplate' | 'graphQlMutationMarkInAppMessageReceived' | 'graphQlMutationSendMultiStepActionNotification' | 'graphQlMutationUpdateNotification' | 'graphQlMutationUpdateNotificationTemplate' | 'graphQlMutationCreateNatsMessage' | 'graphQlMutationClearAllSyncInfo' | 'graphQlMutationCreateMm2Synchronization' | 'graphQlMutationDeleteAllMm2DataInMm3' | 'graphQlMutationDeleteMm2Synchronization' | 'graphQlMutationRunMm2Synchronization' | 'graphQlQueryFindMm2SynchronizationById' | 'graphQlQueryGetMm2Integration' | 'graphQlMutationNlpLabelMessage' | 'graphQlMutationUpdateNlpConversation' | 'graphQlMutationUpdateNlpMessage' | 'graphQlQueryFindNlpConversation' | 'graphQlMutationAddFeatureToUser' | 'graphQlMutationBlockUser' | 'graphQlMutationCreateContact' | 'graphQlMutationCreateMultiStepAction' | 'graphQlMutationCreateUserDevice' | 'graphQlMutationDeleteMyUser' | 'graphQlMutationDeleteUser' | 'graphQlMutationEndMySession' | 'graphQlMutationRemoveFeatureFromUser' | 'graphQlMutationReportUser' | 'graphQlMutationSignInUser' | 'graphQlMutationSignMeOut' | 'graphQlMutationSignUpOauthUser' | 'graphQlMutationSignUpUser' | 'graphQlMutationStartMySession' | 'graphQlMutationUnblockUser' | 'graphQlMutationUpdateContact' | 'graphQlMutationUpdateMyUser' | 'graphQlMutationUpdateUser' | 'graphQlMutationUpdateUserDevice' | 'graphQlMutationUpsertBackgroundTask' | 'graphQlMutationVerifyMultiStepActionToken' | 'graphQlQueryBackgroundTask' | 'graphQlQueryContacts' | 'graphQlQueryContactTypes' | 'graphQlQueryFindAvailableUserHandle' | 'graphQlQueryFindContact' | 'graphQlQueryFindContactById' | 'graphQlQueryFindContacts' | 'graphQlQueryFindMyBlockedUsers' | 'graphQlQueryFindMyUser' | 'graphQlQueryFindMyUserDevices' | 'graphQlQueryFindUserById' | 'graphQlQueryFindUserByIdent' | 'graphQlQueryFindUserDeviceById' | 'graphQlQueryFindUserDevices' | 'graphQlQueryFindUsers' | 'graphQlQueryGetMultiStepActionProgress' | 'graphQlQueryLatestUserDevice' | 'graphQlQueryUnreadInAppMessages' | 'graphQlQueryVerifyMyPassword' | 'graphQlMutationCreateUserTracking' | 'graphQlMutationUpdateUserTracking' | 'graphQlQueryFindTrainingById' | 'graphQlQueryFindTrainingsForMe' | 'graphQlQueryFindTrainingsForUser' | 'graphQlQueryFindTrainingSessionById' | 'graphQlQueryFindTrainingSessionsByTrainingId' | 'graphQlQueryFindTrainingSessionsForMe' | 'graphQlMutationAcceptWalletItemTransfer' | 'graphQlMutationClearMyShoppingCart' | 'graphQlMutationClearShoppingCart' | 'graphQlMutationCreatePurchaseOrderField' | 'graphQlMutationCreateShoppingCartItem' | 'graphQlMutationCreateWalletItem' | 'graphQlMutationCreateWalletItemTransfer' | 'graphQlMutationCreateWalletTransfer' | 'graphQlMutationDeclineWalletItemTransfer' | 'graphQlMutationDeleteShoppingCartItem' | 'graphQlMutationDeleteWalletItem' | 'graphQlMutationDeleteWalletItemTransfer' | 'graphQlMutationUpdateShoppingCartItem' | 'graphQlMutationUpdateUpdateWalletItemTransferShowOnlineFlag' | 'graphQlMutationUpdateWalletItem' | 'graphQlMutationUpdateWalletItemTransfer' | 'graphQlMutationUpdateWalletItemTransferPassword' | 'graphQlQueryFindMyShoppingCart' | 'graphQlQueryFindMyWallet' | 'graphQlQueryFindPurchaseOrderItems' | 'graphQlQueryFindPurchaseOrders' | 'graphQlQueryFindShoppingCartItems' | 'graphQlQueryFindShoppingCarts' | 'graphQlQueryFindWalletItemById' | 'graphQlQueryFindWalletItemByTransferSlug' | 'graphQlQueryFindWalletItems' | 'graphQlQueryFindWalletItemTransferById' | 'graphQlQueryFindWalletItemTransferByTransferSlug' | 'graphQlQueryFindWalletItemTransferRecipientInfoByTransferSlug' | 'graphQlQueryFindWalletItemTransfers' | 'graphQlQueryFindWallets' | 'graphQlQueryFindWalletServiceRecord' | 'graphQlQueryVerifyWalletItemTransferPassword';
    }
    export interface ServiceRequestResult {
        kind: 'Enum';
        name: 'ServiceRequestResult';
        members: ['ok', 'error', 'unset'];
        membersUnion: 'ok' | 'error' | 'unset';
    }
    export interface ServiceRequestMessageId {
        kind: 'Enum';
        name: 'ServiceRequestMessageId';
        members: ['systemError', 'invalidInput', 'groupRuleFailed', 'unknown'];
        membersUnion: 'systemError' | 'invalidInput' | 'groupRuleFailed' | 'unknown';
    }
    export interface ErrorCode {
        kind: 'Enum';
        name: 'ErrorCode';
        members: [
            'academicExperienceNameMissing',
            'academicExperienceUserIdMissing',
            'businessExperienceNameMissing',
            'businessExperienceUserIdMissing',
            'companyNameMissing',
            'companyNameTaken',
            'assetUploadFailed',
            'contentTagAlreadyExist',
            'contentTagModelTypeMissing',
            'contentTagObjectIdMissing',
            'contentTagTypeMissing',
            'failedToConnect',
            'failedToUpdate',
            'unknown',
            'alreadyGroupMember',
            'groupLevelTooDeep',
            'groupNameMissing',
            'groupNameTaken',
            'groupNotActive',
            'groupRuleFailed',
            'groupSlugMissing',
            'groupSlugTaken',
            'notAGroupMember',
            'parentGroupNotFound',
            'matchingEngineNameMissing',
            'matchingEngineNameTaken',
            'expertiseBidirectionalMappingError',
            'expertiseTextIdDNE',
            'alreadyExists',
            'alreadyInitialized',
            'dataValidationFailed',
            'exceedsLimit',
            'invalidInput',
            'noLiveWebsocketConnectionAvailable',
            'noNotificationMethodAvailable',
            'notAllowed',
            'notFound',
            'notImplemented',
            'notInitialized',
            'notSupported',
            'serviceNotAvailable',
            'systemError',
            'timeout',
            'tooManyRequests',
            'natsInvalidTrackId',
            'authTokenNoMatch',
            'currentPasswordIncorrect',
            'currentPasswordMissing',
            'deviceUuidMissing',
            'emailInvalid',
            'emailMissing',
            'failedToCreateAccount',
            'failedToSignin',
            'invalidPushNotificationToken',
            'passwordMissing',
            'passwordNoMatch',
            'phoneNumberInvalid',
            'phoneNumberMissing',
            'phoneNumberNotSupported',
            'unauthorized',
            'userAlreadyExists',
            'userAnonymized',
            'userDeviceNotFound',
            'userNotActive',
            'userNotFound',
            'notAvailable',
            'trackingInvalidTrackId',
            'trainingCannotUpdateFields',
            'trainingContentPageCannotUpdateFields',
            'trainingContentPageMm2IdMissing',
            'trainingContentPageMm2IdTaken',
            'trainingMm2IdMissing',
            'trainingMm2IdTaken',
            'trainingSessionCannotUpdateFields',
            'trainingSessionMm2IdMissing',
            'trainingSessionMm2IdTaken',
            'trainingSessionProgressInvalid',
            'trainingSessionTrainingMissing',
            'trainingSessionUserIdMissing'
        ];
        membersUnion: 'academicExperienceNameMissing' | 'academicExperienceUserIdMissing' | 'businessExperienceNameMissing' | 'businessExperienceUserIdMissing' | 'companyNameMissing' | 'companyNameTaken' | 'assetUploadFailed' | 'contentTagAlreadyExist' | 'contentTagModelTypeMissing' | 'contentTagObjectIdMissing' | 'contentTagTypeMissing' | 'failedToConnect' | 'failedToUpdate' | 'unknown' | 'alreadyGroupMember' | 'groupLevelTooDeep' | 'groupNameMissing' | 'groupNameTaken' | 'groupNotActive' | 'groupRuleFailed' | 'groupSlugMissing' | 'groupSlugTaken' | 'notAGroupMember' | 'parentGroupNotFound' | 'matchingEngineNameMissing' | 'matchingEngineNameTaken' | 'expertiseBidirectionalMappingError' | 'expertiseTextIdDNE' | 'alreadyExists' | 'alreadyInitialized' | 'dataValidationFailed' | 'exceedsLimit' | 'invalidInput' | 'noLiveWebsocketConnectionAvailable' | 'noNotificationMethodAvailable' | 'notAllowed' | 'notFound' | 'notImplemented' | 'notInitialized' | 'notSupported' | 'serviceNotAvailable' | 'systemError' | 'timeout' | 'tooManyRequests' | 'natsInvalidTrackId' | 'authTokenNoMatch' | 'currentPasswordIncorrect' | 'currentPasswordMissing' | 'deviceUuidMissing' | 'emailInvalid' | 'emailMissing' | 'failedToCreateAccount' | 'failedToSignin' | 'invalidPushNotificationToken' | 'passwordMissing' | 'passwordNoMatch' | 'phoneNumberInvalid' | 'phoneNumberMissing' | 'phoneNumberNotSupported' | 'unauthorized' | 'userAlreadyExists' | 'userAnonymized' | 'userDeviceNotFound' | 'userNotActive' | 'userNotFound' | 'notAvailable' | 'trackingInvalidTrackId' | 'trainingCannotUpdateFields' | 'trainingContentPageCannotUpdateFields' | 'trainingContentPageMm2IdMissing' | 'trainingContentPageMm2IdTaken' | 'trainingMm2IdMissing' | 'trainingMm2IdTaken' | 'trainingSessionCannotUpdateFields' | 'trainingSessionMm2IdMissing' | 'trainingSessionMm2IdTaken' | 'trainingSessionProgressInvalid' | 'trainingSessionTrainingMissing' | 'trainingSessionUserIdMissing';
    }
    export interface ServiceRequestSource {
        kind: 'Enum';
        name: 'ServiceRequestSource';
        members: ['app', 'analytics', 'graphqlApi', 'restApi', 'httpRoute', 'system', 'admin', 'vts', 'wallet', 'mm2'];
        membersUnion: 'app' | 'analytics' | 'graphqlApi' | 'restApi' | 'httpRoute' | 'system' | 'admin' | 'vts' | 'wallet' | 'mm2';
    }
    export interface MultiStepActionType {
        kind: 'Enum';
        name: 'MultiStepActionType';
        members: [
            'resetPassword',
            'tokenSignIn',
            'unset',
            'updateEmail',
            'updatePassword',
            'updatePhoneNumber',
            'verifyEmail',
            'verifyEmailOnSignUp',
            'verifyPhoneNumber',
            'verifyPhoneNumberOnSignUp'
        ];
        membersUnion: 'resetPassword' | 'tokenSignIn' | 'unset' | 'updateEmail' | 'updatePassword' | 'updatePhoneNumber' | 'verifyEmail' | 'verifyEmailOnSignUp' | 'verifyPhoneNumber' | 'verifyPhoneNumberOnSignUp';
    }
    export interface MultiStepActionStatus {
        kind: 'Enum';
        name: 'MultiStepActionStatus';
        members: ['created', 'started', 'finished'];
        membersUnion: 'created' | 'started' | 'finished';
    }
    export interface NotificationMethod {
        kind: 'Enum';
        name: 'NotificationMethod';
        members: ['off', 'auto', 'email', 'sms', 'pushNotification', 'inAppNotification'];
        membersUnion: 'off' | 'auto' | 'email' | 'sms' | 'pushNotification' | 'inAppNotification';
    }
    export interface MultiStepActionResult {
        kind: 'Enum';
        name: 'MultiStepActionResult';
        members: [
            'confirmTokenMismatch',
            'dataValidationFailed',
            'deviceNotFound',
            'emailMismatch',
            'emailNotVerified',
            'error',
            'expired',
            'invalidEmail',
            'phoneNumberInvalid',
            'missingEmail',
            'missingPhoneNumber',
            'notFound',
            'ok',
            'passed',
            'passwordMismatch',
            'passwordUpdated',
            'phoneNumberMismatch',
            'phoneNumberNotVerified',
            'systemError',
            'unset',
            'userFailedValidation',
            'userNotFound',
            'userNotSignedIn'
        ];
        membersUnion: 'confirmTokenMismatch' | 'dataValidationFailed' | 'deviceNotFound' | 'emailMismatch' | 'emailNotVerified' | 'error' | 'expired' | 'invalidEmail' | 'phoneNumberInvalid' | 'missingEmail' | 'missingPhoneNumber' | 'notFound' | 'ok' | 'passed' | 'passwordMismatch' | 'passwordUpdated' | 'phoneNumberMismatch' | 'phoneNumberNotVerified' | 'systemError' | 'unset' | 'userFailedValidation' | 'userNotFound' | 'userNotSignedIn';
    }
    export interface MultiStepActionSendNotificationResult {
        kind: 'Enum';
        name: 'MultiStepActionSendNotificationResult';
        members: ['ok', 'failed', 'phoneNumberInvalid'];
        membersUnion: 'ok' | 'failed' | 'phoneNumberInvalid';
    }
    export interface CookieChoiceTextId {
        kind: 'Enum';
        name: 'CookieChoiceTextId';
        members: ['acceptAll', 'rejectAll', 'acceptEssentials'];
        membersUnion: 'acceptAll' | 'rejectAll' | 'acceptEssentials';
    }
    export interface ReportUserReasonTextId {
        kind: 'Enum';
        name: 'ReportUserReasonTextId';
        members: [
            'notSet',
            'badActor',
            'fakePerson',
            'harasses',
            'impersonator',
            'inappropriate',
            'objectionableLanguage',
            'promotesHate',
            'sharesObjectionableContent',
            'spammer',
            'usesObjectionableLanguage',
            'violatesRules'
        ];
        membersUnion: 'notSet' | 'badActor' | 'fakePerson' | 'harasses' | 'impersonator' | 'inappropriate' | 'objectionableLanguage' | 'promotesHate' | 'sharesObjectionableContent' | 'spammer' | 'usesObjectionableLanguage' | 'violatesRules';
    }
    export interface DeclineChannelInvitationReasonTextId {
        kind: 'Enum';
        name: 'DeclineChannelInvitationReasonTextId';
        members: ['notGoodFit', 'tooBusy', 'noReason', 'fakeProfile', 'inappropriate'];
        membersUnion: 'notGoodFit' | 'tooBusy' | 'noReason' | 'fakeProfile' | 'inappropriate';
    }
    export interface ChannelMessageEvent {
        kind: 'Enum';
        name: 'ChannelMessageEvent';
        members: ['received', 'seen', 'unset'];
        membersUnion: 'received' | 'seen' | 'unset';
    }
    export interface NotificationTemplateName {
        kind: 'Enum';
        name: 'NotificationTemplateName';
        members: [
            'accountDeletedConfirmation',
            'channelInvitationAcceptedForMentee',
            'channelInvitationAcceptedForMentor',
            'channelInvitationDeclinedForMentee',
            'channelInvitationDeclinedForMentor',
            'channelInvitationReceivedForMentee',
            'channelInvitationReceivedForMentor',
            'channelMessageReceivedForMentee',
            'channelMessageReceivedForMentor',
            'completeProfileForMentee',
            'completeProfileForMentor',
            'completeSignUpForMentee',
            'completeSignUpForMentor',
            'matchesRecommendationsForMentee',
            'matchesRecommendationsForMentor',
            'newPrivacyRules',
            'newsletter',
            'resetPasswordConfirmation',
            'resetPasswordConfirmToken',
            'sendFirstInvitationForMentee',
            'sendFirstInvitationForMentor',
            'unset',
            'welcomeForMentee',
            'welcomeForMentor'
        ];
        membersUnion: 'accountDeletedConfirmation' | 'channelInvitationAcceptedForMentee' | 'channelInvitationAcceptedForMentor' | 'channelInvitationDeclinedForMentee' | 'channelInvitationDeclinedForMentor' | 'channelInvitationReceivedForMentee' | 'channelInvitationReceivedForMentor' | 'channelMessageReceivedForMentee' | 'channelMessageReceivedForMentor' | 'completeProfileForMentee' | 'completeProfileForMentor' | 'completeSignUpForMentee' | 'completeSignUpForMentor' | 'matchesRecommendationsForMentee' | 'matchesRecommendationsForMentor' | 'newPrivacyRules' | 'newsletter' | 'resetPasswordConfirmation' | 'resetPasswordConfirmToken' | 'sendFirstInvitationForMentee' | 'sendFirstInvitationForMentor' | 'unset' | 'welcomeForMentee' | 'welcomeForMentor';
    }
    export interface ChannelChangedEventType {
        kind: 'Enum';
        name: 'ChannelChangedEventType';
        members: [
            'channelDeleted',
            'channelUpdated',
            'invitationAccepted',
            'invitationCreated',
            'invitationDeclined',
            'invitationDeleted',
            'invitationUpdated',
            'messageCreated',
            'messageDeleted',
            'messageStatusChanged',
            'messageUpdated',
            'participantCreated',
            'participantDeleted',
            'participantUpdated'
        ];
        membersUnion: 'channelDeleted' | 'channelUpdated' | 'invitationAccepted' | 'invitationCreated' | 'invitationDeclined' | 'invitationDeleted' | 'invitationUpdated' | 'messageCreated' | 'messageDeleted' | 'messageStatusChanged' | 'messageUpdated' | 'participantCreated' | 'participantDeleted' | 'participantUpdated';
    }
    export interface ObjectChangedEventType {
        kind: 'Enum';
        name: 'ObjectChangedEventType';
        members: ['created', 'updated', 'deleted', 'anonymized'];
        membersUnion: 'created' | 'updated' | 'deleted' | 'anonymized';
    }
    export type DateTimeISO = $$Scalar.DateTimeISO;
    export type Long = $$Scalar.Long;
    export type Int = $.StandardTypes.Int;
    export type ID = $.StandardTypes.ID;
    export type String = $.StandardTypes.String;
    export type Boolean = $.StandardTypes.Boolean;
    export type Float = $.StandardTypes.Float;
    /**
     * [1] These definitions serve to allow field selection interfaces to extend their respective object type without
     *     name clashing between the field name and the object name.
     *
     *     For example imagine `Query.Foo` field with type also called `Foo`. Our generated interfaces for each field
     *     would end up with an error of `export interface Foo extends Foo ...`
     */
    namespace $$NamedTypes {
        type $$Query = Query;
        type $$Mutation = Mutation;
        type $$Subscription = Subscription;
        type $$UserMetadata = UserMetadata;
        type $$ChannelsUserMetadata = ChannelsUserMetadata;
        type $$GroupsUserMetadata = GroupsUserMetadata;
        type $$GroupMembership = GroupMembership;
        type $$ModelEvent = ModelEvent;
        type $$Expertise = Expertise;
        type $$Option = Option;
        type $$Industry = Industry;
        type $$MenteesGroupMembership = MenteesGroupMembership;
        type $$MentorsGroupMembership = MentorsGroupMembership;
        type $$MastercardGroupMembership = MastercardGroupMembership;
        type $$IqlaaGroupMembership = IqlaaGroupMembership;
        type $$StriveIndonesiaGroupMembership = StriveIndonesiaGroupMembership;
        type $$User = User;
        type $$LabeledStringValue = LabeledStringValue;
        type $$UserPreferences = UserPreferences;
        type $$NotificationOptions = NotificationOptions;
        type $$UserDeviceWithoutAuth = UserDeviceWithoutAuth;
        type $$UserBlock = UserBlock;
        type $$Company = Company;
        type $$CompanyStage = CompanyStage;
        type $$CompanyType = CompanyType;
        type $$AcademicExperience = AcademicExperience;
        type $$BusinessExperience = BusinessExperience;
        type $$UploadedAsset = UploadedAsset;
        type $$UserProfileRoleHistoryItem = UserProfileRoleHistoryItem;
        type $$Country = Country;
        type $$Gender = Gender;
        type $$Language = Language;
        type $$Notification = Notification;
        type $$NotificationContext = NotificationContext;
        type $$Channel = Channel;
        type $$ChannelMetadata = ChannelMetadata;
        type $$BgChannelStatus = BgChannelStatus;
        type $$ChannelInvitation = ChannelInvitation;
        type $$DeclineChannelInvitationReason = DeclineChannelInvitationReason;
        type $$ChannelMessage = ChannelMessage;
        type $$ChannelMessageMetadata = ChannelMessageMetadata;
        type $$ChannelMessageStatus = ChannelMessageStatus;
        type $$Contact = Contact;
        type $$ContactMetadata = ContactMetadata;
        type $$ContactType = ContactType;
        type $$ChannelParticipant = ChannelParticipant;
        type $$BgChannelParticipantUserInfo = BgChannelParticipantUserInfo;
        type $$UserListItem = UserListItem;
        type $$EducationLevel = EducationLevel;
        type $$EndorsementWithTypes = EndorsementWithTypes;
        type $$ModerationConcern = ModerationConcern;
        type $$ContentTagType = ContentTagType;
        type $$Group = Group;
        type $$AppliedGroupRule = AppliedGroupRule;
        type $$GroupRuleBaseConfig = GroupRuleBaseConfig;
        type $$GroupCms = GroupCms;
        type $$GroupCmsOnboarding = GroupCmsOnboarding;
        type $$Pronoun = Pronoun;
        type $$UserCms = UserCms;
        type $$UserInbox = UserInbox;
        type $$ChannelInbox = ChannelInbox;
        type $$ChannelInboxItemMessage = ChannelInboxItemMessage;
        type $$ChannelInboxItemInvitation = ChannelInboxItemInvitation;
        type $$AdminTask = AdminTask;
        type $$AdminTaskDef = AdminTaskDef;
        type $$AdminTaskArgDef = AdminTaskArgDef;
        type $$ChannelListItem = ChannelListItem;
        type $$ErrorCodeOption = ErrorCodeOption;
        type $$IndonesianCity = IndonesianCity;
        type $$IndonesianProvince = IndonesianProvince;
        type $$IqlaaJordanianDistrict = IqlaaJordanianDistrict;
        type $$IqlaaJordanianGovernorate = IqlaaJordanianGovernorate;
        type $$MastercardBank = MastercardBank;
        type $$Brand = Brand;
        type $$PurchaseOrderItem = PurchaseOrderItem;
        type $$PurchaseOrder = PurchaseOrder;
        type $$ShoppingCartItem = ShoppingCartItem;
        type $$ShoppingCart = ShoppingCart;
        type $$WalletItem = WalletItem;
        type $$WalletItemTransferRecipientInfo = WalletItemTransferRecipientInfo;
        type $$WalletItemTransfer = WalletItemTransfer;
        type $$GiftCardProduct = GiftCardProduct;
        type $$GiftCardDenomination = GiftCardDenomination;
        type $$Wallet = Wallet;
        type $$WalletServiceRecord = WalletServiceRecord;
        type $$MarketplaceServiceRecord = MarketplaceServiceRecord;
        type $$ProductCategory = ProductCategory;
        type $$UserSearch = UserSearch;
        type $$UserSearchFilter = UserSearchFilter;
        type $$UserSearchRunInfo = UserSearchRunInfo;
        type $$UserWithScore = UserWithScore;
        type $$ServiceRequest = ServiceRequest;
        type $$ContactListItem = ContactListItem;
        type $$SidMultiStepAction = SidMultiStepAction;
        type $$MultiStepActionError = MultiStepActionError;
        type $$SidMultiStepActionProgress = SidMultiStepActionProgress;
        type $$MyUser = MyUser;
        type $$ReportUserReason = ReportUserReason;
        type $$Training = Training;
        type $$TrainingContentPage = TrainingContentPage;
        type $$TrainingSession = TrainingSession;
        type $$TrainingSessionCompletionInfo = TrainingSessionCompletionInfo;
        type $$UserAuthResponse = UserAuthResponse;
        type $$ContentTag = ContentTag;
        type $$SupportChannelConfig = SupportChannelConfig;
        type $$NotificationTemplate = NotificationTemplate;
        type $$ContentStatus = ContentStatus;
        type $$BgChannelChangedEvent = BgChannelChangedEvent;
        type $$ObjectChangedEvent = ObjectChangedEvent;
        type $$BaseModel = BaseModel;
        type $$FindObjectsOptions = FindObjectsOptions;
        type $$SortItem = SortItem;
        type $$FindUserByIdentOptions = FindUserByIdentOptions;
        type $$UserInput = UserInput;
        type $$ModelEventInput = ModelEventInput;
        type $$BaseModelMetadataInput = BaseModelMetadataInput;
        type $$LabeledStringValueInput = LabeledStringValueInput;
        type $$UserPreferencesInput = UserPreferencesInput;
        type $$NotificationOptionsInput = NotificationOptionsInput;
        type $$CompanyInput = CompanyInput;
        type $$GroupMembershipInput = GroupMembershipInput;
        type $$AcademicExperienceInput = AcademicExperienceInput;
        type $$BusinessExperienceInput = BusinessExperienceInput;
        type $$UserProfileRoleHistoryItemInput = UserProfileRoleHistoryItemInput;
        type $$UserListFilter = UserListFilter;
        type $$UserDeviceInput = UserDeviceInput;
        type $$UserDeviceListFilter = UserDeviceListFilter;
        type $$UploadedAssetInput = UploadedAssetInput;
        type $$UploadedAssetListFilter = UploadedAssetListFilter;
        type $$ChannelInput = ChannelInput;
        type $$BgChannelStatusInput = BgChannelStatusInput;
        type $$ChannelListFilter = ChannelListFilter;
        type $$ChannelMessageInput = ChannelMessageInput;
        type $$ChannelMessageStatusInput = ChannelMessageStatusInput;
        type $$ChannelMessageListFilter = ChannelMessageListFilter;
        type $$ChannelParticipantInput = ChannelParticipantInput;
        type $$ChannelParticipantListFilter = ChannelParticipantListFilter;
        type $$GroupMembershipListFilter = GroupMembershipListFilter;
        type $$GroupInput = GroupInput;
        type $$AppliedGroupRuleInput = AppliedGroupRuleInput;
        type $$GroupRuleBaseConfigInput = GroupRuleBaseConfigInput;
        type $$GroupListFilter = GroupListFilter;
        type $$BrandInput = BrandInput;
        type $$BrandListFilter = BrandListFilter;
        type $$PurchaseOrderItemInput = PurchaseOrderItemInput;
        type $$PurchaseOrderItemListFilter = PurchaseOrderItemListFilter;
        type $$PurchaseOrderInput = PurchaseOrderInput;
        type $$PurchaseOrderListFilter = PurchaseOrderListFilter;
        type $$ShoppingCartItemInput = ShoppingCartItemInput;
        type $$ShoppingCartItemListFilter = ShoppingCartItemListFilter;
        type $$ShoppingCartInput = ShoppingCartInput;
        type $$ShoppingCartListFilter = ShoppingCartListFilter;
        type $$WalletItemInput = WalletItemInput;
        type $$WalletItemListFilter = WalletItemListFilter;
        type $$WalletItemTransferInput = WalletItemTransferInput;
        type $$WalletItemTransferListFilter = WalletItemTransferListFilter;
        type $$WalletInput = WalletInput;
        type $$WalletListFilter = WalletListFilter;
        type $$GiftCardProductInput = GiftCardProductInput;
        type $$GiftCardDenominationInput = GiftCardDenominationInput;
        type $$GiftCardProductListFilter = GiftCardProductListFilter;
        type $$ProductCategoryInput = ProductCategoryInput;
        type $$ProductCategoryListFilter = ProductCategoryListFilter;
        type $$UserSearchInput = UserSearchInput;
        type $$UserSearchFilterInput = UserSearchFilterInput;
        type $$UserSearchListFilter = UserSearchListFilter;
        type $$ContactInput = ContactInput;
        type $$SidContactListFilter = SidContactListFilter;
        type $$SignInUserInput = SignInUserInput;
        type $$SignInOauthUserInput = SignInOauthUserInput;
        type $$SignUpUserInput = SignUpUserInput;
        type $$VerifyOneTimeAuthTokenInput = VerifyOneTimeAuthTokenInput;
        type $$ReportUserInput = ReportUserInput;
        type $$AdminTaskInput = AdminTaskInput;
        type $$ChannelInvitationInput = ChannelInvitationInput;
        type $$BgAddChannelMessageEventInput = BgAddChannelMessageEventInput;
        type $$ContentTagInput = ContentTagInput;
        type $$ModerationConcernInput = ModerationConcernInput;
        type $$MenteesGroupMembershipInput = MenteesGroupMembershipInput;
        type $$MentorsGroupMembershipInput = MentorsGroupMembershipInput;
        type $$IqlaaGroupMembershipInput = IqlaaGroupMembershipInput;
        type $$MastercardGroupMembershipInput = MastercardGroupMembershipInput;
        type $$SupportChannelConfigInput = SupportChannelConfigInput;
        type $$UpdateObjectOptions = UpdateObjectOptions;
        type $$NotificationInput = NotificationInput;
        type $$SendMultiStepActionNotificationInput = SendMultiStepActionNotificationInput;
        type $$NotificationTemplateInput = NotificationTemplateInput;
        type $$SidMultiStepActionInput = SidMultiStepActionInput;
        type $$MultiStepActionErrorInput = MultiStepActionErrorInput;
        type $$UserIdentInput = UserIdentInput;
        type $$VerifyMultiStepActionTokenInput = VerifyMultiStepActionTokenInput;
        type $$MyUserInput = MyUserInput;
        type $$UserTrackingInput = UserTrackingInput;
        type $$BaseModelMetadata = BaseModelMetadata;
        type $$IGroupMembership = IGroupMembership;
        type $$GroupMembershipRole = GroupMembershipRole;
        type $$ModelEventType = ModelEventType;
        type $$OptionType = OptionType;
        type $$UiLanguage = UiLanguage;
        type $$MastercardCardType = MastercardCardType;
        type $$UserIdentType = UserIdentType;
        type $$UserRole = UserRole;
        type $$AppFeature = AppFeature;
        type $$NotificationType = NotificationType;
        type $$IdentityProvider = IdentityProvider;
        type $$ModelType = ModelType;
        type $$UploadedAssetType = UploadedAssetType;
        type $$AssetHostingService = AssetHostingService;
        type $$UserProfileRole = UserProfileRole;
        type $$AppAction = AppAction;
        type $$ChannelType = ChannelType;
        type $$ChannelInvitationStatus = ChannelInvitationStatus;
        type $$ChannelMessageType = ChannelMessageType;
        type $$ChannelParticipantRole = ChannelParticipantRole;
        type $$ModerationConcernType = ModerationConcernType;
        type $$GroupRuleEventType = GroupRuleEventType;
        type $$SortDirection = SortDirection;
        type $$IncludeFilterOption = IncludeFilterOption;
        type $$AuthType = AuthType;
        type $$FederatedIdentityProvider = FederatedIdentityProvider;
        type $$AdminTaskType = AdminTaskType;
        type $$AdminTaskResult = AdminTaskResult;
        type $$ChannelInvitationDirection = ChannelInvitationDirection;
        type $$ProductType = ProductType;
        type $$BarcodeType = BarcodeType;
        type $$WalletItemSource = WalletItemSource;
        type $$ServiceName = ServiceName;
        type $$UserSearchType = UserSearchType;
        type $$UserSearchFieldOption = UserSearchFieldOption;
        type $$UserSearchSubscriptionType = UserSearchSubscriptionType;
        type $$ServiceRequestType = ServiceRequestType;
        type $$ServiceRequestResult = ServiceRequestResult;
        type $$ServiceRequestMessageId = ServiceRequestMessageId;
        type $$ErrorCode = ErrorCode;
        type $$ServiceRequestSource = ServiceRequestSource;
        type $$MultiStepActionType = MultiStepActionType;
        type $$MultiStepActionStatus = MultiStepActionStatus;
        type $$NotificationMethod = NotificationMethod;
        type $$MultiStepActionResult = MultiStepActionResult;
        type $$MultiStepActionSendNotificationResult = MultiStepActionSendNotificationResult;
        type $$CookieChoiceTextId = CookieChoiceTextId;
        type $$ReportUserReasonTextId = ReportUserReasonTextId;
        type $$DeclineChannelInvitationReasonTextId = DeclineChannelInvitationReasonTextId;
        type $$ChannelMessageEvent = ChannelMessageEvent;
        type $$NotificationTemplateName = NotificationTemplateName;
        type $$ChannelChangedEventType = ChannelChangedEventType;
        type $$ObjectChangedEventType = ObjectChangedEventType;
        type $$DateTimeISO = DateTimeISO;
        type $$Long = Long;
        type $$Int = Int;
        type $$ID = ID;
        type $$String = String;
        type $$Boolean = Boolean;
        type $$Float = Float;
    }
    export {};
}
export interface Schema<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Scalar.$Registry> {
    name: $$Data.Name;
    operationsAvailable: ['query', 'mutation', 'subscription'];
    RootUnion: Schema.Query | Schema.Mutation | Schema.Subscription;
    Root: {
        query: Schema.Query;
        mutation: Schema.Mutation;
        subscription: Schema.Subscription;
    };
    allTypes: {
        Query: Schema.Query;
        Mutation: Schema.Mutation;
        Subscription: Schema.Subscription;
        GroupMembershipRole: Schema.GroupMembershipRole;
        ModelEventType: Schema.ModelEventType;
        OptionType: Schema.OptionType;
        UiLanguage: Schema.UiLanguage;
        MastercardCardType: Schema.MastercardCardType;
        UserIdentType: Schema.UserIdentType;
        UserRole: Schema.UserRole;
        AppFeature: Schema.AppFeature;
        NotificationType: Schema.NotificationType;
        IdentityProvider: Schema.IdentityProvider;
        ModelType: Schema.ModelType;
        UploadedAssetType: Schema.UploadedAssetType;
        AssetHostingService: Schema.AssetHostingService;
        UserProfileRole: Schema.UserProfileRole;
        AppAction: Schema.AppAction;
        ChannelType: Schema.ChannelType;
        ChannelInvitationStatus: Schema.ChannelInvitationStatus;
        ChannelMessageType: Schema.ChannelMessageType;
        ChannelParticipantRole: Schema.ChannelParticipantRole;
        ModerationConcernType: Schema.ModerationConcernType;
        GroupRuleEventType: Schema.GroupRuleEventType;
        SortDirection: Schema.SortDirection;
        IncludeFilterOption: Schema.IncludeFilterOption;
        AuthType: Schema.AuthType;
        FederatedIdentityProvider: Schema.FederatedIdentityProvider;
        AdminTaskType: Schema.AdminTaskType;
        AdminTaskResult: Schema.AdminTaskResult;
        ChannelInvitationDirection: Schema.ChannelInvitationDirection;
        ProductType: Schema.ProductType;
        BarcodeType: Schema.BarcodeType;
        WalletItemSource: Schema.WalletItemSource;
        ServiceName: Schema.ServiceName;
        UserSearchType: Schema.UserSearchType;
        UserSearchFieldOption: Schema.UserSearchFieldOption;
        UserSearchSubscriptionType: Schema.UserSearchSubscriptionType;
        ServiceRequestType: Schema.ServiceRequestType;
        ServiceRequestResult: Schema.ServiceRequestResult;
        ServiceRequestMessageId: Schema.ServiceRequestMessageId;
        ErrorCode: Schema.ErrorCode;
        ServiceRequestSource: Schema.ServiceRequestSource;
        MultiStepActionType: Schema.MultiStepActionType;
        MultiStepActionStatus: Schema.MultiStepActionStatus;
        NotificationMethod: Schema.NotificationMethod;
        MultiStepActionResult: Schema.MultiStepActionResult;
        MultiStepActionSendNotificationResult: Schema.MultiStepActionSendNotificationResult;
        CookieChoiceTextId: Schema.CookieChoiceTextId;
        ReportUserReasonTextId: Schema.ReportUserReasonTextId;
        DeclineChannelInvitationReasonTextId: Schema.DeclineChannelInvitationReasonTextId;
        ChannelMessageEvent: Schema.ChannelMessageEvent;
        NotificationTemplateName: Schema.NotificationTemplateName;
        ChannelChangedEventType: Schema.ChannelChangedEventType;
        ObjectChangedEventType: Schema.ObjectChangedEventType;
        UserMetadata: Schema.UserMetadata;
        ChannelsUserMetadata: Schema.ChannelsUserMetadata;
        GroupsUserMetadata: Schema.GroupsUserMetadata;
        GroupMembership: Schema.GroupMembership;
        ModelEvent: Schema.ModelEvent;
        Expertise: Schema.Expertise;
        Option: Schema.Option;
        Industry: Schema.Industry;
        MenteesGroupMembership: Schema.MenteesGroupMembership;
        MentorsGroupMembership: Schema.MentorsGroupMembership;
        MastercardGroupMembership: Schema.MastercardGroupMembership;
        IqlaaGroupMembership: Schema.IqlaaGroupMembership;
        StriveIndonesiaGroupMembership: Schema.StriveIndonesiaGroupMembership;
        User: Schema.User;
        LabeledStringValue: Schema.LabeledStringValue;
        UserPreferences: Schema.UserPreferences;
        NotificationOptions: Schema.NotificationOptions;
        UserDeviceWithoutAuth: Schema.UserDeviceWithoutAuth;
        UserBlock: Schema.UserBlock;
        Company: Schema.Company;
        CompanyStage: Schema.CompanyStage;
        CompanyType: Schema.CompanyType;
        AcademicExperience: Schema.AcademicExperience;
        BusinessExperience: Schema.BusinessExperience;
        UploadedAsset: Schema.UploadedAsset;
        UserProfileRoleHistoryItem: Schema.UserProfileRoleHistoryItem;
        Country: Schema.Country;
        Gender: Schema.Gender;
        Language: Schema.Language;
        Notification: Schema.Notification;
        NotificationContext: Schema.NotificationContext;
        Channel: Schema.Channel;
        ChannelMetadata: Schema.ChannelMetadata;
        BgChannelStatus: Schema.BgChannelStatus;
        ChannelInvitation: Schema.ChannelInvitation;
        DeclineChannelInvitationReason: Schema.DeclineChannelInvitationReason;
        ChannelMessage: Schema.ChannelMessage;
        ChannelMessageMetadata: Schema.ChannelMessageMetadata;
        ChannelMessageStatus: Schema.ChannelMessageStatus;
        Contact: Schema.Contact;
        ContactMetadata: Schema.ContactMetadata;
        ContactType: Schema.ContactType;
        ChannelParticipant: Schema.ChannelParticipant;
        BgChannelParticipantUserInfo: Schema.BgChannelParticipantUserInfo;
        UserListItem: Schema.UserListItem;
        EducationLevel: Schema.EducationLevel;
        EndorsementWithTypes: Schema.EndorsementWithTypes;
        ModerationConcern: Schema.ModerationConcern;
        ContentTagType: Schema.ContentTagType;
        Group: Schema.Group;
        AppliedGroupRule: Schema.AppliedGroupRule;
        GroupRuleBaseConfig: Schema.GroupRuleBaseConfig;
        GroupCms: Schema.GroupCms;
        GroupCmsOnboarding: Schema.GroupCmsOnboarding;
        Pronoun: Schema.Pronoun;
        UserCms: Schema.UserCms;
        UserInbox: Schema.UserInbox;
        ChannelInbox: Schema.ChannelInbox;
        ChannelInboxItemMessage: Schema.ChannelInboxItemMessage;
        ChannelInboxItemInvitation: Schema.ChannelInboxItemInvitation;
        AdminTask: Schema.AdminTask;
        AdminTaskDef: Schema.AdminTaskDef;
        AdminTaskArgDef: Schema.AdminTaskArgDef;
        ChannelListItem: Schema.ChannelListItem;
        ErrorCodeOption: Schema.ErrorCodeOption;
        IndonesianCity: Schema.IndonesianCity;
        IndonesianProvince: Schema.IndonesianProvince;
        IqlaaJordanianDistrict: Schema.IqlaaJordanianDistrict;
        IqlaaJordanianGovernorate: Schema.IqlaaJordanianGovernorate;
        MastercardBank: Schema.MastercardBank;
        Brand: Schema.Brand;
        PurchaseOrderItem: Schema.PurchaseOrderItem;
        PurchaseOrder: Schema.PurchaseOrder;
        ShoppingCartItem: Schema.ShoppingCartItem;
        ShoppingCart: Schema.ShoppingCart;
        WalletItem: Schema.WalletItem;
        WalletItemTransferRecipientInfo: Schema.WalletItemTransferRecipientInfo;
        WalletItemTransfer: Schema.WalletItemTransfer;
        GiftCardProduct: Schema.GiftCardProduct;
        GiftCardDenomination: Schema.GiftCardDenomination;
        Wallet: Schema.Wallet;
        WalletServiceRecord: Schema.WalletServiceRecord;
        MarketplaceServiceRecord: Schema.MarketplaceServiceRecord;
        ProductCategory: Schema.ProductCategory;
        UserSearch: Schema.UserSearch;
        UserSearchFilter: Schema.UserSearchFilter;
        UserSearchRunInfo: Schema.UserSearchRunInfo;
        UserWithScore: Schema.UserWithScore;
        ServiceRequest: Schema.ServiceRequest;
        ContactListItem: Schema.ContactListItem;
        SidMultiStepAction: Schema.SidMultiStepAction;
        MultiStepActionError: Schema.MultiStepActionError;
        SidMultiStepActionProgress: Schema.SidMultiStepActionProgress;
        MyUser: Schema.MyUser;
        ReportUserReason: Schema.ReportUserReason;
        Training: Schema.Training;
        TrainingContentPage: Schema.TrainingContentPage;
        TrainingSession: Schema.TrainingSession;
        TrainingSessionCompletionInfo: Schema.TrainingSessionCompletionInfo;
        UserAuthResponse: Schema.UserAuthResponse;
        ContentTag: Schema.ContentTag;
        SupportChannelConfig: Schema.SupportChannelConfig;
        NotificationTemplate: Schema.NotificationTemplate;
        ContentStatus: Schema.ContentStatus;
        BgChannelChangedEvent: Schema.BgChannelChangedEvent;
        ObjectChangedEvent: Schema.ObjectChangedEvent;
        BaseModel: Schema.BaseModel;
        BaseModelMetadata: Schema.BaseModelMetadata;
        IGroupMembership: Schema.IGroupMembership;
    };
    objects: {
        UserMetadata: Schema.UserMetadata;
        ChannelsUserMetadata: Schema.ChannelsUserMetadata;
        GroupsUserMetadata: Schema.GroupsUserMetadata;
        GroupMembership: Schema.GroupMembership;
        ModelEvent: Schema.ModelEvent;
        Expertise: Schema.Expertise;
        Option: Schema.Option;
        Industry: Schema.Industry;
        MenteesGroupMembership: Schema.MenteesGroupMembership;
        MentorsGroupMembership: Schema.MentorsGroupMembership;
        MastercardGroupMembership: Schema.MastercardGroupMembership;
        IqlaaGroupMembership: Schema.IqlaaGroupMembership;
        StriveIndonesiaGroupMembership: Schema.StriveIndonesiaGroupMembership;
        User: Schema.User;
        LabeledStringValue: Schema.LabeledStringValue;
        UserPreferences: Schema.UserPreferences;
        NotificationOptions: Schema.NotificationOptions;
        UserDeviceWithoutAuth: Schema.UserDeviceWithoutAuth;
        UserBlock: Schema.UserBlock;
        Company: Schema.Company;
        CompanyStage: Schema.CompanyStage;
        CompanyType: Schema.CompanyType;
        AcademicExperience: Schema.AcademicExperience;
        BusinessExperience: Schema.BusinessExperience;
        UploadedAsset: Schema.UploadedAsset;
        UserProfileRoleHistoryItem: Schema.UserProfileRoleHistoryItem;
        Country: Schema.Country;
        Gender: Schema.Gender;
        Language: Schema.Language;
        Notification: Schema.Notification;
        NotificationContext: Schema.NotificationContext;
        Channel: Schema.Channel;
        ChannelMetadata: Schema.ChannelMetadata;
        BgChannelStatus: Schema.BgChannelStatus;
        ChannelInvitation: Schema.ChannelInvitation;
        DeclineChannelInvitationReason: Schema.DeclineChannelInvitationReason;
        ChannelMessage: Schema.ChannelMessage;
        ChannelMessageMetadata: Schema.ChannelMessageMetadata;
        ChannelMessageStatus: Schema.ChannelMessageStatus;
        Contact: Schema.Contact;
        ContactMetadata: Schema.ContactMetadata;
        ContactType: Schema.ContactType;
        ChannelParticipant: Schema.ChannelParticipant;
        BgChannelParticipantUserInfo: Schema.BgChannelParticipantUserInfo;
        UserListItem: Schema.UserListItem;
        EducationLevel: Schema.EducationLevel;
        EndorsementWithTypes: Schema.EndorsementWithTypes;
        ModerationConcern: Schema.ModerationConcern;
        ContentTagType: Schema.ContentTagType;
        Group: Schema.Group;
        AppliedGroupRule: Schema.AppliedGroupRule;
        GroupRuleBaseConfig: Schema.GroupRuleBaseConfig;
        GroupCms: Schema.GroupCms;
        GroupCmsOnboarding: Schema.GroupCmsOnboarding;
        Pronoun: Schema.Pronoun;
        UserCms: Schema.UserCms;
        UserInbox: Schema.UserInbox;
        ChannelInbox: Schema.ChannelInbox;
        ChannelInboxItemMessage: Schema.ChannelInboxItemMessage;
        ChannelInboxItemInvitation: Schema.ChannelInboxItemInvitation;
        AdminTask: Schema.AdminTask;
        AdminTaskDef: Schema.AdminTaskDef;
        AdminTaskArgDef: Schema.AdminTaskArgDef;
        ChannelListItem: Schema.ChannelListItem;
        ErrorCodeOption: Schema.ErrorCodeOption;
        IndonesianCity: Schema.IndonesianCity;
        IndonesianProvince: Schema.IndonesianProvince;
        IqlaaJordanianDistrict: Schema.IqlaaJordanianDistrict;
        IqlaaJordanianGovernorate: Schema.IqlaaJordanianGovernorate;
        MastercardBank: Schema.MastercardBank;
        Brand: Schema.Brand;
        PurchaseOrderItem: Schema.PurchaseOrderItem;
        PurchaseOrder: Schema.PurchaseOrder;
        ShoppingCartItem: Schema.ShoppingCartItem;
        ShoppingCart: Schema.ShoppingCart;
        WalletItem: Schema.WalletItem;
        WalletItemTransferRecipientInfo: Schema.WalletItemTransferRecipientInfo;
        WalletItemTransfer: Schema.WalletItemTransfer;
        GiftCardProduct: Schema.GiftCardProduct;
        GiftCardDenomination: Schema.GiftCardDenomination;
        Wallet: Schema.Wallet;
        WalletServiceRecord: Schema.WalletServiceRecord;
        MarketplaceServiceRecord: Schema.MarketplaceServiceRecord;
        ProductCategory: Schema.ProductCategory;
        UserSearch: Schema.UserSearch;
        UserSearchFilter: Schema.UserSearchFilter;
        UserSearchRunInfo: Schema.UserSearchRunInfo;
        UserWithScore: Schema.UserWithScore;
        ServiceRequest: Schema.ServiceRequest;
        ContactListItem: Schema.ContactListItem;
        SidMultiStepAction: Schema.SidMultiStepAction;
        MultiStepActionError: Schema.MultiStepActionError;
        SidMultiStepActionProgress: Schema.SidMultiStepActionProgress;
        MyUser: Schema.MyUser;
        ReportUserReason: Schema.ReportUserReason;
        Training: Schema.Training;
        TrainingContentPage: Schema.TrainingContentPage;
        TrainingSession: Schema.TrainingSession;
        TrainingSessionCompletionInfo: Schema.TrainingSessionCompletionInfo;
        UserAuthResponse: Schema.UserAuthResponse;
        ContentTag: Schema.ContentTag;
        SupportChannelConfig: Schema.SupportChannelConfig;
        NotificationTemplate: Schema.NotificationTemplate;
        ContentStatus: Schema.ContentStatus;
        BgChannelChangedEvent: Schema.BgChannelChangedEvent;
        ObjectChangedEvent: Schema.ObjectChangedEvent;
        BaseModel: Schema.BaseModel;
    };
    unions: {};
    interfaces: {
        BaseModelMetadata: Schema.BaseModelMetadata;
        IGroupMembership: Schema.IGroupMembership;
    };
    scalarNamesUnion: 'DateTimeISO' | 'Long' | 'Int' | 'ID' | 'String' | 'Boolean' | 'Float';
    scalars: {
        DateTimeISO: Schema.DateTimeISO;
        Long: Schema.Long;
        Int: Schema.Int;
        ID: Schema.ID;
        String: Schema.String;
        Boolean: Schema.Boolean;
        Float: Schema.Float;
    };
    scalarRegistry: $Scalars;
    extensions: $$Utilities.GlobalRegistry.TypeExtensions;
}
