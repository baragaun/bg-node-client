import type * as $$Utilities from 'graffle/utilities-for-generated';
export interface $Document<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    query?: Record<string, Query<_$Scalars>>;
    mutation?: Record<string, Mutation<_$Scalars>>;
}
export interface Query<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    /**
     * Select the `doesUserExist` field on the `Query` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    doesUserExist?: Query.doesUserExist<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.doesUserExist<_$Scalars>>;
    /**
     * Select the `findUserById` field on the `Query` object. Its type is `User` (a `OutputObject` kind of type).
     */
    findUserById?: Query.findUserById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserById<_$Scalars>>;
    /**
     * Select the `findUserByIdent` field on the `Query` object. Its type is `User` (a `OutputObject` kind of type).
     */
    findUserByIdent?: Query.findUserByIdent<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserByIdent<_$Scalars>>;
    /**
     * Select the `isUserIdentAvailable` field on the `Query` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isUserIdentAvailable?: Query.isUserIdentAvailable<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.isUserIdentAvailable<_$Scalars>>;
    /**
     * Select the `findUsers` field on the `Query` object. Its type is `UserListItem` (a `OutputObject` kind of type).
     */
    findUsers?: Query.findUsers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUsers<_$Scalars>>;
    /**
     * Select the `findUserDeviceById` field on the `Query` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    findUserDeviceById?: Query.findUserDeviceById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserDeviceById<_$Scalars>>;
    /**
     * Select the `findUserDevices` field on the `Query` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    findUserDevices?: Query.findUserDevices$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserDevices<_$Scalars>>;
    /**
     * Select the `findMyUserDevices` field on the `Query` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    findMyUserDevices?: Query.findMyUserDevices$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyUserDevices<_$Scalars>>;
    /**
     * Select the `findCompanyStages` field on the `Query` object. Its type is `CompanyStage` (a `OutputObject` kind of type).
     */
    findCompanyStages?: Query.findCompanyStages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findCompanyStages<_$Scalars>>;
    /**
     * Select the `findCompanyTypes` field on the `Query` object. Its type is `CompanyType` (a `OutputObject` kind of type).
     */
    findCompanyTypes?: Query.findCompanyTypes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findCompanyTypes<_$Scalars>>;
    /**
     * Select the `findEducationLevels` field on the `Query` object. Its type is `EducationLevel` (a `OutputObject` kind of type).
     */
    findEducationLevels?: Query.findEducationLevels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findEducationLevels<_$Scalars>>;
    /**
     * Select the `findExpertises` field on the `Query` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    findExpertises?: Query.findExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findExpertises<_$Scalars>>;
    /**
     * Select the `findGenders` field on the `Query` object. Its type is `Gender` (a `OutputObject` kind of type).
     */
    findGenders?: Query.findGenders$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGenders<_$Scalars>>;
    /**
     * Select the `findPronouns` field on the `Query` object. Its type is `Pronoun` (a `OutputObject` kind of type).
     */
    findPronouns?: Query.findPronouns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findPronouns<_$Scalars>>;
    /**
     * Select the `findUserCmsByUserId` field on the `Query` object. Its type is `UserCms` (a `OutputObject` kind of type).
     */
    findUserCmsByUserId?: Query.findUserCmsByUserId<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserCmsByUserId<_$Scalars>>;
    /**
     * Select the `myInbox` field on the `Query` object. Its type is `UserInbox` (a `OutputObject` kind of type).
     */
    myInbox?: Query.myInbox$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.myInbox<_$Scalars>>;
    /**
     * Select the `findMyInbox` field on the `Query` object. Its type is `UserInbox` (a `OutputObject` kind of type).
     */
    findMyInbox?: Query.findMyInbox$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyInbox<_$Scalars>>;
    /**
     * Select the `findAdminTaskById` field on the `Query` object. Its type is `AdminTask` (a `OutputObject` kind of type).
     */
    findAdminTaskById?: Query.findAdminTaskById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findAdminTaskById<_$Scalars>>;
    /**
     * Select the `findAdminTaskDefs` field on the `Query` object. Its type is `AdminTaskDef` (a `OutputObject` kind of type).
     */
    findAdminTaskDefs?: Query.findAdminTaskDefs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findAdminTaskDefs<_$Scalars>>;
    /**
     * Select the `findUploadedAssetById` field on the `Query` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    findUploadedAssetById?: Query.findUploadedAssetById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUploadedAssetById<_$Scalars>>;
    /**
     * Select the `findUploadedAssets` field on the `Query` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    findUploadedAssets?: Query.findUploadedAssets$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUploadedAssets<_$Scalars>>;
    /**
     * Select the `findUploadedAssetsForUser` field on the `Query` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    findUploadedAssetsForUser?: Query.findUploadedAssetsForUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUploadedAssetsForUser<_$Scalars>>;
    /**
     * Select the `findChannelInvitationById` field on the `Query` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    findChannelInvitationById?: Query.findChannelInvitationById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelInvitationById<_$Scalars>>;
    /**
     * Select the `findChannelInvitationsBetweenUsers` field on the `Query` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    findChannelInvitationsBetweenUsers?: Query.findChannelInvitationsBetweenUsers<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelInvitationsBetweenUsers<_$Scalars>>;
    /**
     * Select the `findChannelInvitationsForUser` field on the `Query` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    findChannelInvitationsForUser?: Query.findChannelInvitationsForUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelInvitationsForUser<_$Scalars>>;
    /**
     * Select the `myChannelInvitations` field on the `Query` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    myChannelInvitations?: Query.myChannelInvitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.myChannelInvitations<_$Scalars>>;
    /**
     * Select the `findPendingChannelInvitationsForUser` field on the `Query` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    findPendingChannelInvitationsForUser?: Query.findPendingChannelInvitationsForUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findPendingChannelInvitationsForUser<_$Scalars>>;
    /**
     * Select the `findChannelById` field on the `Query` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    findChannelById?: Query.findChannelById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelById<_$Scalars>>;
    /**
     * Select the `findChannels` field on the `Query` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    findChannels?: Query.findChannels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannels<_$Scalars>>;
    /**
     * Select the `findChannelsForUser` field on the `Query` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    findChannelsForUser?: Query.findChannelsForUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelsForUser<_$Scalars>>;
    /**
     * Select the `find1On1Channel` field on the `Query` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    find1On1Channel?: Query.find1On1Channel<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.find1On1Channel<_$Scalars>>;
    /**
     * Select the `findMyChannels` field on the `Query` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    findMyChannels?: Query.findMyChannels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyChannels<_$Scalars>>;
    /**
     * Select the `findMyChannelsV2` field on the `Query` object. Its type is `ChannelListItem` (a `OutputObject` kind of type).
     */
    findMyChannelsV2?: Query.findMyChannelsV2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyChannelsV2<_$Scalars>>;
    /**
     * Select the `findChannelMessageById` field on the `Query` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    findChannelMessageById?: Query.findChannelMessageById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelMessageById<_$Scalars>>;
    /**
     * Select the `findChannelMessages` field on the `Query` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    findChannelMessages?: Query.findChannelMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelMessages<_$Scalars>>;
    /**
     * Select the `findChannelParticipants` field on the `Query` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    findChannelParticipants?: Query.findChannelParticipants$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelParticipants<_$Scalars>>;
    /**
     * Select the `findChannelParticipantsForChannel` field on the `Query` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    findChannelParticipantsForChannel?: Query.findChannelParticipantsForChannel<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelParticipantsForChannel<_$Scalars>>;
    /**
     * Select the `findChannelParticipantById` field on the `Query` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    findChannelParticipantById?: Query.findChannelParticipantById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findChannelParticipantById<_$Scalars>>;
    /**
     * Select the `findDeclineChannelInvitationReasons` field on the `Query` object. Its type is `DeclineChannelInvitationReason` (a `OutputObject` kind of type).
     */
    findDeclineChannelInvitationReasons?: Query.findDeclineChannelInvitationReasons$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findDeclineChannelInvitationReasons<_$Scalars>>;
    /**
     * Select the `findOptions` field on the `Query` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    findOptions?: Query.findOptions<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findOptions<_$Scalars>>;
    /**
     * Select the `findCountries` field on the `Query` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    findCountries?: Query.findCountries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findCountries<_$Scalars>>;
    /**
     * Select the `findErrorCodes` field on the `Query` object. Its type is `ErrorCodeOption` (a `OutputObject` kind of type).
     */
    findErrorCodes?: Query.findErrorCodes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findErrorCodes<_$Scalars>>;
    /**
     * Select the `findIndustries` field on the `Query` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    findIndustries?: Query.findIndustries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findIndustries<_$Scalars>>;
    /**
     * Select the `findLanguages` field on the `Query` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    findLanguages?: Query.findLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findLanguages<_$Scalars>>;
    /**
     * Select the `apiVersion` field on the `Query` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    apiVersion?: Query.apiVersion$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.apiVersion<_$Scalars>>;
    /**
     * Select the `findGroupCmsByGroupIdent` field on the `Query` object. Its type is `GroupCms` (a `OutputObject` kind of type).
     */
    findGroupCmsByGroupIdent?: Query.findGroupCmsByGroupIdent<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupCmsByGroupIdent<_$Scalars>>;
    /**
     * Select the `findGroupCmsByGroupId` field on the `Query` object. Its type is `GroupCms` (a `OutputObject` kind of type).
     */
    findGroupCmsByGroupId?: Query.findGroupCmsByGroupId<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupCmsByGroupId<_$Scalars>>;
    /**
     * Select the `findGroupCmsById` field on the `Query` object. Its type is `GroupCms` (a `OutputObject` kind of type).
     */
    findGroupCmsById?: Query.findGroupCmsById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupCmsById<_$Scalars>>;
    /**
     * Select the `findGroupMembershipById` field on the `Query` object. Its type is `GroupMembership` (a `OutputObject` kind of type).
     */
    findGroupMembershipById?: Query.findGroupMembershipById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupMembershipById<_$Scalars>>;
    /**
     * Select the `myGroupMemberships` field on the `Query` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    myGroupMemberships?: Query.myGroupMemberships$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.myGroupMemberships<_$Scalars>>;
    /**
     * Select the `findGroupMemberships` field on the `Query` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    findGroupMemberships?: Query.findGroupMemberships$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupMemberships<_$Scalars>>;
    /**
     * Select the `findGroupById` field on the `Query` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    findGroupById?: Query.findGroupById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupById<_$Scalars>>;
    /**
     * Select the `findGroupByIdent` field on the `Query` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    findGroupByIdent?: Query.findGroupByIdent<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroupByIdent<_$Scalars>>;
    /**
     * Select the `findGroups` field on the `Query` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    findGroups?: Query.findGroups$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGroups<_$Scalars>>;
    /**
     * Select the `findIndonesianCities` field on the `Query` object. Its type is `IndonesianCity` (a `OutputObject` kind of type).
     */
    findIndonesianCities?: Query.findIndonesianCities$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findIndonesianCities<_$Scalars>>;
    /**
     * Select the `findIndonesianProvinces` field on the `Query` object. Its type is `IndonesianProvince` (a `OutputObject` kind of type).
     */
    findIndonesianProvinces?: Query.findIndonesianProvinces$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findIndonesianProvinces<_$Scalars>>;
    /**
     * Select the `findIqlaaJordanianDistricts` field on the `Query` object. Its type is `IqlaaJordanianDistrict` (a `OutputObject` kind of type).
     */
    findIqlaaJordanianDistricts?: Query.findIqlaaJordanianDistricts$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findIqlaaJordanianDistricts<_$Scalars>>;
    /**
     * Select the `findIqlaaJordanianGovernorates` field on the `Query` object. Its type is `IqlaaJordanianGovernorate` (a `OutputObject` kind of type).
     */
    findIqlaaJordanianGovernorates?: Query.findIqlaaJordanianGovernorates$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findIqlaaJordanianGovernorates<_$Scalars>>;
    /**
     * Select the `findMastercardBanks` field on the `Query` object. Its type is `MastercardBank` (a `OutputObject` kind of type).
     */
    findMastercardBanks?: Query.findMastercardBanks$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMastercardBanks<_$Scalars>>;
    /**
     * Select the `userWillReceiveWelcomeMessage` field on the `Query` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    userWillReceiveWelcomeMessage?: Query.userWillReceiveWelcomeMessage<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.userWillReceiveWelcomeMessage<_$Scalars>>;
    /**
     * Select the `findBrands` field on the `Query` object. Its type is `Brand` (a `OutputObject` kind of type).
     */
    findBrands?: Query.findBrands$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findBrands<_$Scalars>>;
    /**
     * Select the `findPurchaseOrderItems` field on the `Query` object. Its type is `PurchaseOrderItem` (a `OutputObject` kind of type).
     */
    findPurchaseOrderItems?: Query.findPurchaseOrderItems$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findPurchaseOrderItems<_$Scalars>>;
    /**
     * Select the `findPurchaseOrderById` field on the `Query` object. Its type is `PurchaseOrder` (a `OutputObject` kind of type).
     */
    findPurchaseOrderById?: Query.findPurchaseOrderById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findPurchaseOrderById<_$Scalars>>;
    /**
     * Select the `findPurchaseOrders` field on the `Query` object. Its type is `PurchaseOrder` (a `OutputObject` kind of type).
     */
    findPurchaseOrders?: Query.findPurchaseOrders$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findPurchaseOrders<_$Scalars>>;
    /**
     * Select the `findShoppingCartItemById` field on the `Query` object. Its type is `ShoppingCartItem` (a `OutputObject` kind of type).
     */
    findShoppingCartItemById?: Query.findShoppingCartItemById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findShoppingCartItemById<_$Scalars>>;
    /**
     * Select the `findShoppingCartItems` field on the `Query` object. Its type is `ShoppingCartItem` (a `OutputObject` kind of type).
     */
    findShoppingCartItems?: Query.findShoppingCartItems$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findShoppingCartItems<_$Scalars>>;
    /**
     * Select the `findShoppingCarts` field on the `Query` object. Its type is `ShoppingCart` (a `OutputObject` kind of type).
     */
    findShoppingCarts?: Query.findShoppingCarts$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findShoppingCarts<_$Scalars>>;
    /**
     * Select the `findMyShoppingCart` field on the `Query` object. Its type is `ShoppingCart` (a `OutputObject` kind of type).
     */
    findMyShoppingCart?: Query.findMyShoppingCart$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyShoppingCart<_$Scalars>>;
    /**
     * Select the `findWalletItemById` field on the `Query` object. Its type is `WalletItem` (a `OutputObject` kind of type).
     */
    findWalletItemById?: Query.findWalletItemById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletItemById<_$Scalars>>;
    /**
     * Select the `findWalletItemByTransferSlug` field on the `Query` object. Its type is `WalletItem` (a `OutputObject` kind of type).
     */
    findWalletItemByTransferSlug?: Query.findWalletItemByTransferSlug<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletItemByTransferSlug<_$Scalars>>;
    /**
     * Select the `findWalletItems` field on the `Query` object. Its type is `WalletItem` (a `OutputObject` kind of type).
     */
    findWalletItems?: Query.findWalletItems$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletItems<_$Scalars>>;
    /**
     * Select the `findWalletItemTransferById` field on the `Query` object. Its type is `WalletItemTransfer` (a `OutputObject` kind of type).
     */
    findWalletItemTransferById?: Query.findWalletItemTransferById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletItemTransferById<_$Scalars>>;
    /**
     * Select the `findWalletItemTransferByTransferSlug` field on the `Query` object. Its type is `WalletItemTransfer` (a `OutputObject` kind of type).
     */
    findWalletItemTransferByTransferSlug?: Query.findWalletItemTransferByTransferSlug<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletItemTransferByTransferSlug<_$Scalars>>;
    /**
     * Select the `findWalletItemTransfers` field on the `Query` object. Its type is `WalletItemTransfer` (a `OutputObject` kind of type).
     */
    findWalletItemTransfers?: Query.findWalletItemTransfers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletItemTransfers<_$Scalars>>;
    /**
     * Select the `findWallets` field on the `Query` object. Its type is `Wallet` (a `OutputObject` kind of type).
     */
    findWallets?: Query.findWallets$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWallets<_$Scalars>>;
    /**
     * Select the `findMyWallet` field on the `Query` object. Its type is `Wallet` (a `OutputObject` kind of type).
     */
    findMyWallet?: Query.findMyWallet$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyWallet<_$Scalars>>;
    /**
     * Select the `findWalletServiceRecord` field on the `Query` object. Its type is `WalletServiceRecord` (a `OutputObject` kind of type).
     */
    findWalletServiceRecord?: Query.findWalletServiceRecord$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findWalletServiceRecord<_$Scalars>>;
    /**
     * Select the `findGiftCardProducts` field on the `Query` object. Its type is `GiftCardProduct` (a `OutputObject` kind of type).
     */
    findGiftCardProducts?: Query.findGiftCardProducts$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findGiftCardProducts<_$Scalars>>;
    /**
     * Select the `findMarketplaceServiceRecord` field on the `Query` object. Its type is `MarketplaceServiceRecord` (a `OutputObject` kind of type).
     */
    findMarketplaceServiceRecord?: Query.findMarketplaceServiceRecord$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMarketplaceServiceRecord<_$Scalars>>;
    /**
     * Select the `findProductCategories` field on the `Query` object. Its type is `ProductCategory` (a `OutputObject` kind of type).
     */
    findProductCategories?: Query.findProductCategories$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findProductCategories<_$Scalars>>;
    /**
     * Select the `findUserSearchById` field on the `Query` object. Its type is `UserSearch` (a `OutputObject` kind of type).
     */
    findUserSearchById?: Query.findUserSearchById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserSearchById<_$Scalars>>;
    /**
     * Select the `findUserSearches` field on the `Query` object. Its type is `UserSearch` (a `OutputObject` kind of type).
     */
    findUserSearches?: Query.findUserSearches$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserSearches<_$Scalars>>;
    /**
     * Select the `findUserSearchResults` field on the `Query` object. Its type is `UserWithScore` (a `OutputObject` kind of type).
     */
    findUserSearchResults?: Query.findUserSearchResults<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findUserSearchResults<_$Scalars>>;
    /**
     * Select the `myUserSearches` field on the `Query` object. Its type is `UserSearch` (a `OutputObject` kind of type).
     */
    myUserSearches?: Query.myUserSearches$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.myUserSearches<_$Scalars>>;
    /**
     * Select the `findServiceRequestById` field on the `Query` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    findServiceRequestById?: Query.findServiceRequestById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findServiceRequestById<_$Scalars>>;
    /**
     * Select the `findContactById` field on the `Query` object. Its type is `Contact` (a `OutputObject` kind of type).
     */
    findContactById?: Query.findContactById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findContactById<_$Scalars>>;
    /**
     * Select the `findContact` field on the `Query` object. Its type is `Contact` (a `OutputObject` kind of type).
     */
    findContact?: Query.findContact<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findContact<_$Scalars>>;
    /**
     * Select the `findContacts` field on the `Query` object. Its type is `ContactListItem` (a `OutputObject` kind of type).
     */
    findContacts?: Query.findContacts$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findContacts<_$Scalars>>;
    /**
     * Select the `findMyActiveMultiStepActions` field on the `Query` object. Its type is `SidMultiStepAction` (a `OutputObject` kind of type).
     */
    findMyActiveMultiStepActions?: Query.findMyActiveMultiStepActions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyActiveMultiStepActions<_$Scalars>>;
    /**
     * Select the `findMyActiveMultiStepAction` field on the `Query` object. Its type is `SidMultiStepAction` (a `OutputObject` kind of type).
     */
    findMyActiveMultiStepAction?: Query.findMyActiveMultiStepAction$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyActiveMultiStepAction<_$Scalars>>;
    /**
     * Select the `getMultiStepActionProgress` field on the `Query` object. Its type is `SidMultiStepActionProgress` (a `OutputObject` kind of type).
     */
    getMultiStepActionProgress?: Query.getMultiStepActionProgress<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.getMultiStepActionProgress<_$Scalars>>;
    /**
     * Select the `findAvailableUserHandle` field on the `Query` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    findAvailableUserHandle?: Query.findAvailableUserHandle<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findAvailableUserHandle<_$Scalars>>;
    /**
     * Select the `getMyUser` field on the `Query` object. Its type is `User` (a `OutputObject` kind of type).
     */
    getMyUser?: Query.getMyUser$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.getMyUser<_$Scalars>>;
    /**
     * Select the `findMyUser` field on the `Query` object. Its type is `MyUser` (a `OutputObject` kind of type).
     */
    findMyUser?: Query.findMyUser$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyUser<_$Scalars>>;
    /**
     * Select the `getMyBlockedUsers` field on the `Query` object. Its type is `User` (a `OutputObject` kind of type).
     */
    getMyBlockedUsers?: Query.getMyBlockedUsers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.getMyBlockedUsers<_$Scalars>>;
    /**
     * Select the `findMyBlockedUsers` field on the `Query` object. Its type is `User` (a `OutputObject` kind of type).
     */
    findMyBlockedUsers?: Query.findMyBlockedUsers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findMyBlockedUsers<_$Scalars>>;
    /**
     * Select the `verifyMyPassword` field on the `Query` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    verifyMyPassword?: Query.verifyMyPassword<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.verifyMyPassword<_$Scalars>>;
    /**
     * Select the `findReportUserReasons` field on the `Query` object. Its type is `ReportUserReason` (a `OutputObject` kind of type).
     */
    findReportUserReasons?: Query.findReportUserReasons$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findReportUserReasons<_$Scalars>>;
    /**
     * Select the `findTrainingsForMe` field on the `Query` object. Its type is `Training` (a `OutputObject` kind of type).
     */
    findTrainingsForMe?: Query.findTrainingsForMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findTrainingsForMe<_$Scalars>>;
    /**
     * Select the `findTrainingsForUser` field on the `Query` object. Its type is `Training` (a `OutputObject` kind of type).
     */
    findTrainingsForUser?: Query.findTrainingsForUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findTrainingsForUser<_$Scalars>>;
    /**
     * Select the `findTrainingById` field on the `Query` object. Its type is `Training` (a `OutputObject` kind of type).
     */
    findTrainingById?: Query.findTrainingById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findTrainingById<_$Scalars>>;
    /**
     * Select the `findTrainingSessionById` field on the `Query` object. Its type is `TrainingSession` (a `OutputObject` kind of type).
     */
    findTrainingSessionById?: Query.findTrainingSessionById<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findTrainingSessionById<_$Scalars>>;
    /**
     * Select the `findTrainingSessionsForMe` field on the `Query` object. Its type is `TrainingSession` (a `OutputObject` kind of type).
     */
    findTrainingSessionsForMe?: Query.findTrainingSessionsForMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findTrainingSessionsForMe<_$Scalars>>;
    /**
     * Select the `findTrainingSessionsByTrainingId` field on the `Query` object. Its type is `TrainingSession` (a `OutputObject` kind of type).
     */
    findTrainingSessionsByTrainingId?: Query.findTrainingSessionsByTrainingId<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findTrainingSessionsByTrainingId<_$Scalars>>;
    /**
     * Select the `findLatestTrainingSessionForMe` field on the `Query` object. Its type is `TrainingSession` (a `OutputObject` kind of type).
     */
    findLatestTrainingSessionForMe?: Query.findLatestTrainingSessionForMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Query.findLatestTrainingSessionForMe<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Query$FragmentInline<_$Scalars> | Query$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Query$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Query<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Query {
    type doesUserExist<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = doesUserExist$SelectionSet<_$Scalars>;
    interface doesUserExist$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `doesUserExist` field. All arguments are required so you must include this.
         */
        $: doesUserExist$Arguments<_$Scalars>;
    }
    interface doesUserExist$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $identType: $NamedTypes.$UserIdentType;
        ident: string;
    }
    /**
     * This is the "expanded" version of the `doesUserExist` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type doesUserExist$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<doesUserExist$SelectionSet<_$Scalars>>;
    type findUserById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserById$SelectionSet<_$Scalars>;
    interface findUserById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
        /**
         * Arguments for `findUserById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findUserById$Arguments<_$Scalars>;
    }
    interface findUserById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findUserById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserById$SelectionSet<_$Scalars>>;
    type findUserByIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserByIdent$SelectionSet<_$Scalars>;
    interface findUserByIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
        /**
         * Arguments for `findUserByIdent` field. Some (1/3) arguments are required so you must include this.
         */
        $: findUserByIdent$Arguments<_$Scalars>;
    }
    interface findUserByIdent$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindUserByIdentOptions<_$Scalars> | undefined | null;
        $identType?: $NamedTypes.$UserIdentType | undefined | null;
        ident: string;
    }
    /**
     * This is the "expanded" version of the `findUserByIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserByIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserByIdent$SelectionSet<_$Scalars>>;
    type isUserIdentAvailable<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = isUserIdentAvailable$SelectionSet<_$Scalars>;
    interface isUserIdentAvailable$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `isUserIdentAvailable` field. Some (1/2) arguments are required so you must include this.
         */
        $: isUserIdentAvailable$Arguments<_$Scalars>;
    }
    interface isUserIdentAvailable$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $identType?: $NamedTypes.$UserIdentType | undefined | null;
        ident: string;
    }
    /**
     * This is the "expanded" version of the `isUserIdentAvailable` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isUserIdentAvailable$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<isUserIdentAvailable$SelectionSet<_$Scalars>>;
    type findUsers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUsers$SelectionSet<_$Scalars>;
    interface findUsers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserListItem<_$Scalars> {
        /**
         * Arguments for `findUsers` field. No arguments are required so you may omit this.
         */
        $?: findUsers$Arguments<_$Scalars>;
    }
    interface findUsers$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$UserInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$UserListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findUsers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUsers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUsers$SelectionSet<_$Scalars>>;
    type findUserDeviceById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserDeviceById$SelectionSet<_$Scalars>;
    interface findUserDeviceById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
        /**
         * Arguments for `findUserDeviceById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findUserDeviceById$Arguments<_$Scalars>;
    }
    interface findUserDeviceById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findUserDeviceById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserDeviceById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserDeviceById$SelectionSet<_$Scalars>>;
    type findUserDevices<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserDevices$SelectionSet<_$Scalars>;
    interface findUserDevices$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
        /**
         * Arguments for `findUserDevices` field. No arguments are required so you may omit this.
         */
        $?: findUserDevices$Arguments<_$Scalars>;
    }
    interface findUserDevices$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$UserDeviceInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$UserDeviceListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findUserDevices` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserDevices$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserDevices$SelectionSet<_$Scalars>>;
    type findMyUserDevices<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyUserDevices$SelectionSet<_$Scalars>;
    interface findMyUserDevices$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
        /**
         * Arguments for `findMyUserDevices` field. No arguments are required so you may omit this.
         */
        $?: findMyUserDevices$Arguments<_$Scalars>;
    }
    interface findMyUserDevices$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findMyUserDevices` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyUserDevices$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyUserDevices$SelectionSet<_$Scalars>>;
    type findCompanyStages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findCompanyStages$SelectionSet<_$Scalars>;
    interface findCompanyStages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$CompanyStage<_$Scalars> {
        /**
         * Arguments for `findCompanyStages` field. No arguments are required so you may omit this.
         */
        $?: findCompanyStages$Arguments<_$Scalars>;
    }
    interface findCompanyStages$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findCompanyStages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findCompanyStages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findCompanyStages$SelectionSet<_$Scalars>>;
    type findCompanyTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findCompanyTypes$SelectionSet<_$Scalars>;
    interface findCompanyTypes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$CompanyType<_$Scalars> {
        /**
         * Arguments for `findCompanyTypes` field. No arguments are required so you may omit this.
         */
        $?: findCompanyTypes$Arguments<_$Scalars>;
    }
    interface findCompanyTypes$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findCompanyTypes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findCompanyTypes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findCompanyTypes$SelectionSet<_$Scalars>>;
    type findEducationLevels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findEducationLevels$SelectionSet<_$Scalars>;
    interface findEducationLevels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EducationLevel<_$Scalars> {
        /**
         * Arguments for `findEducationLevels` field. No arguments are required so you may omit this.
         */
        $?: findEducationLevels$Arguments<_$Scalars>;
    }
    interface findEducationLevels$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findEducationLevels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findEducationLevels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findEducationLevels$SelectionSet<_$Scalars>>;
    type findExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findExpertises$SelectionSet<_$Scalars>;
    interface findExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
        /**
         * Arguments for `findExpertises` field. No arguments are required so you may omit this.
         */
        $?: findExpertises$Arguments<_$Scalars>;
    }
    interface findExpertises$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
        isParent?: boolean | undefined | null;
        parentTextId?: string | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findExpertises$SelectionSet<_$Scalars>>;
    type findGenders<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGenders$SelectionSet<_$Scalars>;
    interface findGenders$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Gender<_$Scalars> {
        /**
         * Arguments for `findGenders` field. No arguments are required so you may omit this.
         */
        $?: findGenders$Arguments<_$Scalars>;
    }
    interface findGenders$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findGenders` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGenders$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGenders$SelectionSet<_$Scalars>>;
    type findPronouns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findPronouns$SelectionSet<_$Scalars>;
    interface findPronouns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Pronoun<_$Scalars> {
        /**
         * Arguments for `findPronouns` field. No arguments are required so you may omit this.
         */
        $?: findPronouns$Arguments<_$Scalars>;
    }
    interface findPronouns$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findPronouns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findPronouns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findPronouns$SelectionSet<_$Scalars>>;
    type findUserCmsByUserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserCmsByUserId$SelectionSet<_$Scalars>;
    interface findUserCmsByUserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserCms<_$Scalars> {
        /**
         * Arguments for `findUserCmsByUserId` field. All arguments are required so you must include this.
         */
        $: findUserCmsByUserId$Arguments<_$Scalars>;
    }
    interface findUserCmsByUserId$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        userId: string;
    }
    /**
     * This is the "expanded" version of the `findUserCmsByUserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserCmsByUserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserCmsByUserId$SelectionSet<_$Scalars>>;
    type myInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myInbox$SelectionSet<_$Scalars>;
    interface myInbox$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserInbox<_$Scalars> {
        /**
         * Arguments for `myInbox` field. No arguments are required so you may omit this.
         */
        $?: myInbox$Arguments<_$Scalars>;
    }
    interface myInbox$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        refresh?: boolean | undefined | null;
    }
    /**
     * This is the "expanded" version of the `myInbox` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myInbox$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myInbox$SelectionSet<_$Scalars>>;
    type findMyInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyInbox$SelectionSet<_$Scalars>;
    interface findMyInbox$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserInbox<_$Scalars> {
        /**
         * Arguments for `findMyInbox` field. No arguments are required so you may omit this.
         */
        $?: findMyInbox$Arguments<_$Scalars>;
    }
    interface findMyInbox$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        refresh?: boolean | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findMyInbox` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyInbox$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyInbox$SelectionSet<_$Scalars>>;
    type findAdminTaskById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findAdminTaskById$SelectionSet<_$Scalars>;
    interface findAdminTaskById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AdminTask<_$Scalars> {
        /**
         * Arguments for `findAdminTaskById` field. All arguments are required so you must include this.
         */
        $: findAdminTaskById$Arguments<_$Scalars>;
    }
    interface findAdminTaskById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        adminTaskId: string;
    }
    /**
     * This is the "expanded" version of the `findAdminTaskById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findAdminTaskById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findAdminTaskById$SelectionSet<_$Scalars>>;
    type findAdminTaskDefs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findAdminTaskDefs$SelectionSet<_$Scalars>;
    interface findAdminTaskDefs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AdminTaskDef<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findAdminTaskDefs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findAdminTaskDefs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findAdminTaskDefs$SelectionSet<_$Scalars>>;
    type findUploadedAssetById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUploadedAssetById$SelectionSet<_$Scalars>;
    interface findUploadedAssetById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
        /**
         * Arguments for `findUploadedAssetById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findUploadedAssetById$Arguments<_$Scalars>;
    }
    interface findUploadedAssetById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findUploadedAssetById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUploadedAssetById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUploadedAssetById$SelectionSet<_$Scalars>>;
    type findUploadedAssets<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUploadedAssets$SelectionSet<_$Scalars>;
    interface findUploadedAssets$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
        /**
         * Arguments for `findUploadedAssets` field. No arguments are required so you may omit this.
         */
        $?: findUploadedAssets$Arguments<_$Scalars>;
    }
    interface findUploadedAssets$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$UploadedAssetInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$UploadedAssetListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findUploadedAssets` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUploadedAssets$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUploadedAssets$SelectionSet<_$Scalars>>;
    type findUploadedAssetsForUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUploadedAssetsForUser$SelectionSet<_$Scalars>;
    interface findUploadedAssetsForUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
        /**
         * Arguments for `findUploadedAssetsForUser` field. Some (1/2) arguments are required so you must include this.
         */
        $: findUploadedAssetsForUser$Arguments<_$Scalars>;
    }
    interface findUploadedAssetsForUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `findUploadedAssetsForUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUploadedAssetsForUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUploadedAssetsForUser$SelectionSet<_$Scalars>>;
    type findChannelInvitationById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelInvitationById$SelectionSet<_$Scalars>;
    interface findChannelInvitationById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
        /**
         * Arguments for `findChannelInvitationById` field. All arguments are required so you must include this.
         */
        $: findChannelInvitationById$Arguments<_$Scalars>;
    }
    interface findChannelInvitationById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findChannelInvitationById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelInvitationById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelInvitationById$SelectionSet<_$Scalars>>;
    type findChannelInvitationsBetweenUsers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelInvitationsBetweenUsers$SelectionSet<_$Scalars>;
    interface findChannelInvitationsBetweenUsers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
        /**
         * Arguments for `findChannelInvitationsBetweenUsers` field. Some (1/4) arguments are required so you must include this.
         */
        $: findChannelInvitationsBetweenUsers$Arguments<_$Scalars>;
    }
    interface findChannelInvitationsBetweenUsers$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        onlyUnseen?: boolean | undefined | null;
        onlyPending?: boolean | undefined | null;
        userIds: Array<string | undefined | null>;
    }
    /**
     * This is the "expanded" version of the `findChannelInvitationsBetweenUsers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelInvitationsBetweenUsers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelInvitationsBetweenUsers$SelectionSet<_$Scalars>>;
    type findChannelInvitationsForUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelInvitationsForUser$SelectionSet<_$Scalars>;
    interface findChannelInvitationsForUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
        /**
         * Arguments for `findChannelInvitationsForUser` field. Some (1/5) arguments are required so you must include this.
         */
        $: findChannelInvitationsForUser$Arguments<_$Scalars>;
    }
    interface findChannelInvitationsForUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        onlyUnseen?: boolean | undefined | null;
        onlyPending?: boolean | undefined | null;
        $direction?: $NamedTypes.$ChannelInvitationDirection | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `findChannelInvitationsForUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelInvitationsForUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelInvitationsForUser$SelectionSet<_$Scalars>>;
    type myChannelInvitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myChannelInvitations$SelectionSet<_$Scalars>;
    interface myChannelInvitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
        /**
         * Arguments for `myChannelInvitations` field. No arguments are required so you may omit this.
         */
        $?: myChannelInvitations$Arguments<_$Scalars>;
    }
    interface myChannelInvitations$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        onlyUnseen?: boolean | undefined | null;
        onlyPending?: boolean | undefined | null;
        $direction?: $NamedTypes.$ChannelInvitationDirection | undefined | null;
    }
    /**
     * This is the "expanded" version of the `myChannelInvitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myChannelInvitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myChannelInvitations$SelectionSet<_$Scalars>>;
    type findPendingChannelInvitationsForUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findPendingChannelInvitationsForUser$SelectionSet<_$Scalars>;
    interface findPendingChannelInvitationsForUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
        /**
         * Arguments for `findPendingChannelInvitationsForUser` field. Some (1/2) arguments are required so you must include this.
         */
        $: findPendingChannelInvitationsForUser$Arguments<_$Scalars>;
    }
    interface findPendingChannelInvitationsForUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `findPendingChannelInvitationsForUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findPendingChannelInvitationsForUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findPendingChannelInvitationsForUser$SelectionSet<_$Scalars>>;
    type findChannelById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelById$SelectionSet<_$Scalars>;
    interface findChannelById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `findChannelById` field. All arguments are required so you must include this.
         */
        $: findChannelById$Arguments<_$Scalars>;
    }
    interface findChannelById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findChannelById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelById$SelectionSet<_$Scalars>>;
    type findChannels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannels$SelectionSet<_$Scalars>;
    interface findChannels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `findChannels` field. No arguments are required so you may omit this.
         */
        $?: findChannels$Arguments<_$Scalars>;
    }
    interface findChannels$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ChannelInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$ChannelListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findChannels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannels$SelectionSet<_$Scalars>>;
    type findChannelsForUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelsForUser$SelectionSet<_$Scalars>;
    interface findChannelsForUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `findChannelsForUser` field. Some (1/4) arguments are required so you must include this.
         */
        $: findChannelsForUser$Arguments<_$Scalars>;
    }
    interface findChannelsForUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        mustBeAccepted?: boolean | undefined | null;
        mustHaveMessages?: boolean | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `findChannelsForUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelsForUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelsForUser$SelectionSet<_$Scalars>>;
    type find1On1Channel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = find1On1Channel$SelectionSet<_$Scalars>;
    interface find1On1Channel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `find1On1Channel` field. All arguments are required so you must include this.
         */
        $: find1On1Channel$Arguments<_$Scalars>;
    }
    interface find1On1Channel$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        userIds: Array<string | undefined | null>;
    }
    /**
     * This is the "expanded" version of the `find1On1Channel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type find1On1Channel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<find1On1Channel$SelectionSet<_$Scalars>>;
    type findMyChannels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyChannels$SelectionSet<_$Scalars>;
    interface findMyChannels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `findMyChannels` field. No arguments are required so you may omit this.
         */
        $?: findMyChannels$Arguments<_$Scalars>;
    }
    interface findMyChannels$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findMyChannels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyChannels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyChannels$SelectionSet<_$Scalars>>;
    type findMyChannelsV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyChannelsV2$SelectionSet<_$Scalars>;
    interface findMyChannelsV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelListItem<_$Scalars> {
        /**
         * Arguments for `findMyChannelsV2` field. No arguments are required so you may omit this.
         */
        $?: findMyChannelsV2$Arguments<_$Scalars>;
    }
    interface findMyChannelsV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        addLatestMessage?: boolean | undefined | null;
        participantLimit?: number | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findMyChannelsV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyChannelsV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyChannelsV2$SelectionSet<_$Scalars>>;
    type findChannelMessageById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelMessageById$SelectionSet<_$Scalars>;
    interface findChannelMessageById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
        /**
         * Arguments for `findChannelMessageById` field. All arguments are required so you must include this.
         */
        $: findChannelMessageById$Arguments<_$Scalars>;
    }
    interface findChannelMessageById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findChannelMessageById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelMessageById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelMessageById$SelectionSet<_$Scalars>>;
    type findChannelMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelMessages$SelectionSet<_$Scalars>;
    interface findChannelMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
        /**
         * Arguments for `findChannelMessages` field. No arguments are required so you may omit this.
         */
        $?: findChannelMessages$Arguments<_$Scalars>;
    }
    interface findChannelMessages$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ChannelMessageInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$ChannelMessageListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findChannelMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelMessages$SelectionSet<_$Scalars>>;
    type findChannelParticipants<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelParticipants$SelectionSet<_$Scalars>;
    interface findChannelParticipants$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
        /**
         * Arguments for `findChannelParticipants` field. No arguments are required so you may omit this.
         */
        $?: findChannelParticipants$Arguments<_$Scalars>;
    }
    interface findChannelParticipants$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ChannelParticipantInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$ChannelParticipantListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findChannelParticipants` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelParticipants$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelParticipants$SelectionSet<_$Scalars>>;
    type findChannelParticipantsForChannel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelParticipantsForChannel$SelectionSet<_$Scalars>;
    interface findChannelParticipantsForChannel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
        /**
         * Arguments for `findChannelParticipantsForChannel` field. Some (1/2) arguments are required so you must include this.
         */
        $: findChannelParticipantsForChannel$Arguments<_$Scalars>;
    }
    interface findChannelParticipantsForChannel$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        match?: $NamedTypes.$ChannelParticipantInput<_$Scalars> | undefined | null;
        channelId: string;
    }
    /**
     * This is the "expanded" version of the `findChannelParticipantsForChannel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelParticipantsForChannel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelParticipantsForChannel$SelectionSet<_$Scalars>>;
    type findChannelParticipantById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findChannelParticipantById$SelectionSet<_$Scalars>;
    interface findChannelParticipantById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
        /**
         * Arguments for `findChannelParticipantById` field. All arguments are required so you must include this.
         */
        $: findChannelParticipantById$Arguments<_$Scalars>;
    }
    interface findChannelParticipantById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findChannelParticipantById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findChannelParticipantById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findChannelParticipantById$SelectionSet<_$Scalars>>;
    type findDeclineChannelInvitationReasons<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findDeclineChannelInvitationReasons$SelectionSet<_$Scalars>;
    interface findDeclineChannelInvitationReasons$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$DeclineChannelInvitationReason<_$Scalars> {
        /**
         * Arguments for `findDeclineChannelInvitationReasons` field. No arguments are required so you may omit this.
         */
        $?: findDeclineChannelInvitationReasons$Arguments<_$Scalars>;
    }
    interface findDeclineChannelInvitationReasons$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findDeclineChannelInvitationReasons` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findDeclineChannelInvitationReasons$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findDeclineChannelInvitationReasons$SelectionSet<_$Scalars>>;
    type findOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findOptions$SelectionSet<_$Scalars>;
    interface findOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
        /**
         * Arguments for `findOptions` field. Some (1/4) arguments are required so you must include this.
         */
        $: findOptions$Arguments<_$Scalars>;
    }
    interface findOptions$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
        isParent?: boolean | undefined | null;
        parentTextId?: string | undefined | null;
        $optionType: $NamedTypes.$OptionType;
    }
    /**
     * This is the "expanded" version of the `findOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findOptions$SelectionSet<_$Scalars>>;
    type findCountries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findCountries$SelectionSet<_$Scalars>;
    interface findCountries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
        /**
         * Arguments for `findCountries` field. No arguments are required so you may omit this.
         */
        $?: findCountries$Arguments<_$Scalars>;
    }
    interface findCountries$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findCountries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findCountries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findCountries$SelectionSet<_$Scalars>>;
    type findErrorCodes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findErrorCodes$SelectionSet<_$Scalars>;
    interface findErrorCodes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ErrorCodeOption<_$Scalars> {
        /**
         * Arguments for `findErrorCodes` field. No arguments are required so you may omit this.
         */
        $?: findErrorCodes$Arguments<_$Scalars>;
    }
    interface findErrorCodes$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findErrorCodes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findErrorCodes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findErrorCodes$SelectionSet<_$Scalars>>;
    type findIndustries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findIndustries$SelectionSet<_$Scalars>;
    interface findIndustries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
        /**
         * Arguments for `findIndustries` field. No arguments are required so you may omit this.
         */
        $?: findIndustries$Arguments<_$Scalars>;
    }
    interface findIndustries$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findIndustries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findIndustries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findIndustries$SelectionSet<_$Scalars>>;
    type findLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findLanguages$SelectionSet<_$Scalars>;
    interface findLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
        /**
         * Arguments for `findLanguages` field. No arguments are required so you may omit this.
         */
        $?: findLanguages$Arguments<_$Scalars>;
    }
    interface findLanguages$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findLanguages$SelectionSet<_$Scalars>>;
    type apiVersion<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | apiVersion$SelectionSet<_$Scalars>;
    interface apiVersion$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `apiVersion` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type apiVersion$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | apiVersion$SelectionSet<_$Scalars>>;
    type findGroupCmsByGroupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupCmsByGroupIdent$SelectionSet<_$Scalars>;
    interface findGroupCmsByGroupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupCms<_$Scalars> {
        /**
         * Arguments for `findGroupCmsByGroupIdent` field. All arguments are required so you must include this.
         */
        $: findGroupCmsByGroupIdent$Arguments<_$Scalars>;
    }
    interface findGroupCmsByGroupIdent$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        groupIdent: string;
    }
    /**
     * This is the "expanded" version of the `findGroupCmsByGroupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupCmsByGroupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupCmsByGroupIdent$SelectionSet<_$Scalars>>;
    type findGroupCmsByGroupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupCmsByGroupId$SelectionSet<_$Scalars>;
    interface findGroupCmsByGroupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupCms<_$Scalars> {
        /**
         * Arguments for `findGroupCmsByGroupId` field. All arguments are required so you must include this.
         */
        $: findGroupCmsByGroupId$Arguments<_$Scalars>;
    }
    interface findGroupCmsByGroupId$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        groupId: string;
    }
    /**
     * This is the "expanded" version of the `findGroupCmsByGroupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupCmsByGroupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupCmsByGroupId$SelectionSet<_$Scalars>>;
    type findGroupCmsById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupCmsById$SelectionSet<_$Scalars>;
    interface findGroupCmsById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupCms<_$Scalars> {
        /**
         * Arguments for `findGroupCmsById` field. All arguments are required so you must include this.
         */
        $: findGroupCmsById$Arguments<_$Scalars>;
    }
    interface findGroupCmsById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findGroupCmsById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupCmsById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupCmsById$SelectionSet<_$Scalars>>;
    type findGroupMembershipById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupMembershipById$SelectionSet<_$Scalars>;
    interface findGroupMembershipById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupMembership<_$Scalars> {
        /**
         * Arguments for `findGroupMembershipById` field. All arguments are required so you must include this.
         */
        $: findGroupMembershipById$Arguments<_$Scalars>;
    }
    interface findGroupMembershipById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findGroupMembershipById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupMembershipById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupMembershipById$SelectionSet<_$Scalars>>;
    type myGroupMemberships<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myGroupMemberships$SelectionSet<_$Scalars>;
    interface myGroupMemberships$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myGroupMemberships` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myGroupMemberships$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myGroupMemberships$SelectionSet<_$Scalars>>;
    type findGroupMemberships<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupMemberships$SelectionSet<_$Scalars>;
    interface findGroupMemberships$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
        /**
         * Arguments for `findGroupMemberships` field. No arguments are required so you may omit this.
         */
        $?: findGroupMemberships$Arguments<_$Scalars>;
    }
    interface findGroupMemberships$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$GroupMembershipInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$GroupMembershipListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findGroupMemberships` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupMemberships$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupMemberships$SelectionSet<_$Scalars>>;
    type findGroupById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupById$SelectionSet<_$Scalars>;
    interface findGroupById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
        /**
         * Arguments for `findGroupById` field. All arguments are required so you must include this.
         */
        $: findGroupById$Arguments<_$Scalars>;
    }
    interface findGroupById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findGroupById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupById$SelectionSet<_$Scalars>>;
    type findGroupByIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroupByIdent$SelectionSet<_$Scalars>;
    interface findGroupByIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
        /**
         * Arguments for `findGroupByIdent` field. All arguments are required so you must include this.
         */
        $: findGroupByIdent$Arguments<_$Scalars>;
    }
    interface findGroupByIdent$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        groupIdent: string;
    }
    /**
     * This is the "expanded" version of the `findGroupByIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroupByIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroupByIdent$SelectionSet<_$Scalars>>;
    type findGroups<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGroups$SelectionSet<_$Scalars>;
    interface findGroups$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
        /**
         * Arguments for `findGroups` field. No arguments are required so you may omit this.
         */
        $?: findGroups$Arguments<_$Scalars>;
    }
    interface findGroups$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$GroupInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$GroupListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findGroups` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGroups$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGroups$SelectionSet<_$Scalars>>;
    type findIndonesianCities<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findIndonesianCities$SelectionSet<_$Scalars>;
    interface findIndonesianCities$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IndonesianCity<_$Scalars> {
        /**
         * Arguments for `findIndonesianCities` field. No arguments are required so you may omit this.
         */
        $?: findIndonesianCities$Arguments<_$Scalars>;
    }
    interface findIndonesianCities$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findIndonesianCities` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findIndonesianCities$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findIndonesianCities$SelectionSet<_$Scalars>>;
    type findIndonesianProvinces<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findIndonesianProvinces$SelectionSet<_$Scalars>;
    interface findIndonesianProvinces$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IndonesianProvince<_$Scalars> {
        /**
         * Arguments for `findIndonesianProvinces` field. No arguments are required so you may omit this.
         */
        $?: findIndonesianProvinces$Arguments<_$Scalars>;
    }
    interface findIndonesianProvinces$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findIndonesianProvinces` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findIndonesianProvinces$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findIndonesianProvinces$SelectionSet<_$Scalars>>;
    type findIqlaaJordanianDistricts<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findIqlaaJordanianDistricts$SelectionSet<_$Scalars>;
    interface findIqlaaJordanianDistricts$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IqlaaJordanianDistrict<_$Scalars> {
        /**
         * Arguments for `findIqlaaJordanianDistricts` field. No arguments are required so you may omit this.
         */
        $?: findIqlaaJordanianDistricts$Arguments<_$Scalars>;
    }
    interface findIqlaaJordanianDistricts$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findIqlaaJordanianDistricts` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findIqlaaJordanianDistricts$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findIqlaaJordanianDistricts$SelectionSet<_$Scalars>>;
    type findIqlaaJordanianGovernorates<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findIqlaaJordanianGovernorates$SelectionSet<_$Scalars>;
    interface findIqlaaJordanianGovernorates$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IqlaaJordanianGovernorate<_$Scalars> {
        /**
         * Arguments for `findIqlaaJordanianGovernorates` field. No arguments are required so you may omit this.
         */
        $?: findIqlaaJordanianGovernorates$Arguments<_$Scalars>;
    }
    interface findIqlaaJordanianGovernorates$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findIqlaaJordanianGovernorates` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findIqlaaJordanianGovernorates$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findIqlaaJordanianGovernorates$SelectionSet<_$Scalars>>;
    type findMastercardBanks<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMastercardBanks$SelectionSet<_$Scalars>;
    interface findMastercardBanks$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MastercardBank<_$Scalars> {
        /**
         * Arguments for `findMastercardBanks` field. No arguments are required so you may omit this.
         */
        $?: findMastercardBanks$Arguments<_$Scalars>;
    }
    interface findMastercardBanks$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findMastercardBanks` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMastercardBanks$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMastercardBanks$SelectionSet<_$Scalars>>;
    type userWillReceiveWelcomeMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userWillReceiveWelcomeMessage$SelectionSet<_$Scalars>;
    interface userWillReceiveWelcomeMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `userWillReceiveWelcomeMessage` field. All arguments are required so you must include this.
         */
        $: userWillReceiveWelcomeMessage$Arguments<_$Scalars>;
    }
    interface userWillReceiveWelcomeMessage$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        userId: string;
    }
    /**
     * This is the "expanded" version of the `userWillReceiveWelcomeMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userWillReceiveWelcomeMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userWillReceiveWelcomeMessage$SelectionSet<_$Scalars>>;
    type findBrands<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findBrands$SelectionSet<_$Scalars>;
    interface findBrands$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Brand<_$Scalars> {
        /**
         * Arguments for `findBrands` field. No arguments are required so you may omit this.
         */
        $?: findBrands$Arguments<_$Scalars>;
    }
    interface findBrands$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$BrandInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$BrandListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findBrands` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findBrands$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findBrands$SelectionSet<_$Scalars>>;
    type findPurchaseOrderItems<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findPurchaseOrderItems$SelectionSet<_$Scalars>;
    interface findPurchaseOrderItems$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$PurchaseOrderItem<_$Scalars> {
        /**
         * Arguments for `findPurchaseOrderItems` field. No arguments are required so you may omit this.
         */
        $?: findPurchaseOrderItems$Arguments<_$Scalars>;
    }
    interface findPurchaseOrderItems$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$PurchaseOrderItemInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$PurchaseOrderItemListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findPurchaseOrderItems` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findPurchaseOrderItems$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findPurchaseOrderItems$SelectionSet<_$Scalars>>;
    type findPurchaseOrderById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findPurchaseOrderById$SelectionSet<_$Scalars>;
    interface findPurchaseOrderById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$PurchaseOrder<_$Scalars> {
        /**
         * Arguments for `findPurchaseOrderById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findPurchaseOrderById$Arguments<_$Scalars>;
    }
    interface findPurchaseOrderById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findPurchaseOrderById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findPurchaseOrderById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findPurchaseOrderById$SelectionSet<_$Scalars>>;
    type findPurchaseOrders<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findPurchaseOrders$SelectionSet<_$Scalars>;
    interface findPurchaseOrders$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$PurchaseOrder<_$Scalars> {
        /**
         * Arguments for `findPurchaseOrders` field. No arguments are required so you may omit this.
         */
        $?: findPurchaseOrders$Arguments<_$Scalars>;
    }
    interface findPurchaseOrders$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$PurchaseOrderInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$PurchaseOrderListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findPurchaseOrders` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findPurchaseOrders$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findPurchaseOrders$SelectionSet<_$Scalars>>;
    type findShoppingCartItemById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findShoppingCartItemById$SelectionSet<_$Scalars>;
    interface findShoppingCartItemById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ShoppingCartItem<_$Scalars> {
        /**
         * Arguments for `findShoppingCartItemById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findShoppingCartItemById$Arguments<_$Scalars>;
    }
    interface findShoppingCartItemById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findShoppingCartItemById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findShoppingCartItemById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findShoppingCartItemById$SelectionSet<_$Scalars>>;
    type findShoppingCartItems<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findShoppingCartItems$SelectionSet<_$Scalars>;
    interface findShoppingCartItems$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ShoppingCartItem<_$Scalars> {
        /**
         * Arguments for `findShoppingCartItems` field. No arguments are required so you may omit this.
         */
        $?: findShoppingCartItems$Arguments<_$Scalars>;
    }
    interface findShoppingCartItems$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ShoppingCartItemInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$ShoppingCartItemListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findShoppingCartItems` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findShoppingCartItems$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findShoppingCartItems$SelectionSet<_$Scalars>>;
    type findShoppingCarts<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findShoppingCarts$SelectionSet<_$Scalars>;
    interface findShoppingCarts$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ShoppingCart<_$Scalars> {
        /**
         * Arguments for `findShoppingCarts` field. No arguments are required so you may omit this.
         */
        $?: findShoppingCarts$Arguments<_$Scalars>;
    }
    interface findShoppingCarts$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ShoppingCartInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$ShoppingCartListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findShoppingCarts` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findShoppingCarts$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findShoppingCarts$SelectionSet<_$Scalars>>;
    type findMyShoppingCart<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyShoppingCart$SelectionSet<_$Scalars>;
    interface findMyShoppingCart$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ShoppingCart<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMyShoppingCart` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyShoppingCart$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyShoppingCart$SelectionSet<_$Scalars>>;
    type findWalletItemById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletItemById$SelectionSet<_$Scalars>;
    interface findWalletItemById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItem<_$Scalars> {
        /**
         * Arguments for `findWalletItemById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findWalletItemById$Arguments<_$Scalars>;
    }
    interface findWalletItemById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findWalletItemById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletItemById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletItemById$SelectionSet<_$Scalars>>;
    type findWalletItemByTransferSlug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletItemByTransferSlug$SelectionSet<_$Scalars>;
    interface findWalletItemByTransferSlug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItem<_$Scalars> {
        /**
         * Arguments for `findWalletItemByTransferSlug` field. Some (1/2) arguments are required so you must include this.
         */
        $: findWalletItemByTransferSlug$Arguments<_$Scalars>;
    }
    interface findWalletItemByTransferSlug$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        transferSlug: string;
    }
    /**
     * This is the "expanded" version of the `findWalletItemByTransferSlug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletItemByTransferSlug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletItemByTransferSlug$SelectionSet<_$Scalars>>;
    type findWalletItems<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletItems$SelectionSet<_$Scalars>;
    interface findWalletItems$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItem<_$Scalars> {
        /**
         * Arguments for `findWalletItems` field. No arguments are required so you may omit this.
         */
        $?: findWalletItems$Arguments<_$Scalars>;
    }
    interface findWalletItems$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$WalletItemInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$WalletItemListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findWalletItems` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletItems$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletItems$SelectionSet<_$Scalars>>;
    type findWalletItemTransferById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletItemTransferById$SelectionSet<_$Scalars>;
    interface findWalletItemTransferById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItemTransfer<_$Scalars> {
        /**
         * Arguments for `findWalletItemTransferById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findWalletItemTransferById$Arguments<_$Scalars>;
    }
    interface findWalletItemTransferById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findWalletItemTransferById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletItemTransferById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletItemTransferById$SelectionSet<_$Scalars>>;
    type findWalletItemTransferByTransferSlug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletItemTransferByTransferSlug$SelectionSet<_$Scalars>;
    interface findWalletItemTransferByTransferSlug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItemTransfer<_$Scalars> {
        /**
         * Arguments for `findWalletItemTransferByTransferSlug` field. Some (1/2) arguments are required so you must include this.
         */
        $: findWalletItemTransferByTransferSlug$Arguments<_$Scalars>;
    }
    interface findWalletItemTransferByTransferSlug$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        transferSlug: string;
    }
    /**
     * This is the "expanded" version of the `findWalletItemTransferByTransferSlug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletItemTransferByTransferSlug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletItemTransferByTransferSlug$SelectionSet<_$Scalars>>;
    type findWalletItemTransfers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletItemTransfers$SelectionSet<_$Scalars>;
    interface findWalletItemTransfers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItemTransfer<_$Scalars> {
        /**
         * Arguments for `findWalletItemTransfers` field. No arguments are required so you may omit this.
         */
        $?: findWalletItemTransfers$Arguments<_$Scalars>;
    }
    interface findWalletItemTransfers$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$WalletItemTransferInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$WalletItemTransferListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findWalletItemTransfers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletItemTransfers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletItemTransfers$SelectionSet<_$Scalars>>;
    type findWallets<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWallets$SelectionSet<_$Scalars>;
    interface findWallets$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Wallet<_$Scalars> {
        /**
         * Arguments for `findWallets` field. No arguments are required so you may omit this.
         */
        $?: findWallets$Arguments<_$Scalars>;
    }
    interface findWallets$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$WalletInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$WalletListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findWallets` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWallets$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWallets$SelectionSet<_$Scalars>>;
    type findMyWallet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyWallet$SelectionSet<_$Scalars>;
    interface findMyWallet$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Wallet<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMyWallet` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyWallet$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyWallet$SelectionSet<_$Scalars>>;
    type findWalletServiceRecord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findWalletServiceRecord$SelectionSet<_$Scalars>;
    interface findWalletServiceRecord$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletServiceRecord<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findWalletServiceRecord` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findWalletServiceRecord$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findWalletServiceRecord$SelectionSet<_$Scalars>>;
    type findGiftCardProducts<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findGiftCardProducts$SelectionSet<_$Scalars>;
    interface findGiftCardProducts$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GiftCardProduct<_$Scalars> {
        /**
         * Arguments for `findGiftCardProducts` field. No arguments are required so you may omit this.
         */
        $?: findGiftCardProducts$Arguments<_$Scalars>;
    }
    interface findGiftCardProducts$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$GiftCardProductInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$GiftCardProductListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findGiftCardProducts` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findGiftCardProducts$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findGiftCardProducts$SelectionSet<_$Scalars>>;
    type findMarketplaceServiceRecord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMarketplaceServiceRecord$SelectionSet<_$Scalars>;
    interface findMarketplaceServiceRecord$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MarketplaceServiceRecord<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMarketplaceServiceRecord` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMarketplaceServiceRecord$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMarketplaceServiceRecord$SelectionSet<_$Scalars>>;
    type findProductCategories<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findProductCategories$SelectionSet<_$Scalars>;
    interface findProductCategories$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ProductCategory<_$Scalars> {
        /**
         * Arguments for `findProductCategories` field. No arguments are required so you may omit this.
         */
        $?: findProductCategories$Arguments<_$Scalars>;
    }
    interface findProductCategories$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ProductCategoryInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$ProductCategoryListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findProductCategories` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findProductCategories$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findProductCategories$SelectionSet<_$Scalars>>;
    type findUserSearchById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserSearchById$SelectionSet<_$Scalars>;
    interface findUserSearchById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserSearch<_$Scalars> {
        /**
         * Arguments for `findUserSearchById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findUserSearchById$Arguments<_$Scalars>;
    }
    interface findUserSearchById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        userSearchId: string;
    }
    /**
     * This is the "expanded" version of the `findUserSearchById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserSearchById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserSearchById$SelectionSet<_$Scalars>>;
    type findUserSearches<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserSearches$SelectionSet<_$Scalars>;
    interface findUserSearches$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserSearch<_$Scalars> {
        /**
         * Arguments for `findUserSearches` field. No arguments are required so you may omit this.
         */
        $?: findUserSearches$Arguments<_$Scalars>;
    }
    interface findUserSearches$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$UserSearchInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$UserSearchListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findUserSearches` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserSearches$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserSearches$SelectionSet<_$Scalars>>;
    type findUserSearchResults<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findUserSearchResults$SelectionSet<_$Scalars>;
    interface findUserSearchResults$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserWithScore<_$Scalars> {
        /**
         * Arguments for `findUserSearchResults` field. Some (1/3) arguments are required so you must include this.
         */
        $: findUserSearchResults$Arguments<_$Scalars>;
    }
    interface findUserSearchResults$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        runIndex?: number | undefined | null;
        userSearchId: string;
    }
    /**
     * This is the "expanded" version of the `findUserSearchResults` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findUserSearchResults$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findUserSearchResults$SelectionSet<_$Scalars>>;
    type myUserSearches<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myUserSearches$SelectionSet<_$Scalars>;
    interface myUserSearches$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserSearch<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myUserSearches` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myUserSearches$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myUserSearches$SelectionSet<_$Scalars>>;
    type findServiceRequestById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findServiceRequestById$SelectionSet<_$Scalars>;
    interface findServiceRequestById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `findServiceRequestById` field. All arguments are required so you must include this.
         */
        $: findServiceRequestById$Arguments<_$Scalars>;
    }
    interface findServiceRequestById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        serviceRequestId: string;
    }
    /**
     * This is the "expanded" version of the `findServiceRequestById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findServiceRequestById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findServiceRequestById$SelectionSet<_$Scalars>>;
    type findContactById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findContactById$SelectionSet<_$Scalars>;
    interface findContactById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Contact<_$Scalars> {
        /**
         * Arguments for `findContactById` field. All arguments are required so you must include this.
         */
        $: findContactById$Arguments<_$Scalars>;
    }
    interface findContactById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findContactById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findContactById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findContactById$SelectionSet<_$Scalars>>;
    type findContact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findContact$SelectionSet<_$Scalars>;
    interface findContact$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Contact<_$Scalars> {
        /**
         * Arguments for `findContact` field. Some (1/2) arguments are required so you must include this.
         */
        $: findContact$Arguments<_$Scalars>;
    }
    interface findContact$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        createIfNotExist?: boolean | undefined | null;
        match: $NamedTypes.$ContactInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `findContact` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findContact$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findContact$SelectionSet<_$Scalars>>;
    type findContacts<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findContacts$SelectionSet<_$Scalars>;
    interface findContacts$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContactListItem<_$Scalars> {
        /**
         * Arguments for `findContacts` field. No arguments are required so you may omit this.
         */
        $?: findContacts$Arguments<_$Scalars>;
    }
    interface findContacts$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$ContactInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$SidContactListFilter<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findContacts` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findContacts$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findContacts$SelectionSet<_$Scalars>>;
    type findMyActiveMultiStepActions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyActiveMultiStepActions$SelectionSet<_$Scalars>;
    interface findMyActiveMultiStepActions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepAction<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMyActiveMultiStepActions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyActiveMultiStepActions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyActiveMultiStepActions$SelectionSet<_$Scalars>>;
    type findMyActiveMultiStepAction<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyActiveMultiStepAction$SelectionSet<_$Scalars>;
    interface findMyActiveMultiStepAction$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepAction<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMyActiveMultiStepAction` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyActiveMultiStepAction$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyActiveMultiStepAction$SelectionSet<_$Scalars>>;
    type getMultiStepActionProgress<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = getMultiStepActionProgress$SelectionSet<_$Scalars>;
    interface getMultiStepActionProgress$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepActionProgress<_$Scalars> {
        /**
         * Arguments for `getMultiStepActionProgress` field. Some (1/2) arguments are required so you must include this.
         */
        $: getMultiStepActionProgress$Arguments<_$Scalars>;
    }
    interface getMultiStepActionProgress$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        /**
         * The result will only contain the authToken, if you specify a valid confirmToken
         */
        confirmToken?: string | undefined | null;
        actionId: string;
    }
    /**
     * This is the "expanded" version of the `getMultiStepActionProgress` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type getMultiStepActionProgress$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<getMultiStepActionProgress$SelectionSet<_$Scalars>>;
    type findAvailableUserHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findAvailableUserHandle$SelectionSet<_$Scalars>;
    interface findAvailableUserHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `findAvailableUserHandle` field. All arguments are required so you must include this.
         */
        $: findAvailableUserHandle$Arguments<_$Scalars>;
    }
    interface findAvailableUserHandle$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        startValue: string;
    }
    /**
     * This is the "expanded" version of the `findAvailableUserHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findAvailableUserHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findAvailableUserHandle$SelectionSet<_$Scalars>>;
    type getMyUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = getMyUser$SelectionSet<_$Scalars>;
    interface getMyUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `getMyUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type getMyUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<getMyUser$SelectionSet<_$Scalars>>;
    type findMyUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyUser$SelectionSet<_$Scalars>;
    interface findMyUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MyUser<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMyUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyUser$SelectionSet<_$Scalars>>;
    type getMyBlockedUsers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = getMyBlockedUsers$SelectionSet<_$Scalars>;
    interface getMyBlockedUsers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `getMyBlockedUsers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type getMyBlockedUsers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<getMyBlockedUsers$SelectionSet<_$Scalars>>;
    type findMyBlockedUsers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findMyBlockedUsers$SelectionSet<_$Scalars>;
    interface findMyBlockedUsers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `findMyBlockedUsers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findMyBlockedUsers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findMyBlockedUsers$SelectionSet<_$Scalars>>;
    type verifyMyPassword<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = verifyMyPassword$SelectionSet<_$Scalars>;
    interface verifyMyPassword$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `verifyMyPassword` field. All arguments are required so you must include this.
         */
        $: verifyMyPassword$Arguments<_$Scalars>;
    }
    interface verifyMyPassword$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        password: string;
    }
    /**
     * This is the "expanded" version of the `verifyMyPassword` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifyMyPassword$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<verifyMyPassword$SelectionSet<_$Scalars>>;
    type findReportUserReasons<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findReportUserReasons$SelectionSet<_$Scalars>;
    interface findReportUserReasons$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ReportUserReason<_$Scalars> {
        /**
         * Arguments for `findReportUserReasons` field. No arguments are required so you may omit this.
         */
        $?: findReportUserReasons$Arguments<_$Scalars>;
    }
    interface findReportUserReasons$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $fallbackUiLanguage?: $NamedTypes.$UiLanguage | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findReportUserReasons` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findReportUserReasons$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findReportUserReasons$SelectionSet<_$Scalars>>;
    type findTrainingsForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findTrainingsForMe$SelectionSet<_$Scalars>;
    interface findTrainingsForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Training<_$Scalars> {
        /**
         * Arguments for `findTrainingsForMe` field. No arguments are required so you may omit this.
         */
        $?: findTrainingsForMe$Arguments<_$Scalars>;
    }
    interface findTrainingsForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        displayInTrainingsList?: boolean | undefined | null;
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
    }
    /**
     * This is the "expanded" version of the `findTrainingsForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findTrainingsForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findTrainingsForMe$SelectionSet<_$Scalars>>;
    type findTrainingsForUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findTrainingsForUser$SelectionSet<_$Scalars>;
    interface findTrainingsForUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Training<_$Scalars> {
        /**
         * Arguments for `findTrainingsForUser` field. Some (1/3) arguments are required so you must include this.
         */
        $: findTrainingsForUser$Arguments<_$Scalars>;
    }
    interface findTrainingsForUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        displayInTrainingsList?: boolean | undefined | null;
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `findTrainingsForUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findTrainingsForUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findTrainingsForUser$SelectionSet<_$Scalars>>;
    type findTrainingById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findTrainingById$SelectionSet<_$Scalars>;
    interface findTrainingById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Training<_$Scalars> {
        /**
         * Arguments for `findTrainingById` field. Some (1/2) arguments are required so you must include this.
         */
        $: findTrainingById$Arguments<_$Scalars>;
    }
    interface findTrainingById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $selectedLanguage?: $NamedTypes.$UiLanguage | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `findTrainingById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findTrainingById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findTrainingById$SelectionSet<_$Scalars>>;
    type findTrainingSessionById<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findTrainingSessionById$SelectionSet<_$Scalars>;
    interface findTrainingSessionById$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSession<_$Scalars> {
        /**
         * Arguments for `findTrainingSessionById` field. All arguments are required so you must include this.
         */
        $: findTrainingSessionById$Arguments<_$Scalars>;
    }
    interface findTrainingSessionById$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `findTrainingSessionById` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findTrainingSessionById$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findTrainingSessionById$SelectionSet<_$Scalars>>;
    type findTrainingSessionsForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findTrainingSessionsForMe$SelectionSet<_$Scalars>;
    interface findTrainingSessionsForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSession<_$Scalars> {
        /**
         * Arguments for `findTrainingSessionsForMe` field. Some (1/2) arguments are required so you must include this.
         */
        $: findTrainingSessionsForMe$Arguments<_$Scalars>;
    }
    interface findTrainingSessionsForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        trainingId: string;
    }
    /**
     * This is the "expanded" version of the `findTrainingSessionsForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findTrainingSessionsForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findTrainingSessionsForMe$SelectionSet<_$Scalars>>;
    type findTrainingSessionsByTrainingId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findTrainingSessionsByTrainingId$SelectionSet<_$Scalars>;
    interface findTrainingSessionsByTrainingId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSession<_$Scalars> {
        /**
         * Arguments for `findTrainingSessionsByTrainingId` field. Some (1/3) arguments are required so you must include this.
         */
        $: findTrainingSessionsByTrainingId$Arguments<_$Scalars>;
    }
    interface findTrainingSessionsByTrainingId$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        userId?: string | undefined | null;
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        trainingId: string;
    }
    /**
     * This is the "expanded" version of the `findTrainingSessionsByTrainingId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findTrainingSessionsByTrainingId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findTrainingSessionsByTrainingId$SelectionSet<_$Scalars>>;
    type findLatestTrainingSessionForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = findLatestTrainingSessionForMe$SelectionSet<_$Scalars>;
    interface findLatestTrainingSessionForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSession<_$Scalars> {
        /**
         * Arguments for `findLatestTrainingSessionForMe` field. Some (1/2) arguments are required so you must include this.
         */
        $: findLatestTrainingSessionForMe$Arguments<_$Scalars>;
    }
    interface findLatestTrainingSessionForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        trainingId: string;
    }
    /**
     * This is the "expanded" version of the `findLatestTrainingSessionForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findLatestTrainingSessionForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<findLatestTrainingSessionForMe$SelectionSet<_$Scalars>>;
}
export interface Mutation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    /**
     * Select the `createOneTimeAuthTokenForMe` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    createOneTimeAuthTokenForMe?: Mutation.createOneTimeAuthTokenForMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createOneTimeAuthTokenForMe<_$Scalars>>;
    /**
     * Select the `signInUser` field on the `Mutation` object. Its type is `UserAuthResponse` (a `OutputObject` kind of type).
     */
    signInUser?: Mutation.signInUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.signInUser<_$Scalars>>;
    /**
     * Select the `signInOauthUser` field on the `Mutation` object. Its type is `UserAuthResponse` (a `OutputObject` kind of type).
     */
    signInOauthUser?: Mutation.signInOauthUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.signInOauthUser<_$Scalars>>;
    /**
     * Select the `signMeOut` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    signMeOut?: Mutation.signMeOut$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.signMeOut<_$Scalars>>;
    /**
     * Select the `signUpUser` field on the `Mutation` object. Its type is `UserAuthResponse` (a `OutputObject` kind of type).
     */
    signUpUser?: Mutation.signUpUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.signUpUser<_$Scalars>>;
    /**
     * Select the `verifyOneTimeAuthToken` field on the `Mutation` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    verifyOneTimeAuthToken?: Mutation.verifyOneTimeAuthToken<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.verifyOneTimeAuthToken<_$Scalars>>;
    /**
     * Select the `addAppFeatureToUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    addAppFeatureToUser?: Mutation.addAppFeatureToUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.addAppFeatureToUser<_$Scalars>>;
    /**
     * Select the `deleteUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteUser?: Mutation.deleteUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteUser<_$Scalars>>;
    /**
     * Select the `deleteUserV2` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteUserV2?: Mutation.deleteUserV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteUserV2<_$Scalars>>;
    /**
     * Select the `removeAppFeatureFromUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    removeAppFeatureFromUser?: Mutation.removeAppFeatureFromUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.removeAppFeatureFromUser<_$Scalars>>;
    /**
     * Select the `reportUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    reportUser?: Mutation.reportUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.reportUser<_$Scalars>>;
    /**
     * Select the `updateUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateUser?: Mutation.updateUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateUser<_$Scalars>>;
    /**
     * Select the `createUserDevice` field on the `Mutation` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    createUserDevice?: Mutation.createUserDevice<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createUserDevice<_$Scalars>>;
    /**
     * Select the `updateUserDevice` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateUserDevice?: Mutation.updateUserDevice<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateUserDevice<_$Scalars>>;
    /**
     * Select the `createAcademicExperience` field on the `Mutation` object. Its type is `AcademicExperience` (a `OutputObject` kind of type).
     */
    createAcademicExperience?: Mutation.createAcademicExperience<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createAcademicExperience<_$Scalars>>;
    /**
     * Select the `deleteAcademicExperience` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteAcademicExperience?: Mutation.deleteAcademicExperience<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteAcademicExperience<_$Scalars>>;
    /**
     * Select the `updateAcademicExperience` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateAcademicExperience?: Mutation.updateAcademicExperience<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateAcademicExperience<_$Scalars>>;
    /**
     * Select the `createBusinessExperience` field on the `Mutation` object. Its type is `BusinessExperience` (a `OutputObject` kind of type).
     */
    createBusinessExperience?: Mutation.createBusinessExperience<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createBusinessExperience<_$Scalars>>;
    /**
     * Select the `deleteBusinessExperience` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteBusinessExperience?: Mutation.deleteBusinessExperience<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteBusinessExperience<_$Scalars>>;
    /**
     * Select the `updateBusinessExperience` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateBusinessExperience?: Mutation.updateBusinessExperience<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateBusinessExperience<_$Scalars>>;
    /**
     * Select the `createCompany` field on the `Mutation` object. Its type is `Company` (a `OutputObject` kind of type).
     */
    createCompany?: Mutation.createCompany<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createCompany<_$Scalars>>;
    /**
     * Select the `deleteCompany` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteCompany?: Mutation.deleteCompany<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteCompany<_$Scalars>>;
    /**
     * Select the `deleteCompanyV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteCompanyV2?: Mutation.deleteCompanyV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteCompanyV2<_$Scalars>>;
    /**
     * Select the `updateCompany` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateCompany?: Mutation.updateCompany<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateCompany<_$Scalars>>;
    /**
     * Select the `findAndUpdateAllMm2Users` field on the `Mutation` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    findAndUpdateAllMm2Users?: Mutation.findAndUpdateAllMm2Users$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.findAndUpdateAllMm2Users<_$Scalars>>;
    /**
     * Select the `createAdminTask` field on the `Mutation` object. Its type is `AdminTask` (a `OutputObject` kind of type).
     */
    createAdminTask?: Mutation.createAdminTask<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createAdminTask<_$Scalars>>;
    /**
     * Select the `deleteAdminTask` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteAdminTask?: Mutation.deleteAdminTask<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteAdminTask<_$Scalars>>;
    /**
     * Select the `runAdminTask` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    runAdminTask?: Mutation.runAdminTask<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.runAdminTask<_$Scalars>>;
    /**
     * Select the `updateAdminTask` field on the `Mutation` object. Its type is `AdminTask` (a `OutputObject` kind of type).
     */
    updateAdminTask?: Mutation.updateAdminTask<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateAdminTask<_$Scalars>>;
    /**
     * Select the `createUploadedAsset` field on the `Mutation` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    createUploadedAsset?: Mutation.createUploadedAsset<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createUploadedAsset<_$Scalars>>;
    /**
     * Select the `deleteUploadedAsset` field on the `Mutation` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    deleteUploadedAsset?: Mutation.deleteUploadedAsset<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteUploadedAsset<_$Scalars>>;
    /**
     * Select the `initAssetUpload` field on the `Mutation` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    initAssetUpload?: Mutation.initAssetUpload<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.initAssetUpload<_$Scalars>>;
    /**
     * Select the `updateUploadedAsset` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateUploadedAsset?: Mutation.updateUploadedAsset<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateUploadedAsset<_$Scalars>>;
    /**
     * Select the `acceptChannelInvitation` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    acceptChannelInvitation?: Mutation.acceptChannelInvitation<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.acceptChannelInvitation<_$Scalars>>;
    /**
     * Select the `acceptChannelInvitationV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    acceptChannelInvitationV2?: Mutation.acceptChannelInvitationV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.acceptChannelInvitationV2<_$Scalars>>;
    /**
     * Select the `createChannelInvitation` field on the `Mutation` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    createChannelInvitation?: Mutation.createChannelInvitation<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createChannelInvitation<_$Scalars>>;
    /**
     * Select the `declineChannelInvitation` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    declineChannelInvitation?: Mutation.declineChannelInvitation<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.declineChannelInvitation<_$Scalars>>;
    /**
     * Select the `declineChannelInvitationV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    declineChannelInvitationV2?: Mutation.declineChannelInvitationV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.declineChannelInvitationV2<_$Scalars>>;
    /**
     * Select the `deleteChannelInvitation` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteChannelInvitation?: Mutation.deleteChannelInvitation<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelInvitation<_$Scalars>>;
    /**
     * Select the `deleteChannelInvitationV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteChannelInvitationV2?: Mutation.deleteChannelInvitationV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelInvitationV2<_$Scalars>>;
    /**
     * Select the `dismissChannelInvitationFromInbox` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    dismissChannelInvitationFromInbox?: Mutation.dismissChannelInvitationFromInbox<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.dismissChannelInvitationFromInbox<_$Scalars>>;
    /**
     * Select the `dismissChannelInvitationFromInboxV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    dismissChannelInvitationFromInboxV2?: Mutation.dismissChannelInvitationFromInboxV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.dismissChannelInvitationFromInboxV2<_$Scalars>>;
    /**
     * Select the `updateChannelInvitation` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateChannelInvitation?: Mutation.updateChannelInvitation<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateChannelInvitation<_$Scalars>>;
    /**
     * Select the `archiveChannelForMe` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    archiveChannelForMe?: Mutation.archiveChannelForMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.archiveChannelForMe<_$Scalars>>;
    /**
     * Select the `createChannel` field on the `Mutation` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    createChannel?: Mutation.createChannel<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createChannel<_$Scalars>>;
    /**
     * Select the `deleteChannel` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteChannel?: Mutation.deleteChannel<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannel<_$Scalars>>;
    /**
     * Select the `deleteChannelV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteChannelV2?: Mutation.deleteChannelV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelV2<_$Scalars>>;
    /**
     * Select the `markChannelMessagesAsSeenByMe` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    markChannelMessagesAsSeenByMe?: Mutation.markChannelMessagesAsSeenByMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.markChannelMessagesAsSeenByMe<_$Scalars>>;
    /**
     * Select the `updateChannel` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateChannel?: Mutation.updateChannel<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateChannel<_$Scalars>>;
    /**
     * Select the `unarchiveChannelForMe` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    unarchiveChannelForMe?: Mutation.unarchiveChannelForMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.unarchiveChannelForMe<_$Scalars>>;
    /**
     * Select the `addChannelMessageEvent` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    addChannelMessageEvent?: Mutation.addChannelMessageEvent<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.addChannelMessageEvent<_$Scalars>>;
    /**
     * Select the `createChannelMessage` field on the `Mutation` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    createChannelMessage?: Mutation.createChannelMessage<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createChannelMessage<_$Scalars>>;
    /**
     * Select the `deleteChannelMessage` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteChannelMessage?: Mutation.deleteChannelMessage<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelMessage<_$Scalars>>;
    /**
     * Select the `deleteChannelMessageV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteChannelMessageV2?: Mutation.deleteChannelMessageV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelMessageV2<_$Scalars>>;
    /**
     * Select the `updateChannelMessage` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateChannelMessage?: Mutation.updateChannelMessage<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateChannelMessage<_$Scalars>>;
    /**
     * Select the `createChannelParticipant` field on the `Mutation` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    createChannelParticipant?: Mutation.createChannelParticipant<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createChannelParticipant<_$Scalars>>;
    /**
     * Select the `deleteChannelParticipant` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteChannelParticipant?: Mutation.deleteChannelParticipant<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelParticipant<_$Scalars>>;
    /**
     * Select the `deleteChannelParticipantV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteChannelParticipantV2?: Mutation.deleteChannelParticipantV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteChannelParticipantV2<_$Scalars>>;
    /**
     * Select the `updateChannelParticipant` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateChannelParticipant?: Mutation.updateChannelParticipant<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateChannelParticipant<_$Scalars>>;
    /**
     * Select the `createContentTag` field on the `Mutation` object. Its type is `ContentTag` (a `OutputObject` kind of type).
     */
    createContentTag?: Mutation.createContentTag<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createContentTag<_$Scalars>>;
    /**
     * Select the `deleteContentTag` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteContentTag?: Mutation.deleteContentTag<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteContentTag<_$Scalars>>;
    /**
     * Select the `updateContentTag` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateContentTag?: Mutation.updateContentTag<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateContentTag<_$Scalars>>;
    /**
     * Select the `createGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    createGroupMembership?: Mutation.createGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createGroupMembership<_$Scalars>>;
    /**
     * Select the `createMenteesGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    createMenteesGroupMembership?: Mutation.createMenteesGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createMenteesGroupMembership<_$Scalars>>;
    /**
     * Select the `createMentorsGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    createMentorsGroupMembership?: Mutation.createMentorsGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createMentorsGroupMembership<_$Scalars>>;
    /**
     * Select the `deleteGroupMembership` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteGroupMembership?: Mutation.deleteGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteGroupMembership<_$Scalars>>;
    /**
     * Select the `updateGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateGroupMembership?: Mutation.updateGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateGroupMembership<_$Scalars>>;
    /**
     * Select the `updateIqlaaGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateIqlaaGroupMembership?: Mutation.updateIqlaaGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateIqlaaGroupMembership<_$Scalars>>;
    /**
     * Select the `updateMastercardGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateMastercardGroupMembership?: Mutation.updateMastercardGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateMastercardGroupMembership<_$Scalars>>;
    /**
     * Select the `updateMenteesGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateMenteesGroupMembership?: Mutation.updateMenteesGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateMenteesGroupMembership<_$Scalars>>;
    /**
     * Select the `updateMentorsGroupMembership` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateMentorsGroupMembership?: Mutation.updateMentorsGroupMembership<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateMentorsGroupMembership<_$Scalars>>;
    /**
     * Select the `addUserToGroup` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    addUserToGroup?: Mutation.addUserToGroup<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.addUserToGroup<_$Scalars>>;
    /**
     * Select the `createGroup` field on the `Mutation` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    createGroup?: Mutation.createGroup<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createGroup<_$Scalars>>;
    /**
     * Select the `deleteGroup` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteGroup?: Mutation.deleteGroup<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteGroup<_$Scalars>>;
    /**
     * Select the `removeUserFromGroup` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    removeUserFromGroup?: Mutation.removeUserFromGroup<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.removeUserFromGroup<_$Scalars>>;
    /**
     * Select the `updateGroup` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateGroup?: Mutation.updateGroup<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateGroup<_$Scalars>>;
    /**
     * Select the `createSupportChannelConfig` field on the `Mutation` object. Its type is `SupportChannelConfig` (a `OutputObject` kind of type).
     */
    createSupportChannelConfig?: Mutation.createSupportChannelConfig<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createSupportChannelConfig<_$Scalars>>;
    /**
     * Select the `deleteSupportChannelConfig` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteSupportChannelConfig?: Mutation.deleteSupportChannelConfig<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteSupportChannelConfig<_$Scalars>>;
    /**
     * Select the `updateSupportChannelConfig` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateSupportChannelConfig?: Mutation.updateSupportChannelConfig<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateSupportChannelConfig<_$Scalars>>;
    /**
     * Select the `createPurchaseOrder` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    createPurchaseOrder?: Mutation.createPurchaseOrder<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createPurchaseOrder<_$Scalars>>;
    /**
     * Select the `createShoppingCartItem` field on the `Mutation` object. Its type is `ShoppingCartItem` (a `OutputObject` kind of type).
     */
    createShoppingCartItem?: Mutation.createShoppingCartItem<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createShoppingCartItem<_$Scalars>>;
    /**
     * Select the `deleteShoppingCartItem` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteShoppingCartItem?: Mutation.deleteShoppingCartItem<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteShoppingCartItem<_$Scalars>>;
    /**
     * Select the `updateShoppingCartItem` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateShoppingCartItem?: Mutation.updateShoppingCartItem<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateShoppingCartItem<_$Scalars>>;
    /**
     * Select the `clearMyShoppingCart` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    clearMyShoppingCart?: Mutation.clearMyShoppingCart$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.clearMyShoppingCart<_$Scalars>>;
    /**
     * Select the `clearShoppingCart` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    clearShoppingCart?: Mutation.clearShoppingCart<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.clearShoppingCart<_$Scalars>>;
    /**
     * Select the `createWalletItem` field on the `Mutation` object. Its type is `WalletItem` (a `OutputObject` kind of type).
     */
    createWalletItem?: Mutation.createWalletItem<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createWalletItem<_$Scalars>>;
    /**
     * Select the `deleteWalletItem` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteWalletItem?: Mutation.deleteWalletItem<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteWalletItem<_$Scalars>>;
    /**
     * Select the `updateWalletItem` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateWalletItem?: Mutation.updateWalletItem<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateWalletItem<_$Scalars>>;
    /**
     * Select the `acceptWalletItemTransfer` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    acceptWalletItemTransfer?: Mutation.acceptWalletItemTransfer<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.acceptWalletItemTransfer<_$Scalars>>;
    /**
     * Select the `createWalletItemTransfer` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    createWalletItemTransfer?: Mutation.createWalletItemTransfer<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createWalletItemTransfer<_$Scalars>>;
    /**
     * Select the `declineWalletItemTransfer` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    declineWalletItemTransfer?: Mutation.declineWalletItemTransfer<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.declineWalletItemTransfer<_$Scalars>>;
    /**
     * Select the `deleteWalletItemTransfer` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteWalletItemTransfer?: Mutation.deleteWalletItemTransfer<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteWalletItemTransfer<_$Scalars>>;
    /**
     * Select the `updateWalletItemTransfer` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateWalletItemTransfer?: Mutation.updateWalletItemTransfer<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateWalletItemTransfer<_$Scalars>>;
    /**
     * Select the `createUserSearch` field on the `Mutation` object. Its type is `UserSearch` (a `OutputObject` kind of type).
     */
    createUserSearch?: Mutation.createUserSearch<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createUserSearch<_$Scalars>>;
    /**
     * Select the `deleteUserSearch` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteUserSearch?: Mutation.deleteUserSearch<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteUserSearch<_$Scalars>>;
    /**
     * Select the `updateUserSearch` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    updateUserSearch?: Mutation.updateUserSearch<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateUserSearch<_$Scalars>>;
    /**
     * Select the `createNotification` field on the `Mutation` object. Its type is `Notification` (a `OutputObject` kind of type).
     */
    createNotification?: Mutation.createNotification<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createNotification<_$Scalars>>;
    /**
     * Select the `deleteNotification` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteNotification?: Mutation.deleteNotification<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteNotification<_$Scalars>>;
    /**
     * Select the `markInAppMessageReceived` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    markInAppMessageReceived?: Mutation.markInAppMessageReceived<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.markInAppMessageReceived<_$Scalars>>;
    /**
     * Select the `sendMultiStepActionNotification` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    sendMultiStepActionNotification?: Mutation.sendMultiStepActionNotification<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.sendMultiStepActionNotification<_$Scalars>>;
    /**
     * Select the `updateNotification` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateNotification?: Mutation.updateNotification<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateNotification<_$Scalars>>;
    /**
     * Select the `createNotificationTemplate` field on the `Mutation` object. Its type is `NotificationTemplate` (a `OutputObject` kind of type).
     */
    createNotificationTemplate?: Mutation.createNotificationTemplate<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createNotificationTemplate<_$Scalars>>;
    /**
     * Select the `deleteNotificationTemplate` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteNotificationTemplate?: Mutation.deleteNotificationTemplate<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteNotificationTemplate<_$Scalars>>;
    /**
     * Select the `updateNotificationTemplate` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateNotificationTemplate?: Mutation.updateNotificationTemplate<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateNotificationTemplate<_$Scalars>>;
    /**
     * Select the `createContact` field on the `Mutation` object. Its type is `Contact` (a `OutputObject` kind of type).
     */
    createContact?: Mutation.createContact<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createContact<_$Scalars>>;
    /**
     * Select the `updateContact` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateContact?: Mutation.updateContact<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateContact<_$Scalars>>;
    /**
     * Select the `createMultiStepAction` field on the `Mutation` object. Its type is `SidMultiStepActionProgress` (a `OutputObject` kind of type).
     */
    createMultiStepAction?: Mutation.createMultiStepAction<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createMultiStepAction<_$Scalars>>;
    /**
     * Select the `startResetPassword` field on the `Mutation` object. Its type is `SidMultiStepActionProgress` (a `OutputObject` kind of type).
     */
    startResetPassword?: Mutation.startResetPassword<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.startResetPassword<_$Scalars>>;
    /**
     * Select the `startVerifyEmail` field on the `Mutation` object. Its type is `SidMultiStepActionProgress` (a `OutputObject` kind of type).
     */
    startVerifyEmail?: Mutation.startVerifyEmail<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.startVerifyEmail<_$Scalars>>;
    /**
     * Select the `startVerifyPhoneNumber` field on the `Mutation` object. Its type is `SidMultiStepActionProgress` (a `OutputObject` kind of type).
     */
    startVerifyPhoneNumber?: Mutation.startVerifyPhoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.startVerifyPhoneNumber<_$Scalars>>;
    /**
     * Select the `verifyMultiStepActionToken` field on the `Mutation` object. Its type is `SidMultiStepActionProgress` (a `OutputObject` kind of type).
     */
    verifyMultiStepActionToken?: Mutation.verifyMultiStepActionToken<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.verifyMultiStepActionToken<_$Scalars>>;
    /**
     * Select the `blockUserForMe` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    blockUserForMe?: Mutation.blockUserForMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.blockUserForMe<_$Scalars>>;
    /**
     * Select the `blockUserForMeV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    blockUserForMeV2?: Mutation.blockUserForMeV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.blockUserForMeV2<_$Scalars>>;
    /**
     * Select the `deleteMyUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deleteMyUser?: Mutation.deleteMyUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteMyUser<_$Scalars>>;
    /**
     * Select the `deleteMyUserV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    deleteMyUserV2?: Mutation.deleteMyUserV2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.deleteMyUserV2<_$Scalars>>;
    /**
     * Select the `endMySession` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    endMySession?: Mutation.endMySession<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.endMySession<_$Scalars>>;
    /**
     * Select the `endMySessionV2` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    endMySessionV2?: Mutation.endMySessionV2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.endMySessionV2<_$Scalars>>;
    /**
     * Select the `startMySession` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    startMySession?: Mutation.startMySession<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.startMySession<_$Scalars>>;
    /**
     * Select the `startMySessionV2` field on the `Mutation` object. Its type is `ContentStatus` (a `OutputObject` kind of type).
     */
    startMySessionV2?: Mutation.startMySessionV2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.startMySessionV2<_$Scalars>>;
    /**
     * Select the `unblockUserForMe` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    unblockUserForMe?: Mutation.unblockUserForMe<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.unblockUserForMe<_$Scalars>>;
    /**
     * Select the `unblockUserForMeV2` field on the `Mutation` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    unblockUserForMeV2?: Mutation.unblockUserForMeV2<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.unblockUserForMeV2<_$Scalars>>;
    /**
     * Select the `updateMyUser` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    updateMyUser?: Mutation.updateMyUser<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.updateMyUser<_$Scalars>>;
    /**
     * Select the `createUserTracking` field on the `Mutation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    createUserTracking?: Mutation.createUserTracking<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Mutation.createUserTracking<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Mutation$FragmentInline<_$Scalars> | Mutation$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Mutation$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Mutation<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Mutation {
    type createOneTimeAuthTokenForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createOneTimeAuthTokenForMe$SelectionSet<_$Scalars>;
    interface createOneTimeAuthTokenForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createOneTimeAuthTokenForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createOneTimeAuthTokenForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createOneTimeAuthTokenForMe$SelectionSet<_$Scalars>>;
    type signInUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = signInUser$SelectionSet<_$Scalars>;
    interface signInUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserAuthResponse<_$Scalars> {
        /**
         * Arguments for `signInUser` field. All arguments are required so you must include this.
         */
        $: signInUser$Arguments<_$Scalars>;
    }
    interface signInUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SignInUserInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `signInUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signInUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<signInUser$SelectionSet<_$Scalars>>;
    type signInOauthUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = signInOauthUser$SelectionSet<_$Scalars>;
    interface signInOauthUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserAuthResponse<_$Scalars> {
        /**
         * Arguments for `signInOauthUser` field. All arguments are required so you must include this.
         */
        $: signInOauthUser$Arguments<_$Scalars>;
    }
    interface signInOauthUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SignInOauthUserInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `signInOauthUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signInOauthUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<signInOauthUser$SelectionSet<_$Scalars>>;
    type signMeOut<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signMeOut$SelectionSet<_$Scalars>;
    interface signMeOut$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signMeOut` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signMeOut$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signMeOut$SelectionSet<_$Scalars>>;
    type signUpUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = signUpUser$SelectionSet<_$Scalars>;
    interface signUpUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserAuthResponse<_$Scalars> {
        /**
         * Arguments for `signUpUser` field. All arguments are required so you must include this.
         */
        $: signUpUser$Arguments<_$Scalars>;
    }
    interface signUpUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SignUpUserInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `signUpUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signUpUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<signUpUser$SelectionSet<_$Scalars>>;
    type verifyOneTimeAuthToken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = verifyOneTimeAuthToken$SelectionSet<_$Scalars>;
    interface verifyOneTimeAuthToken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `verifyOneTimeAuthToken` field. All arguments are required so you must include this.
         */
        $: verifyOneTimeAuthToken$Arguments<_$Scalars>;
    }
    interface verifyOneTimeAuthToken$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$VerifyOneTimeAuthTokenInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `verifyOneTimeAuthToken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifyOneTimeAuthToken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<verifyOneTimeAuthToken$SelectionSet<_$Scalars>>;
    type addAppFeatureToUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = addAppFeatureToUser$SelectionSet<_$Scalars>;
    interface addAppFeatureToUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `addAppFeatureToUser` field. Some (1/4) arguments are required so you must include this.
         */
        $: addAppFeatureToUser$Arguments<_$Scalars>;
    }
    interface addAppFeatureToUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$UserInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$UserListFilter<_$Scalars> | undefined | null;
        $appFeature: $NamedTypes.$AppFeature;
    }
    /**
     * This is the "expanded" version of the `addAppFeatureToUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type addAppFeatureToUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<addAppFeatureToUser$SelectionSet<_$Scalars>>;
    type deleteUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteUser$SelectionSet<_$Scalars>;
    interface deleteUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteUser` field. Some (2/5) arguments are required so you must include this.
         */
        $: deleteUser$Arguments<_$Scalars>;
    }
    interface deleteUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically: boolean;
        description?: string | undefined | null;
        cause?: string | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `deleteUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteUser$SelectionSet<_$Scalars>>;
    type deleteUserV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteUserV2$SelectionSet<_$Scalars>;
    interface deleteUserV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteUserV2` field. Some (1/6) arguments are required so you must include this.
         */
        $: deleteUserV2$Arguments<_$Scalars>;
    }
    interface deleteUserV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        requester?: string | undefined | null;
        description?: string | undefined | null;
        cause?: string | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `deleteUserV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteUserV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteUserV2$SelectionSet<_$Scalars>>;
    type removeAppFeatureFromUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = removeAppFeatureFromUser$SelectionSet<_$Scalars>;
    interface removeAppFeatureFromUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `removeAppFeatureFromUser` field. Some (1/4) arguments are required so you must include this.
         */
        $: removeAppFeatureFromUser$Arguments<_$Scalars>;
    }
    interface removeAppFeatureFromUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        match?: $NamedTypes.$UserInput<_$Scalars> | undefined | null;
        filter?: $NamedTypes.$UserListFilter<_$Scalars> | undefined | null;
        $appFeature: $NamedTypes.$AppFeature;
    }
    /**
     * This is the "expanded" version of the `removeAppFeatureFromUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type removeAppFeatureFromUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<removeAppFeatureFromUser$SelectionSet<_$Scalars>>;
    type reportUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = reportUser$SelectionSet<_$Scalars>;
    interface reportUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `reportUser` field. All arguments are required so you must include this.
         */
        $: reportUser$Arguments<_$Scalars>;
    }
    interface reportUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ReportUserInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `reportUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type reportUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<reportUser$SelectionSet<_$Scalars>>;
    type updateUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateUser$SelectionSet<_$Scalars>;
    interface updateUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateUser` field. All arguments are required so you must include this.
         */
        $: updateUser$Arguments<_$Scalars>;
    }
    interface updateUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateUser$SelectionSet<_$Scalars>>;
    type createUserDevice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createUserDevice$SelectionSet<_$Scalars>;
    interface createUserDevice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
        /**
         * Arguments for `createUserDevice` field. All arguments are required so you must include this.
         */
        $: createUserDevice$Arguments<_$Scalars>;
    }
    interface createUserDevice$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserDeviceInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createUserDevice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createUserDevice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createUserDevice$SelectionSet<_$Scalars>>;
    type updateUserDevice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateUserDevice$SelectionSet<_$Scalars>;
    interface updateUserDevice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateUserDevice` field. All arguments are required so you must include this.
         */
        $: updateUserDevice$Arguments<_$Scalars>;
    }
    interface updateUserDevice$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserDeviceInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateUserDevice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateUserDevice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateUserDevice$SelectionSet<_$Scalars>>;
    type createAcademicExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createAcademicExperience$SelectionSet<_$Scalars>;
    interface createAcademicExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AcademicExperience<_$Scalars> {
        /**
         * Arguments for `createAcademicExperience` field. All arguments are required so you must include this.
         */
        $: createAcademicExperience$Arguments<_$Scalars>;
    }
    interface createAcademicExperience$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$AcademicExperienceInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createAcademicExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createAcademicExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createAcademicExperience$SelectionSet<_$Scalars>>;
    type deleteAcademicExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteAcademicExperience$SelectionSet<_$Scalars>;
    interface deleteAcademicExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteAcademicExperience` field. All arguments are required so you must include this.
         */
        $: deleteAcademicExperience$Arguments<_$Scalars>;
    }
    interface deleteAcademicExperience$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically: boolean;
        academicExperienceId: string;
    }
    /**
     * This is the "expanded" version of the `deleteAcademicExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteAcademicExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteAcademicExperience$SelectionSet<_$Scalars>>;
    type updateAcademicExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateAcademicExperience$SelectionSet<_$Scalars>;
    interface updateAcademicExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateAcademicExperience` field. All arguments are required so you must include this.
         */
        $: updateAcademicExperience$Arguments<_$Scalars>;
    }
    interface updateAcademicExperience$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$AcademicExperienceInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateAcademicExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateAcademicExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateAcademicExperience$SelectionSet<_$Scalars>>;
    type createBusinessExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createBusinessExperience$SelectionSet<_$Scalars>;
    interface createBusinessExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BusinessExperience<_$Scalars> {
        /**
         * Arguments for `createBusinessExperience` field. All arguments are required so you must include this.
         */
        $: createBusinessExperience$Arguments<_$Scalars>;
    }
    interface createBusinessExperience$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$BusinessExperienceInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createBusinessExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createBusinessExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createBusinessExperience$SelectionSet<_$Scalars>>;
    type deleteBusinessExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteBusinessExperience$SelectionSet<_$Scalars>;
    interface deleteBusinessExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteBusinessExperience` field. All arguments are required so you must include this.
         */
        $: deleteBusinessExperience$Arguments<_$Scalars>;
    }
    interface deleteBusinessExperience$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically: boolean;
        businessExperienceId: string;
    }
    /**
     * This is the "expanded" version of the `deleteBusinessExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteBusinessExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteBusinessExperience$SelectionSet<_$Scalars>>;
    type updateBusinessExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateBusinessExperience$SelectionSet<_$Scalars>;
    interface updateBusinessExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateBusinessExperience` field. All arguments are required so you must include this.
         */
        $: updateBusinessExperience$Arguments<_$Scalars>;
    }
    interface updateBusinessExperience$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$BusinessExperienceInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateBusinessExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateBusinessExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateBusinessExperience$SelectionSet<_$Scalars>>;
    type createCompany<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createCompany$SelectionSet<_$Scalars>;
    interface createCompany$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Company<_$Scalars> {
        /**
         * Arguments for `createCompany` field. All arguments are required so you must include this.
         */
        $: createCompany$Arguments<_$Scalars>;
    }
    interface createCompany$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$CompanyInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createCompany` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createCompany$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createCompany$SelectionSet<_$Scalars>>;
    type deleteCompany<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteCompany$SelectionSet<_$Scalars>;
    interface deleteCompany$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteCompany` field. All arguments are required so you must include this.
         */
        $: deleteCompany$Arguments<_$Scalars>;
    }
    interface deleteCompany$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData: boolean;
        deletePhysically: boolean;
        companyId: string;
    }
    /**
     * This is the "expanded" version of the `deleteCompany` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteCompany$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteCompany$SelectionSet<_$Scalars>>;
    type deleteCompanyV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteCompanyV2$SelectionSet<_$Scalars>;
    interface deleteCompanyV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteCompanyV2` field. Some (1/3) arguments are required so you must include this.
         */
        $: deleteCompanyV2$Arguments<_$Scalars>;
    }
    interface deleteCompanyV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        companyId: string;
    }
    /**
     * This is the "expanded" version of the `deleteCompanyV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteCompanyV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteCompanyV2$SelectionSet<_$Scalars>>;
    type updateCompany<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateCompany$SelectionSet<_$Scalars>;
    interface updateCompany$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateCompany` field. All arguments are required so you must include this.
         */
        $: updateCompany$Arguments<_$Scalars>;
    }
    interface updateCompany$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$CompanyInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateCompany` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateCompany$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateCompany$SelectionSet<_$Scalars>>;
    type findAndUpdateAllMm2Users<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | findAndUpdateAllMm2Users$SelectionSet<_$Scalars>;
    interface findAndUpdateAllMm2Users$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `findAndUpdateAllMm2Users` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type findAndUpdateAllMm2Users$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | findAndUpdateAllMm2Users$SelectionSet<_$Scalars>>;
    type createAdminTask<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createAdminTask$SelectionSet<_$Scalars>;
    interface createAdminTask$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AdminTask<_$Scalars> {
        /**
         * Arguments for `createAdminTask` field. All arguments are required so you must include this.
         */
        $: createAdminTask$Arguments<_$Scalars>;
    }
    interface createAdminTask$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        adminTaskInput: $NamedTypes.$AdminTaskInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createAdminTask` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createAdminTask$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createAdminTask$SelectionSet<_$Scalars>>;
    type deleteAdminTask<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteAdminTask$SelectionSet<_$Scalars>;
    interface deleteAdminTask$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteAdminTask` field. All arguments are required so you must include this.
         */
        $: deleteAdminTask$Arguments<_$Scalars>;
    }
    interface deleteAdminTask$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        adminTaskId: string;
    }
    /**
     * This is the "expanded" version of the `deleteAdminTask` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteAdminTask$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteAdminTask$SelectionSet<_$Scalars>>;
    type runAdminTask<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = runAdminTask$SelectionSet<_$Scalars>;
    interface runAdminTask$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `runAdminTask` field. All arguments are required so you must include this.
         */
        $: runAdminTask$Arguments<_$Scalars>;
    }
    interface runAdminTask$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        adminTaskId: string;
    }
    /**
     * This is the "expanded" version of the `runAdminTask` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type runAdminTask$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<runAdminTask$SelectionSet<_$Scalars>>;
    type updateAdminTask<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateAdminTask$SelectionSet<_$Scalars>;
    interface updateAdminTask$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AdminTask<_$Scalars> {
        /**
         * Arguments for `updateAdminTask` field. All arguments are required so you must include this.
         */
        $: updateAdminTask$Arguments<_$Scalars>;
    }
    interface updateAdminTask$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        adminTaskInput: $NamedTypes.$AdminTaskInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateAdminTask` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateAdminTask$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateAdminTask$SelectionSet<_$Scalars>>;
    type createUploadedAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createUploadedAsset$SelectionSet<_$Scalars>;
    interface createUploadedAsset$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
        /**
         * Arguments for `createUploadedAsset` field. All arguments are required so you must include this.
         */
        $: createUploadedAsset$Arguments<_$Scalars>;
    }
    interface createUploadedAsset$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UploadedAssetInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createUploadedAsset` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createUploadedAsset$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createUploadedAsset$SelectionSet<_$Scalars>>;
    type deleteUploadedAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteUploadedAsset$SelectionSet<_$Scalars>;
    interface deleteUploadedAsset$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
        /**
         * Arguments for `deleteUploadedAsset` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteUploadedAsset$Arguments<_$Scalars>;
    }
    interface deleteUploadedAsset$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteUploadedAsset` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteUploadedAsset$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteUploadedAsset$SelectionSet<_$Scalars>>;
    type initAssetUpload<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = initAssetUpload$SelectionSet<_$Scalars>;
    interface initAssetUpload$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
        /**
         * Arguments for `initAssetUpload` field. All arguments are required so you must include this.
         */
        $: initAssetUpload$Arguments<_$Scalars>;
    }
    interface initAssetUpload$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UploadedAssetInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `initAssetUpload` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type initAssetUpload$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<initAssetUpload$SelectionSet<_$Scalars>>;
    type updateUploadedAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateUploadedAsset$SelectionSet<_$Scalars>;
    interface updateUploadedAsset$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateUploadedAsset` field. All arguments are required so you must include this.
         */
        $: updateUploadedAsset$Arguments<_$Scalars>;
    }
    interface updateUploadedAsset$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UploadedAssetInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateUploadedAsset` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateUploadedAsset$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateUploadedAsset$SelectionSet<_$Scalars>>;
    type acceptChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = acceptChannelInvitation$SelectionSet<_$Scalars>;
    interface acceptChannelInvitation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `acceptChannelInvitation` field. All arguments are required so you must include this.
         */
        $: acceptChannelInvitation$Arguments<_$Scalars>;
    }
    interface acceptChannelInvitation$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        channelInvitationId: string;
    }
    /**
     * This is the "expanded" version of the `acceptChannelInvitation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type acceptChannelInvitation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<acceptChannelInvitation$SelectionSet<_$Scalars>>;
    type acceptChannelInvitationV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = acceptChannelInvitationV2$SelectionSet<_$Scalars>;
    interface acceptChannelInvitationV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `acceptChannelInvitationV2` field. All arguments are required so you must include this.
         */
        $: acceptChannelInvitationV2$Arguments<_$Scalars>;
    }
    interface acceptChannelInvitationV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `acceptChannelInvitationV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type acceptChannelInvitationV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<acceptChannelInvitationV2$SelectionSet<_$Scalars>>;
    type createChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createChannelInvitation$SelectionSet<_$Scalars>;
    interface createChannelInvitation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
        /**
         * Arguments for `createChannelInvitation` field. All arguments are required so you must include this.
         */
        $: createChannelInvitation$Arguments<_$Scalars>;
    }
    interface createChannelInvitation$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelInvitationInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createChannelInvitation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createChannelInvitation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createChannelInvitation$SelectionSet<_$Scalars>>;
    type declineChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = declineChannelInvitation$SelectionSet<_$Scalars>;
    interface declineChannelInvitation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `declineChannelInvitation` field. All arguments are required so you must include this.
         */
        $: declineChannelInvitation$Arguments<_$Scalars>;
    }
    interface declineChannelInvitation$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $reasonTextId: $NamedTypes.$DeclineChannelInvitationReasonTextId;
        channelInvitationId: string;
    }
    /**
     * This is the "expanded" version of the `declineChannelInvitation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type declineChannelInvitation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<declineChannelInvitation$SelectionSet<_$Scalars>>;
    type declineChannelInvitationV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = declineChannelInvitationV2$SelectionSet<_$Scalars>;
    interface declineChannelInvitationV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `declineChannelInvitationV2` field. All arguments are required so you must include this.
         */
        $: declineChannelInvitationV2$Arguments<_$Scalars>;
    }
    interface declineChannelInvitationV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $reasonTextId: $NamedTypes.$DeclineChannelInvitationReasonTextId;
        id: string;
    }
    /**
     * This is the "expanded" version of the `declineChannelInvitationV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type declineChannelInvitationV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<declineChannelInvitationV2$SelectionSet<_$Scalars>>;
    type deleteChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelInvitation$SelectionSet<_$Scalars>;
    interface deleteChannelInvitation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteChannelInvitation` field. All arguments are required so you must include this.
         */
        $: deleteChannelInvitation$Arguments<_$Scalars>;
    }
    interface deleteChannelInvitation$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically: boolean;
        channelInvitationId: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelInvitation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelInvitation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelInvitation$SelectionSet<_$Scalars>>;
    type deleteChannelInvitationV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelInvitationV2$SelectionSet<_$Scalars>;
    interface deleteChannelInvitationV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteChannelInvitationV2` field. Some (1/3) arguments are required so you must include this.
         */
        $: deleteChannelInvitationV2$Arguments<_$Scalars>;
    }
    interface deleteChannelInvitationV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelInvitationV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelInvitationV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelInvitationV2$SelectionSet<_$Scalars>>;
    type dismissChannelInvitationFromInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = dismissChannelInvitationFromInbox$SelectionSet<_$Scalars>;
    interface dismissChannelInvitationFromInbox$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `dismissChannelInvitationFromInbox` field. All arguments are required so you must include this.
         */
        $: dismissChannelInvitationFromInbox$Arguments<_$Scalars>;
    }
    interface dismissChannelInvitationFromInbox$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        channelInvitationId: string;
    }
    /**
     * This is the "expanded" version of the `dismissChannelInvitationFromInbox` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissChannelInvitationFromInbox$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<dismissChannelInvitationFromInbox$SelectionSet<_$Scalars>>;
    type dismissChannelInvitationFromInboxV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = dismissChannelInvitationFromInboxV2$SelectionSet<_$Scalars>;
    interface dismissChannelInvitationFromInboxV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `dismissChannelInvitationFromInboxV2` field. All arguments are required so you must include this.
         */
        $: dismissChannelInvitationFromInboxV2$Arguments<_$Scalars>;
    }
    interface dismissChannelInvitationFromInboxV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `dismissChannelInvitationFromInboxV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissChannelInvitationFromInboxV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<dismissChannelInvitationFromInboxV2$SelectionSet<_$Scalars>>;
    type updateChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateChannelInvitation$SelectionSet<_$Scalars>;
    interface updateChannelInvitation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateChannelInvitation` field. All arguments are required so you must include this.
         */
        $: updateChannelInvitation$Arguments<_$Scalars>;
    }
    interface updateChannelInvitation$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelInvitationInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateChannelInvitation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateChannelInvitation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateChannelInvitation$SelectionSet<_$Scalars>>;
    type archiveChannelForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = archiveChannelForMe$SelectionSet<_$Scalars>;
    interface archiveChannelForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `archiveChannelForMe` field. All arguments are required so you must include this.
         */
        $: archiveChannelForMe$Arguments<_$Scalars>;
    }
    interface archiveChannelForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        channelId: string;
    }
    /**
     * This is the "expanded" version of the `archiveChannelForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archiveChannelForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<archiveChannelForMe$SelectionSet<_$Scalars>>;
    type createChannel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createChannel$SelectionSet<_$Scalars>;
    interface createChannel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `createChannel` field. All arguments are required so you must include this.
         */
        $: createChannel$Arguments<_$Scalars>;
    }
    interface createChannel$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createChannel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createChannel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createChannel$SelectionSet<_$Scalars>>;
    type deleteChannel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannel$SelectionSet<_$Scalars>;
    interface deleteChannel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteChannel` field. All arguments are required so you must include this.
         */
        $: deleteChannel$Arguments<_$Scalars>;
    }
    interface deleteChannel$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData: boolean;
        deletePhysically: boolean;
        channelId: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannel$SelectionSet<_$Scalars>>;
    type deleteChannelV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelV2$SelectionSet<_$Scalars>;
    interface deleteChannelV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteChannelV2` field. Some (1/3) arguments are required so you must include this.
         */
        $: deleteChannelV2$Arguments<_$Scalars>;
    }
    interface deleteChannelV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelV2$SelectionSet<_$Scalars>>;
    type markChannelMessagesAsSeenByMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = markChannelMessagesAsSeenByMe$SelectionSet<_$Scalars>;
    interface markChannelMessagesAsSeenByMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `markChannelMessagesAsSeenByMe` field. All arguments are required so you must include this.
         */
        $: markChannelMessagesAsSeenByMe$Arguments<_$Scalars>;
    }
    interface markChannelMessagesAsSeenByMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        channelId: string;
    }
    /**
     * This is the "expanded" version of the `markChannelMessagesAsSeenByMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type markChannelMessagesAsSeenByMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<markChannelMessagesAsSeenByMe$SelectionSet<_$Scalars>>;
    type updateChannel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateChannel$SelectionSet<_$Scalars>;
    interface updateChannel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateChannel` field. All arguments are required so you must include this.
         */
        $: updateChannel$Arguments<_$Scalars>;
    }
    interface updateChannel$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateChannel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateChannel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateChannel$SelectionSet<_$Scalars>>;
    type unarchiveChannelForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unarchiveChannelForMe$SelectionSet<_$Scalars>;
    interface unarchiveChannelForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `unarchiveChannelForMe` field. All arguments are required so you must include this.
         */
        $: unarchiveChannelForMe$Arguments<_$Scalars>;
    }
    interface unarchiveChannelForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        channelId: string;
    }
    /**
     * This is the "expanded" version of the `unarchiveChannelForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unarchiveChannelForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unarchiveChannelForMe$SelectionSet<_$Scalars>>;
    type addChannelMessageEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = addChannelMessageEvent$SelectionSet<_$Scalars>;
    interface addChannelMessageEvent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `addChannelMessageEvent` field. All arguments are required so you must include this.
         */
        $: addChannelMessageEvent$Arguments<_$Scalars>;
    }
    interface addChannelMessageEvent$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$BgAddChannelMessageEventInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `addChannelMessageEvent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type addChannelMessageEvent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<addChannelMessageEvent$SelectionSet<_$Scalars>>;
    type createChannelMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createChannelMessage$SelectionSet<_$Scalars>;
    interface createChannelMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
        /**
         * Arguments for `createChannelMessage` field. All arguments are required so you must include this.
         */
        $: createChannelMessage$Arguments<_$Scalars>;
    }
    interface createChannelMessage$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelMessageInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createChannelMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createChannelMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createChannelMessage$SelectionSet<_$Scalars>>;
    type deleteChannelMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelMessage$SelectionSet<_$Scalars>;
    interface deleteChannelMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteChannelMessage` field. All arguments are required so you must include this.
         */
        $: deleteChannelMessage$Arguments<_$Scalars>;
    }
    interface deleteChannelMessage$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically: boolean;
        channelMessageId: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelMessage$SelectionSet<_$Scalars>>;
    type deleteChannelMessageV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelMessageV2$SelectionSet<_$Scalars>;
    interface deleteChannelMessageV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteChannelMessageV2` field. Some (1/3) arguments are required so you must include this.
         */
        $: deleteChannelMessageV2$Arguments<_$Scalars>;
    }
    interface deleteChannelMessageV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelMessageV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelMessageV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelMessageV2$SelectionSet<_$Scalars>>;
    type updateChannelMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateChannelMessage$SelectionSet<_$Scalars>;
    interface updateChannelMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateChannelMessage` field. All arguments are required so you must include this.
         */
        $: updateChannelMessage$Arguments<_$Scalars>;
    }
    interface updateChannelMessage$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelMessageInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateChannelMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateChannelMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateChannelMessage$SelectionSet<_$Scalars>>;
    type createChannelParticipant<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createChannelParticipant$SelectionSet<_$Scalars>;
    interface createChannelParticipant$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
        /**
         * Arguments for `createChannelParticipant` field. All arguments are required so you must include this.
         */
        $: createChannelParticipant$Arguments<_$Scalars>;
    }
    interface createChannelParticipant$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelParticipantInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createChannelParticipant` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createChannelParticipant$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createChannelParticipant$SelectionSet<_$Scalars>>;
    type deleteChannelParticipant<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelParticipant$SelectionSet<_$Scalars>;
    interface deleteChannelParticipant$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteChannelParticipant` field. All arguments are required so you must include this.
         */
        $: deleteChannelParticipant$Arguments<_$Scalars>;
    }
    interface deleteChannelParticipant$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically: boolean;
        channelParticipantId: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelParticipant` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelParticipant$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelParticipant$SelectionSet<_$Scalars>>;
    type deleteChannelParticipantV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteChannelParticipantV2$SelectionSet<_$Scalars>;
    interface deleteChannelParticipantV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteChannelParticipantV2` field. Some (1/3) arguments are required so you must include this.
         */
        $: deleteChannelParticipantV2$Arguments<_$Scalars>;
    }
    interface deleteChannelParticipantV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteChannelParticipantV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteChannelParticipantV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteChannelParticipantV2$SelectionSet<_$Scalars>>;
    type updateChannelParticipant<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateChannelParticipant$SelectionSet<_$Scalars>;
    interface updateChannelParticipant$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateChannelParticipant` field. All arguments are required so you must include this.
         */
        $: updateChannelParticipant$Arguments<_$Scalars>;
    }
    interface updateChannelParticipant$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ChannelParticipantInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateChannelParticipant` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateChannelParticipant$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateChannelParticipant$SelectionSet<_$Scalars>>;
    type createContentTag<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createContentTag$SelectionSet<_$Scalars>;
    interface createContentTag$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContentTag<_$Scalars> {
        /**
         * Arguments for `createContentTag` field. All arguments are required so you must include this.
         */
        $: createContentTag$Arguments<_$Scalars>;
    }
    interface createContentTag$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ContentTagInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createContentTag` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createContentTag$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createContentTag$SelectionSet<_$Scalars>>;
    type deleteContentTag<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteContentTag$SelectionSet<_$Scalars>;
    interface deleteContentTag$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteContentTag` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteContentTag$Arguments<_$Scalars>;
    }
    interface deleteContentTag$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        contentTagId: string;
    }
    /**
     * This is the "expanded" version of the `deleteContentTag` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteContentTag$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteContentTag$SelectionSet<_$Scalars>>;
    type updateContentTag<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateContentTag$SelectionSet<_$Scalars>;
    interface updateContentTag$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateContentTag` field. All arguments are required so you must include this.
         */
        $: updateContentTag$Arguments<_$Scalars>;
    }
    interface updateContentTag$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ContentTagInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateContentTag` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateContentTag$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateContentTag$SelectionSet<_$Scalars>>;
    type createGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createGroupMembership$SelectionSet<_$Scalars>;
    interface createGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `createGroupMembership` field. All arguments are required so you must include this.
         */
        $: createGroupMembership$Arguments<_$Scalars>;
    }
    interface createGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$GroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createGroupMembership$SelectionSet<_$Scalars>>;
    type createMenteesGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createMenteesGroupMembership$SelectionSet<_$Scalars>;
    interface createMenteesGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `createMenteesGroupMembership` field. All arguments are required so you must include this.
         */
        $: createMenteesGroupMembership$Arguments<_$Scalars>;
    }
    interface createMenteesGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$MenteesGroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createMenteesGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createMenteesGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createMenteesGroupMembership$SelectionSet<_$Scalars>>;
    type createMentorsGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createMentorsGroupMembership$SelectionSet<_$Scalars>;
    interface createMentorsGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `createMentorsGroupMembership` field. All arguments are required so you must include this.
         */
        $: createMentorsGroupMembership$Arguments<_$Scalars>;
    }
    interface createMentorsGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$MentorsGroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createMentorsGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createMentorsGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createMentorsGroupMembership$SelectionSet<_$Scalars>>;
    type deleteGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteGroupMembership$SelectionSet<_$Scalars>;
    interface deleteGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteGroupMembership` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteGroupMembership$Arguments<_$Scalars>;
    }
    interface deleteGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        groupMembershipId: string;
    }
    /**
     * This is the "expanded" version of the `deleteGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteGroupMembership$SelectionSet<_$Scalars>>;
    type updateGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateGroupMembership$SelectionSet<_$Scalars>;
    interface updateGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateGroupMembership` field. All arguments are required so you must include this.
         */
        $: updateGroupMembership$Arguments<_$Scalars>;
    }
    interface updateGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$GroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateGroupMembership$SelectionSet<_$Scalars>>;
    type updateIqlaaGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateIqlaaGroupMembership$SelectionSet<_$Scalars>;
    interface updateIqlaaGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateIqlaaGroupMembership` field. All arguments are required so you must include this.
         */
        $: updateIqlaaGroupMembership$Arguments<_$Scalars>;
    }
    interface updateIqlaaGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$IqlaaGroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateIqlaaGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateIqlaaGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateIqlaaGroupMembership$SelectionSet<_$Scalars>>;
    type updateMastercardGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateMastercardGroupMembership$SelectionSet<_$Scalars>;
    interface updateMastercardGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateMastercardGroupMembership` field. All arguments are required so you must include this.
         */
        $: updateMastercardGroupMembership$Arguments<_$Scalars>;
    }
    interface updateMastercardGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$MastercardGroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateMastercardGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateMastercardGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateMastercardGroupMembership$SelectionSet<_$Scalars>>;
    type updateMenteesGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateMenteesGroupMembership$SelectionSet<_$Scalars>;
    interface updateMenteesGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateMenteesGroupMembership` field. All arguments are required so you must include this.
         */
        $: updateMenteesGroupMembership$Arguments<_$Scalars>;
    }
    interface updateMenteesGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$MenteesGroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateMenteesGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateMenteesGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateMenteesGroupMembership$SelectionSet<_$Scalars>>;
    type updateMentorsGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateMentorsGroupMembership$SelectionSet<_$Scalars>;
    interface updateMentorsGroupMembership$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateMentorsGroupMembership` field. All arguments are required so you must include this.
         */
        $: updateMentorsGroupMembership$Arguments<_$Scalars>;
    }
    interface updateMentorsGroupMembership$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$MentorsGroupMembershipInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateMentorsGroupMembership` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateMentorsGroupMembership$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateMentorsGroupMembership$SelectionSet<_$Scalars>>;
    type addUserToGroup<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = addUserToGroup$SelectionSet<_$Scalars>;
    interface addUserToGroup$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `addUserToGroup` field. Some (2/4) arguments are required so you must include this.
         */
        $: addUserToGroup$Arguments<_$Scalars>;
    }
    interface addUserToGroup$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $roles: Array<$NamedTypes.$GroupMembershipRole | undefined | null>;
        groupIdent?: string | undefined | null;
        groupId?: string | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `addUserToGroup` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type addUserToGroup$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<addUserToGroup$SelectionSet<_$Scalars>>;
    type createGroup<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createGroup$SelectionSet<_$Scalars>;
    interface createGroup$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
        /**
         * Arguments for `createGroup` field. All arguments are required so you must include this.
         */
        $: createGroup$Arguments<_$Scalars>;
    }
    interface createGroup$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$GroupInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createGroup` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createGroup$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createGroup$SelectionSet<_$Scalars>>;
    type deleteGroup<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteGroup$SelectionSet<_$Scalars>;
    interface deleteGroup$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteGroup` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteGroup$Arguments<_$Scalars>;
    }
    interface deleteGroup$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        groupId: string;
    }
    /**
     * This is the "expanded" version of the `deleteGroup` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteGroup$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteGroup$SelectionSet<_$Scalars>>;
    type removeUserFromGroup<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = removeUserFromGroup$SelectionSet<_$Scalars>;
    interface removeUserFromGroup$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `removeUserFromGroup` field. Some (2/4) arguments are required so you must include this.
         */
        $: removeUserFromGroup$Arguments<_$Scalars>;
    }
    interface removeUserFromGroup$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        force: boolean;
        groupIdent?: string | undefined | null;
        groupId?: string | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `removeUserFromGroup` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type removeUserFromGroup$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<removeUserFromGroup$SelectionSet<_$Scalars>>;
    type updateGroup<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateGroup$SelectionSet<_$Scalars>;
    interface updateGroup$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateGroup` field. All arguments are required so you must include this.
         */
        $: updateGroup$Arguments<_$Scalars>;
    }
    interface updateGroup$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$GroupInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateGroup` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateGroup$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateGroup$SelectionSet<_$Scalars>>;
    type createSupportChannelConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createSupportChannelConfig$SelectionSet<_$Scalars>;
    interface createSupportChannelConfig$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SupportChannelConfig<_$Scalars> {
        /**
         * Arguments for `createSupportChannelConfig` field. All arguments are required so you must include this.
         */
        $: createSupportChannelConfig$Arguments<_$Scalars>;
    }
    interface createSupportChannelConfig$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SupportChannelConfigInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createSupportChannelConfig` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createSupportChannelConfig$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createSupportChannelConfig$SelectionSet<_$Scalars>>;
    type deleteSupportChannelConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteSupportChannelConfig$SelectionSet<_$Scalars>;
    interface deleteSupportChannelConfig$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteSupportChannelConfig` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteSupportChannelConfig$Arguments<_$Scalars>;
    }
    interface deleteSupportChannelConfig$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        supportChannelConfigId: string;
    }
    /**
     * This is the "expanded" version of the `deleteSupportChannelConfig` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteSupportChannelConfig$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteSupportChannelConfig$SelectionSet<_$Scalars>>;
    type updateSupportChannelConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateSupportChannelConfig$SelectionSet<_$Scalars>;
    interface updateSupportChannelConfig$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateSupportChannelConfig` field. All arguments are required so you must include this.
         */
        $: updateSupportChannelConfig$Arguments<_$Scalars>;
    }
    interface updateSupportChannelConfig$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SupportChannelConfigInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateSupportChannelConfig` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateSupportChannelConfig$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateSupportChannelConfig$SelectionSet<_$Scalars>>;
    type createPurchaseOrder<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createPurchaseOrder$SelectionSet<_$Scalars>;
    interface createPurchaseOrder$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `createPurchaseOrder` field. All arguments are required so you must include this.
         */
        $: createPurchaseOrder$Arguments<_$Scalars>;
    }
    interface createPurchaseOrder$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$PurchaseOrderInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createPurchaseOrder` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createPurchaseOrder$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createPurchaseOrder$SelectionSet<_$Scalars>>;
    type createShoppingCartItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createShoppingCartItem$SelectionSet<_$Scalars>;
    interface createShoppingCartItem$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ShoppingCartItem<_$Scalars> {
        /**
         * Arguments for `createShoppingCartItem` field. Some (1/2) arguments are required so you must include this.
         */
        $: createShoppingCartItem$Arguments<_$Scalars>;
    }
    interface createShoppingCartItem$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$UpdateObjectOptions<_$Scalars> | undefined | null;
        input: $NamedTypes.$ShoppingCartItemInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createShoppingCartItem` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createShoppingCartItem$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createShoppingCartItem$SelectionSet<_$Scalars>>;
    type deleteShoppingCartItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteShoppingCartItem$SelectionSet<_$Scalars>;
    interface deleteShoppingCartItem$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteShoppingCartItem` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteShoppingCartItem$Arguments<_$Scalars>;
    }
    interface deleteShoppingCartItem$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteShoppingCartItem` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteShoppingCartItem$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteShoppingCartItem$SelectionSet<_$Scalars>>;
    type updateShoppingCartItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateShoppingCartItem$SelectionSet<_$Scalars>;
    interface updateShoppingCartItem$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateShoppingCartItem` field. Some (1/2) arguments are required so you must include this.
         */
        $: updateShoppingCartItem$Arguments<_$Scalars>;
    }
    interface updateShoppingCartItem$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$UpdateObjectOptions<_$Scalars> | undefined | null;
        input: $NamedTypes.$ShoppingCartItemInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateShoppingCartItem` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateShoppingCartItem$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateShoppingCartItem$SelectionSet<_$Scalars>>;
    type clearMyShoppingCart<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = clearMyShoppingCart$SelectionSet<_$Scalars>;
    interface clearMyShoppingCart$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `clearMyShoppingCart` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type clearMyShoppingCart$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<clearMyShoppingCart$SelectionSet<_$Scalars>>;
    type clearShoppingCart<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = clearShoppingCart$SelectionSet<_$Scalars>;
    interface clearShoppingCart$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `clearShoppingCart` field. All arguments are required so you must include this.
         */
        $: clearShoppingCart$Arguments<_$Scalars>;
    }
    interface clearShoppingCart$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        id: string;
    }
    /**
     * This is the "expanded" version of the `clearShoppingCart` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type clearShoppingCart$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<clearShoppingCart$SelectionSet<_$Scalars>>;
    type createWalletItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createWalletItem$SelectionSet<_$Scalars>;
    interface createWalletItem$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$WalletItem<_$Scalars> {
        /**
         * Arguments for `createWalletItem` field. Some (1/2) arguments are required so you must include this.
         */
        $: createWalletItem$Arguments<_$Scalars>;
    }
    interface createWalletItem$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$UpdateObjectOptions<_$Scalars> | undefined | null;
        input: $NamedTypes.$WalletItemInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createWalletItem` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createWalletItem$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createWalletItem$SelectionSet<_$Scalars>>;
    type deleteWalletItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteWalletItem$SelectionSet<_$Scalars>;
    interface deleteWalletItem$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteWalletItem` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteWalletItem$Arguments<_$Scalars>;
    }
    interface deleteWalletItem$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteWalletItem` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteWalletItem$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteWalletItem$SelectionSet<_$Scalars>>;
    type updateWalletItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateWalletItem$SelectionSet<_$Scalars>;
    interface updateWalletItem$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateWalletItem` field. Some (1/2) arguments are required so you must include this.
         */
        $: updateWalletItem$Arguments<_$Scalars>;
    }
    interface updateWalletItem$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$UpdateObjectOptions<_$Scalars> | undefined | null;
        input: $NamedTypes.$WalletItemInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateWalletItem` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateWalletItem$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateWalletItem$SelectionSet<_$Scalars>>;
    type acceptWalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = acceptWalletItemTransfer$SelectionSet<_$Scalars>;
    interface acceptWalletItemTransfer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `acceptWalletItemTransfer` field. All arguments are required so you must include this.
         */
        $: acceptWalletItemTransfer$Arguments<_$Scalars>;
    }
    interface acceptWalletItemTransfer$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        transferSecret: string;
        transferSlug: string;
    }
    /**
     * This is the "expanded" version of the `acceptWalletItemTransfer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type acceptWalletItemTransfer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<acceptWalletItemTransfer$SelectionSet<_$Scalars>>;
    type createWalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createWalletItemTransfer$SelectionSet<_$Scalars>;
    interface createWalletItemTransfer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `createWalletItemTransfer` field. All arguments are required so you must include this.
         */
        $: createWalletItemTransfer$Arguments<_$Scalars>;
    }
    interface createWalletItemTransfer$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$WalletItemTransferInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createWalletItemTransfer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createWalletItemTransfer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createWalletItemTransfer$SelectionSet<_$Scalars>>;
    type declineWalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = declineWalletItemTransfer$SelectionSet<_$Scalars>;
    interface declineWalletItemTransfer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `declineWalletItemTransfer` field. All arguments are required so you must include this.
         */
        $: declineWalletItemTransfer$Arguments<_$Scalars>;
    }
    interface declineWalletItemTransfer$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        transferSlug: string;
    }
    /**
     * This is the "expanded" version of the `declineWalletItemTransfer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type declineWalletItemTransfer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<declineWalletItemTransfer$SelectionSet<_$Scalars>>;
    type deleteWalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteWalletItemTransfer$SelectionSet<_$Scalars>;
    interface deleteWalletItemTransfer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteWalletItemTransfer` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteWalletItemTransfer$Arguments<_$Scalars>;
    }
    interface deleteWalletItemTransfer$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        id: string;
    }
    /**
     * This is the "expanded" version of the `deleteWalletItemTransfer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteWalletItemTransfer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteWalletItemTransfer$SelectionSet<_$Scalars>>;
    type updateWalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateWalletItemTransfer$SelectionSet<_$Scalars>;
    interface updateWalletItemTransfer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateWalletItemTransfer` field. Some (1/2) arguments are required so you must include this.
         */
        $: updateWalletItemTransfer$Arguments<_$Scalars>;
    }
    interface updateWalletItemTransfer$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        options?: $NamedTypes.$UpdateObjectOptions<_$Scalars> | undefined | null;
        input: $NamedTypes.$WalletItemTransferInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateWalletItemTransfer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateWalletItemTransfer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateWalletItemTransfer$SelectionSet<_$Scalars>>;
    type createUserSearch<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createUserSearch$SelectionSet<_$Scalars>;
    interface createUserSearch$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserSearch<_$Scalars> {
        /**
         * Arguments for `createUserSearch` field. All arguments are required so you must include this.
         */
        $: createUserSearch$Arguments<_$Scalars>;
    }
    interface createUserSearch$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserSearchInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createUserSearch` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createUserSearch$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createUserSearch$SelectionSet<_$Scalars>>;
    type deleteUserSearch<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteUserSearch$SelectionSet<_$Scalars>;
    interface deleteUserSearch$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteUserSearch` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteUserSearch$Arguments<_$Scalars>;
    }
    interface deleteUserSearch$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        userSearchId: string;
    }
    /**
     * This is the "expanded" version of the `deleteUserSearch` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteUserSearch$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteUserSearch$SelectionSet<_$Scalars>>;
    type updateUserSearch<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateUserSearch$SelectionSet<_$Scalars>;
    interface updateUserSearch$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `updateUserSearch` field. All arguments are required so you must include this.
         */
        $: updateUserSearch$Arguments<_$Scalars>;
    }
    interface updateUserSearch$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserSearchInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateUserSearch` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateUserSearch$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateUserSearch$SelectionSet<_$Scalars>>;
    type createNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createNotification$SelectionSet<_$Scalars>;
    interface createNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Notification<_$Scalars> {
        /**
         * Arguments for `createNotification` field. All arguments are required so you must include this.
         */
        $: createNotification$Arguments<_$Scalars>;
    }
    interface createNotification$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        notificationInput: $NamedTypes.$NotificationInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createNotification$SelectionSet<_$Scalars>>;
    type deleteNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteNotification$SelectionSet<_$Scalars>;
    interface deleteNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteNotification` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteNotification$Arguments<_$Scalars>;
    }
    interface deleteNotification$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        notificationId: string;
    }
    /**
     * This is the "expanded" version of the `deleteNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteNotification$SelectionSet<_$Scalars>>;
    type markInAppMessageReceived<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = markInAppMessageReceived$SelectionSet<_$Scalars>;
    interface markInAppMessageReceived$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `markInAppMessageReceived` field. All arguments are required so you must include this.
         */
        $: markInAppMessageReceived$Arguments<_$Scalars>;
    }
    interface markInAppMessageReceived$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        $actionTaken: $NamedTypes.$AppAction;
        notificationId: string;
    }
    /**
     * This is the "expanded" version of the `markInAppMessageReceived` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type markInAppMessageReceived$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<markInAppMessageReceived$SelectionSet<_$Scalars>>;
    type sendMultiStepActionNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = sendMultiStepActionNotification$SelectionSet<_$Scalars>;
    interface sendMultiStepActionNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `sendMultiStepActionNotification` field. All arguments are required so you must include this.
         */
        $: sendMultiStepActionNotification$Arguments<_$Scalars>;
    }
    interface sendMultiStepActionNotification$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SendMultiStepActionNotificationInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `sendMultiStepActionNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendMultiStepActionNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<sendMultiStepActionNotification$SelectionSet<_$Scalars>>;
    type updateNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateNotification$SelectionSet<_$Scalars>;
    interface updateNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateNotification` field. All arguments are required so you must include this.
         */
        $: updateNotification$Arguments<_$Scalars>;
    }
    interface updateNotification$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        notificationInput: $NamedTypes.$NotificationInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateNotification$SelectionSet<_$Scalars>>;
    type createNotificationTemplate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createNotificationTemplate$SelectionSet<_$Scalars>;
    interface createNotificationTemplate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$NotificationTemplate<_$Scalars> {
        /**
         * Arguments for `createNotificationTemplate` field. All arguments are required so you must include this.
         */
        $: createNotificationTemplate$Arguments<_$Scalars>;
    }
    interface createNotificationTemplate$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        notificationTemplateInput: $NamedTypes.$NotificationTemplateInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createNotificationTemplate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createNotificationTemplate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createNotificationTemplate$SelectionSet<_$Scalars>>;
    type deleteNotificationTemplate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteNotificationTemplate$SelectionSet<_$Scalars>;
    interface deleteNotificationTemplate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteNotificationTemplate` field. Some (1/2) arguments are required so you must include this.
         */
        $: deleteNotificationTemplate$Arguments<_$Scalars>;
    }
    interface deleteNotificationTemplate$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deletePhysically?: boolean | undefined | null;
        notificationTemplateId: string;
    }
    /**
     * This is the "expanded" version of the `deleteNotificationTemplate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteNotificationTemplate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteNotificationTemplate$SelectionSet<_$Scalars>>;
    type updateNotificationTemplate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateNotificationTemplate$SelectionSet<_$Scalars>;
    interface updateNotificationTemplate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateNotificationTemplate` field. All arguments are required so you must include this.
         */
        $: updateNotificationTemplate$Arguments<_$Scalars>;
    }
    interface updateNotificationTemplate$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        notificationTemplateInput: $NamedTypes.$NotificationTemplateInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateNotificationTemplate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateNotificationTemplate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateNotificationTemplate$SelectionSet<_$Scalars>>;
    type createContact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createContact$SelectionSet<_$Scalars>;
    interface createContact$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Contact<_$Scalars> {
        /**
         * Arguments for `createContact` field. All arguments are required so you must include this.
         */
        $: createContact$Arguments<_$Scalars>;
    }
    interface createContact$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ContactInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createContact` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createContact$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createContact$SelectionSet<_$Scalars>>;
    type updateContact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateContact$SelectionSet<_$Scalars>;
    interface updateContact$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateContact` field. All arguments are required so you must include this.
         */
        $: updateContact$Arguments<_$Scalars>;
    }
    interface updateContact$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$ContactInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateContact` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateContact$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateContact$SelectionSet<_$Scalars>>;
    type createMultiStepAction<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createMultiStepAction$SelectionSet<_$Scalars>;
    interface createMultiStepAction$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepActionProgress<_$Scalars> {
        /**
         * Arguments for `createMultiStepAction` field. All arguments are required so you must include this.
         */
        $: createMultiStepAction$Arguments<_$Scalars>;
    }
    interface createMultiStepAction$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$SidMultiStepActionInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createMultiStepAction` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createMultiStepAction$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createMultiStepAction$SelectionSet<_$Scalars>>;
    type startResetPassword<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = startResetPassword$SelectionSet<_$Scalars>;
    interface startResetPassword$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepActionProgress<_$Scalars> {
        /**
         * Arguments for `startResetPassword` field. All arguments are required so you must include this.
         */
        $: startResetPassword$Arguments<_$Scalars>;
    }
    interface startResetPassword$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserIdentInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `startResetPassword` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startResetPassword$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<startResetPassword$SelectionSet<_$Scalars>>;
    type startVerifyEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = startVerifyEmail$SelectionSet<_$Scalars>;
    interface startVerifyEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepActionProgress<_$Scalars> {
        /**
         * Arguments for `startVerifyEmail` field. All arguments are required so you must include this.
         */
        $: startVerifyEmail$Arguments<_$Scalars>;
    }
    interface startVerifyEmail$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        email: string;
    }
    /**
     * This is the "expanded" version of the `startVerifyEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startVerifyEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<startVerifyEmail$SelectionSet<_$Scalars>>;
    type startVerifyPhoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = startVerifyPhoneNumber$SelectionSet<_$Scalars>;
    interface startVerifyPhoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepActionProgress<_$Scalars> {
        /**
         * Arguments for `startVerifyPhoneNumber` field. No arguments are required so you may omit this.
         */
        $?: startVerifyPhoneNumber$Arguments<_$Scalars>;
    }
    interface startVerifyPhoneNumber$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        phoneNumber?: string | undefined | null;
    }
    /**
     * This is the "expanded" version of the `startVerifyPhoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startVerifyPhoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<startVerifyPhoneNumber$SelectionSet<_$Scalars>>;
    type verifyMultiStepActionToken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = verifyMultiStepActionToken$SelectionSet<_$Scalars>;
    interface verifyMultiStepActionToken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$SidMultiStepActionProgress<_$Scalars> {
        /**
         * Arguments for `verifyMultiStepActionToken` field. All arguments are required so you must include this.
         */
        $: verifyMultiStepActionToken$Arguments<_$Scalars>;
    }
    interface verifyMultiStepActionToken$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$VerifyMultiStepActionTokenInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `verifyMultiStepActionToken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifyMultiStepActionToken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<verifyMultiStepActionToken$SelectionSet<_$Scalars>>;
    type blockUserForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = blockUserForMe$SelectionSet<_$Scalars>;
    interface blockUserForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `blockUserForMe` field. Some (1/3) arguments are required so you must include this.
         */
        $: blockUserForMe$Arguments<_$Scalars>;
    }
    interface blockUserForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        notes?: string | undefined | null;
        reasonTextId?: string | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `blockUserForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type blockUserForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<blockUserForMe$SelectionSet<_$Scalars>>;
    type blockUserForMeV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = blockUserForMeV2$SelectionSet<_$Scalars>;
    interface blockUserForMeV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `blockUserForMeV2` field. Some (1/3) arguments are required so you must include this.
         */
        $: blockUserForMeV2$Arguments<_$Scalars>;
    }
    interface blockUserForMeV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        notes?: string | undefined | null;
        reasonTextId?: string | undefined | null;
        userId: string;
    }
    /**
     * This is the "expanded" version of the `blockUserForMeV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type blockUserForMeV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<blockUserForMeV2$SelectionSet<_$Scalars>>;
    type deleteMyUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteMyUser$SelectionSet<_$Scalars>;
    interface deleteMyUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `deleteMyUser` field. Some (1/4) arguments are required so you must include this.
         */
        $: deleteMyUser$Arguments<_$Scalars>;
    }
    interface deleteMyUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically: boolean;
        description?: string | undefined | null;
        cause?: string | undefined | null;
    }
    /**
     * This is the "expanded" version of the `deleteMyUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteMyUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteMyUser$SelectionSet<_$Scalars>>;
    type deleteMyUserV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = deleteMyUserV2$SelectionSet<_$Scalars>;
    interface deleteMyUserV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `deleteMyUserV2` field. No arguments are required so you may omit this.
         */
        $?: deleteMyUserV2$Arguments<_$Scalars>;
    }
    interface deleteMyUserV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        anonymizePersonalData?: boolean | undefined | null;
        deletePhysically?: boolean | undefined | null;
        description?: string | undefined | null;
        cause?: string | undefined | null;
    }
    /**
     * This is the "expanded" version of the `deleteMyUserV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteMyUserV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<deleteMyUserV2$SelectionSet<_$Scalars>>;
    type endMySession<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = endMySession$SelectionSet<_$Scalars>;
    interface endMySession$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `endMySession` field. All arguments are required so you must include this.
         */
        $: endMySession$Arguments<_$Scalars>;
    }
    interface endMySession$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        deviceUuid: string;
    }
    /**
     * This is the "expanded" version of the `endMySession` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endMySession$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<endMySession$SelectionSet<_$Scalars>>;
    type endMySessionV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endMySessionV2$SelectionSet<_$Scalars>;
    interface endMySessionV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `endMySessionV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endMySessionV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endMySessionV2$SelectionSet<_$Scalars>>;
    type startMySession<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = startMySession$SelectionSet<_$Scalars>;
    interface startMySession$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `startMySession` field. Some (1/2) arguments are required so you must include this.
         */
        $: startMySession$Arguments<_$Scalars>;
    }
    interface startMySession$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        pushNotificationToken?: string | undefined | null;
        deviceUuid: string;
    }
    /**
     * This is the "expanded" version of the `startMySession` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startMySession$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<startMySession$SelectionSet<_$Scalars>>;
    type startMySessionV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = startMySessionV2$SelectionSet<_$Scalars>;
    interface startMySessionV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContentStatus<_$Scalars> {
        /**
         * Arguments for `startMySessionV2` field. No arguments are required so you may omit this.
         */
        $?: startMySessionV2$Arguments<_$Scalars>;
    }
    interface startMySessionV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        returnContentStatus?: boolean | undefined | null;
        pushNotificationToken?: string | undefined | null;
    }
    /**
     * This is the "expanded" version of the `startMySessionV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startMySessionV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<startMySessionV2$SelectionSet<_$Scalars>>;
    type unblockUserForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unblockUserForMe$SelectionSet<_$Scalars>;
    interface unblockUserForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `unblockUserForMe` field. All arguments are required so you must include this.
         */
        $: unblockUserForMe$Arguments<_$Scalars>;
    }
    interface unblockUserForMe$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        userId: string;
    }
    /**
     * This is the "expanded" version of the `unblockUserForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unblockUserForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unblockUserForMe$SelectionSet<_$Scalars>>;
    type unblockUserForMeV2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unblockUserForMeV2$SelectionSet<_$Scalars>;
    interface unblockUserForMeV2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
        /**
         * Arguments for `unblockUserForMeV2` field. All arguments are required so you must include this.
         */
        $: unblockUserForMeV2$Arguments<_$Scalars>;
    }
    interface unblockUserForMeV2$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        userId: string;
    }
    /**
     * This is the "expanded" version of the `unblockUserForMeV2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unblockUserForMeV2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unblockUserForMeV2$SelectionSet<_$Scalars>>;
    type updateMyUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = updateMyUser$SelectionSet<_$Scalars>;
    interface updateMyUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `updateMyUser` field. All arguments are required so you must include this.
         */
        $: updateMyUser$Arguments<_$Scalars>;
    }
    interface updateMyUser$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$MyUserInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `updateMyUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updateMyUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<updateMyUser$SelectionSet<_$Scalars>>;
    type createUserTracking<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = createUserTracking$SelectionSet<_$Scalars>;
    interface createUserTracking$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
        /**
         * Arguments for `createUserTracking` field. All arguments are required so you must include this.
         */
        $: createUserTracking$Arguments<_$Scalars>;
    }
    interface createUserTracking$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        input: $NamedTypes.$UserTrackingInput<_$Scalars>;
    }
    /**
     * This is the "expanded" version of the `createUserTracking` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createUserTracking$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<createUserTracking$SelectionSet<_$Scalars>>;
}
export interface Subscription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    /**
     * Select the `channelChanged` field on the `Subscription` object. Its type is `BgChannelChangedEvent` (a `OutputObject` kind of type).
     */
    channelChanged?: Subscription.channelChanged<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Subscription.channelChanged<_$Scalars>>;
    /**
     * Select the `objectChanged` field on the `Subscription` object. Its type is `ObjectChangedEvent` (a `OutputObject` kind of type).
     */
    objectChanged?: Subscription.objectChanged<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Subscription.objectChanged<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Subscription$FragmentInline<_$Scalars> | Subscription$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Subscription$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Subscription<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Subscription {
    type channelChanged<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channelChanged$SelectionSet<_$Scalars>;
    interface channelChanged$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BgChannelChangedEvent<_$Scalars> {
        /**
         * Arguments for `channelChanged` field. All arguments are required so you must include this.
         */
        $: channelChanged$Arguments<_$Scalars>;
    }
    interface channelChanged$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        channelId: string;
    }
    /**
     * This is the "expanded" version of the `channelChanged` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelChanged$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channelChanged$SelectionSet<_$Scalars>>;
    type objectChanged<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = objectChanged$SelectionSet<_$Scalars>;
    interface objectChanged$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ObjectChangedEvent<_$Scalars> {
        /**
         * Arguments for `objectChanged` field. Some (1/3) arguments are required so you must include this.
         */
        $: objectChanged$Arguments<_$Scalars>;
    }
    interface objectChanged$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        objectId: string;
        $modelType?: $NamedTypes.$ModelType | undefined | null;
        ownerUserId?: string | undefined | null;
    }
    /**
     * This is the "expanded" version of the `objectChanged` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type objectChanged$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<objectChanged$SelectionSet<_$Scalars>>;
}
export type GroupMembershipRole = 'admin' | 'coordinator' | 'moderator' | 'owner';
export type ModelEventType = 'error' | 'warning' | 'info';
export type OptionType = 'errorCode' | 'companyStage' | 'companyType' | 'contactType' | 'educationLevel' | 'ethnicity' | 'expertise' | 'gender' | 'pronoun' | 'declineChannelInvitationReason' | 'country' | 'industry' | 'language' | 'unset' | 'contentTagType' | 'indonesianCity' | 'indonesianProvince' | 'iqlaaJordanianDistrict' | 'iqlaaJordanianGovernorate' | 'mm2Expertise' | 'mm2Industry' | 'blockUserReason' | 'notificationTypeOption' | 'reportUserReason';
export type UiLanguage = 'ar' | 'en' | 'es' | 'id' | 'ru' | 'so';
export type MastercardCardType = 'credit' | 'debit' | 'prepaid' | 'none' | 'notProvided';
export type UserIdentType = 'any' | 'email' | 'id' | 'inviteCode' | 'oauthProfileUrl' | 'oauthUserId' | 'phoneNumber' | 'userHandle';
export type UserRole = 'admin' | 'support' | 'staff' | 'qa' | 'test';
export type AppFeature = 'testFeatures1' | 'testFeatures2';
export type NotificationType = 'accountDeletedConfirmation' | 'channelInvitationAccepted' | 'channelInvitationDeclined' | 'channelInvitationReceived' | 'channelMessageReceived' | 'completeProfile' | 'completeSignUp' | 'matchesRecommendations' | 'newPrivacyRules' | 'newsletter' | 'resetPasswordConfirmation' | 'resetPasswordConfirmToken' | 'sendFirstInvitation' | 'unset' | 'welcome';
export type IdentityProvider = 'apple' | 'facebook' | 'google' | 'instagram' | 'linkedIn' | 'microsoft' | 'own' | 'sso' | 'telegram' | 'twitter' | 'whatsApp';
export type ModelType = 'AcademicExperience' | 'BusinessExperience' | 'Company' | 'DataDeletionRecord' | 'MentorBoard' | 'MentoringSession' | 'UserInbox' | 'UserMetadata' | 'UserPreferences' | 'AdminTask' | 'AnalyticsServiceRecord' | 'AnalyticsSynchronization' | 'UploadedAsset' | 'Channel' | 'ChannelInbox' | 'ChannelInvitation' | 'ChannelMessage' | 'ChannelParticipant' | 'ContentStatus' | 'Option' | 'ContentTag' | 'AppliedGroupRule' | 'Group' | 'GroupCms' | 'GroupMembership' | 'GroupRule' | 'GroupRuleConfig' | 'MastercardBank' | 'SupportChannelConfig' | 'GiftCardProduct' | 'MarketplaceServiceRecord' | 'Product' | 'ProductCategory' | 'Brand' | 'Match' | 'MatchProfile' | 'MatchingEngine' | 'UserSearch' | 'Notification' | 'NotificationTemplate' | 'Mm2Integration' | 'Mm2Synchronization' | 'Mm2SynchronizationResultItem' | 'ModerationConcern' | 'NatsMessage' | 'ApiAuthInfo' | 'Contact' | 'MultiStepAction' | 'MyUser' | 'ServiceRequest' | 'User' | 'UserDevice' | 'ServiceRecord' | 'TrackingEvent' | 'UserTracking' | 'Training' | 'TrainingContentPage' | 'TrainingSession' | 'PurchaseOrder' | 'PurchaseOrderItem' | 'ShoppingCart' | 'ShoppingCartItem' | 'Wallet' | 'WalletItem' | 'WalletItemTransfer' | 'WalletServiceRecord' | 'unset';
export type UploadedAssetType = 'unset' | 'avatar' | 'profileHeroImage';
export type AssetHostingService = 's3' | 'unset';
export type UserProfileRole = 'mentee' | 'mentor' | 'both' | 'none';
export type AppAction = 'editProfile' | 'updateApp' | 'unset';
export type ChannelType = 'unset' | 'mentoring' | 'support' | 'welcome';
export type ChannelInvitationStatus = 'created' | 'accepted' | 'declined' | 'unset';
export type ChannelMessageType = 'unset' | 'invitation' | 'support' | 'system' | 'welcome';
export type ChannelParticipantRole = 'admin' | 'moderator' | 'owner' | 'unset';
export type ModerationConcernType = 'phrase' | 'unknown';
export type GroupRuleEventType = 'enterGroup' | 'exitGroup' | 'signUp' | 'sendMessage' | 'userSearch' | 'updateUser' | 'unknown';
export type SortDirection = 'asc' | 'desc';
export type IncludeFilterOption = 'include' | 'exclude' | 'only';
export type AuthType = 'none' | 'oauth' | 'token' | 'hmac' | 'saml';
export type FederatedIdentityProvider = 'none' | 'firebase';
export type AdminTaskType = 'addAppFeature' | 'deleteUser' | 'formatPhoneNumbers' | 'mergeUsers' | 'refreshAllEmbeddedCompanies' | 'refreshAllUserInboxes' | 'removeAppFeature' | 'resetUserPassword' | 'setUserPassword' | 'suspendUser' | 'verifyUserPassword' | 'decryptString' | 'unset' | 'createAnalyticsSynchronization' | 'pauseAnalyticsSynchronization' | 'runAnalyticsSynchronization' | 'updateChannelMetadata' | 'updateChannelOtherUserId' | 'runDataGenerator' | 'loadDbCache' | 'queryDbVersion' | 'recreateDbIndexes' | 'updateEmbeddedGroupMembershipsOfAllUsers' | 'updateGroupIdentsInAllGroupMemberships' | 'addLanguageText' | 'importMarketplaceData' | 'recreateDefaultMatchingEngine' | 'refreshAllMatchProfiles' | 'clearBusMessages' | 'removeBusMessage' | 'sendPushNotification' | 'compareMm2Object' | 'compareMm2ObjectIdsOfModel' | 'fillAllMm2ProfileIds' | 'fixAllSyncedChannelInvitationInitialMessages' | 'mergeAllDuplicateMm3ChatObjects' | 'mergeAllDuplicateMm3Users' | 'pauseMm2Synchronization' | 'runMm2Synchronization' | 'syncAllUsersWhoSignedUpInMm3' | 'syncDocsWithoutMm2Ids' | 'syncUsersWithLanguageMismatch' | 'triggerRandomSynchronizations' | 'addOrRemoveAppFeature' | 'createApiAuthInfo' | 'removeAllInvalidUserBlocks' | 'doDataMaintenance' | 'sendPendingTrackingEvents' | 'setTrainingTags';
export type AdminTaskResult = 'ok' | 'error';
export type ChannelInvitationDirection = 'sent' | 'received';
export type ProductType = 'giftCard' | 'other';
export type BarcodeType = 'TYPE_39' | 'TYPE_128' | 'CODE_25' | 'ITF' | 'I125' | 'UPC_A' | 'UPC_E' | 'EAN_13' | 'EAN_8' | 'QR_CODE' | 'PDF417' | 'DATA_MATRIX';
export type WalletItemSource = 'user' | 'purchased' | 'gifted';
export type ServiceName = 'accounts' | 'admin' | 'adminJs' | 'analytics' | 'appEvents' | 'assets' | 'aws' | 'bgChannels' | 'bullBoard' | 'channels' | 'content' | 'contentTags' | 'dataGenerator' | 'db' | 'firebase' | 'graphqlApi' | 'groups' | 'http' | 'i18N' | 'logger' | 'marketplace' | 'matching' | 'messageBus' | 'messaging' | 'mm2' | 'models' | 'moderation' | 'nats' | 'nlp' | 'redis' | 'restApi' | 'secureId' | 'slack' | 'system' | 'tracking' | 'unset' | 'vts' | 'wallet';
export type UserSearchType = 'search' | 'mentorRecommendation' | 'menteeRecommendation';
export type UserSearchFieldOption = 'isTrue' | 'isFalse' | 'any' | 'match';
export type UserSearchSubscriptionType = 'none' | 'daily' | 'weekly' | 'monthly';
export type ServiceRequestType = 'graphQlMutationCreateAcademicExperience' | 'graphQlMutationDeleteAcademicExperience' | 'graphQlMutationUpdateAcademicExperience' | 'graphQlMutationCreateBusinessExperience' | 'graphQlMutationDeleteBusinessExperience' | 'graphQlMutationUpdateBusinessExperience' | 'graphQlMutationCreateCompany' | 'graphQlMutationDeleteCompany' | 'graphQlMutationUpdateCompany' | 'graphQlQueryFindAndUpdateAllMm2Users' | 'graphQlQueryUserInboxUser' | 'graphQlMutationCreateAdminTask' | 'graphQlMutationFindAdminTaskById' | 'graphQlMutationDeleteAdminTask' | 'graphQlMutationUpdateAdminTask' | 'graphQlQueryFindAdminTask' | 'graphQlQueryAdminTaskDefinitions' | 'graphQlMutationClearAllAnalyticsSyncInfo' | 'graphQlMutationCreateAnalyticsSynchronization' | 'graphQlMutationDeleteAnalyticsSynchronization' | 'graphQlMutationPauseAnalyticsSynchronization' | 'graphQlMutationRunAnalyticsSynchronization' | 'graphQlQueryFindAnalyticsServiceRecord' | 'graphQlQueryFindAnalyticsSynchronizationById' | 'graphQlMutationCreateUploadedAsset' | 'graphQlMutationDeleteUploadedAsset' | 'graphQlMutationFindUploadedAssetById' | 'graphQlMutationFindUploadedAssetForUser' | 'graphQlMutationInitAssetUpload' | 'graphQlMutationUpdateUploadedAsset' | 'graphQlQueryFindUploadedAssetById' | 'graphQlQueryFindUploadedAssets' | 'graphQlQueryFindUploadedAssetsForUser' | 'graphQlMutationAddChannelMessageEvent' | 'graphQlMutationArchiveChannelForUserByMe' | 'graphQlMutationCreateChannel' | 'graphQlMutationCreateChannelInvitation' | 'graphQlMutationCreateChannelMessage' | 'graphQlMutationCreateChannelParticipant' | 'graphQlMutationDeleteChannel' | 'graphQlMutationDeleteChannelInvitation' | 'graphQlMutationDeleteChannelMessage' | 'graphQlMutationDeleteChannelParticipant' | 'graphQlMutationDeleteGroup' | 'graphQlMutationDeleteGroupMembership' | 'graphQlMutationMarkChannelMessagesAsSeenByMe' | 'graphQlMutationUpdateChannel' | 'graphQlMutationUpdateChannelInvitation' | 'graphQlMutationUpdateChannelMessage' | 'graphQlMutationUpdateChannelParticipant' | 'graphQlQueryChannelInvitations' | 'graphQlQueryChannelMessageChannel' | 'graphQlQueryChannelParticipants' | 'graphQlQueryFindChannelById' | 'graphQlQueryFindChannelInvitationById' | 'graphQlQueryFindChannelInvitationsBetweenUsers' | 'graphQlQueryFindChannelInvitationsForUser' | 'graphQlQueryFindChannelMessageById' | 'graphQlQueryFindChannelMessages' | 'graphQlQueryFindChannelParticipantById' | 'graphQlQueryFindChannelParticipants' | 'graphQlQueryFindChannels' | 'graphQlQueryFindChannelsForUser' | 'graphQlQueryFindMyChannels' | 'graphQlQueryFindPendingChannelInvitationsForUser' | 'graphQlQueryMyContacts' | 'graphQlQueryMyInbox' | 'graphQlQueryUserChannels' | 'graphQlQueryUserCompanies' | 'graphQlQueryUserGroupMembers' | 'graphQlQueryUserGroups' | 'graphQlQueryFindCountries' | 'graphQlQueryFindExpertises' | 'graphQlQueryFindIndustries' | 'graphQlQueryFindOptions' | 'unset' | 'graphQlQueryContentTag' | 'graphQlMutationCreateContentTag' | 'graphQlMutationDeleteContentTag' | 'graphQlMutationUpdateContentTag' | 'graphQlMutationRunDataGenerator' | 'graphQlQueryNotificationTemplate' | 'graphQlQueryAvailableUserHandle' | 'graphQlQueryUser' | 'graphQlMutationAddUserToGroup' | 'graphQlMutationCreateGroup' | 'graphQlMutationCreateGroupMembership' | 'graphQlMutationCreateSupportChannelConfig' | 'graphQlMutationDeleteGroupCms' | 'graphQlMutationDeleteSupportChannelConfig' | 'graphQlMutationRemoveUserFromAllGroups' | 'graphQlMutationRemoveUserFromGroup' | 'graphQlMutationUpdateGroup' | 'graphQlMutationUpdateGroupMembership' | 'graphQlMutationUpdateSupportChannelConfig' | 'graphQlQueryFindGroupById' | 'graphQlQueryFindGroupByIdent' | 'graphQlQueryFindGroupCmsByGroupId' | 'graphQlQueryFindGroupCmsByGroupIdent' | 'graphQlQueryFindGroupCmsById' | 'graphQlQueryFindGroupMembershipByIdField' | 'graphQlQueryFindGroupMemberships' | 'graphQlQueryFindGroupsField' | 'graphQlQueryMyGroupMemberships' | 'graphQlQueryFindGiftCardProducts' | 'graphQlQueryFindMarketplaceServiceRecord' | 'graphQlQueryFindProductCategories' | 'graphQlQueryFindBrands' | 'graphQlMutationCreateUserSearch' | 'graphQlMutationDeleteUserSearch' | 'graphQlMutationUpdateUserSearch' | 'graphQlQueryFindUserSearchById' | 'graphQlQueryFindUserSearchResults' | 'graphQlQueryUserSearchFoundUsers' | 'graphQlMutationCreateNotification' | 'graphQlMutationCreateNotificationTemplate' | 'graphQlMutationDeleteNotification' | 'graphQlMutationDeleteNotificationTemplate' | 'graphQlMutationMarkInAppMessageReceived' | 'graphQlMutationSendMultiStepActionNotification' | 'graphQlMutationUpdateNotification' | 'graphQlMutationUpdateNotificationTemplate' | 'graphQlMutationCreateNatsMessage' | 'graphQlMutationClearAllSyncInfo' | 'graphQlMutationCreateMm2Synchronization' | 'graphQlMutationDeleteAllMm2DataInMm3' | 'graphQlMutationDeleteMm2Synchronization' | 'graphQlMutationRunMm2Synchronization' | 'graphQlQueryFindMm2SynchronizationById' | 'graphQlQueryGetMm2Integration' | 'graphQlMutationNlpLabelMessage' | 'graphQlMutationUpdateNlpConversation' | 'graphQlMutationUpdateNlpMessage' | 'graphQlQueryFindNlpConversation' | 'graphQlMutationAddFeatureToUser' | 'graphQlMutationBlockUser' | 'graphQlMutationCreateContact' | 'graphQlMutationCreateMultiStepAction' | 'graphQlMutationCreateUserDevice' | 'graphQlMutationDeleteMyUser' | 'graphQlMutationDeleteUser' | 'graphQlMutationEndMySession' | 'graphQlMutationRemoveFeatureFromUser' | 'graphQlMutationReportUser' | 'graphQlMutationSignInUser' | 'graphQlMutationSignMeOut' | 'graphQlMutationSignUpOauthUser' | 'graphQlMutationSignUpUser' | 'graphQlMutationStartMySession' | 'graphQlMutationUnblockUser' | 'graphQlMutationUpdateContact' | 'graphQlMutationUpdateMyUser' | 'graphQlMutationUpdateUser' | 'graphQlMutationUpdateUserDevice' | 'graphQlMutationUpsertBackgroundTask' | 'graphQlMutationVerifyMultiStepActionToken' | 'graphQlQueryBackgroundTask' | 'graphQlQueryContacts' | 'graphQlQueryContactTypes' | 'graphQlQueryFindAvailableUserHandle' | 'graphQlQueryFindContact' | 'graphQlQueryFindContactById' | 'graphQlQueryFindContacts' | 'graphQlQueryFindMyBlockedUsers' | 'graphQlQueryFindMyUser' | 'graphQlQueryFindMyUserDevices' | 'graphQlQueryFindUserById' | 'graphQlQueryFindUserByIdent' | 'graphQlQueryFindUserDeviceById' | 'graphQlQueryFindUserDevices' | 'graphQlQueryFindUsers' | 'graphQlQueryGetMultiStepActionProgress' | 'graphQlQueryLatestUserDevice' | 'graphQlQueryUnreadInAppMessages' | 'graphQlQueryVerifyMyPassword' | 'graphQlMutationCreateUserTracking' | 'graphQlMutationUpdateUserTracking' | 'graphQlQueryFindTrainingById' | 'graphQlQueryFindTrainingsForMe' | 'graphQlQueryFindTrainingsForUser' | 'graphQlQueryFindTrainingSessionById' | 'graphQlQueryFindTrainingSessionsByTrainingId' | 'graphQlQueryFindTrainingSessionsForMe' | 'graphQlMutationAcceptWalletItemTransfer' | 'graphQlMutationClearMyShoppingCart' | 'graphQlMutationClearShoppingCart' | 'graphQlMutationCreatePurchaseOrderField' | 'graphQlMutationCreateShoppingCartItem' | 'graphQlMutationCreateWalletItem' | 'graphQlMutationCreateWalletItemTransfer' | 'graphQlMutationCreateWalletTransfer' | 'graphQlMutationDeclineWalletItemTransfer' | 'graphQlMutationDeleteShoppingCartItem' | 'graphQlMutationDeleteWalletItem' | 'graphQlMutationDeleteWalletItemTransfer' | 'graphQlMutationUpdateShoppingCartItem' | 'graphQlMutationUpdateWalletItem' | 'graphQlMutationUpdateWalletItemTransfer' | 'graphQlQueryFindMyShoppingCart' | 'graphQlQueryFindMyWallet' | 'graphQlQueryFindPurchaseOrderItems' | 'graphQlQueryFindPurchaseOrders' | 'graphQlQueryFindShoppingCartItems' | 'graphQlQueryFindShoppingCarts' | 'graphQlQueryFindWalletItemById' | 'graphQlQueryFindWalletItemByTransferSlug' | 'graphQlQueryFindWalletItems' | 'graphQlQueryFindWalletItemTransferById' | 'graphQlQueryFindWalletItemTransferByTransferSlug' | 'graphQlQueryFindWalletItemTransfers' | 'graphQlQueryFindWallets' | 'graphQlQueryFindWalletServiceRecord';
export type ServiceRequestResult = 'ok' | 'error' | 'unset';
export type ServiceRequestMessageId = 'systemError' | 'invalidInput' | 'groupRuleFailed' | 'unknown';
export type ErrorCode = 'academicExperienceNameMissing' | 'academicExperienceUserIdMissing' | 'businessExperienceNameMissing' | 'businessExperienceUserIdMissing' | 'companyNameMissing' | 'companyNameTaken' | 'assetUploadFailed' | 'contentTagAlreadyExist' | 'contentTagModelTypeMissing' | 'contentTagObjectIdMissing' | 'contentTagTypeMissing' | 'failedToConnect' | 'failedToUpdate' | 'unknown' | 'alreadyGroupMember' | 'groupLevelTooDeep' | 'groupNameMissing' | 'groupNameTaken' | 'groupNotActive' | 'groupRuleFailed' | 'groupSlugMissing' | 'groupSlugTaken' | 'notAGroupMember' | 'parentGroupNotFound' | 'matchingEngineNameMissing' | 'matchingEngineNameTaken' | 'expertiseBidirectionalMappingError' | 'expertiseTextIdDNE' | 'alreadyExists' | 'alreadyInitialized' | 'dataValidationFailed' | 'exceedsLimit' | 'invalidInput' | 'noLiveWebsocketConnectionAvailable' | 'noNotificationMethodAvailable' | 'notAllowed' | 'notFound' | 'notImplemented' | 'notInitialized' | 'notSupported' | 'serviceNotAvailable' | 'systemError' | 'timeout' | 'tooManyRequests' | 'natsInvalidTrackId' | 'authTokenNoMatch' | 'currentPasswordIncorrect' | 'currentPasswordMissing' | 'deviceUuidMissing' | 'emailInvalid' | 'emailMissing' | 'failedToCreateAccount' | 'failedToSignin' | 'invalidPushNotificationToken' | 'passwordMissing' | 'passwordNoMatch' | 'phoneNumberInvalid' | 'phoneNumberMissing' | 'phoneNumberNotSupported' | 'unauthorized' | 'userAlreadyExists' | 'userAnonymized' | 'userDeviceNotFound' | 'userNotActive' | 'userNotFound' | 'notAvailable' | 'trackingInvalidTrackId' | 'trainingCannotUpdateFields' | 'trainingContentPageCannotUpdateFields' | 'trainingContentPageMm2IdMissing' | 'trainingContentPageMm2IdTaken' | 'trainingMm2IdMissing' | 'trainingMm2IdTaken' | 'trainingSessionCannotUpdateFields' | 'trainingSessionMm2IdMissing' | 'trainingSessionMm2IdTaken' | 'trainingSessionProgressInvalid' | 'trainingSessionTrainingMissing' | 'trainingSessionUserIdMissing';
export type ServiceRequestSource = 'app' | 'analytics' | 'graphqlApi' | 'restApi' | 'httpRoute' | 'system' | 'admin' | 'vts' | 'wallet' | 'mm2';
export type MultiStepActionType = 'resetPassword' | 'tokenSignIn' | 'unset' | 'updateEmail' | 'updatePassword' | 'updatePhoneNumber' | 'verifyEmail' | 'verifyEmailOnSignUp' | 'verifyPhoneNumber' | 'verifyPhoneNumberOnSignUp';
export type MultiStepActionStatus = 'created' | 'started' | 'finished';
export type NotificationMethod = 'off' | 'auto' | 'email' | 'sms' | 'pushNotification' | 'inAppNotification';
export type MultiStepActionResult = 'confirmTokenMismatch' | 'dataValidationFailed' | 'deviceNotFound' | 'emailMismatch' | 'emailNotVerified' | 'error' | 'expired' | 'invalidEmail' | 'phoneNumberInvalid' | 'missingEmail' | 'missingPhoneNumber' | 'notFound' | 'ok' | 'passed' | 'passwordMismatch' | 'passwordUpdated' | 'phoneNumberMismatch' | 'phoneNumberNotVerified' | 'systemError' | 'unset' | 'userFailedValidation' | 'userNotFound' | 'userNotSignedIn';
export type MultiStepActionSendNotificationResult = 'ok' | 'failed' | 'phoneNumberInvalid';
export type CookieChoiceTextId = 'acceptAll' | 'rejectAll' | 'acceptEssentials';
export type ReportUserReasonTextId = 'notSet' | 'badActor' | 'fakePerson' | 'harasses' | 'impersonator' | 'inappropriate' | 'objectionableLanguage' | 'promotesHate' | 'sharesObjectionableContent' | 'spammer' | 'usesObjectionableLanguage' | 'violatesRules';
export type DeclineChannelInvitationReasonTextId = 'notGoodFit' | 'tooBusy' | 'noReason' | 'fakeProfile' | 'inappropriate';
export type ChannelMessageEvent = 'received' | 'seen' | 'unset';
export type NotificationTemplateName = 'accountDeletedConfirmation' | 'channelInvitationAcceptedForMentee' | 'channelInvitationAcceptedForMentor' | 'channelInvitationDeclinedForMentee' | 'channelInvitationDeclinedForMentor' | 'channelInvitationReceivedForMentee' | 'channelInvitationReceivedForMentor' | 'channelMessageReceivedForMentee' | 'channelMessageReceivedForMentor' | 'completeProfileForMentee' | 'completeProfileForMentor' | 'completeSignUpForMentee' | 'completeSignUpForMentor' | 'matchesRecommendationsForMentee' | 'matchesRecommendationsForMentor' | 'newPrivacyRules' | 'newsletter' | 'resetPasswordConfirmation' | 'resetPasswordConfirmToken' | 'sendFirstInvitationForMentee' | 'sendFirstInvitationForMentor' | 'unset' | 'welcomeForMentee' | 'welcomeForMentor';
export type ChannelChangedEventType = 'channelDeleted' | 'channelUpdated' | 'invitationAccepted' | 'invitationCreated' | 'invitationDeclined' | 'invitationDeleted' | 'invitationUpdated' | 'messageCreated' | 'messageDeleted' | 'messageStatusChanged' | 'messageUpdated' | 'participantCreated' | 'participantDeleted' | 'participantUpdated';
export type ObjectChangedEventType = 'created' | 'updated' | 'deleted' | 'anonymized';
export interface FindObjectsOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    limit?: number | undefined | null;
    sort?: Array<$NamedTypes.$SortItem<_$Scalars> | undefined | null> | undefined | null;
    skip?: number | undefined | null;
    timeout?: boolean | undefined | null;
    tailable?: boolean | undefined | null;
    awaitData?: boolean | undefined | null;
    batchSize?: number | undefined | null;
    returnKey?: boolean | undefined | null;
    maxTimeMS?: number | undefined | null;
    maxAwaitTimeMS?: number | undefined | null;
    noCursorTimeout?: boolean | undefined | null;
    singleBatch?: boolean | undefined | null;
    allowPartialResults?: boolean | undefined | null;
    showRecordId?: boolean | undefined | null;
    $includeArchived?: $NamedTypes.$IncludeFilterOption | undefined | null;
    $includeBlocked?: $NamedTypes.$IncludeFilterOption | undefined | null;
    $includeDeleted?: $NamedTypes.$IncludeFilterOption | undefined | null;
    $includeSuspended?: $NamedTypes.$IncludeFilterOption | undefined | null;
}
export interface SortItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    field: string;
    $direction?: $NamedTypes.$SortDirection | undefined | null;
}
export interface FindUserByIdentOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    includeDeleted?: boolean | undefined | null;
    includeGroupProfiles?: Array<string | undefined | null> | undefined | null;
}
export interface UserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    firstName?: string | undefined | null;
    lastName?: string | undefined | null;
    fullName?: string | undefined | null;
    userHandle?: string | undefined | null;
    phoneNumber?: string | undefined | null;
    phoneNumberUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    isPhoneNumberVerified?: boolean | undefined | null;
    email?: string | undefined | null;
    emailUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    isEmailVerified?: boolean | undefined | null;
    /**
     * The source of the email address, e.g. "google", "facebook", etc.
     */
    emailSource?: string | undefined | null;
    genderTextId?: string | undefined | null;
    cityOfResidence?: string | undefined | null;
    regionOfResidence?: string | undefined | null;
    countryOfResidenceTextId?: string | undefined | null;
    postalCode?: string | undefined | null;
    avatarUrl?: string | undefined | null;
    websites?: Array<$NamedTypes.$LabeledStringValueInput<_$Scalars> | undefined | null> | undefined | null;
    $authType?: $NamedTypes.$AuthType | undefined | null;
    inviteCode?: string | undefined | null;
    currentPassword?: string | undefined | null;
    newPassword?: string | undefined | null;
    preferredLanguageTextId?: string | undefined | null;
    spokenLanguagesTextIds?: Array<string | undefined | null> | undefined | null;
    $selectedUiLanguageTextId?: $NamedTypes.$UiLanguage | undefined | null;
    $fallbackUiLanguageTextId?: $NamedTypes.$UiLanguage | undefined | null;
    discoverable?: boolean | undefined | null;
    $roles?: Array<$NamedTypes.$UserRole | undefined | null> | undefined | null;
    $appFeatures?: Array<$NamedTypes.$AppFeature | undefined | null> | undefined | null;
    source?: string | undefined | null;
    timezone?: string | undefined | null;
    preferences?: $NamedTypes.$UserPreferencesInput<_$Scalars> | undefined | null;
    trustLevel?: number | undefined | null;
    termsAndConditionsAcceptedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    optIntoNewsletter?: boolean | undefined | null;
    onboardingStage?: string | undefined | null;
    isTestUser?: boolean | undefined | null;
    signedInAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    signedOutAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    latestActivityAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    inactivatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    inactivatedBy?: string | undefined | null;
    suspendedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedBy?: string | undefined | null;
    syncedToAnalyticsAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    companyIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Used internally, will not work in GraphQL queries.
     */
    companies?: Array<$NamedTypes.$CompanyInput<_$Scalars> | undefined | null> | undefined | null;
    groupIds?: Array<string | undefined | null> | undefined | null;
    parentGroupIds?: Array<string | undefined | null> | undefined | null;
    externalGroupIds?: Array<string | undefined | null> | undefined | null;
    pronounsTextIds?: Array<string | undefined | null> | undefined | null;
    groupMemberships?: Array<$NamedTypes.$GroupMembershipInput<_$Scalars> | undefined | null> | undefined | null;
    addToGroupIds?: Array<string | undefined | null> | undefined | null;
    removeFromGroupIds?: Array<string | undefined | null> | undefined | null;
    seeksHelp?: boolean | undefined | null;
    offersHelp?: boolean | undefined | null;
    birthYear?: number | undefined | null;
    ethnicity?: string | undefined | null;
    educationLevelTextId?: string | undefined | null;
    personalBio?: string | undefined | null;
    yearsManagementExperience?: number | undefined | null;
    yearsOwnershipExperience?: number | undefined | null;
    academicExperienceIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Specify a company you want to create and add the user to.
     */
    company?: $NamedTypes.$CompanyInput<_$Scalars> | undefined | null;
    /**
     * Specify a list of academic experiences you want to create for the user.
     */
    academicExperiences?: Array<$NamedTypes.$AcademicExperienceInput<_$Scalars> | undefined | null> | undefined | null;
    businessExperienceIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Specify a list of business experiences you want to create for the user.
     */
    businessExperiences?: Array<$NamedTypes.$BusinessExperienceInput<_$Scalars> | undefined | null> | undefined | null;
    cityOfOrigin?: string | undefined | null;
    regionOfOrigin?: string | undefined | null;
    /**
     * Users Country of origin. Use a Country Options textId.
     */
    countryOfOriginTextId?: string | undefined | null;
    isOnVacation?: boolean | undefined | null;
    profileRoleHistory?: Array<$NamedTypes.$UserProfileRoleHistoryItemInput<_$Scalars> | undefined | null> | undefined | null;
    ssoIdp?: string | undefined | null;
}
export interface ModelEventInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    time: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>>;
    $modelEventType: $NamedTypes.$ModelEventType;
    message?: string | undefined | null;
}
export interface BaseModelMetadataInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface LabeledStringValueInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    label?: string | undefined | null;
    value?: string | undefined | null;
    tags?: Array<string | undefined | null> | undefined | null;
}
export interface UserPreferencesInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    shareEmail?: boolean | undefined | null;
    sharePhoneNumber?: boolean | undefined | null;
    showWelcomeMessage?: boolean | undefined | null;
    notificationOptionsInput?: Array<$NamedTypes.$NotificationOptionsInput<_$Scalars> | undefined | null> | undefined | null;
}
export interface NotificationOptionsInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    $notificationType?: $NamedTypes.$NotificationType | undefined | null;
    enableEmail?: boolean | undefined | null;
    enableInAppMessage?: boolean | undefined | null;
    enablePushNotification?: boolean | undefined | null;
    enableSms?: boolean | undefined | null;
    frequency?: string | undefined | null;
}
export interface CompanyInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    name?: string | undefined | null;
    description?: string | undefined | null;
    location?: string | undefined | null;
    companyTypeTextId?: string | undefined | null;
    companyStageTextId?: string | undefined | null;
    websites?: Array<$NamedTypes.$LabeledStringValueInput<_$Scalars> | undefined | null> | undefined | null;
    industries?: Array<string | undefined | null> | undefined | null;
    isOperational?: boolean | undefined | null;
    isFundraising?: boolean | undefined | null;
    annualRevenue?: number | undefined | null;
    employeeCount?: number | undefined | null;
    foundedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    addUserIds?: Array<string | undefined | null> | undefined | null;
}
export interface GroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupId?: string | undefined | null;
    groupIdent?: string | undefined | null;
    userId?: string | undefined | null;
    $roles?: Array<$NamedTypes.$GroupMembershipRole | undefined | null> | undefined | null;
}
export interface AcademicExperienceInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    institutionName?: string | undefined | null;
    /**
     * E.g. "Bachelor of Science"
     */
    degreeType?: string | undefined | null;
    /**
     * E.g. "Computer Science"
     */
    fieldOfStudy?: string | undefined | null;
    startDate?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * If the experience is ongoing, endDate is null.
     */
    endDate?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    userId?: string | undefined | null;
}
export interface BusinessExperienceInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    businessName?: string | undefined | null;
    jobTitle?: string | undefined | null;
    city?: string | undefined | null;
    state?: string | undefined | null;
    country?: string | undefined | null;
    startDate?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * If the experience is ongoing, endDate is null.
     */
    endDate?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    userId?: string | undefined | null;
}
export interface UserProfileRoleHistoryItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    $newRole: $NamedTypes.$UserProfileRole;
    createdAt: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>>;
}
export interface UserListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    ident?: string | undefined | null;
    emailIn?: Array<string | undefined | null> | undefined | null;
    phoneNumberIn?: Array<string | undefined | null> | undefined | null;
    inviteCodeIn?: Array<string | undefined | null> | undefined | null;
    $rolesIn?: Array<$NamedTypes.$UserRole | undefined | null> | undefined | null;
    excludeRoles?: Array<string | undefined | null> | undefined | null;
    excludeContacts?: boolean | undefined | null;
    createdAtGreaterThan?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    latestActivityAtGreaterThan?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    companyId?: string | undefined | null;
    syncedWithMm2?: boolean | undefined | null;
    isMm2User?: boolean | undefined | null;
}
export interface UserDeviceInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    userId?: string | undefined | null;
    deviceUuid?: string | undefined | null;
    deviceType?: string | undefined | null;
    trusted?: boolean | undefined | null;
    phoneNumber?: string | undefined | null;
    phoneNumberUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    isPhoneNumberVerified?: boolean | undefined | null;
    brand?: string | undefined | null;
    model?: string | undefined | null;
    isTablet?: boolean | undefined | null;
    screenWidth?: number | undefined | null;
    screenHeight?: number | undefined | null;
    os?: string | undefined | null;
    osVersion?: string | undefined | null;
    timezone?: string | undefined | null;
    ipAddress?: string | undefined | null;
    consumer?: string | undefined | null;
    consumerVersion?: string | undefined | null;
    acceptedLanguage?: string | undefined | null;
    locale?: string | undefined | null;
    countryCode?: string | undefined | null;
    appVersion?: string | undefined | null;
    signedInAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    signedOutAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    sessionStartedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    sessionEndedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    $authType?: $NamedTypes.$AuthType | undefined | null;
    $identityProvider?: $NamedTypes.$IdentityProvider | undefined | null;
    $oauthFederatedProvider?: $NamedTypes.$FederatedIdentityProvider | undefined | null;
    oauthUserId?: string | undefined | null;
    oauthDelegateUserId?: string | undefined | null;
    oauthProfileUrl?: string | undefined | null;
    oauthToken?: string | undefined | null;
    oauthTokenCreatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    oauthTokenExpiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    oauthRefreshToken?: string | undefined | null;
    oauthRefreshTokenCreatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    oauthRefreshTokenExpiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    pushNotificationToken?: string | undefined | null;
    trustedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface UserDeviceListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface UploadedAssetInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    ownerId?: string | undefined | null;
    $ownerModelType?: $NamedTypes.$ModelType | undefined | null;
    $assetType?: $NamedTypes.$UploadedAssetType | undefined | null;
    $hostingService?: $NamedTypes.$AssetHostingService | undefined | null;
    url?: string | undefined | null;
    path?: string | undefined | null;
    s3Bucket?: string | undefined | null;
    s3Key?: string | undefined | null;
    mimeType?: string | undefined | null;
    uploadUrl?: string | undefined | null;
    uploadUrlExpiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    uploadedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    expiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface UploadedAssetListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ChannelInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    name?: string | undefined | null;
    topic?: string | undefined | null;
    description?: string | undefined | null;
    tags?: Array<string | undefined | null> | undefined | null;
    $channelType?: $NamedTypes.$ChannelType | undefined | null;
    statuses?: Array<$NamedTypes.$BgChannelStatusInput<_$Scalars> | undefined | null> | undefined | null;
    userIds?: Array<string | undefined | null> | undefined | null;
    /**
     * For 1:1 channels, the ID of the other user. The first user is createdBy.
     */
    otherUserId?: string | undefined | null;
    inviteUserIds?: Array<string | undefined | null> | undefined | null;
    pausedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    pausedBy?: string | undefined | null;
    suspendedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedBy?: string | undefined | null;
    archivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    archivedBy?: string | undefined | null;
    assumedMentorId?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer.
     */
    mm2Id?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer.
     */
    syncedWithMm2At?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface BgChannelStatusInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    userId?: string | undefined | null;
    archivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ChannelListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    userId?: string | undefined | null;
    userIds?: Array<string | undefined | null> | undefined | null;
    mustHaveMessages?: boolean | undefined | null;
    invitationMustBeAccepted?: boolean | undefined | null;
    $includeArchivedMessages?: $NamedTypes.$IncludeFilterOption | undefined | null;
    $includeSystemMessages?: $NamedTypes.$IncludeFilterOption | undefined | null;
}
export interface ChannelMessageInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    channelId?: string | undefined | null;
    replyToMessageId?: string | undefined | null;
    $channelMessageType?: $NamedTypes.$ChannelMessageType | undefined | null;
    messageText?: string | undefined | null;
    statuses?: Array<$NamedTypes.$ChannelMessageStatusInput<_$Scalars> | undefined | null> | undefined | null;
    editedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedBy?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer.
     */
    mm2ConversationId?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer. Mm2 message ID.
     */
    mm2Id?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer.
     */
    syncedWithMm2At?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ChannelMessageStatusInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    userId?: string | undefined | null;
    receivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    seenAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ChannelMessageListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    channelId?: string | undefined | null;
    userIds?: Array<string | undefined | null> | undefined | null;
    receiverUserId?: string | undefined | null;
    replyToMessageId?: string | undefined | null;
    $includeChannelMessageType?: Array<$NamedTypes.$ChannelMessageType | undefined | null> | undefined | null;
    received?: boolean | undefined | null;
    seen?: boolean | undefined | null;
}
export interface ChannelParticipantInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    channelId?: string | undefined | null;
    userId?: string | undefined | null;
    invitedBy?: string | undefined | null;
    channelName?: string | undefined | null;
    $role?: $NamedTypes.$ChannelParticipantRole | undefined | null;
    suspendedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedBy?: string | undefined | null;
}
export interface ChannelParticipantListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    channelIds?: Array<string | undefined | null> | undefined | null;
}
export interface GroupMembershipListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    userIds?: Array<string | undefined | null> | undefined | null;
    embedded?: boolean | undefined | null;
    /**
     * will find memberships that have any of the specified roles
     */
    $anyOfRoles?: Array<$NamedTypes.$GroupMembershipRole | undefined | null> | undefined | null;
}
export interface GroupInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    parentGroupId?: string | undefined | null;
    matchingEngineId?: string | undefined | null;
    name?: string | undefined | null;
    shortName?: string | undefined | null;
    ident?: string | undefined | null;
    slug?: string | undefined | null;
    domain?: string | undefined | null;
    badgeName?: string | undefined | null;
    description?: string | undefined | null;
    planType?: string | undefined | null;
    embedded: boolean;
    appliedGroupRules?: Array<$NamedTypes.$AppliedGroupRuleInput<_$Scalars> | undefined | null> | undefined | null;
    /**
     * The language of this group. The app will be set to this language, should a new user arrive at this groups landing page.
     */
    languageTextId?: string | undefined | null;
    /**
     * This defines which profile roles (mentor/mentee) are available to a new user when signing up to this group.
     */
    $allowProfileRoleOnSignUp?: $NamedTypes.$UserProfileRole | undefined | null;
}
export interface AppliedGroupRuleInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupRuleId: string;
    groupId: string;
    $subscribedToEvents: Array<$NamedTypes.$GroupRuleEventType | undefined | null>;
    config?: $NamedTypes.$GroupRuleBaseConfigInput<_$Scalars> | undefined | null;
}
export interface GroupRuleBaseConfigInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    value: string;
}
export interface GroupListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    embedded?: boolean | undefined | null;
    syncedWithMm2?: boolean | undefined | null;
}
export interface BrandInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    name?: string | undefined | null;
    importId?: string | undefined | null;
    imageSource?: string | undefined | null;
    slug?: string | undefined | null;
    url?: string | undefined | null;
    balanceLookupUri?: string | undefined | null;
    listed?: boolean | undefined | null;
    logoUrl?: string | undefined | null;
    description?: string | undefined | null;
    alias1?: string | undefined | null;
    alias2?: string | undefined | null;
    alias3?: string | undefined | null;
}
export interface BrandListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface PurchaseOrderItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    purchaseOrderId?: string | undefined | null;
    shoppingCartItemId?: string | undefined | null;
    productId?: string | undefined | null;
    brandId?: string | undefined | null;
    quantity?: number | undefined | null;
    price?: number | undefined | null;
    totalPrice?: number | undefined | null;
}
export interface PurchaseOrderItemListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface PurchaseOrderInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    userId?: string | undefined | null;
    shoppingCartId?: string | undefined | null;
    sumItemPrice?: number | undefined | null;
    totalPrice?: number | undefined | null;
    vat?: number | undefined | null;
    paidAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    canceledAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    refundedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface PurchaseOrderListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ShoppingCartItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    shoppingCartId?: string | undefined | null;
    productId?: string | undefined | null;
    quantity?: number | undefined | null;
    price?: number | undefined | null;
    totalPrice?: number | undefined | null;
}
export interface ShoppingCartItemListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ShoppingCartInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    sumItemPrice?: number | undefined | null;
    totalPrice?: number | undefined | null;
    vat?: number | undefined | null;
}
export interface ShoppingCartListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface WalletItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    walletId?: string | undefined | null;
    productId?: string | undefined | null;
    purchaseOrderItemId?: string | undefined | null;
    brandId?: string | undefined | null;
    $productType?: $NamedTypes.$ProductType | undefined | null;
    name?: string | undefined | null;
    price?: number | undefined | null;
    initialBalance?: number | undefined | null;
    balance?: number | undefined | null;
    code?: string | undefined | null;
    hasBarcode?: boolean | undefined | null;
    $barcodeFormat?: $NamedTypes.$BarcodeType | undefined | null;
    pin?: string | undefined | null;
    $source?: $NamedTypes.$WalletItemSource | undefined | null;
    imageSourceFront?: string | undefined | null;
    imageSourceBack?: string | undefined | null;
    referenceUrl?: string | undefined | null;
    termsEn?: string | undefined | null;
    termsUrl?: string | undefined | null;
    instructionsEn?: string | undefined | null;
    instructionsUrl?: string | undefined | null;
    sortIndex?: number | undefined | null;
    issuedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    expiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    balanceUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    transferStartedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    transferAcceptedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    archivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface WalletItemListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface WalletItemTransferInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    walletItemId?: string | undefined | null;
    notificationId?: string | undefined | null;
    recipientEmail?: string | undefined | null;
    recipientFullName?: string | undefined | null;
    subjectText?: string | undefined | null;
    messageText?: string | undefined | null;
    transferSlug?: string | undefined | null;
    transferSecret?: string | undefined | null;
    /**
     * Date this transfer was sent
     */
    sentAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * The recipient accepted this transfer
     */
    acceptedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * The recipient declined this transfer
     */
    declinedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * The sender canceled this transfer
     */
    canceledAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * The sender archived this transfer
     */
    archivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface WalletItemTransferListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface WalletInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
}
export interface WalletListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface GiftCardProductInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    importId?: string | undefined | null;
    brandId?: string | undefined | null;
    brandImportId?: string | undefined | null;
    name?: string | undefined | null;
    description?: string | undefined | null;
    $productType?: $NamedTypes.$ProductType | undefined | null;
    categories?: Array<string | undefined | null> | undefined | null;
    slug?: string | undefined | null;
    url?: string | undefined | null;
    imageSourceFront?: string | undefined | null;
    imageSourceBack?: string | undefined | null;
    hasBarcode?: boolean | undefined | null;
    $barcodeFormat?: $NamedTypes.$BarcodeType | undefined | null;
    genericGiftCardId?: string | undefined | null;
    isGeneric?: boolean | undefined | null;
    hasPin?: boolean | undefined | null;
    termsEn?: string | undefined | null;
    termsUrl?: string | undefined | null;
    instructionsEn?: string | undefined | null;
    instructionsUrl?: string | undefined | null;
    denominations?: Array<$NamedTypes.$GiftCardDenominationInput<_$Scalars> | undefined | null> | undefined | null;
}
export interface GiftCardDenominationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    amount: number;
    enabled: boolean;
}
export interface GiftCardProductListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ProductCategoryInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    name?: string | undefined | null;
    labelEn?: string | undefined | null;
    sortIndex?: number | undefined | null;
}
export interface ProductCategoryListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface UserSearchInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    /**
     * The ID of the user that is searching and owns this object
     */
    userId?: string | undefined | null;
    matchingEngineId?: string | undefined | null;
    $userSearchType?: $NamedTypes.$UserSearchType | undefined | null;
    name?: string | undefined | null;
    filter?: $NamedTypes.$UserSearchFilterInput<_$Scalars> | undefined | null;
    /**
     * A list of user IDs of users that should not be included into the search results, i.e. blocked users.
     */
    excludeUserIds?: Array<string | undefined | null> | undefined | null;
    maxResultCount?: number | undefined | null;
    $subscription?: $NamedTypes.$UserSearchSubscriptionType | undefined | null;
    expiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    resultExpiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    startSearch: boolean;
}
export interface UserSearchFilterInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    searchText?: string | undefined | null;
    $seeksHelp?: $NamedTypes.$UserSearchFieldOption | undefined | null;
    $offersHelp?: $NamedTypes.$UserSearchFieldOption | undefined | null;
    languagesTextIds: Array<string | undefined | null>;
    expertisesTextIds: Array<string | undefined | null>;
    industriesTextIds: Array<string | undefined | null>;
    countryTextIds: Array<string | undefined | null>;
    companyStagesTextIds: Array<string | undefined | null>;
    latestActivityAfter?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface UserSearchListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ContactInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    userId?: string | undefined | null;
    channelId?: string | undefined | null;
    nickname?: string | undefined | null;
    typeTextIds?: Array<string | undefined | null> | undefined | null;
    favorite?: boolean | undefined | null;
    notes?: string | undefined | null;
    archivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface SidContactListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ids?: Array<string | undefined | null> | undefined | null;
    excludeIds?: Array<string | undefined | null> | undefined | null;
    searchText?: string | undefined | null;
    caseSensitive?: boolean | undefined | null;
    textSearchFields?: Array<string | undefined | null> | undefined | null;
    createdAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtFrom?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedAtUntil?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    userIdIn?: Array<string | undefined | null> | undefined | null;
}
/**
 * User sign up input data
 */
export interface SignInUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    $authType: $NamedTypes.$AuthType;
    ident?: string | undefined | null;
    $identType?: $NamedTypes.$UserIdentType | undefined | null;
    password?: string | undefined | null;
    pushNotificationToken?: string | undefined | null;
    $cookieConsentChoice?: $NamedTypes.$CookieChoiceTextId | undefined | null;
    allowToTrack?: boolean | undefined | null;
    captchaService?: string | undefined | null;
    captchaToken?: string | undefined | null;
}
/**
 * User sign up input data
 */
export interface SignInOauthUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    ident?: string | undefined | null;
    $identType?: $NamedTypes.$UserIdentType | undefined | null;
    firstName?: string | undefined | null;
    lastName?: string | undefined | null;
    displayName?: string | undefined | null;
    userHandle?: string | undefined | null;
    email?: string | undefined | null;
    emailVerified?: boolean | undefined | null;
    phoneNumber?: string | undefined | null;
    phoneNumberVerified?: boolean | undefined | null;
    $identityProvider: $NamedTypes.$IdentityProvider;
    $oauthFederatedProvider?: $NamedTypes.$FederatedIdentityProvider | undefined | null;
    oauthUserId?: string | undefined | null;
    oauthDelegateUserId?: string | undefined | null;
    oauthProfileUrl?: string | undefined | null;
    oauthToken?: string | undefined | null;
    oauthTokenId?: string | undefined | null;
    oauthIdToken?: string | undefined | null;
    oauthTokenCreatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    oauthTokenExpiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    oauthRefreshToken?: string | undefined | null;
    oauthRefreshTokenCreatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    oauthRefreshTokenExpiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    pushNotificationToken?: string | undefined | null;
    source?: string | undefined | null;
    trackId?: string | undefined | null;
    $cookieConsentChoice?: $NamedTypes.$CookieChoiceTextId | undefined | null;
    allowToTrack?: boolean | undefined | null;
    checkAvailable: boolean;
}
/**
 * User sign up input data
 */
export interface SignUpUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    firstName?: string | undefined | null;
    lastName?: string | undefined | null;
    userHandle?: string | undefined | null;
    email?: string | undefined | null;
    emailVerifiedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    emailSource?: string | undefined | null;
    phoneNumber?: string | undefined | null;
    $authType: $NamedTypes.$AuthType;
    password?: string | undefined | null;
    avatarUrl?: string | undefined | null;
    source?: string | undefined | null;
    timezone?: string | undefined | null;
    optIntoNewsletter?: boolean | undefined | null;
    pushNotificationToken?: string | undefined | null;
    $cookieConsentChoice?: $NamedTypes.$CookieChoiceTextId | undefined | null;
    allowToTrack?: boolean | undefined | null;
    trackId?: string | undefined | null;
    captchaService?: string | undefined | null;
    captchaToken?: string | undefined | null;
    checkAvailable: boolean;
    isTestUser?: boolean | undefined | null;
    offersHelp?: boolean | undefined | null;
    seeksHelp?: boolean | undefined | null;
}
export interface VerifyOneTimeAuthTokenInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    userIdent: string;
    $userIdentType?: $NamedTypes.$UserIdentType | undefined | null;
    deviceUuid: string;
    token: string;
}
export interface ReportUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    userId?: string | undefined | null;
    $reasonTextId?: $NamedTypes.$ReportUserReasonTextId | undefined | null;
    messageText?: string | undefined | null;
    createdBy?: string | undefined | null;
}
export interface AdminTaskInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    $adminTaskType?: $NamedTypes.$AdminTaskType | undefined | null;
    $result?: $NamedTypes.$AdminTaskResult | undefined | null;
    resultMessage?: string | undefined | null;
    /**
     * Any error messages that happened during the run
     */
    error?: string | undefined | null;
    /**
     * arguments
     */
    args?: Array<string | undefined | null> | undefined | null;
    /**
     * number of milliseconds before timeout
     */
    timeout?: number | undefined | null;
    /**
     * run ask after creation
     */
    autoRun?: boolean | undefined | null;
    /**
     * should the task run synchronously, or in the background?
     */
    synchronous?: boolean | undefined | null;
    /**
     * Date/time this task started to run
     */
    startedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * Date/time this task will be removed from the db
     */
    expiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * Date/time this task completed its run
     */
    finishedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ChannelInvitationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    channelId?: string | undefined | null;
    recipientId?: string | undefined | null;
    channelName?: string | undefined | null;
    channelTopic?: string | undefined | null;
    messageText?: string | undefined | null;
    /**
     * An authorized sender (i.e. role: ["support"]) can skip the acceptance step.
     */
    autoAccept?: boolean | undefined | null;
    declineReasonTextId?: string | undefined | null;
    dismissedFromInboxBySenderAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    dismissedFromInboxByRecipientAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    readByRecipientAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    $status?: $NamedTypes.$ChannelInvitationStatus | undefined | null;
    suspendedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedBy?: string | undefined | null;
    userSearchId?: string | undefined | null;
    searchRank?: number | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer.
     */
    mm2ConversationId?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer. Mm2 message ID.
     */
    mm2Id?: string | undefined | null;
    /**
     * This attribute is only used by the MM2 synchronizer.
     */
    syncedWithMm2At?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface BgAddChannelMessageEventInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    channelId: string;
    messageIds: Array<string | undefined | null>;
    recipientId: string;
    $event: $NamedTypes.$ChannelMessageEvent;
}
export interface ContentTagInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    objectId?: string | undefined | null;
    $contentModelType?: $NamedTypes.$ModelType | undefined | null;
    /**
     * ID of the user that created/owns the content referred to in this ContentTag. The ID of the user that created this ContentTag is stored in the createdBy field for ContentTags that were created by a user.
     */
    userId?: string | undefined | null;
    contentTagTypeTextId?: string | undefined | null;
    childContentTagTypeTextId?: string | undefined | null;
    messageText?: string | undefined | null;
    moderationConcern?: $NamedTypes.$ModerationConcernInput<_$Scalars> | undefined | null;
    allModerationConcerns?: Array<$NamedTypes.$ModerationConcernInput<_$Scalars> | undefined | null> | undefined | null;
    approvedByRecipientAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * ID of the admin user that verified the tag.
     */
    verifiedBy?: string | undefined | null;
    verifiedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * ID of the admin user that dimsissed the tag.
     */
    dismissedBy?: string | undefined | null;
    dismissedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface ModerationConcernInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    $moderationConcernType: $NamedTypes.$ModerationConcernType;
    name?: string | undefined | null;
    description?: string | undefined | null;
    value?: string | undefined | null;
    languageTextId?: string | undefined | null;
    /**
     * must match with capitalization; ignored if isRegex = true; default = true
     */
    isCaseSensitive?: boolean | undefined | null;
    /**
     * only matches full words; ignored if isRegex = true; default = true
     */
    isWord?: boolean | undefined | null;
    /**
     * value is a regex expression without flags; default = false
     */
    isRegex?: boolean | undefined | null;
    /**
     * default = false
     */
    isNameOfBadActor?: boolean | undefined | null;
    /**
     * default = false
     */
    isCompanyNameOfBadActor?: boolean | undefined | null;
    /**
     * default = false
     */
    isEmailOfBadActor?: boolean | undefined | null;
    /**
     * default = false
     */
    isPhoneNumberOfBadActor?: boolean | undefined | null;
    /**
     * default = false
     */
    isWebsiteOfBadActor?: boolean | undefined | null;
    /**
     * delete the content, if a match is found; default = false
     */
    deleteContent?: boolean | undefined | null;
    /**
     * number of points to reduce a users trustLevel, if found
     */
    trustLevelImpact?: number | undefined | null;
    version?: string | undefined | null;
}
export interface MenteesGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupId?: string | undefined | null;
    groupIdent?: string | undefined | null;
    userId?: string | undefined | null;
    $roles?: Array<$NamedTypes.$GroupMembershipRole | undefined | null> | undefined | null;
    /**
     * Must match expertise textIds.
     */
    soughtExpertisesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match expertise textIds.
     */
    additionalSoughtExpertisesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match industry textId.
     */
    industryTextId?: string | undefined | null;
    /**
     * Must match mm2 expertise textIds -- only used by synchronizer
     */
    mm2SoughtExpertisesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match mm2 industry textIds -- only used by synchronizer
     */
    mm2IndustryTextId?: string | undefined | null;
    actionsTaken?: string | undefined | null;
    /**
     * From MM2, not used in MM3 (yet)
     */
    currentChallenges?: string | undefined | null;
    /**
     * From MM2, not used in MM3 (yet)
     */
    futureGoals?: string | undefined | null;
    /**
     * From MM2, not used in MM3 (yet)
     */
    motivationsForMentorship?: string | undefined | null;
    reasonsForStartingBusiness?: string | undefined | null;
    howCanMentorSupportMe?: string | undefined | null;
}
export interface MentorsGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupId?: string | undefined | null;
    groupIdent?: string | undefined | null;
    userId?: string | undefined | null;
    $roles?: Array<$NamedTypes.$GroupMembershipRole | undefined | null> | undefined | null;
    /**
     * Must match expertise textIds.
     */
    expertisesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match expertise textIds.
     */
    additionalExpertisesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match industry textIds.
     */
    industriesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match mm2 expertise textIds -- only used by synchronizer
     */
    mm2ExpertisesTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Must match mm2 industry textIds -- only used by synchronizer
     */
    mm2IndustriesTextIds?: Array<string | undefined | null> | undefined | null;
    helpICanOffer?: string | undefined | null;
    expectationsForMentees?: string | undefined | null;
    menteePreparationInstructions?: string | undefined | null;
    endorsements?: number | undefined | null;
    reasonsForMentoring?: string | undefined | null;
    howICanHelpMentees?: string | undefined | null;
}
export interface IqlaaGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupId?: string | undefined | null;
    groupIdent?: string | undefined | null;
    userId?: string | undefined | null;
    $roles?: Array<$NamedTypes.$GroupMembershipRole | undefined | null> | undefined | null;
    /**
     * Fathers name
     */
    fatherName?: string | undefined | null;
    /**
     * Date of birth
     */
    birthDate?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    /**
     * "Is your business a home-based business?"
     */
    isBusinessHomeBased?: boolean | undefined | null;
    /**
     * "Is the Business/ Project registered in the Companies Control Department -Ministry of industries and trading?"
     */
    isBusinessRegisteredWithCCD?: boolean | undefined | null;
    /**
     * (Optional) Business registration number
     */
    businessRegistrationNumber?: string | undefined | null;
    /**
     * Is the user a Jordan national?
     */
    isJordanNational?: boolean | undefined | null;
}
export interface MastercardGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupId?: string | undefined | null;
    groupIdent?: string | undefined | null;
    userId?: string | undefined | null;
    $roles?: Array<$NamedTypes.$GroupMembershipRole | undefined | null> | undefined | null;
    /**
     * Names of banks for reports
     */
    bankNames?: Array<string | undefined | null> | undefined | null;
    /**
     * Text IDs of banks for reports
     */
    bankTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Small business card types
     */
    $smallBusinessCardTypes?: Array<$NamedTypes.$MastercardCardType | undefined | null> | undefined | null;
    /**
     * Personal card types
     */
    $personalCardTypes?: Array<$NamedTypes.$MastercardCardType | undefined | null> | undefined | null;
}
export interface SupportChannelConfigInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    groupId?: string | undefined | null;
    groupIdent?: string | undefined | null;
    senderUserId?: string | undefined | null;
    /**
     * Is this welcome message active / should we send it to users?
     */
    isActive?: boolean | undefined | null;
    createSupportChannelForMentees?: boolean | undefined | null;
    createSupportChannelForMentors?: boolean | undefined | null;
    /**
     * Any language option can be selected, not just a UiLanguage
     */
    channelLanguageTextId?: string | undefined | null;
    filterByGenderTextIds?: Array<string | undefined | null> | undefined | null;
    /**
     * The welcome message is a plain text
     */
    firstMessageText?: string | undefined | null;
    /**
     * Setting to false will ensure no notifications are sent. Setting to true will still check notification template settings.
     */
    sendNotifications?: boolean | undefined | null;
}
export interface UpdateObjectOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    replace?: boolean | undefined | null;
    upsert?: boolean | undefined | null;
    returnReloadedObject?: boolean | undefined | null;
}
export interface NotificationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    $notificationType?: $NamedTypes.$NotificationType | undefined | null;
    templateId?: string | undefined | null;
    templateName?: string | undefined | null;
    recipientId?: string | undefined | null;
    multiStepActionId?: string | undefined | null;
    initiatorId?: string | undefined | null;
    replyingToId?: string | undefined | null;
    title?: string | undefined | null;
    messageText?: string | undefined | null;
    shortMessageText?: string | undefined | null;
    htmlMessage?: string | undefined | null;
    $language?: $NamedTypes.$UiLanguage | undefined | null;
    isTranslated?: boolean | undefined | null;
    appLink?: string | undefined | null;
    $action0?: $NamedTypes.$AppAction | undefined | null;
    $action1?: $NamedTypes.$AppAction | undefined | null;
    $action2?: $NamedTypes.$AppAction | undefined | null;
    $actionTaken?: $NamedTypes.$AppAction | undefined | null;
    sendEmail?: boolean | undefined | null;
    sendInAppMessage?: boolean | undefined | null;
    sendPushNotification?: boolean | undefined | null;
    sendSms?: boolean | undefined | null;
    allowSendingToSuspendedUser?: boolean | undefined | null;
    emailSentAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    inAppMessageSentAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    inAppMessageReceivedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    pushNotificationSentAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    smsSentAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    emailSendReport?: string | undefined | null;
    pushNotificationSendReport?: string | undefined | null;
    smsSendReport?: string | undefined | null;
    sentMessagesCount?: number | undefined | null;
    context?: $NamedTypes.$NotificationInput<_$Scalars> | undefined | null;
}
export interface SendMultiStepActionNotificationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    actionId: string;
    /**
     * Only allowed for certain flows, i.e. during sign-up with only an email or phone number.
     */
    email?: string | undefined | null;
    /**
     * Only allowed for certain flows, i.e. during sign-up with only an email or phone number.
     */
    phoneNumber?: string | undefined | null;
    $notificationMethod?: $NamedTypes.$NotificationMethod | undefined | null;
}
export interface NotificationTemplateInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    templateId?: string | undefined | null;
    $name?: $NamedTypes.$NotificationTemplateName | undefined | null;
    description?: string | undefined | null;
    titleAr?: string | undefined | null;
    messageTextAr?: string | undefined | null;
    shortMessageTextAr?: string | undefined | null;
    htmlMessageAr?: string | undefined | null;
    titleEn?: string | undefined | null;
    messageTextEn?: string | undefined | null;
    shortMessageTextEn?: string | undefined | null;
    htmlMessageEn?: string | undefined | null;
    titleEs?: string | undefined | null;
    messageTextEs?: string | undefined | null;
    shortMessageTextEs?: string | undefined | null;
    htmlMessageEs?: string | undefined | null;
    titleId?: string | undefined | null;
    messageTextId?: string | undefined | null;
    shortMessageTextId?: string | undefined | null;
    htmlMessageId?: string | undefined | null;
    titleRu?: string | undefined | null;
    messageTextRu?: string | undefined | null;
    shortMessageTextRu?: string | undefined | null;
    htmlMessageRu?: string | undefined | null;
    titleSo?: string | undefined | null;
    messageTextSo?: string | undefined | null;
    shortMessageTextSo?: string | undefined | null;
    htmlMessageSo?: string | undefined | null;
    version?: string | undefined | null;
    senderName?: string | undefined | null;
    senderEmail?: string | undefined | null;
    $action0?: $NamedTypes.$AppAction | undefined | null;
    $action1?: $NamedTypes.$AppAction | undefined | null;
    $action2?: $NamedTypes.$AppAction | undefined | null;
    sendEmail?: boolean | undefined | null;
    sendInAppMessage?: boolean | undefined | null;
    sendPushNotification?: boolean | undefined | null;
    sendSms?: boolean | undefined | null;
    isCore?: boolean | undefined | null;
}
export interface SidMultiStepActionInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    userId?: string | undefined | null;
    userIdent?: string | undefined | null;
    userHandle?: string | undefined | null;
    email?: string | undefined | null;
    phoneNumber?: string | undefined | null;
    $actionType?: $NamedTypes.$MultiStepActionType | undefined | null;
    $actionStatus?: $NamedTypes.$MultiStepActionStatus | undefined | null;
    $notificationMethod?: $NamedTypes.$NotificationMethod | undefined | null;
    $result?: $NamedTypes.$MultiStepActionResult | undefined | null;
    confirmToken?: string | undefined | null;
    attemptCount?: number | undefined | null;
    notificationSentAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    $notificationResult?: $NamedTypes.$MultiStepActionSendNotificationResult | undefined | null;
    notificationId?: string | undefined | null;
    textData?: string | undefined | null;
    report?: string | undefined | null;
    emailPassed?: boolean | undefined | null;
    emailUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    emailVerifiedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    errors?: Array<$NamedTypes.$MultiStepActionErrorInput<_$Scalars> | undefined | null> | undefined | null;
    password?: string | undefined | null;
    passwordPassed?: boolean | undefined | null;
    passwordResettedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    passwordUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    phoneNumberPassed?: boolean | undefined | null;
    phoneNumberUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    phoneNumberVerifiedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    signedInAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    tfaBackupCodes?: string | undefined | null;
    expiresAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface MultiStepActionErrorInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    key?: string | undefined | null;
    messageId?: string | undefined | null;
    message?: string | undefined | null;
}
export interface UserIdentInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    userId?: string | undefined | null;
    userIdent?: string | undefined | null;
    userHandle?: string | undefined | null;
    email?: string | undefined | null;
    phoneNumber?: string | undefined | null;
    inviteCode?: string | undefined | null;
}
export interface VerifyMultiStepActionTokenInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    actionId: string;
    token: string;
    newPassword?: string | undefined | null;
}
export interface MyUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    firstName?: string | undefined | null;
    lastName?: string | undefined | null;
    fullName?: string | undefined | null;
    userHandle?: string | undefined | null;
    phoneNumber?: string | undefined | null;
    phoneNumberUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    isPhoneNumberVerified?: boolean | undefined | null;
    email?: string | undefined | null;
    emailUpdatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    isEmailVerified?: boolean | undefined | null;
    /**
     * The source of the email address, e.g. "google", "facebook", etc.
     */
    emailSource?: string | undefined | null;
    genderTextId?: string | undefined | null;
    cityOfResidence?: string | undefined | null;
    regionOfResidence?: string | undefined | null;
    countryOfResidenceTextId?: string | undefined | null;
    postalCode?: string | undefined | null;
    avatarUrl?: string | undefined | null;
    websites?: Array<$NamedTypes.$LabeledStringValueInput<_$Scalars> | undefined | null> | undefined | null;
    $authType?: $NamedTypes.$AuthType | undefined | null;
    inviteCode?: string | undefined | null;
    currentPassword?: string | undefined | null;
    newPassword?: string | undefined | null;
    preferredLanguageTextId?: string | undefined | null;
    spokenLanguagesTextIds?: Array<string | undefined | null> | undefined | null;
    $selectedUiLanguageTextId?: $NamedTypes.$UiLanguage | undefined | null;
    $fallbackUiLanguageTextId?: $NamedTypes.$UiLanguage | undefined | null;
    discoverable?: boolean | undefined | null;
    $roles?: Array<$NamedTypes.$UserRole | undefined | null> | undefined | null;
    $appFeatures?: Array<$NamedTypes.$AppFeature | undefined | null> | undefined | null;
    source?: string | undefined | null;
    timezone?: string | undefined | null;
    preferences?: $NamedTypes.$UserPreferencesInput<_$Scalars> | undefined | null;
    trustLevel?: number | undefined | null;
    termsAndConditionsAcceptedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    optIntoNewsletter?: boolean | undefined | null;
    onboardingStage?: string | undefined | null;
    isTestUser?: boolean | undefined | null;
    signedInAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    signedOutAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    latestActivityAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    inactivatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    inactivatedBy?: string | undefined | null;
    suspendedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    suspendedBy?: string | undefined | null;
    syncedToAnalyticsAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    companyIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Used internally, will not work in GraphQL queries.
     */
    companies?: Array<$NamedTypes.$CompanyInput<_$Scalars> | undefined | null> | undefined | null;
    groupIds?: Array<string | undefined | null> | undefined | null;
    parentGroupIds?: Array<string | undefined | null> | undefined | null;
    externalGroupIds?: Array<string | undefined | null> | undefined | null;
    pronounsTextIds?: Array<string | undefined | null> | undefined | null;
    groupMemberships?: Array<$NamedTypes.$GroupMembershipInput<_$Scalars> | undefined | null> | undefined | null;
    addToGroupIds?: Array<string | undefined | null> | undefined | null;
    removeFromGroupIds?: Array<string | undefined | null> | undefined | null;
    seeksHelp?: boolean | undefined | null;
    offersHelp?: boolean | undefined | null;
    birthYear?: number | undefined | null;
    ethnicity?: string | undefined | null;
    educationLevelTextId?: string | undefined | null;
    personalBio?: string | undefined | null;
    yearsManagementExperience?: number | undefined | null;
    yearsOwnershipExperience?: number | undefined | null;
    academicExperienceIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Specify a company you want to create and add the user to.
     */
    company?: $NamedTypes.$CompanyInput<_$Scalars> | undefined | null;
    /**
     * Specify a list of academic experiences you want to create for the user.
     */
    academicExperiences?: Array<$NamedTypes.$AcademicExperienceInput<_$Scalars> | undefined | null> | undefined | null;
    businessExperienceIds?: Array<string | undefined | null> | undefined | null;
    /**
     * Specify a list of business experiences you want to create for the user.
     */
    businessExperiences?: Array<$NamedTypes.$BusinessExperienceInput<_$Scalars> | undefined | null> | undefined | null;
    cityOfOrigin?: string | undefined | null;
    regionOfOrigin?: string | undefined | null;
    /**
     * Users Country of origin. Use a Country Options textId.
     */
    countryOfOriginTextId?: string | undefined | null;
    isOnVacation?: boolean | undefined | null;
    profileRoleHistory?: Array<$NamedTypes.$UserProfileRoleHistoryItemInput<_$Scalars> | undefined | null> | undefined | null;
    ssoIdp?: string | undefined | null;
}
export interface UserTrackingInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
    id?: string | undefined | null;
    adminNotes?: string | undefined | null;
    events?: Array<$NamedTypes.$ModelEventInput<_$Scalars> | undefined | null> | undefined | null;
    metadata?: $NamedTypes.$BaseModelMetadataInput<_$Scalars> | undefined | null;
    createdAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    createdBy?: string | undefined | null;
    updatedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    updatedBy?: string | undefined | null;
    deletedAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
    deletedBy?: string | undefined | null;
    userId?: string | undefined | null;
    trackId?: string | undefined | null;
    metaPixelId?: string | undefined | null;
    /**
     * fbc cookie (FBCLID)
     */
    metaClickId?: string | undefined | null;
    /**
     * fbp cookie
     */
    metaBrowserId?: string | undefined | null;
    /**
     * This is the Google Analytics tracking ID
     */
    googleId?: string | undefined | null;
    googleClickId?: string | undefined | null;
    $cookieConsentChoice?: $NamedTypes.$CookieChoiceTextId | undefined | null;
    allowToTrack?: boolean | undefined | null;
    syncedToAnalyticsAt?: $$Utilities.Schema.Scalar.GetDecoded<$$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'DateTimeISO', _$Scalars>> | undefined | null;
}
export interface UserMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `updatedAt` field on the `UserMetadata` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserMetadata.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserMetadata.updatedAt<_$Scalars>>;
    /**
     * Select the `totalTimeOnPlatform` field on the `UserMetadata` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalTimeOnPlatform?: UserMetadata.totalTimeOnPlatform$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserMetadata.totalTimeOnPlatform<_$Scalars>>;
    /**
     * Select the `channelsMetadata` field on the `UserMetadata` object. Its type is `ChannelsUserMetadata` (a `OutputObject` kind of type).
     */
    channelsMetadata?: UserMetadata.channelsMetadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserMetadata.channelsMetadata<_$Scalars>>;
    /**
     * Select the `groupsMetadata` field on the `UserMetadata` object. Its type is `GroupsUserMetadata` (a `OutputObject` kind of type).
     */
    groupsMetadata?: UserMetadata.groupsMetadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserMetadata.groupsMetadata<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserMetadata$FragmentInline<_$Scalars> | UserMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserMetadata {
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type totalTimeOnPlatform<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalTimeOnPlatform$SelectionSet<_$Scalars>;
    interface totalTimeOnPlatform$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalTimeOnPlatform` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalTimeOnPlatform$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalTimeOnPlatform$SelectionSet<_$Scalars>>;
    type channelsMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channelsMetadata$SelectionSet<_$Scalars>;
    interface channelsMetadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelsUserMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channelsMetadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelsMetadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channelsMetadata$SelectionSet<_$Scalars>>;
    type groupsMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupsMetadata$SelectionSet<_$Scalars>;
    interface groupsMetadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupsUserMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupsMetadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupsMetadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupsMetadata$SelectionSet<_$Scalars>>;
}
export interface ChannelsUserMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `mentoringSessionCount` field on the `ChannelsUserMetadata` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    mentoringSessionCount?: ChannelsUserMetadata.mentoringSessionCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelsUserMetadata.mentoringSessionCount<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelsUserMetadata$FragmentInline<_$Scalars> | ChannelsUserMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelsUserMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelsUserMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelsUserMetadata {
    type mentoringSessionCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mentoringSessionCount$SelectionSet<_$Scalars>;
    interface mentoringSessionCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mentoringSessionCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentoringSessionCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mentoringSessionCount$SelectionSet<_$Scalars>>;
}
export interface GroupsUserMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `groupCount` field on the `GroupsUserMetadata` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    groupCount?: GroupsUserMetadata.groupCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupsUserMetadata.groupCount<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `GroupsUserMetadata` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: GroupsUserMetadata.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupsUserMetadata.updatedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GroupsUserMetadata$FragmentInline<_$Scalars> | GroupsUserMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GroupsUserMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GroupsUserMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GroupsUserMetadata {
    type groupCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupCount$SelectionSet<_$Scalars>;
    interface groupCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupCount$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
}
export interface GroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `GroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: GroupMembership.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `GroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: GroupMembership.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `GroupMembership` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: GroupMembership.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `GroupMembership` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: GroupMembership.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `GroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: GroupMembership.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `GroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: GroupMembership.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `GroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: GroupMembership.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `GroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: GroupMembership.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `GroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: GroupMembership.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `GroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: GroupMembership.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `GroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: GroupMembership.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.groupId<_$Scalars>>;
    /**
     * Select the `groupIdent` field on the `GroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIdent?: GroupMembership.groupIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.groupIdent<_$Scalars>>;
    /**
     * Select the `userId` field on the `GroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: GroupMembership.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.userId<_$Scalars>>;
    /**
     * Select the `roles` field on the `GroupMembership` object. Its type is `GroupMembershipRole` (a `Enum` kind of type).
     */
    roles?: GroupMembership.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.roles<_$Scalars>>;
    /**
     * Select the `expertises` field on the `GroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    expertises?: GroupMembership.expertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.expertises<_$Scalars>>;
    /**
     * Select the `industries` field on the `GroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industries?: GroupMembership.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.industries<_$Scalars>>;
    /**
     * Select the `industry` field on the `GroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industry?: GroupMembership.industry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.industry<_$Scalars>>;
    /**
     * Select the `soughtExpertises` field on the `GroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    soughtExpertises?: GroupMembership.soughtExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupMembership.soughtExpertises<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GroupMembership$FragmentInline<_$Scalars> | GroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type expertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = expertises$SelectionSet<_$Scalars>;
    interface expertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `expertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<expertises$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industries$SelectionSet<_$Scalars>>;
    type industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industry$SelectionSet<_$Scalars>;
    interface industry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industry$SelectionSet<_$Scalars>>;
    type soughtExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = soughtExpertises$SelectionSet<_$Scalars>;
    interface soughtExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `soughtExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<soughtExpertises$SelectionSet<_$Scalars>>;
}
export interface ModelEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `time` field on the `ModelEvent` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    time?: ModelEvent.time$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModelEvent.time<_$Scalars>>;
    /**
     * Select the `modelEventType` field on the `ModelEvent` object. Its type is `ModelEventType` (a `Enum` kind of type).
     */
    modelEventType?: ModelEvent.modelEventType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModelEvent.modelEventType<_$Scalars>>;
    /**
     * Select the `message` field on the `ModelEvent` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    message?: ModelEvent.message$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModelEvent.message<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ModelEvent$FragmentInline<_$Scalars> | ModelEvent$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ModelEvent$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ModelEvent<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ModelEvent {
    type time<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | time$SelectionSet<_$Scalars>;
    interface time$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `time` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type time$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | time$SelectionSet<_$Scalars>>;
    type modelEventType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | modelEventType$SelectionSet<_$Scalars>;
    interface modelEventType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `modelEventType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type modelEventType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | modelEventType$SelectionSet<_$Scalars>>;
    type message<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | message$SelectionSet<_$Scalars>;
    interface message$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `message` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type message$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | message$SelectionSet<_$Scalars>>;
}
export interface Expertise<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Expertise` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Expertise.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Expertise.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Expertise` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Expertise.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Expertise` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Expertise.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Expertise` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Expertise.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Expertise` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Expertise.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Expertise` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Expertise.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Expertise` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Expertise.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Expertise` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Expertise.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Expertise` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Expertise.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Expertise.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Expertise.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Expertise` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Expertise.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Expertise` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Expertise.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Expertise.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Expertise.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Expertise` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Expertise.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Expertise.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Expertise.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Expertise.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Expertise` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Expertise.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Expertise.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Expertise.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Expertise` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Expertise.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Expertise.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Expertise` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Expertise.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Expertise` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Expertise.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Expertise` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Expertise.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.parentOption<_$Scalars>>;
    /**
     * Select the `childExpertises` field on the `Expertise` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    childExpertises?: Expertise.childExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.childExpertises<_$Scalars>>;
    /**
     * Select the `parentExpertise` field on the `Expertise` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    parentExpertise?: Expertise.parentExpertise$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Expertise.parentExpertise<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Expertise$FragmentInline<_$Scalars> | Expertise$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Expertise$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Expertise<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Expertise {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
    type childExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childExpertises$SelectionSet<_$Scalars>;
    interface childExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childExpertises$SelectionSet<_$Scalars>>;
    type parentExpertise<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentExpertise$SelectionSet<_$Scalars>;
    interface parentExpertise$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentExpertise` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentExpertise$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentExpertise$SelectionSet<_$Scalars>>;
}
export interface Option<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Option` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Option.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Option.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Option` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Option.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Option` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Option.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Option` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Option.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Option` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Option.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Option` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Option.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Option` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Option.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Option` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Option.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Option` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Option.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Option.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Option.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Option` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Option.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Option` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Option.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Option.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Option.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Option` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Option.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Option.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Option.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Option.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Option` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Option.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Option.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Option.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Option` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Option.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Option.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Option` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Option.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Option` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Option.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Option` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Option.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Option.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Option$FragmentInline<_$Scalars> | Option$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Option$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Option<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Option {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface Industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Industry` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Industry.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Industry.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Industry` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Industry.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Industry` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Industry.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Industry` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Industry.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Industry` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Industry.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Industry` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Industry.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Industry` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Industry.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Industry` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Industry.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Industry` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Industry.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Industry.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Industry.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Industry` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Industry.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Industry` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Industry.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Industry.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Industry.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Industry` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Industry.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Industry.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Industry.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Industry.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Industry` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Industry.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Industry.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Industry.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Industry` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Industry.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Industry.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Industry` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Industry.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Industry` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Industry.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Industry` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Industry.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Industry.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Industry$FragmentInline<_$Scalars> | Industry$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Industry$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Industry<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Industry {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
/**
 * This object contains the profile information describing a mentee/entrepreneur/business owner.
 *
 * Users with User.seeksHelp are members of the "mentees" group, which comes with extra
 * profile attributes. This is one of the 'embedded' group memberships that are available
 * through User.groupMemberships.
 */
export interface MenteesGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MenteesGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MenteesGroupMembership.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MenteesGroupMembership.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MenteesGroupMembership` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MenteesGroupMembership.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MenteesGroupMembership` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: MenteesGroupMembership.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MenteesGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MenteesGroupMembership.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MenteesGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MenteesGroupMembership.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MenteesGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MenteesGroupMembership.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MenteesGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MenteesGroupMembership.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MenteesGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MenteesGroupMembership.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MenteesGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MenteesGroupMembership.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `MenteesGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: MenteesGroupMembership.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.groupId<_$Scalars>>;
    /**
     * Select the `groupIdent` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIdent?: MenteesGroupMembership.groupIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.groupIdent<_$Scalars>>;
    /**
     * Select the `userId` field on the `MenteesGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: MenteesGroupMembership.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.userId<_$Scalars>>;
    /**
     * Select the `roles` field on the `MenteesGroupMembership` object. Its type is `GroupMembershipRole` (a `Enum` kind of type).
     */
    roles?: MenteesGroupMembership.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.roles<_$Scalars>>;
    /**
     * Select the `expertises` field on the `MenteesGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    expertises?: MenteesGroupMembership.expertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.expertises<_$Scalars>>;
    /**
     * Select the `industries` field on the `MenteesGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industries?: MenteesGroupMembership.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.industries<_$Scalars>>;
    /**
     * Select the `industry` field on the `MenteesGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industry?: MenteesGroupMembership.industry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.industry<_$Scalars>>;
    /**
     * Select the `soughtExpertises` field on the `MenteesGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    soughtExpertises?: MenteesGroupMembership.soughtExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.soughtExpertises<_$Scalars>>;
    /**
     * Select the `soughtExpertisesTextIds` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    soughtExpertisesTextIds?: MenteesGroupMembership.soughtExpertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.soughtExpertisesTextIds<_$Scalars>>;
    /**
     * Select the `additionalSoughtExpertisesTextIds` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    additionalSoughtExpertisesTextIds?: MenteesGroupMembership.additionalSoughtExpertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.additionalSoughtExpertisesTextIds<_$Scalars>>;
    /**
     * Select the `industryTextId` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    industryTextId?: MenteesGroupMembership.industryTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.industryTextId<_$Scalars>>;
    /**
     * Select the `mm2SoughtExpertisesTextIds` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2SoughtExpertisesTextIds?: MenteesGroupMembership.mm2SoughtExpertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.mm2SoughtExpertisesTextIds<_$Scalars>>;
    /**
     * Select the `mm2IndustryTextId` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2IndustryTextId?: MenteesGroupMembership.mm2IndustryTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.mm2IndustryTextId<_$Scalars>>;
    /**
     * Select the `actionsTaken` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    actionsTaken?: MenteesGroupMembership.actionsTaken$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.actionsTaken<_$Scalars>>;
    /**
     * Select the `currentChallenges` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    currentChallenges?: MenteesGroupMembership.currentChallenges$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.currentChallenges<_$Scalars>>;
    /**
     * Select the `futureGoals` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    futureGoals?: MenteesGroupMembership.futureGoals$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.futureGoals<_$Scalars>>;
    /**
     * Select the `motivationsForMentorship` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    motivationsForMentorship?: MenteesGroupMembership.motivationsForMentorship$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.motivationsForMentorship<_$Scalars>>;
    /**
     * Select the `reasonsForStartingBusiness` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    reasonsForStartingBusiness?: MenteesGroupMembership.reasonsForStartingBusiness$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.reasonsForStartingBusiness<_$Scalars>>;
    /**
     * Select the `howCanMentorSupportMe` field on the `MenteesGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    howCanMentorSupportMe?: MenteesGroupMembership.howCanMentorSupportMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MenteesGroupMembership.howCanMentorSupportMe<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MenteesGroupMembership$FragmentInline<_$Scalars> | MenteesGroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MenteesGroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MenteesGroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MenteesGroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type expertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = expertises$SelectionSet<_$Scalars>;
    interface expertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `expertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<expertises$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industries$SelectionSet<_$Scalars>>;
    type industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industry$SelectionSet<_$Scalars>;
    interface industry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industry$SelectionSet<_$Scalars>>;
    type soughtExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = soughtExpertises$SelectionSet<_$Scalars>;
    interface soughtExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `soughtExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<soughtExpertises$SelectionSet<_$Scalars>>;
    type soughtExpertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | soughtExpertisesTextIds$SelectionSet<_$Scalars>;
    interface soughtExpertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `soughtExpertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | soughtExpertisesTextIds$SelectionSet<_$Scalars>>;
    type additionalSoughtExpertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | additionalSoughtExpertisesTextIds$SelectionSet<_$Scalars>;
    interface additionalSoughtExpertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `additionalSoughtExpertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type additionalSoughtExpertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | additionalSoughtExpertisesTextIds$SelectionSet<_$Scalars>>;
    type industryTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industryTextId$SelectionSet<_$Scalars>;
    interface industryTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `industryTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industryTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industryTextId$SelectionSet<_$Scalars>>;
    type mm2SoughtExpertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2SoughtExpertisesTextIds$SelectionSet<_$Scalars>;
    interface mm2SoughtExpertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2SoughtExpertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2SoughtExpertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2SoughtExpertisesTextIds$SelectionSet<_$Scalars>>;
    type mm2IndustryTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2IndustryTextId$SelectionSet<_$Scalars>;
    interface mm2IndustryTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2IndustryTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2IndustryTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2IndustryTextId$SelectionSet<_$Scalars>>;
    type actionsTaken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionsTaken$SelectionSet<_$Scalars>;
    interface actionsTaken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionsTaken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionsTaken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionsTaken$SelectionSet<_$Scalars>>;
    type currentChallenges<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | currentChallenges$SelectionSet<_$Scalars>;
    interface currentChallenges$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `currentChallenges` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type currentChallenges$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | currentChallenges$SelectionSet<_$Scalars>>;
    type futureGoals<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | futureGoals$SelectionSet<_$Scalars>;
    interface futureGoals$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `futureGoals` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type futureGoals$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | futureGoals$SelectionSet<_$Scalars>>;
    type motivationsForMentorship<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | motivationsForMentorship$SelectionSet<_$Scalars>;
    interface motivationsForMentorship$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `motivationsForMentorship` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type motivationsForMentorship$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | motivationsForMentorship$SelectionSet<_$Scalars>>;
    type reasonsForStartingBusiness<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | reasonsForStartingBusiness$SelectionSet<_$Scalars>;
    interface reasonsForStartingBusiness$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `reasonsForStartingBusiness` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type reasonsForStartingBusiness$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | reasonsForStartingBusiness$SelectionSet<_$Scalars>>;
    type howCanMentorSupportMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | howCanMentorSupportMe$SelectionSet<_$Scalars>;
    interface howCanMentorSupportMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `howCanMentorSupportMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type howCanMentorSupportMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | howCanMentorSupportMe$SelectionSet<_$Scalars>>;
}
export interface MentorsGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MentorsGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MentorsGroupMembership.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MentorsGroupMembership.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MentorsGroupMembership` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MentorsGroupMembership.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MentorsGroupMembership` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: MentorsGroupMembership.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MentorsGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MentorsGroupMembership.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MentorsGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MentorsGroupMembership.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MentorsGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MentorsGroupMembership.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MentorsGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MentorsGroupMembership.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MentorsGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MentorsGroupMembership.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MentorsGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MentorsGroupMembership.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `MentorsGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: MentorsGroupMembership.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.groupId<_$Scalars>>;
    /**
     * Select the `groupIdent` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIdent?: MentorsGroupMembership.groupIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.groupIdent<_$Scalars>>;
    /**
     * Select the `userId` field on the `MentorsGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: MentorsGroupMembership.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.userId<_$Scalars>>;
    /**
     * Select the `roles` field on the `MentorsGroupMembership` object. Its type is `GroupMembershipRole` (a `Enum` kind of type).
     */
    roles?: MentorsGroupMembership.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.roles<_$Scalars>>;
    /**
     * Select the `expertises` field on the `MentorsGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    expertises?: MentorsGroupMembership.expertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.expertises<_$Scalars>>;
    /**
     * Select the `industries` field on the `MentorsGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industries?: MentorsGroupMembership.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.industries<_$Scalars>>;
    /**
     * Select the `industry` field on the `MentorsGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industry?: MentorsGroupMembership.industry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.industry<_$Scalars>>;
    /**
     * Select the `soughtExpertises` field on the `MentorsGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    soughtExpertises?: MentorsGroupMembership.soughtExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.soughtExpertises<_$Scalars>>;
    /**
     * Select the `expertisesTextIds` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    expertisesTextIds?: MentorsGroupMembership.expertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.expertisesTextIds<_$Scalars>>;
    /**
     * Select the `additionalExpertisesTextIds` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    additionalExpertisesTextIds?: MentorsGroupMembership.additionalExpertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.additionalExpertisesTextIds<_$Scalars>>;
    /**
     * Select the `industriesTextIds` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    industriesTextIds?: MentorsGroupMembership.industriesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.industriesTextIds<_$Scalars>>;
    /**
     * Select the `mm2ExpertisesTextIds` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2ExpertisesTextIds?: MentorsGroupMembership.mm2ExpertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.mm2ExpertisesTextIds<_$Scalars>>;
    /**
     * Select the `mm2IndustriesTextIds` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2IndustriesTextIds?: MentorsGroupMembership.mm2IndustriesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.mm2IndustriesTextIds<_$Scalars>>;
    /**
     * Select the `helpICanOffer` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    helpICanOffer?: MentorsGroupMembership.helpICanOffer$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.helpICanOffer<_$Scalars>>;
    /**
     * Select the `expectationsForMentees` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    expectationsForMentees?: MentorsGroupMembership.expectationsForMentees$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.expectationsForMentees<_$Scalars>>;
    /**
     * Select the `menteePreparationInstructions` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    menteePreparationInstructions?: MentorsGroupMembership.menteePreparationInstructions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.menteePreparationInstructions<_$Scalars>>;
    /**
     * Select the `endorsements` field on the `MentorsGroupMembership` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    endorsements?: MentorsGroupMembership.endorsements$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.endorsements<_$Scalars>>;
    /**
     * Select the `reasonsForMentoring` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    reasonsForMentoring?: MentorsGroupMembership.reasonsForMentoring$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.reasonsForMentoring<_$Scalars>>;
    /**
     * Select the `howICanHelpMentees` field on the `MentorsGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    howICanHelpMentees?: MentorsGroupMembership.howICanHelpMentees$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MentorsGroupMembership.howICanHelpMentees<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MentorsGroupMembership$FragmentInline<_$Scalars> | MentorsGroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MentorsGroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MentorsGroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MentorsGroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type expertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = expertises$SelectionSet<_$Scalars>;
    interface expertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `expertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<expertises$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industries$SelectionSet<_$Scalars>>;
    type industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industry$SelectionSet<_$Scalars>;
    interface industry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industry$SelectionSet<_$Scalars>>;
    type soughtExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = soughtExpertises$SelectionSet<_$Scalars>;
    interface soughtExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `soughtExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<soughtExpertises$SelectionSet<_$Scalars>>;
    type expertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expertisesTextIds$SelectionSet<_$Scalars>;
    interface expertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expertisesTextIds$SelectionSet<_$Scalars>>;
    type additionalExpertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | additionalExpertisesTextIds$SelectionSet<_$Scalars>;
    interface additionalExpertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `additionalExpertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type additionalExpertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | additionalExpertisesTextIds$SelectionSet<_$Scalars>>;
    type industriesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industriesTextIds$SelectionSet<_$Scalars>;
    interface industriesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `industriesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industriesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industriesTextIds$SelectionSet<_$Scalars>>;
    type mm2ExpertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ExpertisesTextIds$SelectionSet<_$Scalars>;
    interface mm2ExpertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2ExpertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2ExpertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ExpertisesTextIds$SelectionSet<_$Scalars>>;
    type mm2IndustriesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2IndustriesTextIds$SelectionSet<_$Scalars>;
    interface mm2IndustriesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2IndustriesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2IndustriesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2IndustriesTextIds$SelectionSet<_$Scalars>>;
    type helpICanOffer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | helpICanOffer$SelectionSet<_$Scalars>;
    interface helpICanOffer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `helpICanOffer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type helpICanOffer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | helpICanOffer$SelectionSet<_$Scalars>>;
    type expectationsForMentees<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expectationsForMentees$SelectionSet<_$Scalars>;
    interface expectationsForMentees$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expectationsForMentees` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expectationsForMentees$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expectationsForMentees$SelectionSet<_$Scalars>>;
    type menteePreparationInstructions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | menteePreparationInstructions$SelectionSet<_$Scalars>;
    interface menteePreparationInstructions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `menteePreparationInstructions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type menteePreparationInstructions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | menteePreparationInstructions$SelectionSet<_$Scalars>>;
    type endorsements<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endorsements$SelectionSet<_$Scalars>;
    interface endorsements$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `endorsements` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endorsements$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endorsements$SelectionSet<_$Scalars>>;
    type reasonsForMentoring<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | reasonsForMentoring$SelectionSet<_$Scalars>;
    interface reasonsForMentoring$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `reasonsForMentoring` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type reasonsForMentoring$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | reasonsForMentoring$SelectionSet<_$Scalars>>;
    type howICanHelpMentees<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | howICanHelpMentees$SelectionSet<_$Scalars>;
    interface howICanHelpMentees$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `howICanHelpMentees` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type howICanHelpMentees$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | howICanHelpMentees$SelectionSet<_$Scalars>>;
}
/**
 * This object contains the profile information describing an MASTERCARD user.
 *
 * MASTERCARD users are members of the "mastercard" group, which comes with extra
 * profile attributes. These fields are used to store the user's
 * MASTERCARD-specific information.
 */
export interface MastercardGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MastercardGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MastercardGroupMembership.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MastercardGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MastercardGroupMembership.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MastercardGroupMembership` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MastercardGroupMembership.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MastercardGroupMembership` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: MastercardGroupMembership.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MastercardGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MastercardGroupMembership.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MastercardGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MastercardGroupMembership.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MastercardGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MastercardGroupMembership.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MastercardGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MastercardGroupMembership.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MastercardGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MastercardGroupMembership.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MastercardGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MastercardGroupMembership.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `MastercardGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: MastercardGroupMembership.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.groupId<_$Scalars>>;
    /**
     * Select the `groupIdent` field on the `MastercardGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIdent?: MastercardGroupMembership.groupIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.groupIdent<_$Scalars>>;
    /**
     * Select the `userId` field on the `MastercardGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: MastercardGroupMembership.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.userId<_$Scalars>>;
    /**
     * Select the `roles` field on the `MastercardGroupMembership` object. Its type is `GroupMembershipRole` (a `Enum` kind of type).
     */
    roles?: MastercardGroupMembership.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.roles<_$Scalars>>;
    /**
     * Select the `expertises` field on the `MastercardGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    expertises?: MastercardGroupMembership.expertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.expertises<_$Scalars>>;
    /**
     * Select the `industries` field on the `MastercardGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industries?: MastercardGroupMembership.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.industries<_$Scalars>>;
    /**
     * Select the `industry` field on the `MastercardGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industry?: MastercardGroupMembership.industry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.industry<_$Scalars>>;
    /**
     * Select the `soughtExpertises` field on the `MastercardGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    soughtExpertises?: MastercardGroupMembership.soughtExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.soughtExpertises<_$Scalars>>;
    /**
     * Select the `bankNames` field on the `MastercardGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    bankNames?: MastercardGroupMembership.bankNames$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.bankNames<_$Scalars>>;
    /**
     * Select the `bankTextIds` field on the `MastercardGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    bankTextIds?: MastercardGroupMembership.bankTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.bankTextIds<_$Scalars>>;
    /**
     * Select the `smallBusinessCardTypes` field on the `MastercardGroupMembership` object. Its type is `MastercardCardType` (a `Enum` kind of type).
     */
    smallBusinessCardTypes?: MastercardGroupMembership.smallBusinessCardTypes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.smallBusinessCardTypes<_$Scalars>>;
    /**
     * Select the `personalCardTypes` field on the `MastercardGroupMembership` object. Its type is `MastercardCardType` (a `Enum` kind of type).
     */
    personalCardTypes?: MastercardGroupMembership.personalCardTypes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardGroupMembership.personalCardTypes<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MastercardGroupMembership$FragmentInline<_$Scalars> | MastercardGroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MastercardGroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MastercardGroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MastercardGroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type expertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = expertises$SelectionSet<_$Scalars>;
    interface expertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `expertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<expertises$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industries$SelectionSet<_$Scalars>>;
    type industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industry$SelectionSet<_$Scalars>;
    interface industry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industry$SelectionSet<_$Scalars>>;
    type soughtExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = soughtExpertises$SelectionSet<_$Scalars>;
    interface soughtExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `soughtExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<soughtExpertises$SelectionSet<_$Scalars>>;
    type bankNames<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | bankNames$SelectionSet<_$Scalars>;
    interface bankNames$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `bankNames` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type bankNames$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | bankNames$SelectionSet<_$Scalars>>;
    type bankTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | bankTextIds$SelectionSet<_$Scalars>;
    interface bankTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `bankTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type bankTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | bankTextIds$SelectionSet<_$Scalars>>;
    type smallBusinessCardTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | smallBusinessCardTypes$SelectionSet<_$Scalars>;
    interface smallBusinessCardTypes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `smallBusinessCardTypes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type smallBusinessCardTypes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | smallBusinessCardTypes$SelectionSet<_$Scalars>>;
    type personalCardTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | personalCardTypes$SelectionSet<_$Scalars>;
    interface personalCardTypes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `personalCardTypes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type personalCardTypes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | personalCardTypes$SelectionSet<_$Scalars>>;
}
/**
 * This object contains the profile information describing an IQLAA user.
 *
 * IQLAA users are members of the "iqlaa" group, which comes with extra
 * profile attributes. These fields are used to store the user's
 * IQLAA-specific information.
 */
export interface IqlaaGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `IqlaaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: IqlaaGroupMembership.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `IqlaaGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: IqlaaGroupMembership.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `IqlaaGroupMembership` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: IqlaaGroupMembership.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `IqlaaGroupMembership` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: IqlaaGroupMembership.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `IqlaaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: IqlaaGroupMembership.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `IqlaaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: IqlaaGroupMembership.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `IqlaaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: IqlaaGroupMembership.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `IqlaaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: IqlaaGroupMembership.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `IqlaaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: IqlaaGroupMembership.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `IqlaaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: IqlaaGroupMembership.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `IqlaaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: IqlaaGroupMembership.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.groupId<_$Scalars>>;
    /**
     * Select the `groupIdent` field on the `IqlaaGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIdent?: IqlaaGroupMembership.groupIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.groupIdent<_$Scalars>>;
    /**
     * Select the `userId` field on the `IqlaaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: IqlaaGroupMembership.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.userId<_$Scalars>>;
    /**
     * Select the `roles` field on the `IqlaaGroupMembership` object. Its type is `GroupMembershipRole` (a `Enum` kind of type).
     */
    roles?: IqlaaGroupMembership.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.roles<_$Scalars>>;
    /**
     * Select the `expertises` field on the `IqlaaGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    expertises?: IqlaaGroupMembership.expertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.expertises<_$Scalars>>;
    /**
     * Select the `industries` field on the `IqlaaGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industries?: IqlaaGroupMembership.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.industries<_$Scalars>>;
    /**
     * Select the `industry` field on the `IqlaaGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industry?: IqlaaGroupMembership.industry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.industry<_$Scalars>>;
    /**
     * Select the `soughtExpertises` field on the `IqlaaGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    soughtExpertises?: IqlaaGroupMembership.soughtExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.soughtExpertises<_$Scalars>>;
    /**
     * Select the `fatherName` field on the `IqlaaGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    fatherName?: IqlaaGroupMembership.fatherName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.fatherName<_$Scalars>>;
    /**
     * Select the `birthDate` field on the `IqlaaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    birthDate?: IqlaaGroupMembership.birthDate$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.birthDate<_$Scalars>>;
    /**
     * Select the `isBusinessHomeBased` field on the `IqlaaGroupMembership` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isBusinessHomeBased?: IqlaaGroupMembership.isBusinessHomeBased$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.isBusinessHomeBased<_$Scalars>>;
    /**
     * Select the `isBusinessRegisteredWithCCD` field on the `IqlaaGroupMembership` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isBusinessRegisteredWithCCD?: IqlaaGroupMembership.isBusinessRegisteredWithCCD$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.isBusinessRegisteredWithCCD<_$Scalars>>;
    /**
     * Select the `businessRegistrationNumber` field on the `IqlaaGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    businessRegistrationNumber?: IqlaaGroupMembership.businessRegistrationNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.businessRegistrationNumber<_$Scalars>>;
    /**
     * Select the `isJordanNational` field on the `IqlaaGroupMembership` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isJordanNational?: IqlaaGroupMembership.isJordanNational$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaGroupMembership.isJordanNational<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: IqlaaGroupMembership$FragmentInline<_$Scalars> | IqlaaGroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface IqlaaGroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends IqlaaGroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace IqlaaGroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type expertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = expertises$SelectionSet<_$Scalars>;
    interface expertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `expertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<expertises$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industries$SelectionSet<_$Scalars>>;
    type industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industry$SelectionSet<_$Scalars>;
    interface industry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industry$SelectionSet<_$Scalars>>;
    type soughtExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = soughtExpertises$SelectionSet<_$Scalars>;
    interface soughtExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `soughtExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<soughtExpertises$SelectionSet<_$Scalars>>;
    type fatherName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fatherName$SelectionSet<_$Scalars>;
    interface fatherName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `fatherName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type fatherName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fatherName$SelectionSet<_$Scalars>>;
    type birthDate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | birthDate$SelectionSet<_$Scalars>;
    interface birthDate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `birthDate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type birthDate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | birthDate$SelectionSet<_$Scalars>>;
    type isBusinessHomeBased<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isBusinessHomeBased$SelectionSet<_$Scalars>;
    interface isBusinessHomeBased$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isBusinessHomeBased` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isBusinessHomeBased$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isBusinessHomeBased$SelectionSet<_$Scalars>>;
    type isBusinessRegisteredWithCCD<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isBusinessRegisteredWithCCD$SelectionSet<_$Scalars>;
    interface isBusinessRegisteredWithCCD$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isBusinessRegisteredWithCCD` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isBusinessRegisteredWithCCD$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isBusinessRegisteredWithCCD$SelectionSet<_$Scalars>>;
    type businessRegistrationNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessRegistrationNumber$SelectionSet<_$Scalars>;
    interface businessRegistrationNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `businessRegistrationNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessRegistrationNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessRegistrationNumber$SelectionSet<_$Scalars>>;
    type isJordanNational<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isJordanNational$SelectionSet<_$Scalars>;
    interface isJordanNational$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isJordanNational` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isJordanNational$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isJordanNational$SelectionSet<_$Scalars>>;
}
/**
 * This object contains the profile information describing an a Strive Indonesia user.
 */
export interface StriveIndonesiaGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `StriveIndonesiaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: StriveIndonesiaGroupMembership.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `StriveIndonesiaGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: StriveIndonesiaGroupMembership.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `StriveIndonesiaGroupMembership` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: StriveIndonesiaGroupMembership.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `StriveIndonesiaGroupMembership` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: StriveIndonesiaGroupMembership.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `StriveIndonesiaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: StriveIndonesiaGroupMembership.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `StriveIndonesiaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: StriveIndonesiaGroupMembership.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `StriveIndonesiaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: StriveIndonesiaGroupMembership.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `StriveIndonesiaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: StriveIndonesiaGroupMembership.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `StriveIndonesiaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: StriveIndonesiaGroupMembership.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `StriveIndonesiaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: StriveIndonesiaGroupMembership.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `StriveIndonesiaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: StriveIndonesiaGroupMembership.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.groupId<_$Scalars>>;
    /**
     * Select the `groupIdent` field on the `StriveIndonesiaGroupMembership` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIdent?: StriveIndonesiaGroupMembership.groupIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.groupIdent<_$Scalars>>;
    /**
     * Select the `userId` field on the `StriveIndonesiaGroupMembership` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: StriveIndonesiaGroupMembership.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.userId<_$Scalars>>;
    /**
     * Select the `roles` field on the `StriveIndonesiaGroupMembership` object. Its type is `GroupMembershipRole` (a `Enum` kind of type).
     */
    roles?: StriveIndonesiaGroupMembership.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.roles<_$Scalars>>;
    /**
     * Select the `expertises` field on the `StriveIndonesiaGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    expertises?: StriveIndonesiaGroupMembership.expertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.expertises<_$Scalars>>;
    /**
     * Select the `industries` field on the `StriveIndonesiaGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industries?: StriveIndonesiaGroupMembership.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.industries<_$Scalars>>;
    /**
     * Select the `industry` field on the `StriveIndonesiaGroupMembership` object. Its type is `Industry` (a `OutputObject` kind of type).
     */
    industry?: StriveIndonesiaGroupMembership.industry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.industry<_$Scalars>>;
    /**
     * Select the `soughtExpertises` field on the `StriveIndonesiaGroupMembership` object. Its type is `Expertise` (a `OutputObject` kind of type).
     */
    soughtExpertises?: StriveIndonesiaGroupMembership.soughtExpertises$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.soughtExpertises<_$Scalars>>;
    /**
     * Select the `ventureStartDate` field on the `StriveIndonesiaGroupMembership` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    ventureStartDate?: StriveIndonesiaGroupMembership.ventureStartDate$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.ventureStartDate<_$Scalars>>;
    /**
     * Select the `numberOfEmployees` field on the `StriveIndonesiaGroupMembership` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    numberOfEmployees?: StriveIndonesiaGroupMembership.numberOfEmployees$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<StriveIndonesiaGroupMembership.numberOfEmployees<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: StriveIndonesiaGroupMembership$FragmentInline<_$Scalars> | StriveIndonesiaGroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface StriveIndonesiaGroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends StriveIndonesiaGroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace StriveIndonesiaGroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type expertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = expertises$SelectionSet<_$Scalars>;
    interface expertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `expertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<expertises$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industries$SelectionSet<_$Scalars>>;
    type industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = industry$SelectionSet<_$Scalars>;
    interface industry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Industry<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `industry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<industry$SelectionSet<_$Scalars>>;
    type soughtExpertises<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = soughtExpertises$SelectionSet<_$Scalars>;
    interface soughtExpertises$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Expertise<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `soughtExpertises` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type soughtExpertises$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<soughtExpertises$SelectionSet<_$Scalars>>;
    type ventureStartDate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ventureStartDate$SelectionSet<_$Scalars>;
    interface ventureStartDate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ventureStartDate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ventureStartDate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ventureStartDate$SelectionSet<_$Scalars>>;
    type numberOfEmployees<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numberOfEmployees$SelectionSet<_$Scalars>;
    interface numberOfEmployees$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `numberOfEmployees` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type numberOfEmployees$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numberOfEmployees$SelectionSet<_$Scalars>>;
}
export interface User<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: User.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: User.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `User` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: User.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `User` object. Its type is `UserMetadata` (a `OutputObject` kind of type).
     */
    metadata?: User.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: User.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: User.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: User.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: User.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: User.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: User.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.deletedBy<_$Scalars>>;
    /**
     * Select the `firstName` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: User.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: User.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.lastName<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: User.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.userHandle<_$Scalars>>;
    /**
     * Select the `phoneNumber` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    phoneNumber?: User.phoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.phoneNumber<_$Scalars>>;
    /**
     * Select the `phoneNumberUpdatedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberUpdatedAt?: User.phoneNumberUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.phoneNumberUpdatedAt<_$Scalars>>;
    /**
     * Select the `isPhoneNumberVerified` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isPhoneNumberVerified?: User.isPhoneNumberVerified$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.isPhoneNumberVerified<_$Scalars>>;
    /**
     * Select the `email` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    email?: User.email$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.email<_$Scalars>>;
    /**
     * Select the `emailSource` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    emailSource?: User.emailSource$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.emailSource<_$Scalars>>;
    /**
     * Select the `emailUpdatedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailUpdatedAt?: User.emailUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.emailUpdatedAt<_$Scalars>>;
    /**
     * Select the `isEmailVerified` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isEmailVerified?: User.isEmailVerified$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.isEmailVerified<_$Scalars>>;
    /**
     * Select the `genderTextId` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    genderTextId?: User.genderTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.genderTextId<_$Scalars>>;
    /**
     * Select the `cityOfResidence` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    cityOfResidence?: User.cityOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.cityOfResidence<_$Scalars>>;
    /**
     * Select the `regionOfResidence` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    regionOfResidence?: User.regionOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.regionOfResidence<_$Scalars>>;
    /**
     * Select the `countryOfResidenceTextId` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryOfResidenceTextId?: User.countryOfResidenceTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.countryOfResidenceTextId<_$Scalars>>;
    /**
     * Select the `postalCode` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    postalCode?: User.postalCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.postalCode<_$Scalars>>;
    /**
     * Select the `avatarUrl` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    avatarUrl?: User.avatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.avatarUrl<_$Scalars>>;
    /**
     * Select the `websites` field on the `User` object. Its type is `LabeledStringValue` (a `OutputObject` kind of type).
     */
    websites?: User.websites$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.websites<_$Scalars>>;
    /**
     * Select the `inviteCode` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    inviteCode?: User.inviteCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.inviteCode<_$Scalars>>;
    /**
     * Select the `passwordUpdatedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    passwordUpdatedAt?: User.passwordUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.passwordUpdatedAt<_$Scalars>>;
    /**
     * Select the `preferredLanguageTextId` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    preferredLanguageTextId?: User.preferredLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.preferredLanguageTextId<_$Scalars>>;
    /**
     * Select the `spokenLanguagesTextIds` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    spokenLanguagesTextIds?: User.spokenLanguagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.spokenLanguagesTextIds<_$Scalars>>;
    /**
     * Select the `selectedUiLanguageTextId` field on the `User` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    selectedUiLanguageTextId?: User.selectedUiLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.selectedUiLanguageTextId<_$Scalars>>;
    /**
     * Select the `fallbackUiLanguageTextId` field on the `User` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    fallbackUiLanguageTextId?: User.fallbackUiLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.fallbackUiLanguageTextId<_$Scalars>>;
    /**
     * Select the `discoverable` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    discoverable?: User.discoverable$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.discoverable<_$Scalars>>;
    /**
     * Select the `roles` field on the `User` object. Its type is `UserRole` (a `Enum` kind of type).
     */
    roles?: User.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.roles<_$Scalars>>;
    /**
     * Select the `appFeatures` field on the `User` object. Its type is `AppFeature` (a `Enum` kind of type).
     */
    appFeatures?: User.appFeatures$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.appFeatures<_$Scalars>>;
    /**
     * Select the `source` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    source?: User.source$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.source<_$Scalars>>;
    /**
     * Select the `timezone` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    timezone?: User.timezone$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.timezone<_$Scalars>>;
    /**
     * Select the `preferences` field on the `User` object. Its type is `UserPreferences` (a `OutputObject` kind of type).
     */
    preferences?: User.preferences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.preferences<_$Scalars>>;
    /**
     * Select the `trustLevel` field on the `User` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    trustLevel?: User.trustLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.trustLevel<_$Scalars>>;
    /**
     * Select the `userDevices` field on the `User` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    userDevices?: User.userDevices$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.userDevices<_$Scalars>>;
    /**
     * Select the `userBlocks` field on the `User` object. Its type is `UserBlock` (a `OutputObject` kind of type).
     */
    userBlocks?: User.userBlocks$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.userBlocks<_$Scalars>>;
    /**
     * Select the `termsAndConditionsAcceptedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    termsAndConditionsAcceptedAt?: User.termsAndConditionsAcceptedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.termsAndConditionsAcceptedAt<_$Scalars>>;
    /**
     * Select the `optIntoNewsletter` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    optIntoNewsletter?: User.optIntoNewsletter$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.optIntoNewsletter<_$Scalars>>;
    /**
     * Select the `onboardingStage` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    onboardingStage?: User.onboardingStage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.onboardingStage<_$Scalars>>;
    /**
     * Select the `isTestUser` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isTestUser?: User.isTestUser$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.isTestUser<_$Scalars>>;
    /**
     * Select the `signedInAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedInAt?: User.signedInAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.signedInAt<_$Scalars>>;
    /**
     * Select the `signedOutAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedOutAt?: User.signedOutAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.signedOutAt<_$Scalars>>;
    /**
     * Select the `latestActivityAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    latestActivityAt?: User.latestActivityAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.latestActivityAt<_$Scalars>>;
    /**
     * Select the `inactivatedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    inactivatedAt?: User.inactivatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.inactivatedAt<_$Scalars>>;
    /**
     * Select the `inactivatedBy` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    inactivatedBy?: User.inactivatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.inactivatedBy<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: User.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: User.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.suspendedBy<_$Scalars>>;
    /**
     * Select the `anonymizedAt` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    anonymizedAt?: User.anonymizedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.anonymizedAt<_$Scalars>>;
    /**
     * Select the `companyIds` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    companyIds?: User.companyIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.companyIds<_$Scalars>>;
    /**
     * Select the `companies` field on the `User` object. Its type is `Company` (a `OutputObject` kind of type).
     */
    companies?: User.companies$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.companies<_$Scalars>>;
    /**
     * Select the `groupIds` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupIds?: User.groupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.groupIds<_$Scalars>>;
    /**
     * Select the `parentGroupIds` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    parentGroupIds?: User.parentGroupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.parentGroupIds<_$Scalars>>;
    /**
     * Select the `externalGroupIds` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    externalGroupIds?: User.externalGroupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.externalGroupIds<_$Scalars>>;
    /**
     * Select the `groupMemberships` field on the `User` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    groupMemberships?: User.groupMemberships$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.groupMemberships<_$Scalars>>;
    /**
     * Select the `mentor` field on the `User` object. Its type is `MentorsGroupMembership` (a `OutputObject` kind of type).
     */
    mentor?: User.mentor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mentor<_$Scalars>>;
    /**
     * Select the `mentee` field on the `User` object. Its type is `MenteesGroupMembership` (a `OutputObject` kind of type).
     */
    mentee?: User.mentee$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mentee<_$Scalars>>;
    /**
     * Select the `pronounsTextIds` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pronounsTextIds?: User.pronounsTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.pronounsTextIds<_$Scalars>>;
    /**
     * Select the `seeksHelp` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    seeksHelp?: User.seeksHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.seeksHelp<_$Scalars>>;
    /**
     * Select the `offersHelp` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    offersHelp?: User.offersHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.offersHelp<_$Scalars>>;
    /**
     * Select the `birthYear` field on the `User` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    birthYear?: User.birthYear$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.birthYear<_$Scalars>>;
    /**
     * Select the `ethnicity` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    ethnicity?: User.ethnicity$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.ethnicity<_$Scalars>>;
    /**
     * Select the `educationLevelTextId` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    educationLevelTextId?: User.educationLevelTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.educationLevelTextId<_$Scalars>>;
    /**
     * Select the `personalBio` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    personalBio?: User.personalBio$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.personalBio<_$Scalars>>;
    /**
     * Select the `yearsManagementExperience` field on the `User` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsManagementExperience?: User.yearsManagementExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.yearsManagementExperience<_$Scalars>>;
    /**
     * Select the `yearsOwnershipExperience` field on the `User` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsOwnershipExperience?: User.yearsOwnershipExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.yearsOwnershipExperience<_$Scalars>>;
    /**
     * Select the `academicExperienceIds` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    academicExperienceIds?: User.academicExperienceIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.academicExperienceIds<_$Scalars>>;
    /**
     * Select the `academicExperiences` field on the `User` object. Its type is `AcademicExperience` (a `OutputObject` kind of type).
     */
    academicExperiences?: User.academicExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.academicExperiences<_$Scalars>>;
    /**
     * Select the `genderSelfDescribed` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    genderSelfDescribed?: User.genderSelfDescribed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.genderSelfDescribed<_$Scalars>>;
    /**
     * Select the `businessExperienceIds` field on the `User` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    businessExperienceIds?: User.businessExperienceIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.businessExperienceIds<_$Scalars>>;
    /**
     * Select the `businessExperiences` field on the `User` object. Its type is `BusinessExperience` (a `OutputObject` kind of type).
     */
    businessExperiences?: User.businessExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.businessExperiences<_$Scalars>>;
    /**
     * Select the `cityOfOrigin` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    cityOfOrigin?: User.cityOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.cityOfOrigin<_$Scalars>>;
    /**
     * Select the `regionOfOrigin` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    regionOfOrigin?: User.regionOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.regionOfOrigin<_$Scalars>>;
    /**
     * Select the `countryOfOriginTextId` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryOfOriginTextId?: User.countryOfOriginTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.countryOfOriginTextId<_$Scalars>>;
    /**
     * Select the `isOnVacation` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isOnVacation?: User.isOnVacation$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.isOnVacation<_$Scalars>>;
    /**
     * Select the `avatarAsset` field on the `User` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    avatarAsset?: User.avatarAsset$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.avatarAsset<_$Scalars>>;
    /**
     * Select the `profileRoleHistory` field on the `User` object. Its type is `UserProfileRoleHistoryItem` (a `OutputObject` kind of type).
     */
    profileRoleHistory?: User.profileRoleHistory$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.profileRoleHistory<_$Scalars>>;
    /**
     * Select the `ssoIdp` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    ssoIdp?: User.ssoIdp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.ssoIdp<_$Scalars>>;
    /**
     * Select the `originatedInMm2` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    originatedInMm2?: User.originatedInMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.originatedInMm2<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `User` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: User.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2PasswordHash` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2PasswordHash?: User.mm2PasswordHash$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mm2PasswordHash<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: User.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2ProfileId` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2ProfileId?: User.mm2ProfileId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mm2ProfileId<_$Scalars>>;
    /**
     * Select the `mm2PhotoOriginal` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2PhotoOriginal?: User.mm2PhotoOriginal$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mm2PhotoOriginal<_$Scalars>>;
    /**
     * Select the `mm2BasicAccountCompleted` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    mm2BasicAccountCompleted?: User.mm2BasicAccountCompleted$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.mm2BasicAccountCompleted<_$Scalars>>;
    /**
     * Select the `hasSignedInToMm3` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasSignedInToMm3?: User.hasSignedInToMm3$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.hasSignedInToMm3<_$Scalars>>;
    /**
     * Select the `hasSignedInToMm2` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasSignedInToMm2?: User.hasSignedInToMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.hasSignedInToMm2<_$Scalars>>;
    /**
     * Select the `countryOfResidence` field on the `User` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfResidence?: User.countryOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.countryOfResidence<_$Scalars>>;
    /**
     * Select the `gender` field on the `User` object. Its type is `Gender` (a `OutputObject` kind of type).
     */
    gender?: User.gender$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.gender<_$Scalars>>;
    /**
     * Select the `latestUserDevice` field on the `User` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    latestUserDevice?: User.latestUserDevice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.latestUserDevice<_$Scalars>>;
    /**
     * Select the `spokenLanguages` field on the `User` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    spokenLanguages?: User.spokenLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.spokenLanguages<_$Scalars>>;
    /**
     * Select the `preferredLanguage` field on the `User` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    preferredLanguage?: User.preferredLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.preferredLanguage<_$Scalars>>;
    /**
     * Select the `fallbackUiLanguage` field on the `User` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    fallbackUiLanguage?: User.fallbackUiLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.fallbackUiLanguage<_$Scalars>>;
    /**
     * Select the `preferredUiLanguage` field on the `User` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    preferredUiLanguage?: User.preferredUiLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.preferredUiLanguage<_$Scalars>>;
    /**
     * Select the `unreadInAppMessages` field on the `User` object. Its type is `Notification` (a `OutputObject` kind of type).
     */
    unreadInAppMessages?: User.unreadInAppMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.unreadInAppMessages<_$Scalars>>;
    /**
     * Select the `channels` field on the `User` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    channels?: User.channels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.channels<_$Scalars>>;
    /**
     * Select the `channelInvitations` field on the `User` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    channelInvitations?: User.channelInvitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.channelInvitations<_$Scalars>>;
    /**
     * Select the `channelParticipants` field on the `User` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    channelParticipants?: User.channelParticipants$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.channelParticipants<_$Scalars>>;
    /**
     * Select the `countryOfOrigin` field on the `User` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfOrigin?: User.countryOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.countryOfOrigin<_$Scalars>>;
    /**
     * Select the `educationLevel` field on the `User` object. Its type is `EducationLevel` (a `OutputObject` kind of type).
     */
    educationLevel?: User.educationLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.educationLevel<_$Scalars>>;
    /**
     * Select the `endorsements` field on the `User` object. Its type is `EndorsementWithTypes` (a `OutputObject` kind of type).
     */
    endorsements?: User.endorsements$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.endorsements<_$Scalars>>;
    /**
     * Select the `groupMembers` field on the `User` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    groupMembers?: User.groupMembers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.groupMembers<_$Scalars>>;
    /**
     * Select the `groups` field on the `User` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    groups?: User.groups$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.groups<_$Scalars>>;
    /**
     * Select the `hasTrainings` field on the `User` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasTrainings?: User.hasTrainings$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.hasTrainings<_$Scalars>>;
    /**
     * Select the `profileCompletionPercentage` field on the `User` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    profileCompletionPercentage?: User.profileCompletionPercentage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.profileCompletionPercentage<_$Scalars>>;
    /**
     * Select the `profileRole` field on the `User` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    profileRole?: User.profileRole$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.profileRole<_$Scalars>>;
    /**
     * Select the `pronouns` field on the `User` object. Its type is `Pronoun` (a `OutputObject` kind of type).
     */
    pronouns?: User.pronouns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.pronouns<_$Scalars>>;
    /**
     * Select the `pronounsDisplay` field on the `User` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pronounsDisplay?: User.pronounsDisplay$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.pronounsDisplay<_$Scalars>>;
    /**
     * Select the `uploadedAssets` field on the `User` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    uploadedAssets?: User.uploadedAssets$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<User.uploadedAssets<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: User$FragmentInline<_$Scalars> | User$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface User$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends User<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace User {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type phoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>;
    interface phoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>>;
    type phoneNumberUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>;
    interface phoneNumberUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>>;
    type isPhoneNumberVerified<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberVerified$SelectionSet<_$Scalars>;
    interface isPhoneNumberVerified$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isPhoneNumberVerified` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isPhoneNumberVerified$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberVerified$SelectionSet<_$Scalars>>;
    type email<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>;
    interface email$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `email` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type email$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>>;
    type emailSource<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSource$SelectionSet<_$Scalars>;
    interface emailSource$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailSource` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailSource$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSource$SelectionSet<_$Scalars>>;
    type emailUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>;
    interface emailUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>>;
    type isEmailVerified<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isEmailVerified$SelectionSet<_$Scalars>;
    interface isEmailVerified$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isEmailVerified` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isEmailVerified$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isEmailVerified$SelectionSet<_$Scalars>>;
    type genderTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>;
    interface genderTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genderTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genderTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>>;
    type cityOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>;
    interface cityOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `cityOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type cityOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>>;
    type regionOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>;
    interface regionOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `regionOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type regionOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>>;
    type countryOfResidenceTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>;
    interface countryOfResidenceTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryOfResidenceTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidenceTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>>;
    type postalCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | postalCode$SelectionSet<_$Scalars>;
    interface postalCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `postalCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type postalCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | postalCode$SelectionSet<_$Scalars>>;
    type avatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>;
    interface avatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `avatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>>;
    type websites<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = websites$SelectionSet<_$Scalars>;
    interface websites$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$LabeledStringValue<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `websites` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type websites$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<websites$SelectionSet<_$Scalars>>;
    type inviteCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inviteCode$SelectionSet<_$Scalars>;
    interface inviteCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inviteCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inviteCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inviteCode$SelectionSet<_$Scalars>>;
    type passwordUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>;
    interface passwordUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>>;
    type preferredLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>;
    interface preferredLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `preferredLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>>;
    type spokenLanguagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>;
    interface spokenLanguagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `spokenLanguagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type spokenLanguagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>>;
    type selectedUiLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | selectedUiLanguageTextId$SelectionSet<_$Scalars>;
    interface selectedUiLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `selectedUiLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type selectedUiLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | selectedUiLanguageTextId$SelectionSet<_$Scalars>>;
    type fallbackUiLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fallbackUiLanguageTextId$SelectionSet<_$Scalars>;
    interface fallbackUiLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `fallbackUiLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type fallbackUiLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fallbackUiLanguageTextId$SelectionSet<_$Scalars>>;
    type discoverable<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>;
    interface discoverable$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `discoverable` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type discoverable$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type appFeatures<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appFeatures$SelectionSet<_$Scalars>;
    interface appFeatures$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `appFeatures` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type appFeatures$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appFeatures$SelectionSet<_$Scalars>>;
    type source<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>;
    interface source$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `source` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type source$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>>;
    type timezone<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>;
    interface timezone$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timezone` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timezone$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>>;
    type preferences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = preferences$SelectionSet<_$Scalars>;
    interface preferences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserPreferences<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `preferences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<preferences$SelectionSet<_$Scalars>>;
    type trustLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>;
    interface trustLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trustLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trustLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>>;
    type userDevices<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userDevices$SelectionSet<_$Scalars>;
    interface userDevices$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userDevices` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userDevices$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userDevices$SelectionSet<_$Scalars>>;
    type userBlocks<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userBlocks$SelectionSet<_$Scalars>;
    interface userBlocks$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserBlock<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userBlocks` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userBlocks$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userBlocks$SelectionSet<_$Scalars>>;
    type termsAndConditionsAcceptedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsAndConditionsAcceptedAt$SelectionSet<_$Scalars>;
    interface termsAndConditionsAcceptedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `termsAndConditionsAcceptedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type termsAndConditionsAcceptedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsAndConditionsAcceptedAt$SelectionSet<_$Scalars>>;
    type optIntoNewsletter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optIntoNewsletter$SelectionSet<_$Scalars>;
    interface optIntoNewsletter$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optIntoNewsletter` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optIntoNewsletter$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optIntoNewsletter$SelectionSet<_$Scalars>>;
    type onboardingStage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | onboardingStage$SelectionSet<_$Scalars>;
    interface onboardingStage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `onboardingStage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type onboardingStage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | onboardingStage$SelectionSet<_$Scalars>>;
    type isTestUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTestUser$SelectionSet<_$Scalars>;
    interface isTestUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isTestUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isTestUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTestUser$SelectionSet<_$Scalars>>;
    type signedInAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>;
    interface signedInAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedInAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedInAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>>;
    type signedOutAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedOutAt$SelectionSet<_$Scalars>;
    interface signedOutAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedOutAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedOutAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedOutAt$SelectionSet<_$Scalars>>;
    type latestActivityAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>;
    interface latestActivityAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `latestActivityAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestActivityAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>>;
    type inactivatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>;
    interface inactivatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inactivatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inactivatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>>;
    type inactivatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedBy$SelectionSet<_$Scalars>;
    interface inactivatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inactivatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inactivatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedBy$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type anonymizedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | anonymizedAt$SelectionSet<_$Scalars>;
    interface anonymizedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `anonymizedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type anonymizedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | anonymizedAt$SelectionSet<_$Scalars>>;
    type companyIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyIds$SelectionSet<_$Scalars>;
    interface companyIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `companyIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyIds$SelectionSet<_$Scalars>>;
    type companies<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = companies$SelectionSet<_$Scalars>;
    interface companies$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Company<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `companies` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companies$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<companies$SelectionSet<_$Scalars>>;
    type groupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIds$SelectionSet<_$Scalars>;
    interface groupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIds$SelectionSet<_$Scalars>>;
    type parentGroupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentGroupIds$SelectionSet<_$Scalars>;
    interface parentGroupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentGroupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentGroupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentGroupIds$SelectionSet<_$Scalars>>;
    type externalGroupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | externalGroupIds$SelectionSet<_$Scalars>;
    interface externalGroupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `externalGroupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type externalGroupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | externalGroupIds$SelectionSet<_$Scalars>>;
    type groupMemberships<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupMemberships$SelectionSet<_$Scalars>;
    interface groupMemberships$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupMemberships` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupMemberships$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupMemberships$SelectionSet<_$Scalars>>;
    type mentor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentor$SelectionSet<_$Scalars>;
    interface mentor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MentorsGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentor$SelectionSet<_$Scalars>>;
    type mentee<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentee$SelectionSet<_$Scalars>;
    interface mentee$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MenteesGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentee` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentee$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentee$SelectionSet<_$Scalars>>;
    type pronounsTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsTextIds$SelectionSet<_$Scalars>;
    interface pronounsTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pronounsTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronounsTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsTextIds$SelectionSet<_$Scalars>>;
    type seeksHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>;
    interface seeksHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seeksHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seeksHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>>;
    type offersHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>;
    interface offersHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `offersHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type offersHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>>;
    type birthYear<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | birthYear$SelectionSet<_$Scalars>;
    interface birthYear$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `birthYear` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type birthYear$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | birthYear$SelectionSet<_$Scalars>>;
    type ethnicity<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ethnicity$SelectionSet<_$Scalars>;
    interface ethnicity$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ethnicity` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ethnicity$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ethnicity$SelectionSet<_$Scalars>>;
    type educationLevelTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | educationLevelTextId$SelectionSet<_$Scalars>;
    interface educationLevelTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `educationLevelTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type educationLevelTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | educationLevelTextId$SelectionSet<_$Scalars>>;
    type personalBio<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | personalBio$SelectionSet<_$Scalars>;
    interface personalBio$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `personalBio` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type personalBio$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | personalBio$SelectionSet<_$Scalars>>;
    type yearsManagementExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>;
    interface yearsManagementExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsManagementExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsManagementExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>>;
    type yearsOwnershipExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>;
    interface yearsOwnershipExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsOwnershipExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsOwnershipExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>>;
    type academicExperienceIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | academicExperienceIds$SelectionSet<_$Scalars>;
    interface academicExperienceIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `academicExperienceIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type academicExperienceIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | academicExperienceIds$SelectionSet<_$Scalars>>;
    type academicExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = academicExperiences$SelectionSet<_$Scalars>;
    interface academicExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AcademicExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `academicExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type academicExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<academicExperiences$SelectionSet<_$Scalars>>;
    type genderSelfDescribed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderSelfDescribed$SelectionSet<_$Scalars>;
    interface genderSelfDescribed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genderSelfDescribed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genderSelfDescribed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderSelfDescribed$SelectionSet<_$Scalars>>;
    type businessExperienceIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessExperienceIds$SelectionSet<_$Scalars>;
    interface businessExperienceIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `businessExperienceIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessExperienceIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessExperienceIds$SelectionSet<_$Scalars>>;
    type businessExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = businessExperiences$SelectionSet<_$Scalars>;
    interface businessExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BusinessExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `businessExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<businessExperiences$SelectionSet<_$Scalars>>;
    type cityOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfOrigin$SelectionSet<_$Scalars>;
    interface cityOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `cityOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type cityOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfOrigin$SelectionSet<_$Scalars>>;
    type regionOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfOrigin$SelectionSet<_$Scalars>;
    interface regionOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `regionOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type regionOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfOrigin$SelectionSet<_$Scalars>>;
    type countryOfOriginTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfOriginTextId$SelectionSet<_$Scalars>;
    interface countryOfOriginTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryOfOriginTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfOriginTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfOriginTextId$SelectionSet<_$Scalars>>;
    type isOnVacation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>;
    interface isOnVacation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isOnVacation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isOnVacation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>>;
    type avatarAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = avatarAsset$SelectionSet<_$Scalars>;
    interface avatarAsset$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `avatarAsset` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarAsset$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<avatarAsset$SelectionSet<_$Scalars>>;
    type profileRoleHistory<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = profileRoleHistory$SelectionSet<_$Scalars>;
    interface profileRoleHistory$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserProfileRoleHistoryItem<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `profileRoleHistory` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileRoleHistory$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<profileRoleHistory$SelectionSet<_$Scalars>>;
    type ssoIdp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ssoIdp$SelectionSet<_$Scalars>;
    interface ssoIdp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ssoIdp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ssoIdp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ssoIdp$SelectionSet<_$Scalars>>;
    type originatedInMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | originatedInMm2$SelectionSet<_$Scalars>;
    interface originatedInMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `originatedInMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type originatedInMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | originatedInMm2$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2PasswordHash<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PasswordHash$SelectionSet<_$Scalars>;
    interface mm2PasswordHash$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2PasswordHash` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2PasswordHash$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PasswordHash$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2ProfileId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ProfileId$SelectionSet<_$Scalars>;
    interface mm2ProfileId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2ProfileId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2ProfileId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ProfileId$SelectionSet<_$Scalars>>;
    type mm2PhotoOriginal<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PhotoOriginal$SelectionSet<_$Scalars>;
    interface mm2PhotoOriginal$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2PhotoOriginal` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2PhotoOriginal$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PhotoOriginal$SelectionSet<_$Scalars>>;
    type mm2BasicAccountCompleted<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2BasicAccountCompleted$SelectionSet<_$Scalars>;
    interface mm2BasicAccountCompleted$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2BasicAccountCompleted` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2BasicAccountCompleted$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2BasicAccountCompleted$SelectionSet<_$Scalars>>;
    type hasSignedInToMm3<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm3$SelectionSet<_$Scalars>;
    interface hasSignedInToMm3$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasSignedInToMm3` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasSignedInToMm3$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm3$SelectionSet<_$Scalars>>;
    type hasSignedInToMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm2$SelectionSet<_$Scalars>;
    interface hasSignedInToMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasSignedInToMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasSignedInToMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm2$SelectionSet<_$Scalars>>;
    type countryOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfResidence$SelectionSet<_$Scalars>;
    interface countryOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfResidence$SelectionSet<_$Scalars>>;
    type gender<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = gender$SelectionSet<_$Scalars>;
    interface gender$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Gender<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `gender` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type gender$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<gender$SelectionSet<_$Scalars>>;
    type latestUserDevice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = latestUserDevice$SelectionSet<_$Scalars>;
    interface latestUserDevice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `latestUserDevice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestUserDevice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<latestUserDevice$SelectionSet<_$Scalars>>;
    type spokenLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = spokenLanguages$SelectionSet<_$Scalars>;
    interface spokenLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `spokenLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type spokenLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<spokenLanguages$SelectionSet<_$Scalars>>;
    type preferredLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = preferredLanguage$SelectionSet<_$Scalars>;
    interface preferredLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `preferredLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<preferredLanguage$SelectionSet<_$Scalars>>;
    type fallbackUiLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = fallbackUiLanguage$SelectionSet<_$Scalars>;
    interface fallbackUiLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `fallbackUiLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type fallbackUiLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<fallbackUiLanguage$SelectionSet<_$Scalars>>;
    type preferredUiLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = preferredUiLanguage$SelectionSet<_$Scalars>;
    interface preferredUiLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `preferredUiLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredUiLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<preferredUiLanguage$SelectionSet<_$Scalars>>;
    type unreadInAppMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unreadInAppMessages$SelectionSet<_$Scalars>;
    interface unreadInAppMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Notification<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `unreadInAppMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unreadInAppMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unreadInAppMessages$SelectionSet<_$Scalars>>;
    type channels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channels$SelectionSet<_$Scalars>;
    interface channels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `channels` field. No arguments are required so you may omit this.
         */
        $?: channels$Arguments<_$Scalars>;
    }
    interface channels$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        /**
         * Set options on channels, e.g. to include archived channels.
         */
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        /**
         * Set to True to return only channels which have been accepted. Default is False, which also returns channels with multiple messages that have not been accepted. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
         */
        mustBeAccepted?: boolean | undefined | null;
        /**
         * Set to True to return only channels with messages. Default is False, which also returns channels without messages. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
         */
        mustHaveMessages?: boolean | undefined | null;
    }
    /**
     * This is the "expanded" version of the `channels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channels$SelectionSet<_$Scalars>>;
    type channelInvitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channelInvitations$SelectionSet<_$Scalars>;
    interface channelInvitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channelInvitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelInvitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channelInvitations$SelectionSet<_$Scalars>>;
    type channelParticipants<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channelParticipants$SelectionSet<_$Scalars>;
    interface channelParticipants$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channelParticipants` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelParticipants$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channelParticipants$SelectionSet<_$Scalars>>;
    type countryOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfOrigin$SelectionSet<_$Scalars>;
    interface countryOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfOrigin$SelectionSet<_$Scalars>>;
    type educationLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = educationLevel$SelectionSet<_$Scalars>;
    interface educationLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EducationLevel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `educationLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type educationLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<educationLevel$SelectionSet<_$Scalars>>;
    type endorsements<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = endorsements$SelectionSet<_$Scalars>;
    interface endorsements$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EndorsementWithTypes<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `endorsements` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endorsements$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<endorsements$SelectionSet<_$Scalars>>;
    type groupMembers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupMembers$SelectionSet<_$Scalars>;
    interface groupMembers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupMembers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupMembers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupMembers$SelectionSet<_$Scalars>>;
    type groups<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groups$SelectionSet<_$Scalars>;
    interface groups$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groups` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groups$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groups$SelectionSet<_$Scalars>>;
    type hasTrainings<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasTrainings$SelectionSet<_$Scalars>;
    interface hasTrainings$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasTrainings` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasTrainings$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasTrainings$SelectionSet<_$Scalars>>;
    type profileCompletionPercentage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>;
    interface profileCompletionPercentage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileCompletionPercentage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileCompletionPercentage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>>;
    type profileRole<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>;
    interface profileRole$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileRole` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileRole$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>>;
    type pronouns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pronouns$SelectionSet<_$Scalars>;
    interface pronouns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Pronoun<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pronouns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronouns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pronouns$SelectionSet<_$Scalars>>;
    type pronounsDisplay<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>;
    interface pronounsDisplay$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pronounsDisplay` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronounsDisplay$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>>;
    type uploadedAssets<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = uploadedAssets$SelectionSet<_$Scalars>;
    interface uploadedAssets$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `uploadedAssets` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type uploadedAssets$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<uploadedAssets$SelectionSet<_$Scalars>>;
}
export interface LabeledStringValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `label` field on the `LabeledStringValue` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    label?: LabeledStringValue.label$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<LabeledStringValue.label<_$Scalars>>;
    /**
     * Select the `value` field on the `LabeledStringValue` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: LabeledStringValue.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<LabeledStringValue.value<_$Scalars>>;
    /**
     * Select the `tags` field on the `LabeledStringValue` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    tags?: LabeledStringValue.tags$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<LabeledStringValue.tags<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: LabeledStringValue$FragmentInline<_$Scalars> | LabeledStringValue$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface LabeledStringValue$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends LabeledStringValue<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace LabeledStringValue {
    type label<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | label$SelectionSet<_$Scalars>;
    interface label$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `label` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type label$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | label$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type tags<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>;
    interface tags$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `tags` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type tags$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>>;
}
export interface UserPreferences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UserPreferences` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UserPreferences.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `UserPreferences` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: UserPreferences.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `UserPreferences` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: UserPreferences.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `UserPreferences` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: UserPreferences.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserPreferences` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserPreferences.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `UserPreferences` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: UserPreferences.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UserPreferences` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserPreferences.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `UserPreferences` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: UserPreferences.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UserPreferences` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UserPreferences.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `UserPreferences` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: UserPreferences.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.deletedBy<_$Scalars>>;
    /**
     * Select the `shareEmail` field on the `UserPreferences` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    shareEmail?: UserPreferences.shareEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.shareEmail<_$Scalars>>;
    /**
     * Select the `sharePhoneNumber` field on the `UserPreferences` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sharePhoneNumber?: UserPreferences.sharePhoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.sharePhoneNumber<_$Scalars>>;
    /**
     * Select the `showWelcomeMessage` field on the `UserPreferences` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showWelcomeMessage?: UserPreferences.showWelcomeMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.showWelcomeMessage<_$Scalars>>;
    /**
     * Select the `notificationOptions` field on the `UserPreferences` object. Its type is `NotificationOptions` (a `OutputObject` kind of type).
     */
    notificationOptions?: UserPreferences.notificationOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserPreferences.notificationOptions<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserPreferences$FragmentInline<_$Scalars> | UserPreferences$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserPreferences$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserPreferences<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserPreferences {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type shareEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shareEmail$SelectionSet<_$Scalars>;
    interface shareEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shareEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shareEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shareEmail$SelectionSet<_$Scalars>>;
    type sharePhoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sharePhoneNumber$SelectionSet<_$Scalars>;
    interface sharePhoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sharePhoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sharePhoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sharePhoneNumber$SelectionSet<_$Scalars>>;
    type showWelcomeMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showWelcomeMessage$SelectionSet<_$Scalars>;
    interface showWelcomeMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showWelcomeMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showWelcomeMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showWelcomeMessage$SelectionSet<_$Scalars>>;
    type notificationOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = notificationOptions$SelectionSet<_$Scalars>;
    interface notificationOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$NotificationOptions<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `notificationOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<notificationOptions$SelectionSet<_$Scalars>>;
}
export interface NotificationOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `notificationType` field on the `NotificationOptions` object. Its type is `NotificationType` (a `Enum` kind of type).
     */
    notificationType?: NotificationOptions.notificationType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationOptions.notificationType<_$Scalars>>;
    /**
     * Select the `enableEmail` field on the `NotificationOptions` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    enableEmail?: NotificationOptions.enableEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationOptions.enableEmail<_$Scalars>>;
    /**
     * Select the `enableInAppMessage` field on the `NotificationOptions` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    enableInAppMessage?: NotificationOptions.enableInAppMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationOptions.enableInAppMessage<_$Scalars>>;
    /**
     * Select the `enablePushNotification` field on the `NotificationOptions` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    enablePushNotification?: NotificationOptions.enablePushNotification$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationOptions.enablePushNotification<_$Scalars>>;
    /**
     * Select the `enableSms` field on the `NotificationOptions` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    enableSms?: NotificationOptions.enableSms$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationOptions.enableSms<_$Scalars>>;
    /**
     * Select the `frequency` field on the `NotificationOptions` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    frequency?: NotificationOptions.frequency$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationOptions.frequency<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: NotificationOptions$FragmentInline<_$Scalars> | NotificationOptions$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface NotificationOptions$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends NotificationOptions<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace NotificationOptions {
    type notificationType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationType$SelectionSet<_$Scalars>;
    interface notificationType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationType$SelectionSet<_$Scalars>>;
    type enableEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enableEmail$SelectionSet<_$Scalars>;
    interface enableEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `enableEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type enableEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enableEmail$SelectionSet<_$Scalars>>;
    type enableInAppMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enableInAppMessage$SelectionSet<_$Scalars>;
    interface enableInAppMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `enableInAppMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type enableInAppMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enableInAppMessage$SelectionSet<_$Scalars>>;
    type enablePushNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enablePushNotification$SelectionSet<_$Scalars>;
    interface enablePushNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `enablePushNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type enablePushNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enablePushNotification$SelectionSet<_$Scalars>>;
    type enableSms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enableSms$SelectionSet<_$Scalars>;
    interface enableSms$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `enableSms` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type enableSms$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enableSms$SelectionSet<_$Scalars>>;
    type frequency<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | frequency$SelectionSet<_$Scalars>;
    interface frequency$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `frequency` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type frequency$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | frequency$SelectionSet<_$Scalars>>;
}
export interface UserDeviceWithoutAuth<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UserDeviceWithoutAuth` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UserDeviceWithoutAuth.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: UserDeviceWithoutAuth.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `UserDeviceWithoutAuth` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: UserDeviceWithoutAuth.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `UserDeviceWithoutAuth` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: UserDeviceWithoutAuth.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserDeviceWithoutAuth.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `UserDeviceWithoutAuth` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: UserDeviceWithoutAuth.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserDeviceWithoutAuth.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `UserDeviceWithoutAuth` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: UserDeviceWithoutAuth.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UserDeviceWithoutAuth.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `UserDeviceWithoutAuth` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: UserDeviceWithoutAuth.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `UserDeviceWithoutAuth` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: UserDeviceWithoutAuth.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.userId<_$Scalars>>;
    /**
     * Select the `deviceUuid` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deviceUuid?: UserDeviceWithoutAuth.deviceUuid$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.deviceUuid<_$Scalars>>;
    /**
     * Select the `deviceType` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deviceType?: UserDeviceWithoutAuth.deviceType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.deviceType<_$Scalars>>;
    /**
     * Select the `trusted` field on the `UserDeviceWithoutAuth` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    trusted?: UserDeviceWithoutAuth.trusted$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.trusted<_$Scalars>>;
    /**
     * Select the `phoneNumber` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    phoneNumber?: UserDeviceWithoutAuth.phoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.phoneNumber<_$Scalars>>;
    /**
     * Select the `phoneNumberUpdatedAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberUpdatedAt?: UserDeviceWithoutAuth.phoneNumberUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.phoneNumberUpdatedAt<_$Scalars>>;
    /**
     * Select the `isPhoneNumberVerified` field on the `UserDeviceWithoutAuth` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isPhoneNumberVerified?: UserDeviceWithoutAuth.isPhoneNumberVerified$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.isPhoneNumberVerified<_$Scalars>>;
    /**
     * Select the `brand` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    brand?: UserDeviceWithoutAuth.brand$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.brand<_$Scalars>>;
    /**
     * Select the `model` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    model?: UserDeviceWithoutAuth.model$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.model<_$Scalars>>;
    /**
     * Select the `isTablet` field on the `UserDeviceWithoutAuth` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isTablet?: UserDeviceWithoutAuth.isTablet$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.isTablet<_$Scalars>>;
    /**
     * Select the `screenWidth` field on the `UserDeviceWithoutAuth` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    screenWidth?: UserDeviceWithoutAuth.screenWidth$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.screenWidth<_$Scalars>>;
    /**
     * Select the `screenHeight` field on the `UserDeviceWithoutAuth` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    screenHeight?: UserDeviceWithoutAuth.screenHeight$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.screenHeight<_$Scalars>>;
    /**
     * Select the `os` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    os?: UserDeviceWithoutAuth.os$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.os<_$Scalars>>;
    /**
     * Select the `osVersion` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    osVersion?: UserDeviceWithoutAuth.osVersion$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.osVersion<_$Scalars>>;
    /**
     * Select the `timezone` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    timezone?: UserDeviceWithoutAuth.timezone$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.timezone<_$Scalars>>;
    /**
     * Select the `ipAddress` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    ipAddress?: UserDeviceWithoutAuth.ipAddress$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.ipAddress<_$Scalars>>;
    /**
     * Select the `consumer` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    consumer?: UserDeviceWithoutAuth.consumer$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.consumer<_$Scalars>>;
    /**
     * Select the `consumerVersion` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    consumerVersion?: UserDeviceWithoutAuth.consumerVersion$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.consumerVersion<_$Scalars>>;
    /**
     * Select the `acceptedLanguage` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    acceptedLanguage?: UserDeviceWithoutAuth.acceptedLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.acceptedLanguage<_$Scalars>>;
    /**
     * Select the `locale` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    locale?: UserDeviceWithoutAuth.locale$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.locale<_$Scalars>>;
    /**
     * Select the `countryCode` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryCode?: UserDeviceWithoutAuth.countryCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.countryCode<_$Scalars>>;
    /**
     * Select the `appVersion` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    appVersion?: UserDeviceWithoutAuth.appVersion$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.appVersion<_$Scalars>>;
    /**
     * Select the `signedInAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedInAt?: UserDeviceWithoutAuth.signedInAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.signedInAt<_$Scalars>>;
    /**
     * Select the `signedOutAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedOutAt?: UserDeviceWithoutAuth.signedOutAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.signedOutAt<_$Scalars>>;
    /**
     * Select the `sessionStartedAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    sessionStartedAt?: UserDeviceWithoutAuth.sessionStartedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.sessionStartedAt<_$Scalars>>;
    /**
     * Select the `sessionEndedAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    sessionEndedAt?: UserDeviceWithoutAuth.sessionEndedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.sessionEndedAt<_$Scalars>>;
    /**
     * Select the `identityProvider` field on the `UserDeviceWithoutAuth` object. Its type is `IdentityProvider` (a `Enum` kind of type).
     */
    identityProvider?: UserDeviceWithoutAuth.identityProvider$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.identityProvider<_$Scalars>>;
    /**
     * Select the `oauthProfileUrl` field on the `UserDeviceWithoutAuth` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    oauthProfileUrl?: UserDeviceWithoutAuth.oauthProfileUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.oauthProfileUrl<_$Scalars>>;
    /**
     * Select the `trustedAt` field on the `UserDeviceWithoutAuth` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    trustedAt?: UserDeviceWithoutAuth.trustedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserDeviceWithoutAuth.trustedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserDeviceWithoutAuth$FragmentInline<_$Scalars> | UserDeviceWithoutAuth$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserDeviceWithoutAuth$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserDeviceWithoutAuth<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserDeviceWithoutAuth {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type deviceUuid<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceUuid$SelectionSet<_$Scalars>;
    interface deviceUuid$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deviceUuid` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deviceUuid$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceUuid$SelectionSet<_$Scalars>>;
    type deviceType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceType$SelectionSet<_$Scalars>;
    interface deviceType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deviceType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deviceType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceType$SelectionSet<_$Scalars>>;
    type trusted<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trusted$SelectionSet<_$Scalars>;
    interface trusted$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trusted` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trusted$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trusted$SelectionSet<_$Scalars>>;
    type phoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>;
    interface phoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>>;
    type phoneNumberUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>;
    interface phoneNumberUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>>;
    type isPhoneNumberVerified<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberVerified$SelectionSet<_$Scalars>;
    interface isPhoneNumberVerified$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isPhoneNumberVerified` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isPhoneNumberVerified$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberVerified$SelectionSet<_$Scalars>>;
    type brand<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brand$SelectionSet<_$Scalars>;
    interface brand$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `brand` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type brand$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brand$SelectionSet<_$Scalars>>;
    type model<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | model$SelectionSet<_$Scalars>;
    interface model$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `model` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type model$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | model$SelectionSet<_$Scalars>>;
    type isTablet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTablet$SelectionSet<_$Scalars>;
    interface isTablet$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isTablet` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isTablet$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTablet$SelectionSet<_$Scalars>>;
    type screenWidth<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | screenWidth$SelectionSet<_$Scalars>;
    interface screenWidth$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `screenWidth` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type screenWidth$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | screenWidth$SelectionSet<_$Scalars>>;
    type screenHeight<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | screenHeight$SelectionSet<_$Scalars>;
    interface screenHeight$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `screenHeight` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type screenHeight$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | screenHeight$SelectionSet<_$Scalars>>;
    type os<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | os$SelectionSet<_$Scalars>;
    interface os$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `os` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type os$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | os$SelectionSet<_$Scalars>>;
    type osVersion<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | osVersion$SelectionSet<_$Scalars>;
    interface osVersion$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `osVersion` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type osVersion$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | osVersion$SelectionSet<_$Scalars>>;
    type timezone<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>;
    interface timezone$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timezone` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timezone$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>>;
    type ipAddress<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ipAddress$SelectionSet<_$Scalars>;
    interface ipAddress$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ipAddress` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ipAddress$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ipAddress$SelectionSet<_$Scalars>>;
    type consumer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | consumer$SelectionSet<_$Scalars>;
    interface consumer$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `consumer` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type consumer$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | consumer$SelectionSet<_$Scalars>>;
    type consumerVersion<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | consumerVersion$SelectionSet<_$Scalars>;
    interface consumerVersion$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `consumerVersion` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type consumerVersion$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | consumerVersion$SelectionSet<_$Scalars>>;
    type acceptedLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | acceptedLanguage$SelectionSet<_$Scalars>;
    interface acceptedLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `acceptedLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type acceptedLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | acceptedLanguage$SelectionSet<_$Scalars>>;
    type locale<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locale$SelectionSet<_$Scalars>;
    interface locale$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `locale` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type locale$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locale$SelectionSet<_$Scalars>>;
    type countryCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryCode$SelectionSet<_$Scalars>;
    interface countryCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryCode$SelectionSet<_$Scalars>>;
    type appVersion<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appVersion$SelectionSet<_$Scalars>;
    interface appVersion$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `appVersion` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type appVersion$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appVersion$SelectionSet<_$Scalars>>;
    type signedInAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>;
    interface signedInAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedInAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedInAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>>;
    type signedOutAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedOutAt$SelectionSet<_$Scalars>;
    interface signedOutAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedOutAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedOutAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedOutAt$SelectionSet<_$Scalars>>;
    type sessionStartedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sessionStartedAt$SelectionSet<_$Scalars>;
    interface sessionStartedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sessionStartedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sessionStartedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sessionStartedAt$SelectionSet<_$Scalars>>;
    type sessionEndedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sessionEndedAt$SelectionSet<_$Scalars>;
    interface sessionEndedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sessionEndedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sessionEndedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sessionEndedAt$SelectionSet<_$Scalars>>;
    type identityProvider<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | identityProvider$SelectionSet<_$Scalars>;
    interface identityProvider$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `identityProvider` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type identityProvider$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | identityProvider$SelectionSet<_$Scalars>>;
    type oauthProfileUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | oauthProfileUrl$SelectionSet<_$Scalars>;
    interface oauthProfileUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `oauthProfileUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type oauthProfileUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | oauthProfileUrl$SelectionSet<_$Scalars>>;
    type trustedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustedAt$SelectionSet<_$Scalars>;
    interface trustedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trustedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trustedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustedAt$SelectionSet<_$Scalars>>;
}
export interface UserBlock<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userId` field on the `UserBlock` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: UserBlock.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.userId<_$Scalars>>;
    /**
     * Select the `reasonTextId` field on the `UserBlock` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    reasonTextId?: UserBlock.reasonTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.reasonTextId<_$Scalars>>;
    /**
     * Select the `notes` field on the `UserBlock` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    notes?: UserBlock.notes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.notes<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `UserBlock` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: UserBlock.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.adminNotes<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserBlock` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserBlock.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.createdAt<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `UserBlock` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: UserBlock.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `UserBlock` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: UserBlock.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserBlock.mm2Id<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserBlock$FragmentInline<_$Scalars> | UserBlock$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserBlock$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserBlock<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserBlock {
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type reasonTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | reasonTextId$SelectionSet<_$Scalars>;
    interface reasonTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `reasonTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type reasonTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | reasonTextId$SelectionSet<_$Scalars>>;
    type notes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notes$SelectionSet<_$Scalars>;
    interface notes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notes$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
}
export interface Company<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Company` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Company.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Company.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Company` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Company.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Company` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Company.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Company` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Company.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Company` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Company.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Company` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Company.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Company` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Company.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Company` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Company.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Company` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Company.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.deletedBy<_$Scalars>>;
    /**
     * Select the `userIds` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userIds?: Company.userIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.userIds<_$Scalars>>;
    /**
     * Select the `name` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: Company.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.name<_$Scalars>>;
    /**
     * Select the `description` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Company.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.description<_$Scalars>>;
    /**
     * Select the `location` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    location?: Company.location$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.location<_$Scalars>>;
    /**
     * Select the `companyTypeTextId` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    companyTypeTextId?: Company.companyTypeTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.companyTypeTextId<_$Scalars>>;
    /**
     * Select the `companyStageTextId` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    companyStageTextId?: Company.companyStageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.companyStageTextId<_$Scalars>>;
    /**
     * Select the `websites` field on the `Company` object. Its type is `LabeledStringValue` (a `OutputObject` kind of type).
     */
    websites?: Company.websites$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.websites<_$Scalars>>;
    /**
     * Select the `industries` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    industries?: Company.industries$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.industries<_$Scalars>>;
    /**
     * Select the `isOperational` field on the `Company` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isOperational?: Company.isOperational$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.isOperational<_$Scalars>>;
    /**
     * Select the `isFundraising` field on the `Company` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isFundraising?: Company.isFundraising$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.isFundraising<_$Scalars>>;
    /**
     * Select the `annualRevenue` field on the `Company` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    annualRevenue?: Company.annualRevenue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.annualRevenue<_$Scalars>>;
    /**
     * Select the `employeeCount` field on the `Company` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    employeeCount?: Company.employeeCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.employeeCount<_$Scalars>>;
    /**
     * Select the `foundedAt` field on the `Company` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    foundedAt?: Company.foundedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.foundedAt<_$Scalars>>;
    /**
     * Select the `mm2UserId` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2UserId?: Company.mm2UserId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.mm2UserId<_$Scalars>>;
    /**
     * Select the `mm2CompanyRole` field on the `Company` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2CompanyRole?: Company.mm2CompanyRole$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.mm2CompanyRole<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Company` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Company.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `companyStage` field on the `Company` object. Its type is `CompanyStage` (a `OutputObject` kind of type).
     */
    companyStage?: Company.companyStage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.companyStage<_$Scalars>>;
    /**
     * Select the `companyType` field on the `Company` object. Its type is `CompanyType` (a `OutputObject` kind of type).
     */
    companyType?: Company.companyType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Company.companyType<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Company$FragmentInline<_$Scalars> | Company$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Company$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Company<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Company {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>;
    interface userIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type location<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | location$SelectionSet<_$Scalars>;
    interface location$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `location` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type location$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | location$SelectionSet<_$Scalars>>;
    type companyTypeTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyTypeTextId$SelectionSet<_$Scalars>;
    interface companyTypeTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `companyTypeTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyTypeTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyTypeTextId$SelectionSet<_$Scalars>>;
    type companyStageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyStageTextId$SelectionSet<_$Scalars>;
    interface companyStageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `companyStageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyStageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyStageTextId$SelectionSet<_$Scalars>>;
    type websites<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = websites$SelectionSet<_$Scalars>;
    interface websites$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$LabeledStringValue<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `websites` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type websites$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<websites$SelectionSet<_$Scalars>>;
    type industries<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industries$SelectionSet<_$Scalars>;
    interface industries$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `industries` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industries$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industries$SelectionSet<_$Scalars>>;
    type isOperational<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOperational$SelectionSet<_$Scalars>;
    interface isOperational$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isOperational` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isOperational$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOperational$SelectionSet<_$Scalars>>;
    type isFundraising<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isFundraising$SelectionSet<_$Scalars>;
    interface isFundraising$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isFundraising` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isFundraising$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isFundraising$SelectionSet<_$Scalars>>;
    type annualRevenue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | annualRevenue$SelectionSet<_$Scalars>;
    interface annualRevenue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `annualRevenue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type annualRevenue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | annualRevenue$SelectionSet<_$Scalars>>;
    type employeeCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | employeeCount$SelectionSet<_$Scalars>;
    interface employeeCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `employeeCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type employeeCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | employeeCount$SelectionSet<_$Scalars>>;
    type foundedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | foundedAt$SelectionSet<_$Scalars>;
    interface foundedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `foundedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type foundedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | foundedAt$SelectionSet<_$Scalars>>;
    type mm2UserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2UserId$SelectionSet<_$Scalars>;
    interface mm2UserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2UserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2UserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2UserId$SelectionSet<_$Scalars>>;
    type mm2CompanyRole<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2CompanyRole$SelectionSet<_$Scalars>;
    interface mm2CompanyRole$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2CompanyRole` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2CompanyRole$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2CompanyRole$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type companyStage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = companyStage$SelectionSet<_$Scalars>;
    interface companyStage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$CompanyStage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `companyStage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyStage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<companyStage$SelectionSet<_$Scalars>>;
    type companyType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = companyType$SelectionSet<_$Scalars>;
    interface companyType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$CompanyType<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `companyType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<companyType$SelectionSet<_$Scalars>>;
}
export interface CompanyStage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `CompanyStage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: CompanyStage.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: CompanyStage.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `CompanyStage` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: CompanyStage.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `CompanyStage` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: CompanyStage.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `CompanyStage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: CompanyStage.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `CompanyStage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: CompanyStage.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `CompanyStage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: CompanyStage.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `CompanyStage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: CompanyStage.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `CompanyStage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: CompanyStage.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `CompanyStage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: CompanyStage.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: CompanyStage.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: CompanyStage.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `CompanyStage` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: CompanyStage.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `CompanyStage` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: CompanyStage.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: CompanyStage.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: CompanyStage.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `CompanyStage` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: CompanyStage.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: CompanyStage.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: CompanyStage.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: CompanyStage.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `CompanyStage` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: CompanyStage.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: CompanyStage.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: CompanyStage.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `CompanyStage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: CompanyStage.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: CompanyStage.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `CompanyStage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: CompanyStage.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `CompanyStage` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: CompanyStage.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `CompanyStage` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: CompanyStage.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyStage.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: CompanyStage$FragmentInline<_$Scalars> | CompanyStage$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface CompanyStage$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends CompanyStage<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace CompanyStage {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface CompanyType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `CompanyType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: CompanyType.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: CompanyType.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `CompanyType` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: CompanyType.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `CompanyType` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: CompanyType.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `CompanyType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: CompanyType.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `CompanyType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: CompanyType.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `CompanyType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: CompanyType.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `CompanyType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: CompanyType.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `CompanyType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: CompanyType.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `CompanyType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: CompanyType.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: CompanyType.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: CompanyType.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `CompanyType` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: CompanyType.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `CompanyType` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: CompanyType.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: CompanyType.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: CompanyType.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `CompanyType` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: CompanyType.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: CompanyType.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: CompanyType.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: CompanyType.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `CompanyType` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: CompanyType.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: CompanyType.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: CompanyType.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `CompanyType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: CompanyType.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: CompanyType.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `CompanyType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: CompanyType.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `CompanyType` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: CompanyType.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `CompanyType` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: CompanyType.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<CompanyType.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: CompanyType$FragmentInline<_$Scalars> | CompanyType$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface CompanyType$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends CompanyType<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace CompanyType {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface AcademicExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `AcademicExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: AcademicExperience.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `AcademicExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: AcademicExperience.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `AcademicExperience` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: AcademicExperience.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `AcademicExperience` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: AcademicExperience.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `AcademicExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: AcademicExperience.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `AcademicExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: AcademicExperience.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `AcademicExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: AcademicExperience.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `AcademicExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: AcademicExperience.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `AcademicExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: AcademicExperience.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `AcademicExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: AcademicExperience.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.deletedBy<_$Scalars>>;
    /**
     * Select the `institutionName` field on the `AcademicExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    institutionName?: AcademicExperience.institutionName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.institutionName<_$Scalars>>;
    /**
     * Select the `degreeType` field on the `AcademicExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    degreeType?: AcademicExperience.degreeType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.degreeType<_$Scalars>>;
    /**
     * Select the `fieldOfStudy` field on the `AcademicExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    fieldOfStudy?: AcademicExperience.fieldOfStudy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.fieldOfStudy<_$Scalars>>;
    /**
     * Select the `startDate` field on the `AcademicExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    startDate?: AcademicExperience.startDate$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.startDate<_$Scalars>>;
    /**
     * Select the `endDate` field on the `AcademicExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    endDate?: AcademicExperience.endDate$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.endDate<_$Scalars>>;
    /**
     * Select the `userId` field on the `AcademicExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: AcademicExperience.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AcademicExperience.userId<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: AcademicExperience$FragmentInline<_$Scalars> | AcademicExperience$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface AcademicExperience$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends AcademicExperience<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace AcademicExperience {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type institutionName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | institutionName$SelectionSet<_$Scalars>;
    interface institutionName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `institutionName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type institutionName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | institutionName$SelectionSet<_$Scalars>>;
    type degreeType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | degreeType$SelectionSet<_$Scalars>;
    interface degreeType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `degreeType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type degreeType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | degreeType$SelectionSet<_$Scalars>>;
    type fieldOfStudy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fieldOfStudy$SelectionSet<_$Scalars>;
    interface fieldOfStudy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `fieldOfStudy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type fieldOfStudy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fieldOfStudy$SelectionSet<_$Scalars>>;
    type startDate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startDate$SelectionSet<_$Scalars>;
    interface startDate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `startDate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startDate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startDate$SelectionSet<_$Scalars>>;
    type endDate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endDate$SelectionSet<_$Scalars>;
    interface endDate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `endDate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endDate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endDate$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
}
export interface BusinessExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `BusinessExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: BusinessExperience.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `BusinessExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: BusinessExperience.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `BusinessExperience` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: BusinessExperience.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `BusinessExperience` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: BusinessExperience.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `BusinessExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: BusinessExperience.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `BusinessExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: BusinessExperience.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `BusinessExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: BusinessExperience.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `BusinessExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: BusinessExperience.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `BusinessExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: BusinessExperience.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `BusinessExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: BusinessExperience.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.deletedBy<_$Scalars>>;
    /**
     * Select the `businessName` field on the `BusinessExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    businessName?: BusinessExperience.businessName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.businessName<_$Scalars>>;
    /**
     * Select the `jobTitle` field on the `BusinessExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    jobTitle?: BusinessExperience.jobTitle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.jobTitle<_$Scalars>>;
    /**
     * Select the `city` field on the `BusinessExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    city?: BusinessExperience.city$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.city<_$Scalars>>;
    /**
     * Select the `state` field on the `BusinessExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    state?: BusinessExperience.state$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.state<_$Scalars>>;
    /**
     * Select the `country` field on the `BusinessExperience` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    country?: BusinessExperience.country$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.country<_$Scalars>>;
    /**
     * Select the `startDate` field on the `BusinessExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    startDate?: BusinessExperience.startDate$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.startDate<_$Scalars>>;
    /**
     * Select the `endDate` field on the `BusinessExperience` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    endDate?: BusinessExperience.endDate$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.endDate<_$Scalars>>;
    /**
     * Select the `userId` field on the `BusinessExperience` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: BusinessExperience.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BusinessExperience.userId<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: BusinessExperience$FragmentInline<_$Scalars> | BusinessExperience$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface BusinessExperience$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends BusinessExperience<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace BusinessExperience {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type businessName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessName$SelectionSet<_$Scalars>;
    interface businessName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `businessName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessName$SelectionSet<_$Scalars>>;
    type jobTitle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | jobTitle$SelectionSet<_$Scalars>;
    interface jobTitle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `jobTitle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type jobTitle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | jobTitle$SelectionSet<_$Scalars>>;
    type city<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | city$SelectionSet<_$Scalars>;
    interface city$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `city` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type city$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | city$SelectionSet<_$Scalars>>;
    type state<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | state$SelectionSet<_$Scalars>;
    interface state$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `state` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type state$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | state$SelectionSet<_$Scalars>>;
    type country<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | country$SelectionSet<_$Scalars>;
    interface country$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `country` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type country$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | country$SelectionSet<_$Scalars>>;
    type startDate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startDate$SelectionSet<_$Scalars>;
    interface startDate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `startDate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startDate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startDate$SelectionSet<_$Scalars>>;
    type endDate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endDate$SelectionSet<_$Scalars>;
    interface endDate$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `endDate` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endDate$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | endDate$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
}
export interface UploadedAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UploadedAsset` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UploadedAsset.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: UploadedAsset.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `UploadedAsset` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: UploadedAsset.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `UploadedAsset` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: UploadedAsset.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UploadedAsset` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UploadedAsset.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `UploadedAsset` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: UploadedAsset.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UploadedAsset` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UploadedAsset.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `UploadedAsset` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: UploadedAsset.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UploadedAsset` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UploadedAsset.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `UploadedAsset` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: UploadedAsset.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.deletedBy<_$Scalars>>;
    /**
     * Select the `ownerId` field on the `UploadedAsset` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    ownerId?: UploadedAsset.ownerId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.ownerId<_$Scalars>>;
    /**
     * Select the `ownerModelType` field on the `UploadedAsset` object. Its type is `ModelType` (a `Enum` kind of type).
     */
    ownerModelType?: UploadedAsset.ownerModelType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.ownerModelType<_$Scalars>>;
    /**
     * Select the `assetType` field on the `UploadedAsset` object. Its type is `UploadedAssetType` (a `Enum` kind of type).
     */
    assetType?: UploadedAsset.assetType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.assetType<_$Scalars>>;
    /**
     * Select the `hostingService` field on the `UploadedAsset` object. Its type is `AssetHostingService` (a `Enum` kind of type).
     */
    hostingService?: UploadedAsset.hostingService$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.hostingService<_$Scalars>>;
    /**
     * Select the `url` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    url?: UploadedAsset.url$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.url<_$Scalars>>;
    /**
     * Select the `path` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    path?: UploadedAsset.path$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.path<_$Scalars>>;
    /**
     * Select the `s3Bucket` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    s3Bucket?: UploadedAsset.s3Bucket$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.s3Bucket<_$Scalars>>;
    /**
     * Select the `s3Key` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    s3Key?: UploadedAsset.s3Key$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.s3Key<_$Scalars>>;
    /**
     * Select the `mimeType` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mimeType?: UploadedAsset.mimeType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.mimeType<_$Scalars>>;
    /**
     * Select the `uploadUrl` field on the `UploadedAsset` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    uploadUrl?: UploadedAsset.uploadUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.uploadUrl<_$Scalars>>;
    /**
     * Select the `uploadUrlExpiresAt` field on the `UploadedAsset` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    uploadUrlExpiresAt?: UploadedAsset.uploadUrlExpiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.uploadUrlExpiresAt<_$Scalars>>;
    /**
     * Select the `uploadedAt` field on the `UploadedAsset` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    uploadedAt?: UploadedAsset.uploadedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.uploadedAt<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `UploadedAsset` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: UploadedAsset.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UploadedAsset.expiresAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UploadedAsset$FragmentInline<_$Scalars> | UploadedAsset$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UploadedAsset$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UploadedAsset<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UploadedAsset {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type ownerId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ownerId$SelectionSet<_$Scalars>;
    interface ownerId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ownerId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ownerId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ownerId$SelectionSet<_$Scalars>>;
    type ownerModelType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ownerModelType$SelectionSet<_$Scalars>;
    interface ownerModelType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ownerModelType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ownerModelType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ownerModelType$SelectionSet<_$Scalars>>;
    type assetType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | assetType$SelectionSet<_$Scalars>;
    interface assetType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `assetType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type assetType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | assetType$SelectionSet<_$Scalars>>;
    type hostingService<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hostingService$SelectionSet<_$Scalars>;
    interface hostingService$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hostingService` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hostingService$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hostingService$SelectionSet<_$Scalars>>;
    type url<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | url$SelectionSet<_$Scalars>;
    interface url$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `url` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type url$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | url$SelectionSet<_$Scalars>>;
    type path<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | path$SelectionSet<_$Scalars>;
    interface path$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `path` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type path$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | path$SelectionSet<_$Scalars>>;
    type s3Bucket<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | s3Bucket$SelectionSet<_$Scalars>;
    interface s3Bucket$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `s3Bucket` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type s3Bucket$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | s3Bucket$SelectionSet<_$Scalars>>;
    type s3Key<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | s3Key$SelectionSet<_$Scalars>;
    interface s3Key$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `s3Key` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type s3Key$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | s3Key$SelectionSet<_$Scalars>>;
    type mimeType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mimeType$SelectionSet<_$Scalars>;
    interface mimeType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mimeType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mimeType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mimeType$SelectionSet<_$Scalars>>;
    type uploadUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | uploadUrl$SelectionSet<_$Scalars>;
    interface uploadUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `uploadUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type uploadUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | uploadUrl$SelectionSet<_$Scalars>>;
    type uploadUrlExpiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | uploadUrlExpiresAt$SelectionSet<_$Scalars>;
    interface uploadUrlExpiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `uploadUrlExpiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type uploadUrlExpiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | uploadUrlExpiresAt$SelectionSet<_$Scalars>>;
    type uploadedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | uploadedAt$SelectionSet<_$Scalars>;
    interface uploadedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `uploadedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type uploadedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | uploadedAt$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
}
export interface UserProfileRoleHistoryItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `newRole` field on the `UserProfileRoleHistoryItem` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    newRole?: UserProfileRoleHistoryItem.newRole$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserProfileRoleHistoryItem.newRole<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserProfileRoleHistoryItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserProfileRoleHistoryItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserProfileRoleHistoryItem.createdAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserProfileRoleHistoryItem$FragmentInline<_$Scalars> | UserProfileRoleHistoryItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserProfileRoleHistoryItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserProfileRoleHistoryItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserProfileRoleHistoryItem {
    type newRole<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | newRole$SelectionSet<_$Scalars>;
    interface newRole$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `newRole` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type newRole$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | newRole$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
}
export interface Country<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Country` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Country.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Country.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Country` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Country.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Country` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Country.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Country` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Country.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Country` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Country.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Country` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Country.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Country` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Country.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Country` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Country.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Country` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Country.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Country.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Country.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Country` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Country.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Country` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Country.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Country.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Country.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Country` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Country.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Country.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Country.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Country.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Country` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Country.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Country.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Country.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Country` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Country.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Country.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Country.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Country` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Country.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Country` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Country.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.parentOption<_$Scalars>>;
    /**
     * Select the `alpha2Key` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    alpha2Key?: Country.alpha2Key$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.alpha2Key<_$Scalars>>;
    /**
     * Select the `alpha3Key` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    alpha3Key?: Country.alpha3Key$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.alpha3Key<_$Scalars>>;
    /**
     * Select the `phoneCode` field on the `Country` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    phoneCode?: Country.phoneCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Country.phoneCode<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Country$FragmentInline<_$Scalars> | Country$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Country$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Country<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Country {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
    type alpha2Key<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alpha2Key$SelectionSet<_$Scalars>;
    interface alpha2Key$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `alpha2Key` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type alpha2Key$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alpha2Key$SelectionSet<_$Scalars>>;
    type alpha3Key<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alpha3Key$SelectionSet<_$Scalars>;
    interface alpha3Key$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `alpha3Key` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type alpha3Key$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alpha3Key$SelectionSet<_$Scalars>>;
    type phoneCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneCode$SelectionSet<_$Scalars>;
    interface phoneCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneCode$SelectionSet<_$Scalars>>;
}
export interface Gender<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Gender` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Gender.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Gender.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Gender` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Gender.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Gender` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Gender.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Gender` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Gender.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Gender` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Gender.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Gender` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Gender.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Gender` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Gender.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Gender` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Gender.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Gender` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Gender.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Gender.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Gender.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Gender` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Gender.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Gender` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Gender.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Gender.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Gender.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Gender` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Gender.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Gender.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Gender.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Gender.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Gender` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Gender.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Gender.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Gender.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Gender` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Gender.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Gender.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Gender` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Gender.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Gender` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Gender.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Gender` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Gender.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Gender.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Gender$FragmentInline<_$Scalars> | Gender$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Gender$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Gender<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Gender {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface Language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Language` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Language.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Language.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Language` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Language.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Language` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Language.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Language` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Language.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Language` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Language.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Language` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Language.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Language` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Language.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Language` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Language.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Language` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Language.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Language.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Language.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Language` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Language.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Language` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Language.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Language.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Language.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Language` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Language.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Language.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Language.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Language.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Language` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Language.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Language.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Language.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Language` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Language.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Language.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Language.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Language` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Language.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Language` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Language.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.parentOption<_$Scalars>>;
    /**
     * Select the `shortLangCode` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortLangCode?: Language.shortLangCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.shortLangCode<_$Scalars>>;
    /**
     * Select the `longLangCode` field on the `Language` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    longLangCode?: Language.longLangCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.longLangCode<_$Scalars>>;
    /**
     * Select the `isUiLanguage` field on the `Language` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isUiLanguage?: Language.isUiLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.isUiLanguage<_$Scalars>>;
    /**
     * Select the `isRtl` field on the `Language` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isRtl?: Language.isRtl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Language.isRtl<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Language$FragmentInline<_$Scalars> | Language$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Language$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Language<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Language {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
    type shortLangCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortLangCode$SelectionSet<_$Scalars>;
    interface shortLangCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortLangCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortLangCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortLangCode$SelectionSet<_$Scalars>>;
    type longLangCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | longLangCode$SelectionSet<_$Scalars>;
    interface longLangCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `longLangCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type longLangCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | longLangCode$SelectionSet<_$Scalars>>;
    type isUiLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isUiLanguage$SelectionSet<_$Scalars>;
    interface isUiLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isUiLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isUiLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isUiLanguage$SelectionSet<_$Scalars>>;
    type isRtl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isRtl$SelectionSet<_$Scalars>;
    interface isRtl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isRtl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isRtl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isRtl$SelectionSet<_$Scalars>>;
}
export interface Notification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Notification.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Notification.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Notification` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Notification.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Notification` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Notification.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Notification.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Notification.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Notification.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Notification.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Notification.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Notification.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.deletedBy<_$Scalars>>;
    /**
     * Select the `notificationType` field on the `Notification` object. Its type is `NotificationType` (a `Enum` kind of type).
     */
    notificationType?: Notification.notificationType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.notificationType<_$Scalars>>;
    /**
     * Select the `templateId` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    templateId?: Notification.templateId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.templateId<_$Scalars>>;
    /**
     * Select the `recipientId` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    recipientId?: Notification.recipientId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.recipientId<_$Scalars>>;
    /**
     * Select the `multiStepActionId` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    multiStepActionId?: Notification.multiStepActionId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.multiStepActionId<_$Scalars>>;
    /**
     * Select the `initiatorId` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    initiatorId?: Notification.initiatorId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.initiatorId<_$Scalars>>;
    /**
     * Select the `replyingToId` field on the `Notification` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    replyingToId?: Notification.replyingToId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.replyingToId<_$Scalars>>;
    /**
     * Select the `title` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    title?: Notification.title$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.title<_$Scalars>>;
    /**
     * Select the `messageText` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: Notification.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.messageText<_$Scalars>>;
    /**
     * Select the `shortMessageText` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageText?: Notification.shortMessageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.shortMessageText<_$Scalars>>;
    /**
     * Select the `htmlMessage` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessage?: Notification.htmlMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.htmlMessage<_$Scalars>>;
    /**
     * Select the `language` field on the `Notification` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Notification.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.language<_$Scalars>>;
    /**
     * Select the `isTranslated` field on the `Notification` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isTranslated?: Notification.isTranslated$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.isTranslated<_$Scalars>>;
    /**
     * Select the `appLink` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    appLink?: Notification.appLink$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.appLink<_$Scalars>>;
    /**
     * Select the `action0` field on the `Notification` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    action0?: Notification.action0$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.action0<_$Scalars>>;
    /**
     * Select the `action1` field on the `Notification` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    action1?: Notification.action1$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.action1<_$Scalars>>;
    /**
     * Select the `action2` field on the `Notification` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    action2?: Notification.action2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.action2<_$Scalars>>;
    /**
     * Select the `actionTaken` field on the `Notification` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    actionTaken?: Notification.actionTaken$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.actionTaken<_$Scalars>>;
    /**
     * Select the `sendEmail` field on the `Notification` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendEmail?: Notification.sendEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.sendEmail<_$Scalars>>;
    /**
     * Select the `sendInAppMessage` field on the `Notification` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendInAppMessage?: Notification.sendInAppMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.sendInAppMessage<_$Scalars>>;
    /**
     * Select the `sendPushNotification` field on the `Notification` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendPushNotification?: Notification.sendPushNotification$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.sendPushNotification<_$Scalars>>;
    /**
     * Select the `sendSms` field on the `Notification` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendSms?: Notification.sendSms$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.sendSms<_$Scalars>>;
    /**
     * Select the `emailSentAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailSentAt?: Notification.emailSentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.emailSentAt<_$Scalars>>;
    /**
     * Select the `inAppMessageSentAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    inAppMessageSentAt?: Notification.inAppMessageSentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.inAppMessageSentAt<_$Scalars>>;
    /**
     * Select the `inAppMessageReceivedAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    inAppMessageReceivedAt?: Notification.inAppMessageReceivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.inAppMessageReceivedAt<_$Scalars>>;
    /**
     * Select the `pushNotificationSentAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    pushNotificationSentAt?: Notification.pushNotificationSentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.pushNotificationSentAt<_$Scalars>>;
    /**
     * Select the `smsSentAt` field on the `Notification` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    smsSentAt?: Notification.smsSentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.smsSentAt<_$Scalars>>;
    /**
     * Select the `emailSendReport` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    emailSendReport?: Notification.emailSendReport$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.emailSendReport<_$Scalars>>;
    /**
     * Select the `pushNotificationSendReport` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pushNotificationSendReport?: Notification.pushNotificationSendReport$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.pushNotificationSendReport<_$Scalars>>;
    /**
     * Select the `smsSendReport` field on the `Notification` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    smsSendReport?: Notification.smsSendReport$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.smsSendReport<_$Scalars>>;
    /**
     * Select the `sentMessagesCount` field on the `Notification` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    sentMessagesCount?: Notification.sentMessagesCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.sentMessagesCount<_$Scalars>>;
    /**
     * Select the `context` field on the `Notification` object. Its type is `NotificationContext` (a `OutputObject` kind of type).
     */
    context?: Notification.context$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Notification.context<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Notification$FragmentInline<_$Scalars> | Notification$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Notification$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Notification<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Notification {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type notificationType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationType$SelectionSet<_$Scalars>;
    interface notificationType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationType$SelectionSet<_$Scalars>>;
    type templateId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | templateId$SelectionSet<_$Scalars>;
    interface templateId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `templateId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type templateId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | templateId$SelectionSet<_$Scalars>>;
    type recipientId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>;
    interface recipientId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>>;
    type multiStepActionId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | multiStepActionId$SelectionSet<_$Scalars>;
    interface multiStepActionId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `multiStepActionId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type multiStepActionId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | multiStepActionId$SelectionSet<_$Scalars>>;
    type initiatorId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | initiatorId$SelectionSet<_$Scalars>;
    interface initiatorId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `initiatorId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type initiatorId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | initiatorId$SelectionSet<_$Scalars>>;
    type replyingToId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | replyingToId$SelectionSet<_$Scalars>;
    interface replyingToId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `replyingToId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type replyingToId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | replyingToId$SelectionSet<_$Scalars>>;
    type title<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>;
    interface title$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `title` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type title$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type shortMessageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageText$SelectionSet<_$Scalars>;
    interface shortMessageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageText$SelectionSet<_$Scalars>>;
    type htmlMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessage$SelectionSet<_$Scalars>;
    interface htmlMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessage$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type isTranslated<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTranslated$SelectionSet<_$Scalars>;
    interface isTranslated$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isTranslated` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isTranslated$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTranslated$SelectionSet<_$Scalars>>;
    type appLink<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appLink$SelectionSet<_$Scalars>;
    interface appLink$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `appLink` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type appLink$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appLink$SelectionSet<_$Scalars>>;
    type action0<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action0$SelectionSet<_$Scalars>;
    interface action0$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `action0` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type action0$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action0$SelectionSet<_$Scalars>>;
    type action1<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action1$SelectionSet<_$Scalars>;
    interface action1$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `action1` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type action1$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action1$SelectionSet<_$Scalars>>;
    type action2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action2$SelectionSet<_$Scalars>;
    interface action2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `action2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type action2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action2$SelectionSet<_$Scalars>>;
    type actionTaken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionTaken$SelectionSet<_$Scalars>;
    interface actionTaken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionTaken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionTaken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionTaken$SelectionSet<_$Scalars>>;
    type sendEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendEmail$SelectionSet<_$Scalars>;
    interface sendEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendEmail$SelectionSet<_$Scalars>>;
    type sendInAppMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendInAppMessage$SelectionSet<_$Scalars>;
    interface sendInAppMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendInAppMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendInAppMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendInAppMessage$SelectionSet<_$Scalars>>;
    type sendPushNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendPushNotification$SelectionSet<_$Scalars>;
    interface sendPushNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendPushNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendPushNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendPushNotification$SelectionSet<_$Scalars>>;
    type sendSms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendSms$SelectionSet<_$Scalars>;
    interface sendSms$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendSms` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendSms$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendSms$SelectionSet<_$Scalars>>;
    type emailSentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSentAt$SelectionSet<_$Scalars>;
    interface emailSentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailSentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailSentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSentAt$SelectionSet<_$Scalars>>;
    type inAppMessageSentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inAppMessageSentAt$SelectionSet<_$Scalars>;
    interface inAppMessageSentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inAppMessageSentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inAppMessageSentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inAppMessageSentAt$SelectionSet<_$Scalars>>;
    type inAppMessageReceivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inAppMessageReceivedAt$SelectionSet<_$Scalars>;
    interface inAppMessageReceivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inAppMessageReceivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inAppMessageReceivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inAppMessageReceivedAt$SelectionSet<_$Scalars>>;
    type pushNotificationSentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pushNotificationSentAt$SelectionSet<_$Scalars>;
    interface pushNotificationSentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pushNotificationSentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pushNotificationSentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pushNotificationSentAt$SelectionSet<_$Scalars>>;
    type smsSentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | smsSentAt$SelectionSet<_$Scalars>;
    interface smsSentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `smsSentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type smsSentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | smsSentAt$SelectionSet<_$Scalars>>;
    type emailSendReport<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSendReport$SelectionSet<_$Scalars>;
    interface emailSendReport$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailSendReport` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailSendReport$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSendReport$SelectionSet<_$Scalars>>;
    type pushNotificationSendReport<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pushNotificationSendReport$SelectionSet<_$Scalars>;
    interface pushNotificationSendReport$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pushNotificationSendReport` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pushNotificationSendReport$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pushNotificationSendReport$SelectionSet<_$Scalars>>;
    type smsSendReport<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | smsSendReport$SelectionSet<_$Scalars>;
    interface smsSendReport$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `smsSendReport` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type smsSendReport$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | smsSendReport$SelectionSet<_$Scalars>>;
    type sentMessagesCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sentMessagesCount$SelectionSet<_$Scalars>;
    interface sentMessagesCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sentMessagesCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sentMessagesCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sentMessagesCount$SelectionSet<_$Scalars>>;
    type context<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = context$SelectionSet<_$Scalars>;
    interface context$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$NotificationContext<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `context` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type context$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<context$SelectionSet<_$Scalars>>;
}
export interface NotificationContext<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `title` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    title?: NotificationContext.title$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.title<_$Scalars>>;
    /**
     * Select the `senderId` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderId?: NotificationContext.senderId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.senderId<_$Scalars>>;
    /**
     * Select the `senderFirstName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderFirstName?: NotificationContext.senderFirstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.senderFirstName<_$Scalars>>;
    /**
     * Select the `senderLastName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderLastName?: NotificationContext.senderLastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.senderLastName<_$Scalars>>;
    /**
     * Select the `senderFullName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderFullName?: NotificationContext.senderFullName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.senderFullName<_$Scalars>>;
    /**
     * Select the `senderEmail` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderEmail?: NotificationContext.senderEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.senderEmail<_$Scalars>>;
    /**
     * Select the `senderPhoneNumber` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderPhoneNumber?: NotificationContext.senderPhoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.senderPhoneNumber<_$Scalars>>;
    /**
     * Select the `recipientId` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientId?: NotificationContext.recipientId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.recipientId<_$Scalars>>;
    /**
     * Select the `recipientFirstName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientFirstName?: NotificationContext.recipientFirstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.recipientFirstName<_$Scalars>>;
    /**
     * Select the `recipientLastName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientLastName?: NotificationContext.recipientLastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.recipientLastName<_$Scalars>>;
    /**
     * Select the `recipientFullName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientFullName?: NotificationContext.recipientFullName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.recipientFullName<_$Scalars>>;
    /**
     * Select the `recipientEmail` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientEmail?: NotificationContext.recipientEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.recipientEmail<_$Scalars>>;
    /**
     * Select the `recipientPhoneNumber` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientPhoneNumber?: NotificationContext.recipientPhoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.recipientPhoneNumber<_$Scalars>>;
    /**
     * Select the `displayedUserId` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserId?: NotificationContext.displayedUserId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserId<_$Scalars>>;
    /**
     * Select the `displayedUserFirstName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserFirstName?: NotificationContext.displayedUserFirstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserFirstName<_$Scalars>>;
    /**
     * Select the `displayedUserLastName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserLastName?: NotificationContext.displayedUserLastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserLastName<_$Scalars>>;
    /**
     * Select the `displayedUserFullName` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserFullName?: NotificationContext.displayedUserFullName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserFullName<_$Scalars>>;
    /**
     * Select the `displayedUserEmail` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserEmail?: NotificationContext.displayedUserEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserEmail<_$Scalars>>;
    /**
     * Select the `displayedUserPhoneNumber` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserPhoneNumber?: NotificationContext.displayedUserPhoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserPhoneNumber<_$Scalars>>;
    /**
     * Select the `displayedUserCountry` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserCountry?: NotificationContext.displayedUserCountry$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserCountry<_$Scalars>>;
    /**
     * Select the `displayedUserBusinessOrJobTitle` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayedUserBusinessOrJobTitle?: NotificationContext.displayedUserBusinessOrJobTitle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.displayedUserBusinessOrJobTitle<_$Scalars>>;
    /**
     * Select the `appLink` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    appLink?: NotificationContext.appLink$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.appLink<_$Scalars>>;
    /**
     * Select the `locale` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    locale?: NotificationContext.locale$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.locale<_$Scalars>>;
    /**
     * Select the `textDirection` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textDirection?: NotificationContext.textDirection$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.textDirection<_$Scalars>>;
    /**
     * Select the `confirmToken` field on the `NotificationContext` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    confirmToken?: NotificationContext.confirmToken$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationContext.confirmToken<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: NotificationContext$FragmentInline<_$Scalars> | NotificationContext$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface NotificationContext$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends NotificationContext<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace NotificationContext {
    type title<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>;
    interface title$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `title` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type title$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>>;
    type senderId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderId$SelectionSet<_$Scalars>;
    interface senderId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderId$SelectionSet<_$Scalars>>;
    type senderFirstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFirstName$SelectionSet<_$Scalars>;
    interface senderFirstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderFirstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderFirstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFirstName$SelectionSet<_$Scalars>>;
    type senderLastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderLastName$SelectionSet<_$Scalars>;
    interface senderLastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderLastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderLastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderLastName$SelectionSet<_$Scalars>>;
    type senderFullName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFullName$SelectionSet<_$Scalars>;
    interface senderFullName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderFullName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderFullName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFullName$SelectionSet<_$Scalars>>;
    type senderEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderEmail$SelectionSet<_$Scalars>;
    interface senderEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderEmail$SelectionSet<_$Scalars>>;
    type senderPhoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderPhoneNumber$SelectionSet<_$Scalars>;
    interface senderPhoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderPhoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderPhoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderPhoneNumber$SelectionSet<_$Scalars>>;
    type recipientId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>;
    interface recipientId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>>;
    type recipientFirstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientFirstName$SelectionSet<_$Scalars>;
    interface recipientFirstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientFirstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientFirstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientFirstName$SelectionSet<_$Scalars>>;
    type recipientLastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientLastName$SelectionSet<_$Scalars>;
    interface recipientLastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientLastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientLastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientLastName$SelectionSet<_$Scalars>>;
    type recipientFullName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientFullName$SelectionSet<_$Scalars>;
    interface recipientFullName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientFullName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientFullName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientFullName$SelectionSet<_$Scalars>>;
    type recipientEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientEmail$SelectionSet<_$Scalars>;
    interface recipientEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientEmail$SelectionSet<_$Scalars>>;
    type recipientPhoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientPhoneNumber$SelectionSet<_$Scalars>;
    interface recipientPhoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientPhoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientPhoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientPhoneNumber$SelectionSet<_$Scalars>>;
    type displayedUserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserId$SelectionSet<_$Scalars>;
    interface displayedUserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserId$SelectionSet<_$Scalars>>;
    type displayedUserFirstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserFirstName$SelectionSet<_$Scalars>;
    interface displayedUserFirstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserFirstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserFirstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserFirstName$SelectionSet<_$Scalars>>;
    type displayedUserLastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserLastName$SelectionSet<_$Scalars>;
    interface displayedUserLastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserLastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserLastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserLastName$SelectionSet<_$Scalars>>;
    type displayedUserFullName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserFullName$SelectionSet<_$Scalars>;
    interface displayedUserFullName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserFullName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserFullName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserFullName$SelectionSet<_$Scalars>>;
    type displayedUserEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserEmail$SelectionSet<_$Scalars>;
    interface displayedUserEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserEmail$SelectionSet<_$Scalars>>;
    type displayedUserPhoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserPhoneNumber$SelectionSet<_$Scalars>;
    interface displayedUserPhoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserPhoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserPhoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserPhoneNumber$SelectionSet<_$Scalars>>;
    type displayedUserCountry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserCountry$SelectionSet<_$Scalars>;
    interface displayedUserCountry$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserCountry` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserCountry$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserCountry$SelectionSet<_$Scalars>>;
    type displayedUserBusinessOrJobTitle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserBusinessOrJobTitle$SelectionSet<_$Scalars>;
    interface displayedUserBusinessOrJobTitle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayedUserBusinessOrJobTitle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayedUserBusinessOrJobTitle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayedUserBusinessOrJobTitle$SelectionSet<_$Scalars>>;
    type appLink<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appLink$SelectionSet<_$Scalars>;
    interface appLink$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `appLink` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type appLink$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appLink$SelectionSet<_$Scalars>>;
    type locale<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locale$SelectionSet<_$Scalars>;
    interface locale$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `locale` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type locale$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locale$SelectionSet<_$Scalars>>;
    type textDirection<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textDirection$SelectionSet<_$Scalars>;
    interface textDirection$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textDirection` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textDirection$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textDirection$SelectionSet<_$Scalars>>;
    type confirmToken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | confirmToken$SelectionSet<_$Scalars>;
    interface confirmToken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `confirmToken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type confirmToken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | confirmToken$SelectionSet<_$Scalars>>;
}
export interface Channel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Channel.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Channel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Channel.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Channel` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Channel.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Channel` object. Its type is `ChannelMetadata` (a `OutputObject` kind of type).
     */
    metadata?: Channel.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Channel.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Channel.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Channel.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Channel.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Channel.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Channel.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.deletedBy<_$Scalars>>;
    /**
     * Select the `name` field on the `Channel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: Channel.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.name<_$Scalars>>;
    /**
     * Select the `topic` field on the `Channel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    topic?: Channel.topic$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.topic<_$Scalars>>;
    /**
     * Select the `description` field on the `Channel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Channel.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.description<_$Scalars>>;
    /**
     * Select the `tags` field on the `Channel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    tags?: Channel.tags$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.tags<_$Scalars>>;
    /**
     * Select the `channelType` field on the `Channel` object. Its type is `ChannelType` (a `Enum` kind of type).
     */
    channelType?: Channel.channelType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.channelType<_$Scalars>>;
    /**
     * Select the `statuses` field on the `Channel` object. Its type is `BgChannelStatus` (a `OutputObject` kind of type).
     */
    statuses?: Channel.statuses$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.statuses<_$Scalars>>;
    /**
     * Select the `userIds` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userIds?: Channel.userIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.userIds<_$Scalars>>;
    /**
     * Select the `otherUserId` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    otherUserId?: Channel.otherUserId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.otherUserId<_$Scalars>>;
    /**
     * Select the `pausedAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    pausedAt?: Channel.pausedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.pausedAt<_$Scalars>>;
    /**
     * Select the `pausedBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    pausedBy?: Channel.pausedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.pausedBy<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: Channel.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: Channel.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.suspendedBy<_$Scalars>>;
    /**
     * Select the `lockedAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    lockedAt?: Channel.lockedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.lockedAt<_$Scalars>>;
    /**
     * Select the `lockedBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    lockedBy?: Channel.lockedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.lockedBy<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: Channel.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.archivedAt<_$Scalars>>;
    /**
     * Select the `archivedBy` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    archivedBy?: Channel.archivedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.archivedBy<_$Scalars>>;
    /**
     * Select the `assumedMentorId` field on the `Channel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    assumedMentorId?: Channel.assumedMentorId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.assumedMentorId<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Channel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Channel.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Channel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Channel.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `creator` field on the `Channel` object. Its type is `User` (a `OutputObject` kind of type).
     */
    creator?: Channel.creator$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.creator<_$Scalars>>;
    /**
     * Select the `status` field on the `Channel` object. Its type is `BgChannelStatus` (a `OutputObject` kind of type).
     */
    status?: Channel.status$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.status<_$Scalars>>;
    /**
     * Select the `invitations` field on the `Channel` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    invitations?: Channel.invitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.invitations<_$Scalars>>;
    /**
     * Select the `isArchivedForMe` field on the `Channel` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isArchivedForMe?: Channel.isArchivedForMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.isArchivedForMe<_$Scalars>>;
    /**
     * Select the `latestMessage` field on the `Channel` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    latestMessage?: Channel.latestMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.latestMessage<_$Scalars>>;
    /**
     * Select the `messages` field on the `Channel` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    messages?: Channel.messages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.messages<_$Scalars>>;
    /**
     * Select the `myContacts` field on the `Channel` object. Its type is `Contact` (a `OutputObject` kind of type).
     */
    myContacts?: Channel.myContacts$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.myContacts<_$Scalars>>;
    /**
     * Select the `participants` field on the `Channel` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    participants?: Channel.participants$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.participants<_$Scalars>>;
    /**
     * Select the `pendingInvitations` field on the `Channel` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    pendingInvitations?: Channel.pendingInvitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Channel.pendingInvitations<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Channel$FragmentInline<_$Scalars> | Channel$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Channel$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Channel<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Channel {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type topic<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | topic$SelectionSet<_$Scalars>;
    interface topic$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `topic` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type topic$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | topic$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type tags<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>;
    interface tags$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `tags` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type tags$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>>;
    type channelType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelType$SelectionSet<_$Scalars>;
    interface channelType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelType$SelectionSet<_$Scalars>>;
    type statuses<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = statuses$SelectionSet<_$Scalars>;
    interface statuses$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BgChannelStatus<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `statuses` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type statuses$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<statuses$SelectionSet<_$Scalars>>;
    type userIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>;
    interface userIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>>;
    type otherUserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | otherUserId$SelectionSet<_$Scalars>;
    interface otherUserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `otherUserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type otherUserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | otherUserId$SelectionSet<_$Scalars>>;
    type pausedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedAt$SelectionSet<_$Scalars>;
    interface pausedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pausedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pausedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedAt$SelectionSet<_$Scalars>>;
    type pausedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedBy$SelectionSet<_$Scalars>;
    interface pausedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pausedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pausedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedBy$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type lockedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedAt$SelectionSet<_$Scalars>;
    interface lockedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lockedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lockedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedAt$SelectionSet<_$Scalars>>;
    type lockedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedBy$SelectionSet<_$Scalars>;
    interface lockedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lockedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lockedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedBy$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
    type archivedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedBy$SelectionSet<_$Scalars>;
    interface archivedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedBy$SelectionSet<_$Scalars>>;
    type assumedMentorId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | assumedMentorId$SelectionSet<_$Scalars>;
    interface assumedMentorId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `assumedMentorId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type assumedMentorId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | assumedMentorId$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type creator<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = creator$SelectionSet<_$Scalars>;
    interface creator$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `creator` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type creator$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<creator$SelectionSet<_$Scalars>>;
    type status<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = status$SelectionSet<_$Scalars>;
    interface status$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BgChannelStatus<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `status` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type status$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<status$SelectionSet<_$Scalars>>;
    type invitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = invitations$SelectionSet<_$Scalars>;
    interface invitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `invitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type invitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<invitations$SelectionSet<_$Scalars>>;
    type isArchivedForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isArchivedForMe$SelectionSet<_$Scalars>;
    interface isArchivedForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isArchivedForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isArchivedForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isArchivedForMe$SelectionSet<_$Scalars>>;
    type latestMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = latestMessage$SelectionSet<_$Scalars>;
    interface latestMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `latestMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<latestMessage$SelectionSet<_$Scalars>>;
    type messages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = messages$SelectionSet<_$Scalars>;
    interface messages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `messages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<messages$SelectionSet<_$Scalars>>;
    type myContacts<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myContacts$SelectionSet<_$Scalars>;
    interface myContacts$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Contact<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myContacts` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myContacts$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myContacts$SelectionSet<_$Scalars>>;
    type participants<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = participants$SelectionSet<_$Scalars>;
    interface participants$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `participants` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type participants$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<participants$SelectionSet<_$Scalars>>;
    type pendingInvitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pendingInvitations$SelectionSet<_$Scalars>;
    interface pendingInvitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pendingInvitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pendingInvitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pendingInvitations$SelectionSet<_$Scalars>>;
}
export interface ChannelMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `updatedAt` field on the `ChannelMetadata` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelMetadata.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMetadata.updatedAt<_$Scalars>>;
    /**
     * Select the `channelInvitationAccepted` field on the `ChannelMetadata` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    channelInvitationAccepted?: ChannelMetadata.channelInvitationAccepted$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMetadata.channelInvitationAccepted<_$Scalars>>;
    /**
     * Select the `messagesSentByCreatorCount` field on the `ChannelMetadata` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    messagesSentByCreatorCount?: ChannelMetadata.messagesSentByCreatorCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMetadata.messagesSentByCreatorCount<_$Scalars>>;
    /**
     * Select the `messagesSentByFirstParticipantCount` field on the `ChannelMetadata` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    messagesSentByFirstParticipantCount?: ChannelMetadata.messagesSentByFirstParticipantCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMetadata.messagesSentByFirstParticipantCount<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelMetadata$FragmentInline<_$Scalars> | ChannelMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelMetadata {
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type channelInvitationAccepted<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelInvitationAccepted$SelectionSet<_$Scalars>;
    interface channelInvitationAccepted$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelInvitationAccepted` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelInvitationAccepted$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelInvitationAccepted$SelectionSet<_$Scalars>>;
    type messagesSentByCreatorCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messagesSentByCreatorCount$SelectionSet<_$Scalars>;
    interface messagesSentByCreatorCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messagesSentByCreatorCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messagesSentByCreatorCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messagesSentByCreatorCount$SelectionSet<_$Scalars>>;
    type messagesSentByFirstParticipantCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messagesSentByFirstParticipantCount$SelectionSet<_$Scalars>;
    interface messagesSentByFirstParticipantCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messagesSentByFirstParticipantCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messagesSentByFirstParticipantCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messagesSentByFirstParticipantCount$SelectionSet<_$Scalars>>;
}
export interface BgChannelStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userId` field on the `BgChannelStatus` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: BgChannelStatus.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelStatus.userId<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `BgChannelStatus` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: BgChannelStatus.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelStatus.archivedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: BgChannelStatus$FragmentInline<_$Scalars> | BgChannelStatus$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface BgChannelStatus$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends BgChannelStatus<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace BgChannelStatus {
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
}
export interface ChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ChannelInvitation.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ChannelInvitation.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ChannelInvitation` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ChannelInvitation.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ChannelInvitation` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ChannelInvitation.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ChannelInvitation.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ChannelInvitation.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelInvitation.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ChannelInvitation.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ChannelInvitation.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ChannelInvitation.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.deletedBy<_$Scalars>>;
    /**
     * Select the `channelId` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: ChannelInvitation.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.channelId<_$Scalars>>;
    /**
     * Select the `recipientId` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    recipientId?: ChannelInvitation.recipientId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.recipientId<_$Scalars>>;
    /**
     * Select the `channelName` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    channelName?: ChannelInvitation.channelName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.channelName<_$Scalars>>;
    /**
     * Select the `channelTopic` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    channelTopic?: ChannelInvitation.channelTopic$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.channelTopic<_$Scalars>>;
    /**
     * Select the `messageText` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: ChannelInvitation.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.messageText<_$Scalars>>;
    /**
     * Select the `autoAccept` field on the `ChannelInvitation` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    autoAccept?: ChannelInvitation.autoAccept$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.autoAccept<_$Scalars>>;
    /**
     * Select the `declineReasonTextId` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    declineReasonTextId?: ChannelInvitation.declineReasonTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.declineReasonTextId<_$Scalars>>;
    /**
     * Select the `dismissedFromInboxBySenderAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    dismissedFromInboxBySenderAt?: ChannelInvitation.dismissedFromInboxBySenderAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.dismissedFromInboxBySenderAt<_$Scalars>>;
    /**
     * Select the `dismissedFromInboxByRecipientAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    dismissedFromInboxByRecipientAt?: ChannelInvitation.dismissedFromInboxByRecipientAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.dismissedFromInboxByRecipientAt<_$Scalars>>;
    /**
     * Select the `readByRecipientAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    readByRecipientAt?: ChannelInvitation.readByRecipientAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.readByRecipientAt<_$Scalars>>;
    /**
     * Select the `status` field on the `ChannelInvitation` object. Its type is `ChannelInvitationStatus` (a `Enum` kind of type).
     */
    status?: ChannelInvitation.status$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.status<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: ChannelInvitation.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: ChannelInvitation.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.suspendedBy<_$Scalars>>;
    /**
     * Select the `userSearchId` field on the `ChannelInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userSearchId?: ChannelInvitation.userSearchId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.userSearchId<_$Scalars>>;
    /**
     * Select the `searchRank` field on the `ChannelInvitation` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    searchRank?: ChannelInvitation.searchRank$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.searchRank<_$Scalars>>;
    /**
     * Select the `mm2ConversationId` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2ConversationId?: ChannelInvitation.mm2ConversationId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.mm2ConversationId<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ChannelInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ChannelInvitation.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ChannelInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ChannelInvitation.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `channel` field on the `ChannelInvitation` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    channel?: ChannelInvitation.channel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.channel<_$Scalars>>;
    /**
     * Select the `declineReason` field on the `ChannelInvitation` object. Its type is `DeclineChannelInvitationReason` (a `OutputObject` kind of type).
     */
    declineReason?: ChannelInvitation.declineReason$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.declineReason<_$Scalars>>;
    /**
     * Select the `recipient` field on the `ChannelInvitation` object. Its type is `User` (a `OutputObject` kind of type).
     */
    recipient?: ChannelInvitation.recipient$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.recipient<_$Scalars>>;
    /**
     * Select the `sender` field on the `ChannelInvitation` object. Its type is `User` (a `OutputObject` kind of type).
     */
    sender?: ChannelInvitation.sender$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInvitation.sender<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelInvitation$FragmentInline<_$Scalars> | ChannelInvitation$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelInvitation$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelInvitation<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelInvitation {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type recipientId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>;
    interface recipientId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>>;
    type channelName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelName$SelectionSet<_$Scalars>;
    interface channelName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelName$SelectionSet<_$Scalars>>;
    type channelTopic<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelTopic$SelectionSet<_$Scalars>;
    interface channelTopic$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelTopic` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelTopic$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelTopic$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type autoAccept<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | autoAccept$SelectionSet<_$Scalars>;
    interface autoAccept$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `autoAccept` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type autoAccept$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | autoAccept$SelectionSet<_$Scalars>>;
    type declineReasonTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | declineReasonTextId$SelectionSet<_$Scalars>;
    interface declineReasonTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `declineReasonTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type declineReasonTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | declineReasonTextId$SelectionSet<_$Scalars>>;
    type dismissedFromInboxBySenderAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedFromInboxBySenderAt$SelectionSet<_$Scalars>;
    interface dismissedFromInboxBySenderAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dismissedFromInboxBySenderAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissedFromInboxBySenderAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedFromInboxBySenderAt$SelectionSet<_$Scalars>>;
    type dismissedFromInboxByRecipientAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedFromInboxByRecipientAt$SelectionSet<_$Scalars>;
    interface dismissedFromInboxByRecipientAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dismissedFromInboxByRecipientAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissedFromInboxByRecipientAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedFromInboxByRecipientAt$SelectionSet<_$Scalars>>;
    type readByRecipientAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | readByRecipientAt$SelectionSet<_$Scalars>;
    interface readByRecipientAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `readByRecipientAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type readByRecipientAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | readByRecipientAt$SelectionSet<_$Scalars>>;
    type status<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | status$SelectionSet<_$Scalars>;
    interface status$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `status` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type status$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | status$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type userSearchId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userSearchId$SelectionSet<_$Scalars>;
    interface userSearchId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userSearchId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userSearchId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userSearchId$SelectionSet<_$Scalars>>;
    type searchRank<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | searchRank$SelectionSet<_$Scalars>;
    interface searchRank$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `searchRank` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type searchRank$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | searchRank$SelectionSet<_$Scalars>>;
    type mm2ConversationId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ConversationId$SelectionSet<_$Scalars>;
    interface mm2ConversationId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2ConversationId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2ConversationId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ConversationId$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type channel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channel$SelectionSet<_$Scalars>;
    interface channel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channel$SelectionSet<_$Scalars>>;
    type declineReason<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = declineReason$SelectionSet<_$Scalars>;
    interface declineReason$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$DeclineChannelInvitationReason<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `declineReason` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type declineReason$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<declineReason$SelectionSet<_$Scalars>>;
    type recipient<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = recipient$SelectionSet<_$Scalars>;
    interface recipient$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `recipient` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipient$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<recipient$SelectionSet<_$Scalars>>;
    type sender<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = sender$SelectionSet<_$Scalars>;
    interface sender$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `sender` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sender$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<sender$SelectionSet<_$Scalars>>;
}
export interface DeclineChannelInvitationReason<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `DeclineChannelInvitationReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: DeclineChannelInvitationReason.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: DeclineChannelInvitationReason.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `DeclineChannelInvitationReason` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: DeclineChannelInvitationReason.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `DeclineChannelInvitationReason` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: DeclineChannelInvitationReason.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `DeclineChannelInvitationReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: DeclineChannelInvitationReason.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `DeclineChannelInvitationReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: DeclineChannelInvitationReason.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `DeclineChannelInvitationReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: DeclineChannelInvitationReason.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `DeclineChannelInvitationReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: DeclineChannelInvitationReason.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `DeclineChannelInvitationReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: DeclineChannelInvitationReason.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `DeclineChannelInvitationReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: DeclineChannelInvitationReason.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: DeclineChannelInvitationReason.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: DeclineChannelInvitationReason.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `DeclineChannelInvitationReason` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: DeclineChannelInvitationReason.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `DeclineChannelInvitationReason` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: DeclineChannelInvitationReason.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: DeclineChannelInvitationReason.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: DeclineChannelInvitationReason.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `DeclineChannelInvitationReason` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: DeclineChannelInvitationReason.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: DeclineChannelInvitationReason.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: DeclineChannelInvitationReason.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: DeclineChannelInvitationReason.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `DeclineChannelInvitationReason` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: DeclineChannelInvitationReason.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: DeclineChannelInvitationReason.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: DeclineChannelInvitationReason.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `DeclineChannelInvitationReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: DeclineChannelInvitationReason.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: DeclineChannelInvitationReason.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `DeclineChannelInvitationReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: DeclineChannelInvitationReason.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `DeclineChannelInvitationReason` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: DeclineChannelInvitationReason.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `DeclineChannelInvitationReason` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: DeclineChannelInvitationReason.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<DeclineChannelInvitationReason.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: DeclineChannelInvitationReason$FragmentInline<_$Scalars> | DeclineChannelInvitationReason$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface DeclineChannelInvitationReason$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends DeclineChannelInvitationReason<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace DeclineChannelInvitationReason {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface ChannelMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ChannelMessage.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ChannelMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ChannelMessage.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ChannelMessage` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ChannelMessage.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ChannelMessage` object. Its type is `ChannelMessageMetadata` (a `OutputObject` kind of type).
     */
    metadata?: ChannelMessage.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ChannelMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ChannelMessage.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ChannelMessage.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ChannelMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelMessage.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ChannelMessage.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ChannelMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ChannelMessage.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ChannelMessage.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.deletedBy<_$Scalars>>;
    /**
     * Select the `channelId` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: ChannelMessage.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.channelId<_$Scalars>>;
    /**
     * Select the `replyToMessageId` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    replyToMessageId?: ChannelMessage.replyToMessageId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.replyToMessageId<_$Scalars>>;
    /**
     * Select the `channelMessageType` field on the `ChannelMessage` object. Its type is `ChannelMessageType` (a `Enum` kind of type).
     */
    channelMessageType?: ChannelMessage.channelMessageType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.channelMessageType<_$Scalars>>;
    /**
     * Select the `messageText` field on the `ChannelMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: ChannelMessage.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.messageText<_$Scalars>>;
    /**
     * Select the `statuses` field on the `ChannelMessage` object. Its type is `ChannelMessageStatus` (a `OutputObject` kind of type).
     */
    statuses?: ChannelMessage.statuses$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.statuses<_$Scalars>>;
    /**
     * Select the `editedAt` field on the `ChannelMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    editedAt?: ChannelMessage.editedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.editedAt<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `ChannelMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: ChannelMessage.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `ChannelMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: ChannelMessage.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.suspendedBy<_$Scalars>>;
    /**
     * Select the `mm2ConversationId` field on the `ChannelMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2ConversationId?: ChannelMessage.mm2ConversationId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.mm2ConversationId<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ChannelMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ChannelMessage.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ChannelMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ChannelMessage.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `channel` field on the `ChannelMessage` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    channel?: ChannelMessage.channel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.channel<_$Scalars>>;
    /**
     * Select the `sender` field on the `ChannelMessage` object. Its type is `User` (a `OutputObject` kind of type).
     */
    sender?: ChannelMessage.sender$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessage.sender<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelMessage$FragmentInline<_$Scalars> | ChannelMessage$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelMessage$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelMessage<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelMessage {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessageMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type replyToMessageId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | replyToMessageId$SelectionSet<_$Scalars>;
    interface replyToMessageId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `replyToMessageId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type replyToMessageId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | replyToMessageId$SelectionSet<_$Scalars>>;
    type channelMessageType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelMessageType$SelectionSet<_$Scalars>;
    interface channelMessageType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelMessageType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelMessageType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelMessageType$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type statuses<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = statuses$SelectionSet<_$Scalars>;
    interface statuses$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessageStatus<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `statuses` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type statuses$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<statuses$SelectionSet<_$Scalars>>;
    type editedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | editedAt$SelectionSet<_$Scalars>;
    interface editedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `editedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type editedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | editedAt$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type mm2ConversationId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ConversationId$SelectionSet<_$Scalars>;
    interface mm2ConversationId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2ConversationId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2ConversationId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ConversationId$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type channel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channel$SelectionSet<_$Scalars>;
    interface channel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channel$SelectionSet<_$Scalars>>;
    type sender<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = sender$SelectionSet<_$Scalars>;
    interface sender$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `sender` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sender$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<sender$SelectionSet<_$Scalars>>;
}
export interface ChannelMessageMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `updatedAt` field on the `ChannelMessageMetadata` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelMessageMetadata.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageMetadata.updatedAt<_$Scalars>>;
    /**
     * Select the `senderUserHandle` field on the `ChannelMessageMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderUserHandle?: ChannelMessageMetadata.senderUserHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageMetadata.senderUserHandle<_$Scalars>>;
    /**
     * Select the `senderFirstName` field on the `ChannelMessageMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderFirstName?: ChannelMessageMetadata.senderFirstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageMetadata.senderFirstName<_$Scalars>>;
    /**
     * Select the `senderLastName` field on the `ChannelMessageMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderLastName?: ChannelMessageMetadata.senderLastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageMetadata.senderLastName<_$Scalars>>;
    /**
     * Select the `senderAvatarUrl` field on the `ChannelMessageMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderAvatarUrl?: ChannelMessageMetadata.senderAvatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageMetadata.senderAvatarUrl<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelMessageMetadata$FragmentInline<_$Scalars> | ChannelMessageMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelMessageMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelMessageMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelMessageMetadata {
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type senderUserHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderUserHandle$SelectionSet<_$Scalars>;
    interface senderUserHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderUserHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderUserHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderUserHandle$SelectionSet<_$Scalars>>;
    type senderFirstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFirstName$SelectionSet<_$Scalars>;
    interface senderFirstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderFirstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderFirstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFirstName$SelectionSet<_$Scalars>>;
    type senderLastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderLastName$SelectionSet<_$Scalars>;
    interface senderLastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderLastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderLastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderLastName$SelectionSet<_$Scalars>>;
    type senderAvatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderAvatarUrl$SelectionSet<_$Scalars>;
    interface senderAvatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderAvatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderAvatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderAvatarUrl$SelectionSet<_$Scalars>>;
}
export interface ChannelMessageStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userId` field on the `ChannelMessageStatus` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: ChannelMessageStatus.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageStatus.userId<_$Scalars>>;
    /**
     * Select the `isInArchivedChannel` field on the `ChannelMessageStatus` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isInArchivedChannel?: ChannelMessageStatus.isInArchivedChannel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageStatus.isInArchivedChannel<_$Scalars>>;
    /**
     * Select the `receivedAt` field on the `ChannelMessageStatus` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    receivedAt?: ChannelMessageStatus.receivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageStatus.receivedAt<_$Scalars>>;
    /**
     * Select the `seenAt` field on the `ChannelMessageStatus` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    seenAt?: ChannelMessageStatus.seenAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelMessageStatus.seenAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelMessageStatus$FragmentInline<_$Scalars> | ChannelMessageStatus$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelMessageStatus$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelMessageStatus<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelMessageStatus {
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type isInArchivedChannel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isInArchivedChannel$SelectionSet<_$Scalars>;
    interface isInArchivedChannel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isInArchivedChannel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isInArchivedChannel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isInArchivedChannel$SelectionSet<_$Scalars>>;
    type receivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | receivedAt$SelectionSet<_$Scalars>;
    interface receivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `receivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type receivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | receivedAt$SelectionSet<_$Scalars>>;
    type seenAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seenAt$SelectionSet<_$Scalars>;
    interface seenAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seenAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seenAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seenAt$SelectionSet<_$Scalars>>;
}
export interface Contact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Contact` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Contact.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Contact` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Contact.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Contact` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Contact.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Contact` object. Its type is `ContactMetadata` (a `OutputObject` kind of type).
     */
    metadata?: Contact.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Contact` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Contact.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Contact` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Contact.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Contact` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Contact.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Contact` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Contact.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Contact` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Contact.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Contact` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Contact.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `Contact` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: Contact.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.userId<_$Scalars>>;
    /**
     * Select the `channelId` field on the `Contact` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: Contact.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.channelId<_$Scalars>>;
    /**
     * Select the `nickname` field on the `Contact` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    nickname?: Contact.nickname$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.nickname<_$Scalars>>;
    /**
     * Select the `typeTextIds` field on the `Contact` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    typeTextIds?: Contact.typeTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.typeTextIds<_$Scalars>>;
    /**
     * Select the `favorite` field on the `Contact` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    favorite?: Contact.favorite$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.favorite<_$Scalars>>;
    /**
     * Select the `notes` field on the `Contact` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    notes?: Contact.notes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.notes<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `Contact` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: Contact.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.archivedAt<_$Scalars>>;
    /**
     * Select the `user` field on the `Contact` object. Its type is `User` (a `OutputObject` kind of type).
     */
    user?: Contact.user$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.user<_$Scalars>>;
    /**
     * Select the `contactTypes` field on the `Contact` object. Its type is `ContactType` (a `OutputObject` kind of type).
     */
    contactTypes?: Contact.contactTypes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Contact.contactTypes<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Contact$FragmentInline<_$Scalars> | Contact$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Contact$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Contact<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Contact {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContactMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type nickname<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | nickname$SelectionSet<_$Scalars>;
    interface nickname$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `nickname` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type nickname$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | nickname$SelectionSet<_$Scalars>>;
    type typeTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | typeTextIds$SelectionSet<_$Scalars>;
    interface typeTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `typeTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type typeTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | typeTextIds$SelectionSet<_$Scalars>>;
    type favorite<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | favorite$SelectionSet<_$Scalars>;
    interface favorite$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `favorite` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type favorite$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | favorite$SelectionSet<_$Scalars>>;
    type notes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notes$SelectionSet<_$Scalars>;
    interface notes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notes$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
    type user<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = user$SelectionSet<_$Scalars>;
    interface user$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `user` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type user$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<user$SelectionSet<_$Scalars>>;
    type contactTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = contactTypes$SelectionSet<_$Scalars>;
    interface contactTypes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContactType<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `contactTypes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contactTypes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<contactTypes$SelectionSet<_$Scalars>>;
}
export interface ContactMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `updatedAt` field on the `ContactMetadata` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ContactMetadata.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactMetadata.updatedAt<_$Scalars>>;
    /**
     * Select the `firstName` field on the `ContactMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: ContactMetadata.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactMetadata.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `ContactMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: ContactMetadata.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactMetadata.lastName<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `ContactMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: ContactMetadata.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactMetadata.userHandle<_$Scalars>>;
    /**
     * Select the `avatarUrl` field on the `ContactMetadata` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    avatarUrl?: ContactMetadata.avatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactMetadata.avatarUrl<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ContactMetadata$FragmentInline<_$Scalars> | ContactMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ContactMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ContactMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ContactMetadata {
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type avatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>;
    interface avatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `avatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>>;
}
export interface ContactType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ContactType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ContactType.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ContactType.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ContactType` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ContactType.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ContactType` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ContactType.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ContactType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ContactType.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ContactType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ContactType.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ContactType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ContactType.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ContactType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ContactType.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ContactType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ContactType.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ContactType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ContactType.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: ContactType.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: ContactType.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `ContactType` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: ContactType.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `ContactType` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: ContactType.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: ContactType.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: ContactType.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `ContactType` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: ContactType.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: ContactType.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: ContactType.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: ContactType.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `ContactType` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: ContactType.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ContactType.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: ContactType.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ContactType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ContactType.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: ContactType.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `ContactType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: ContactType.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `ContactType` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: ContactType.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `ContactType` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: ContactType.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactType.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ContactType$FragmentInline<_$Scalars> | ContactType$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ContactType$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ContactType<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ContactType {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface ChannelParticipant<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ChannelParticipant.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ChannelParticipant` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ChannelParticipant.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ChannelParticipant` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ChannelParticipant.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ChannelParticipant` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ChannelParticipant.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ChannelParticipant` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ChannelParticipant.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ChannelParticipant.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ChannelParticipant` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelParticipant.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ChannelParticipant.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ChannelParticipant` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ChannelParticipant.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ChannelParticipant.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.deletedBy<_$Scalars>>;
    /**
     * Select the `channelId` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: ChannelParticipant.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.channelId<_$Scalars>>;
    /**
     * Select the `userId` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: ChannelParticipant.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.userId<_$Scalars>>;
    /**
     * Select the `userInfo` field on the `ChannelParticipant` object. Its type is `BgChannelParticipantUserInfo` (a `OutputObject` kind of type).
     */
    userInfo?: ChannelParticipant.userInfo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.userInfo<_$Scalars>>;
    /**
     * Select the `invitedBy` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    invitedBy?: ChannelParticipant.invitedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.invitedBy<_$Scalars>>;
    /**
     * Select the `channelName` field on the `ChannelParticipant` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    channelName?: ChannelParticipant.channelName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.channelName<_$Scalars>>;
    /**
     * Select the `role` field on the `ChannelParticipant` object. Its type is `ChannelParticipantRole` (a `Enum` kind of type).
     */
    role?: ChannelParticipant.role$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.role<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `ChannelParticipant` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: ChannelParticipant.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `ChannelParticipant` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: ChannelParticipant.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.suspendedBy<_$Scalars>>;
    /**
     * Select the `channel` field on the `ChannelParticipant` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    channel?: ChannelParticipant.channel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.channel<_$Scalars>>;
    /**
     * Select the `myContact` field on the `ChannelParticipant` object. Its type is `Contact` (a `OutputObject` kind of type).
     */
    myContact?: ChannelParticipant.myContact$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.myContact<_$Scalars>>;
    /**
     * Select the `user` field on the `ChannelParticipant` object. Its type is `UserListItem` (a `OutputObject` kind of type).
     */
    user?: ChannelParticipant.user$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelParticipant.user<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelParticipant$FragmentInline<_$Scalars> | ChannelParticipant$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelParticipant$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelParticipant<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelParticipant {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type userInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userInfo$SelectionSet<_$Scalars>;
    interface userInfo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BgChannelParticipantUserInfo<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userInfo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userInfo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userInfo$SelectionSet<_$Scalars>>;
    type invitedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | invitedBy$SelectionSet<_$Scalars>;
    interface invitedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `invitedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type invitedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | invitedBy$SelectionSet<_$Scalars>>;
    type channelName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelName$SelectionSet<_$Scalars>;
    interface channelName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelName$SelectionSet<_$Scalars>>;
    type role<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | role$SelectionSet<_$Scalars>;
    interface role$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `role` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type role$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | role$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type channel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channel$SelectionSet<_$Scalars>;
    interface channel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channel$SelectionSet<_$Scalars>>;
    type myContact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myContact$SelectionSet<_$Scalars>;
    interface myContact$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Contact<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myContact` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myContact$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myContact$SelectionSet<_$Scalars>>;
    type user<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = user$SelectionSet<_$Scalars>;
    interface user$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserListItem<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `user` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type user$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<user$SelectionSet<_$Scalars>>;
}
export interface BgChannelParticipantUserInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userHandle` field on the `BgChannelParticipantUserInfo` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: BgChannelParticipantUserInfo.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelParticipantUserInfo.userHandle<_$Scalars>>;
    /**
     * Select the `firstName` field on the `BgChannelParticipantUserInfo` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: BgChannelParticipantUserInfo.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelParticipantUserInfo.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `BgChannelParticipantUserInfo` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: BgChannelParticipantUserInfo.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelParticipantUserInfo.lastName<_$Scalars>>;
    /**
     * Select the `avatarUrl` field on the `BgChannelParticipantUserInfo` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    avatarUrl?: BgChannelParticipantUserInfo.avatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelParticipantUserInfo.avatarUrl<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: BgChannelParticipantUserInfo$FragmentInline<_$Scalars> | BgChannelParticipantUserInfo$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface BgChannelParticipantUserInfo$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends BgChannelParticipantUserInfo<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace BgChannelParticipantUserInfo {
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type avatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>;
    interface avatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `avatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>>;
}
export interface UserListItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UserListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UserListItem.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.id<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserListItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.createdAt<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UserListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserListItem.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.updatedAt<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UserListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UserListItem.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.deletedAt<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: UserListItem.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.userHandle<_$Scalars>>;
    /**
     * Select the `firstName` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: UserListItem.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: UserListItem.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.lastName<_$Scalars>>;
    /**
     * Select the `avatarUrl` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    avatarUrl?: UserListItem.avatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.avatarUrl<_$Scalars>>;
    /**
     * Select the `genderTextId` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    genderTextId?: UserListItem.genderTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.genderTextId<_$Scalars>>;
    /**
     * Select the `websites` field on the `UserListItem` object. Its type is `LabeledStringValue` (a `OutputObject` kind of type).
     */
    websites?: UserListItem.websites$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.websites<_$Scalars>>;
    /**
     * Select the `preferredLanguageTextId` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    preferredLanguageTextId?: UserListItem.preferredLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.preferredLanguageTextId<_$Scalars>>;
    /**
     * Select the `spokenLanguagesTextIds` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    spokenLanguagesTextIds?: UserListItem.spokenLanguagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.spokenLanguagesTextIds<_$Scalars>>;
    /**
     * Select the `countryOfResidenceTextId` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryOfResidenceTextId?: UserListItem.countryOfResidenceTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.countryOfResidenceTextId<_$Scalars>>;
    /**
     * Select the `regionOfResidence` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    regionOfResidence?: UserListItem.regionOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.regionOfResidence<_$Scalars>>;
    /**
     * Select the `cityOfResidence` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    cityOfResidence?: UserListItem.cityOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.cityOfResidence<_$Scalars>>;
    /**
     * Select the `timezone` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    timezone?: UserListItem.timezone$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.timezone<_$Scalars>>;
    /**
     * Select the `roles` field on the `UserListItem` object. Its type is `UserRole` (a `Enum` kind of type).
     */
    roles?: UserListItem.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.roles<_$Scalars>>;
    /**
     * Select the `discoverable` field on the `UserListItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    discoverable?: UserListItem.discoverable$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.discoverable<_$Scalars>>;
    /**
     * Select the `trustLevel` field on the `UserListItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    trustLevel?: UserListItem.trustLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.trustLevel<_$Scalars>>;
    /**
     * Select the `userBlocks` field on the `UserListItem` object. Its type is `UserBlock` (a `OutputObject` kind of type).
     */
    userBlocks?: UserListItem.userBlocks$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.userBlocks<_$Scalars>>;
    /**
     * Select the `latestActivityAt` field on the `UserListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    latestActivityAt?: UserListItem.latestActivityAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.latestActivityAt<_$Scalars>>;
    /**
     * Select the `inactivatedAt` field on the `UserListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    inactivatedAt?: UserListItem.inactivatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.inactivatedAt<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `UserListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: UserListItem.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.suspendedAt<_$Scalars>>;
    /**
     * Select the `seeksHelp` field on the `UserListItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    seeksHelp?: UserListItem.seeksHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.seeksHelp<_$Scalars>>;
    /**
     * Select the `offersHelp` field on the `UserListItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    offersHelp?: UserListItem.offersHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.offersHelp<_$Scalars>>;
    /**
     * Select the `yearsManagementExperience` field on the `UserListItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsManagementExperience?: UserListItem.yearsManagementExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.yearsManagementExperience<_$Scalars>>;
    /**
     * Select the `yearsOwnershipExperience` field on the `UserListItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsOwnershipExperience?: UserListItem.yearsOwnershipExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.yearsOwnershipExperience<_$Scalars>>;
    /**
     * Select the `academicExperiences` field on the `UserListItem` object. Its type is `AcademicExperience` (a `OutputObject` kind of type).
     */
    academicExperiences?: UserListItem.academicExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.academicExperiences<_$Scalars>>;
    /**
     * Select the `businessExperiences` field on the `UserListItem` object. Its type is `BusinessExperience` (a `OutputObject` kind of type).
     */
    businessExperiences?: UserListItem.businessExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.businessExperiences<_$Scalars>>;
    /**
     * Select the `isOnVacation` field on the `UserListItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isOnVacation?: UserListItem.isOnVacation$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.isOnVacation<_$Scalars>>;
    /**
     * Select the `mentor` field on the `UserListItem` object. Its type is `MentorsGroupMembership` (a `OutputObject` kind of type).
     */
    mentor?: UserListItem.mentor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.mentor<_$Scalars>>;
    /**
     * Select the `mentee` field on the `UserListItem` object. Its type is `MenteesGroupMembership` (a `OutputObject` kind of type).
     */
    mentee?: UserListItem.mentee$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.mentee<_$Scalars>>;
    /**
     * Select the `groupMemberships` field on the `UserListItem` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    groupMemberships?: UserListItem.groupMemberships$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.groupMemberships<_$Scalars>>;
    /**
     * Select the `companies` field on the `UserListItem` object. Its type is `Company` (a `OutputObject` kind of type).
     */
    companies?: UserListItem.companies$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.companies<_$Scalars>>;
    /**
     * Select the `countryOfOrigin` field on the `UserListItem` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfOrigin?: UserListItem.countryOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.countryOfOrigin<_$Scalars>>;
    /**
     * Select the `countryOfResidence` field on the `UserListItem` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfResidence?: UserListItem.countryOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.countryOfResidence<_$Scalars>>;
    /**
     * Select the `educationLevel` field on the `UserListItem` object. Its type is `EducationLevel` (a `OutputObject` kind of type).
     */
    educationLevel?: UserListItem.educationLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.educationLevel<_$Scalars>>;
    /**
     * Select the `endorsements` field on the `UserListItem` object. Its type is `EndorsementWithTypes` (a `OutputObject` kind of type).
     */
    endorsements?: UserListItem.endorsements$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.endorsements<_$Scalars>>;
    /**
     * Select the `groups` field on the `UserListItem` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    groups?: UserListItem.groups$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.groups<_$Scalars>>;
    /**
     * Select the `profileCompletionPercentage` field on the `UserListItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    profileCompletionPercentage?: UserListItem.profileCompletionPercentage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.profileCompletionPercentage<_$Scalars>>;
    /**
     * Select the `profileRole` field on the `UserListItem` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    profileRole?: UserListItem.profileRole$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.profileRole<_$Scalars>>;
    /**
     * Select the `pronouns` field on the `UserListItem` object. Its type is `Pronoun` (a `OutputObject` kind of type).
     */
    pronouns?: UserListItem.pronouns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.pronouns<_$Scalars>>;
    /**
     * Select the `pronounsDisplay` field on the `UserListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pronounsDisplay?: UserListItem.pronounsDisplay$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserListItem.pronounsDisplay<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserListItem$FragmentInline<_$Scalars> | UserListItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserListItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserListItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserListItem {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type avatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>;
    interface avatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `avatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>>;
    type genderTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>;
    interface genderTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genderTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genderTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>>;
    type websites<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = websites$SelectionSet<_$Scalars>;
    interface websites$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$LabeledStringValue<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `websites` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type websites$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<websites$SelectionSet<_$Scalars>>;
    type preferredLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>;
    interface preferredLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `preferredLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>>;
    type spokenLanguagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>;
    interface spokenLanguagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `spokenLanguagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type spokenLanguagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>>;
    type countryOfResidenceTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>;
    interface countryOfResidenceTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryOfResidenceTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidenceTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>>;
    type regionOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>;
    interface regionOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `regionOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type regionOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>>;
    type cityOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>;
    interface cityOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `cityOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type cityOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>>;
    type timezone<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>;
    interface timezone$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timezone` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timezone$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type discoverable<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>;
    interface discoverable$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `discoverable` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type discoverable$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>>;
    type trustLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>;
    interface trustLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trustLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trustLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>>;
    type userBlocks<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userBlocks$SelectionSet<_$Scalars>;
    interface userBlocks$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserBlock<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userBlocks` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userBlocks$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userBlocks$SelectionSet<_$Scalars>>;
    type latestActivityAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>;
    interface latestActivityAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `latestActivityAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestActivityAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>>;
    type inactivatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>;
    interface inactivatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inactivatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inactivatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type seeksHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>;
    interface seeksHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seeksHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seeksHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>>;
    type offersHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>;
    interface offersHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `offersHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type offersHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>>;
    type yearsManagementExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>;
    interface yearsManagementExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsManagementExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsManagementExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>>;
    type yearsOwnershipExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>;
    interface yearsOwnershipExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsOwnershipExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsOwnershipExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>>;
    type academicExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = academicExperiences$SelectionSet<_$Scalars>;
    interface academicExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AcademicExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `academicExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type academicExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<academicExperiences$SelectionSet<_$Scalars>>;
    type businessExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = businessExperiences$SelectionSet<_$Scalars>;
    interface businessExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BusinessExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `businessExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<businessExperiences$SelectionSet<_$Scalars>>;
    type isOnVacation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>;
    interface isOnVacation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isOnVacation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isOnVacation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>>;
    type mentor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentor$SelectionSet<_$Scalars>;
    interface mentor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MentorsGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentor$SelectionSet<_$Scalars>>;
    type mentee<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentee$SelectionSet<_$Scalars>;
    interface mentee$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MenteesGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentee` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentee$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentee$SelectionSet<_$Scalars>>;
    type groupMemberships<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupMemberships$SelectionSet<_$Scalars>;
    interface groupMemberships$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupMemberships` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupMemberships$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupMemberships$SelectionSet<_$Scalars>>;
    type companies<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = companies$SelectionSet<_$Scalars>;
    interface companies$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Company<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `companies` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companies$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<companies$SelectionSet<_$Scalars>>;
    type countryOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfOrigin$SelectionSet<_$Scalars>;
    interface countryOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfOrigin$SelectionSet<_$Scalars>>;
    type countryOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfResidence$SelectionSet<_$Scalars>;
    interface countryOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfResidence$SelectionSet<_$Scalars>>;
    type educationLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = educationLevel$SelectionSet<_$Scalars>;
    interface educationLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EducationLevel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `educationLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type educationLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<educationLevel$SelectionSet<_$Scalars>>;
    type endorsements<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = endorsements$SelectionSet<_$Scalars>;
    interface endorsements$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EndorsementWithTypes<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `endorsements` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endorsements$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<endorsements$SelectionSet<_$Scalars>>;
    type groups<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groups$SelectionSet<_$Scalars>;
    interface groups$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groups` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groups$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groups$SelectionSet<_$Scalars>>;
    type profileCompletionPercentage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>;
    interface profileCompletionPercentage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileCompletionPercentage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileCompletionPercentage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>>;
    type profileRole<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>;
    interface profileRole$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileRole` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileRole$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>>;
    type pronouns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pronouns$SelectionSet<_$Scalars>;
    interface pronouns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Pronoun<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pronouns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronouns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pronouns$SelectionSet<_$Scalars>>;
    type pronounsDisplay<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>;
    interface pronounsDisplay$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pronounsDisplay` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronounsDisplay$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>>;
}
export interface EducationLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `EducationLevel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: EducationLevel.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: EducationLevel.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `EducationLevel` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: EducationLevel.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `EducationLevel` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: EducationLevel.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `EducationLevel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: EducationLevel.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `EducationLevel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: EducationLevel.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `EducationLevel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: EducationLevel.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `EducationLevel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: EducationLevel.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `EducationLevel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: EducationLevel.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `EducationLevel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: EducationLevel.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: EducationLevel.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: EducationLevel.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `EducationLevel` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: EducationLevel.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `EducationLevel` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: EducationLevel.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: EducationLevel.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: EducationLevel.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `EducationLevel` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: EducationLevel.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: EducationLevel.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: EducationLevel.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: EducationLevel.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `EducationLevel` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: EducationLevel.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: EducationLevel.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: EducationLevel.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `EducationLevel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: EducationLevel.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: EducationLevel.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `EducationLevel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: EducationLevel.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `EducationLevel` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: EducationLevel.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `EducationLevel` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: EducationLevel.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EducationLevel.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: EducationLevel$FragmentInline<_$Scalars> | EducationLevel$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface EducationLevel$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends EducationLevel<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace EducationLevel {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface EndorsementWithTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: EndorsementWithTypes.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `EndorsementWithTypes` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: EndorsementWithTypes.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `EndorsementWithTypes` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: EndorsementWithTypes.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `EndorsementWithTypes` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: EndorsementWithTypes.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `EndorsementWithTypes` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: EndorsementWithTypes.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: EndorsementWithTypes.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `EndorsementWithTypes` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: EndorsementWithTypes.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: EndorsementWithTypes.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `EndorsementWithTypes` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: EndorsementWithTypes.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: EndorsementWithTypes.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.deletedBy<_$Scalars>>;
    /**
     * Select the `objectId` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    objectId?: EndorsementWithTypes.objectId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.objectId<_$Scalars>>;
    /**
     * Select the `contentModelType` field on the `EndorsementWithTypes` object. Its type is `ModelType` (a `Enum` kind of type).
     */
    contentModelType?: EndorsementWithTypes.contentModelType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.contentModelType<_$Scalars>>;
    /**
     * Select the `userId` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: EndorsementWithTypes.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.userId<_$Scalars>>;
    /**
     * Select the `contentTagTypeTextId` field on the `EndorsementWithTypes` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    contentTagTypeTextId?: EndorsementWithTypes.contentTagTypeTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.contentTagTypeTextId<_$Scalars>>;
    /**
     * Select the `childContentTagTypeTextId` field on the `EndorsementWithTypes` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    childContentTagTypeTextId?: EndorsementWithTypes.childContentTagTypeTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.childContentTagTypeTextId<_$Scalars>>;
    /**
     * Select the `messageText` field on the `EndorsementWithTypes` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: EndorsementWithTypes.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.messageText<_$Scalars>>;
    /**
     * Select the `moderationConcern` field on the `EndorsementWithTypes` object. Its type is `ModerationConcern` (a `OutputObject` kind of type).
     */
    moderationConcern?: EndorsementWithTypes.moderationConcern$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.moderationConcern<_$Scalars>>;
    /**
     * Select the `allModerationConcerns` field on the `EndorsementWithTypes` object. Its type is `ModerationConcern` (a `OutputObject` kind of type).
     */
    allModerationConcerns?: EndorsementWithTypes.allModerationConcerns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.allModerationConcerns<_$Scalars>>;
    /**
     * Select the `approvedByRecipientAt` field on the `EndorsementWithTypes` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    approvedByRecipientAt?: EndorsementWithTypes.approvedByRecipientAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.approvedByRecipientAt<_$Scalars>>;
    /**
     * Select the `verifiedBy` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    verifiedBy?: EndorsementWithTypes.verifiedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.verifiedBy<_$Scalars>>;
    /**
     * Select the `verifiedAt` field on the `EndorsementWithTypes` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    verifiedAt?: EndorsementWithTypes.verifiedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.verifiedAt<_$Scalars>>;
    /**
     * Select the `dismissedBy` field on the `EndorsementWithTypes` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    dismissedBy?: EndorsementWithTypes.dismissedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.dismissedBy<_$Scalars>>;
    /**
     * Select the `dismissedAt` field on the `EndorsementWithTypes` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    dismissedAt?: EndorsementWithTypes.dismissedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.dismissedAt<_$Scalars>>;
    /**
     * Select the `childContentTagType` field on the `EndorsementWithTypes` object. Its type is `ContentTagType` (a `OutputObject` kind of type).
     */
    childContentTagType?: EndorsementWithTypes.childContentTagType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.childContentTagType<_$Scalars>>;
    /**
     * Select the `contentTagType` field on the `EndorsementWithTypes` object. Its type is `ContentTagType` (a `OutputObject` kind of type).
     */
    contentTagType?: EndorsementWithTypes.contentTagType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<EndorsementWithTypes.contentTagType<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: EndorsementWithTypes$FragmentInline<_$Scalars> | EndorsementWithTypes$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface EndorsementWithTypes$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends EndorsementWithTypes<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace EndorsementWithTypes {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type objectId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectId$SelectionSet<_$Scalars>;
    interface objectId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `objectId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type objectId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectId$SelectionSet<_$Scalars>>;
    type contentModelType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentModelType$SelectionSet<_$Scalars>;
    interface contentModelType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `contentModelType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contentModelType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentModelType$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type contentTagTypeTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentTagTypeTextId$SelectionSet<_$Scalars>;
    interface contentTagTypeTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `contentTagTypeTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contentTagTypeTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentTagTypeTextId$SelectionSet<_$Scalars>>;
    type childContentTagTypeTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | childContentTagTypeTextId$SelectionSet<_$Scalars>;
    interface childContentTagTypeTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `childContentTagTypeTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childContentTagTypeTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | childContentTagTypeTextId$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type moderationConcern<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = moderationConcern$SelectionSet<_$Scalars>;
    interface moderationConcern$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModerationConcern<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `moderationConcern` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type moderationConcern$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<moderationConcern$SelectionSet<_$Scalars>>;
    type allModerationConcerns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = allModerationConcerns$SelectionSet<_$Scalars>;
    interface allModerationConcerns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModerationConcern<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `allModerationConcerns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type allModerationConcerns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<allModerationConcerns$SelectionSet<_$Scalars>>;
    type approvedByRecipientAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | approvedByRecipientAt$SelectionSet<_$Scalars>;
    interface approvedByRecipientAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `approvedByRecipientAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type approvedByRecipientAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | approvedByRecipientAt$SelectionSet<_$Scalars>>;
    type verifiedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedBy$SelectionSet<_$Scalars>;
    interface verifiedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `verifiedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifiedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedBy$SelectionSet<_$Scalars>>;
    type verifiedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedAt$SelectionSet<_$Scalars>;
    interface verifiedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `verifiedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifiedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedAt$SelectionSet<_$Scalars>>;
    type dismissedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedBy$SelectionSet<_$Scalars>;
    interface dismissedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dismissedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedBy$SelectionSet<_$Scalars>>;
    type dismissedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedAt$SelectionSet<_$Scalars>;
    interface dismissedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dismissedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedAt$SelectionSet<_$Scalars>>;
    type childContentTagType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childContentTagType$SelectionSet<_$Scalars>;
    interface childContentTagType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContentTagType<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childContentTagType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childContentTagType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childContentTagType$SelectionSet<_$Scalars>>;
    type contentTagType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = contentTagType$SelectionSet<_$Scalars>;
    interface contentTagType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContentTagType<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `contentTagType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contentTagType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<contentTagType$SelectionSet<_$Scalars>>;
}
export interface ModerationConcern<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ModerationConcern` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ModerationConcern.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ModerationConcern` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ModerationConcern.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ModerationConcern` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ModerationConcern.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ModerationConcern` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ModerationConcern.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ModerationConcern` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ModerationConcern.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ModerationConcern` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ModerationConcern.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ModerationConcern` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ModerationConcern.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ModerationConcern` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ModerationConcern.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ModerationConcern` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ModerationConcern.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ModerationConcern` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ModerationConcern.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.deletedBy<_$Scalars>>;
    /**
     * Select the `moderationConcernType` field on the `ModerationConcern` object. Its type is `ModerationConcernType` (a `Enum` kind of type).
     */
    moderationConcernType?: ModerationConcern.moderationConcernType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.moderationConcernType<_$Scalars>>;
    /**
     * Select the `name` field on the `ModerationConcern` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: ModerationConcern.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.name<_$Scalars>>;
    /**
     * Select the `description` field on the `ModerationConcern` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: ModerationConcern.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.description<_$Scalars>>;
    /**
     * Select the `value` field on the `ModerationConcern` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: ModerationConcern.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.value<_$Scalars>>;
    /**
     * Select the `languageTextId` field on the `ModerationConcern` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    languageTextId?: ModerationConcern.languageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.languageTextId<_$Scalars>>;
    /**
     * Select the `isCaseSensitive` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isCaseSensitive?: ModerationConcern.isCaseSensitive$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isCaseSensitive<_$Scalars>>;
    /**
     * Select the `isWord` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isWord?: ModerationConcern.isWord$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isWord<_$Scalars>>;
    /**
     * Select the `isRegex` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isRegex?: ModerationConcern.isRegex$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isRegex<_$Scalars>>;
    /**
     * Select the `isNameOfBadActor` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isNameOfBadActor?: ModerationConcern.isNameOfBadActor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isNameOfBadActor<_$Scalars>>;
    /**
     * Select the `isCompanyNameOfBadActor` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isCompanyNameOfBadActor?: ModerationConcern.isCompanyNameOfBadActor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isCompanyNameOfBadActor<_$Scalars>>;
    /**
     * Select the `isEmailOfBadActor` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isEmailOfBadActor?: ModerationConcern.isEmailOfBadActor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isEmailOfBadActor<_$Scalars>>;
    /**
     * Select the `isPhoneNumberOfBadActor` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isPhoneNumberOfBadActor?: ModerationConcern.isPhoneNumberOfBadActor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isPhoneNumberOfBadActor<_$Scalars>>;
    /**
     * Select the `isWebsiteOfBadActor` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isWebsiteOfBadActor?: ModerationConcern.isWebsiteOfBadActor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.isWebsiteOfBadActor<_$Scalars>>;
    /**
     * Select the `deleteContent` field on the `ModerationConcern` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    deleteContent?: ModerationConcern.deleteContent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.deleteContent<_$Scalars>>;
    /**
     * Select the `trustLevelImpact` field on the `ModerationConcern` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    trustLevelImpact?: ModerationConcern.trustLevelImpact$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.trustLevelImpact<_$Scalars>>;
    /**
     * Select the `version` field on the `ModerationConcern` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    version?: ModerationConcern.version$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ModerationConcern.version<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ModerationConcern$FragmentInline<_$Scalars> | ModerationConcern$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ModerationConcern$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ModerationConcern<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ModerationConcern {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type moderationConcernType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | moderationConcernType$SelectionSet<_$Scalars>;
    interface moderationConcernType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `moderationConcernType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type moderationConcernType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | moderationConcernType$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type languageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languageTextId$SelectionSet<_$Scalars>;
    interface languageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `languageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type languageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languageTextId$SelectionSet<_$Scalars>>;
    type isCaseSensitive<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isCaseSensitive$SelectionSet<_$Scalars>;
    interface isCaseSensitive$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isCaseSensitive` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isCaseSensitive$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isCaseSensitive$SelectionSet<_$Scalars>>;
    type isWord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isWord$SelectionSet<_$Scalars>;
    interface isWord$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isWord` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isWord$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isWord$SelectionSet<_$Scalars>>;
    type isRegex<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isRegex$SelectionSet<_$Scalars>;
    interface isRegex$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isRegex` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isRegex$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isRegex$SelectionSet<_$Scalars>>;
    type isNameOfBadActor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isNameOfBadActor$SelectionSet<_$Scalars>;
    interface isNameOfBadActor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isNameOfBadActor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isNameOfBadActor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isNameOfBadActor$SelectionSet<_$Scalars>>;
    type isCompanyNameOfBadActor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isCompanyNameOfBadActor$SelectionSet<_$Scalars>;
    interface isCompanyNameOfBadActor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isCompanyNameOfBadActor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isCompanyNameOfBadActor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isCompanyNameOfBadActor$SelectionSet<_$Scalars>>;
    type isEmailOfBadActor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isEmailOfBadActor$SelectionSet<_$Scalars>;
    interface isEmailOfBadActor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isEmailOfBadActor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isEmailOfBadActor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isEmailOfBadActor$SelectionSet<_$Scalars>>;
    type isPhoneNumberOfBadActor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberOfBadActor$SelectionSet<_$Scalars>;
    interface isPhoneNumberOfBadActor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isPhoneNumberOfBadActor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isPhoneNumberOfBadActor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberOfBadActor$SelectionSet<_$Scalars>>;
    type isWebsiteOfBadActor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isWebsiteOfBadActor$SelectionSet<_$Scalars>;
    interface isWebsiteOfBadActor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isWebsiteOfBadActor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isWebsiteOfBadActor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isWebsiteOfBadActor$SelectionSet<_$Scalars>>;
    type deleteContent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deleteContent$SelectionSet<_$Scalars>;
    interface deleteContent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deleteContent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deleteContent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deleteContent$SelectionSet<_$Scalars>>;
    type trustLevelImpact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevelImpact$SelectionSet<_$Scalars>;
    interface trustLevelImpact$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trustLevelImpact` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trustLevelImpact$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevelImpact$SelectionSet<_$Scalars>>;
    type version<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | version$SelectionSet<_$Scalars>;
    interface version$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `version` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type version$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | version$SelectionSet<_$Scalars>>;
}
export interface ContentTagType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ContentTagType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ContentTagType.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ContentTagType.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ContentTagType` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ContentTagType.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ContentTagType` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ContentTagType.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ContentTagType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ContentTagType.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ContentTagType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ContentTagType.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ContentTagType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ContentTagType.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ContentTagType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ContentTagType.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ContentTagType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ContentTagType.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ContentTagType` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ContentTagType.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: ContentTagType.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: ContentTagType.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `ContentTagType` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: ContentTagType.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `ContentTagType` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: ContentTagType.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: ContentTagType.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: ContentTagType.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `ContentTagType` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: ContentTagType.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: ContentTagType.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: ContentTagType.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: ContentTagType.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `ContentTagType` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: ContentTagType.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ContentTagType.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: ContentTagType.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ContentTagType` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ContentTagType.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: ContentTagType.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `ContentTagType` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: ContentTagType.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `ContentTagType` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: ContentTagType.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `ContentTagType` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: ContentTagType.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.parentOption<_$Scalars>>;
    /**
     * Select the `addToTrustLevel` field on the `ContentTagType` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    addToTrustLevel?: ContentTagType.addToTrustLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTagType.addToTrustLevel<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ContentTagType$FragmentInline<_$Scalars> | ContentTagType$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ContentTagType$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ContentTagType<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ContentTagType {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
    type addToTrustLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | addToTrustLevel$SelectionSet<_$Scalars>;
    interface addToTrustLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `addToTrustLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type addToTrustLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | addToTrustLevel$SelectionSet<_$Scalars>>;
}
export interface Group<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Group` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Group.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Group.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Group` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Group.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Group` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Group.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Group` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Group.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Group` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Group.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Group` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Group.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Group` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Group.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Group` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Group.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Group` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Group.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.deletedBy<_$Scalars>>;
    /**
     * Select the `parentGroupId` field on the `Group` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    parentGroupId?: Group.parentGroupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.parentGroupId<_$Scalars>>;
    /**
     * Select the `matchingEngineId` field on the `Group` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    matchingEngineId?: Group.matchingEngineId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.matchingEngineId<_$Scalars>>;
    /**
     * Select the `name` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: Group.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.name<_$Scalars>>;
    /**
     * Select the `shortName` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortName?: Group.shortName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.shortName<_$Scalars>>;
    /**
     * Select the `ident` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    ident?: Group.ident$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.ident<_$Scalars>>;
    /**
     * Select the `slug` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slug?: Group.slug$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.slug<_$Scalars>>;
    /**
     * Select the `domain` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    domain?: Group.domain$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.domain<_$Scalars>>;
    /**
     * Select the `badgeName` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    badgeName?: Group.badgeName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.badgeName<_$Scalars>>;
    /**
     * Select the `description` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Group.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.description<_$Scalars>>;
    /**
     * Select the `planType` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    planType?: Group.planType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.planType<_$Scalars>>;
    /**
     * Select the `embedded` field on the `Group` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    embedded?: Group.embedded$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.embedded<_$Scalars>>;
    /**
     * Select the `appliedGroupRules` field on the `Group` object. Its type is `AppliedGroupRule` (a `OutputObject` kind of type).
     */
    appliedGroupRules?: Group.appliedGroupRules$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.appliedGroupRules<_$Scalars>>;
    /**
     * Select the `languageTextId` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    languageTextId?: Group.languageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.languageTextId<_$Scalars>>;
    /**
     * Select the `allowProfileRoleOnSignUp` field on the `Group` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    allowProfileRoleOnSignUp?: Group.allowProfileRoleOnSignUp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.allowProfileRoleOnSignUp<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Group.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.mm2Id<_$Scalars>>;
    /**
     * Select the `isMm2Organization` field on the `Group` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isMm2Organization?: Group.isMm2Organization$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.isMm2Organization<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Group` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Group.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `isMigratedToMm3` field on the `Group` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isMigratedToMm3?: Group.isMigratedToMm3$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.isMigratedToMm3<_$Scalars>>;
    /**
     * Select the `mm2RedirectUrl` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2RedirectUrl?: Group.mm2RedirectUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.mm2RedirectUrl<_$Scalars>>;
    /**
     * Select the `mm3DeepLinksUrl` field on the `Group` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3DeepLinksUrl?: Group.mm3DeepLinksUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.mm3DeepLinksUrl<_$Scalars>>;
    /**
     * Select the `groupCms` field on the `Group` object. Its type is `GroupCms` (a `OutputObject` kind of type).
     */
    groupCms?: Group.groupCms$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Group.groupCms<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Group$FragmentInline<_$Scalars> | Group$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Group$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Group<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Group {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type parentGroupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentGroupId$SelectionSet<_$Scalars>;
    interface parentGroupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentGroupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentGroupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentGroupId$SelectionSet<_$Scalars>>;
    type matchingEngineId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | matchingEngineId$SelectionSet<_$Scalars>;
    interface matchingEngineId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `matchingEngineId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type matchingEngineId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | matchingEngineId$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type shortName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortName$SelectionSet<_$Scalars>;
    interface shortName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortName$SelectionSet<_$Scalars>>;
    type ident<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ident$SelectionSet<_$Scalars>;
    interface ident$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ident` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ident$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ident$SelectionSet<_$Scalars>>;
    type slug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>;
    interface slug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>>;
    type domain<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | domain$SelectionSet<_$Scalars>;
    interface domain$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `domain` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type domain$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | domain$SelectionSet<_$Scalars>>;
    type badgeName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | badgeName$SelectionSet<_$Scalars>;
    interface badgeName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `badgeName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type badgeName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | badgeName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type planType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | planType$SelectionSet<_$Scalars>;
    interface planType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `planType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type planType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | planType$SelectionSet<_$Scalars>>;
    type embedded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | embedded$SelectionSet<_$Scalars>;
    interface embedded$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `embedded` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type embedded$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | embedded$SelectionSet<_$Scalars>>;
    type appliedGroupRules<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = appliedGroupRules$SelectionSet<_$Scalars>;
    interface appliedGroupRules$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AppliedGroupRule<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `appliedGroupRules` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type appliedGroupRules$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<appliedGroupRules$SelectionSet<_$Scalars>>;
    type languageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languageTextId$SelectionSet<_$Scalars>;
    interface languageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `languageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type languageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languageTextId$SelectionSet<_$Scalars>>;
    type allowProfileRoleOnSignUp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | allowProfileRoleOnSignUp$SelectionSet<_$Scalars>;
    interface allowProfileRoleOnSignUp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `allowProfileRoleOnSignUp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type allowProfileRoleOnSignUp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | allowProfileRoleOnSignUp$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type isMm2Organization<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isMm2Organization$SelectionSet<_$Scalars>;
    interface isMm2Organization$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isMm2Organization` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isMm2Organization$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isMm2Organization$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type isMigratedToMm3<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isMigratedToMm3$SelectionSet<_$Scalars>;
    interface isMigratedToMm3$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isMigratedToMm3` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isMigratedToMm3$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isMigratedToMm3$SelectionSet<_$Scalars>>;
    type mm2RedirectUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2RedirectUrl$SelectionSet<_$Scalars>;
    interface mm2RedirectUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2RedirectUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2RedirectUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2RedirectUrl$SelectionSet<_$Scalars>>;
    type mm3DeepLinksUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3DeepLinksUrl$SelectionSet<_$Scalars>;
    interface mm3DeepLinksUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3DeepLinksUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3DeepLinksUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3DeepLinksUrl$SelectionSet<_$Scalars>>;
    type groupCms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupCms$SelectionSet<_$Scalars>;
    interface groupCms$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupCms<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupCms` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupCms$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupCms$SelectionSet<_$Scalars>>;
}
export interface AppliedGroupRule<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `AppliedGroupRule` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: AppliedGroupRule.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `AppliedGroupRule` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: AppliedGroupRule.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `AppliedGroupRule` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: AppliedGroupRule.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `AppliedGroupRule` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: AppliedGroupRule.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `AppliedGroupRule` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: AppliedGroupRule.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `AppliedGroupRule` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: AppliedGroupRule.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `AppliedGroupRule` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: AppliedGroupRule.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `AppliedGroupRule` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: AppliedGroupRule.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `AppliedGroupRule` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: AppliedGroupRule.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `AppliedGroupRule` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: AppliedGroupRule.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.deletedBy<_$Scalars>>;
    /**
     * Select the `groupRuleId` field on the `AppliedGroupRule` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupRuleId?: AppliedGroupRule.groupRuleId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.groupRuleId<_$Scalars>>;
    /**
     * Select the `groupId` field on the `AppliedGroupRule` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: AppliedGroupRule.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.groupId<_$Scalars>>;
    /**
     * Select the `subscribedToEvents` field on the `AppliedGroupRule` object. Its type is `GroupRuleEventType` (a `Enum` kind of type).
     */
    subscribedToEvents?: AppliedGroupRule.subscribedToEvents$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.subscribedToEvents<_$Scalars>>;
    /**
     * Select the `config` field on the `AppliedGroupRule` object. Its type is `GroupRuleBaseConfig` (a `OutputObject` kind of type).
     */
    config?: AppliedGroupRule.config$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AppliedGroupRule.config<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: AppliedGroupRule$FragmentInline<_$Scalars> | AppliedGroupRule$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface AppliedGroupRule$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends AppliedGroupRule<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace AppliedGroupRule {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupRuleId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupRuleId$SelectionSet<_$Scalars>;
    interface groupRuleId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupRuleId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupRuleId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupRuleId$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type subscribedToEvents<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | subscribedToEvents$SelectionSet<_$Scalars>;
    interface subscribedToEvents$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `subscribedToEvents` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type subscribedToEvents$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | subscribedToEvents$SelectionSet<_$Scalars>>;
    type config<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = config$SelectionSet<_$Scalars>;
    interface config$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupRuleBaseConfig<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `config` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type config$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<config$SelectionSet<_$Scalars>>;
}
export interface GroupRuleBaseConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `GroupRuleBaseConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: GroupRuleBaseConfig.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `GroupRuleBaseConfig` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: GroupRuleBaseConfig.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `GroupRuleBaseConfig` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: GroupRuleBaseConfig.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `GroupRuleBaseConfig` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: GroupRuleBaseConfig.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `GroupRuleBaseConfig` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: GroupRuleBaseConfig.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `GroupRuleBaseConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: GroupRuleBaseConfig.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `GroupRuleBaseConfig` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: GroupRuleBaseConfig.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `GroupRuleBaseConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: GroupRuleBaseConfig.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `GroupRuleBaseConfig` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: GroupRuleBaseConfig.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `GroupRuleBaseConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: GroupRuleBaseConfig.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.deletedBy<_$Scalars>>;
    /**
     * Select the `value` field on the `GroupRuleBaseConfig` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: GroupRuleBaseConfig.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupRuleBaseConfig.value<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GroupRuleBaseConfig$FragmentInline<_$Scalars> | GroupRuleBaseConfig$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GroupRuleBaseConfig$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GroupRuleBaseConfig<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GroupRuleBaseConfig {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
}
export interface GroupCms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `GroupCms` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: GroupCms.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `GroupCms` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: GroupCms.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `GroupCms` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: GroupCms.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `GroupCms` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: GroupCms.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `GroupCms` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: GroupCms.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `GroupCms` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: GroupCms.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `GroupCms` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: GroupCms.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `GroupCms` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: GroupCms.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `GroupCms` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: GroupCms.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `GroupCms` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: GroupCms.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `GroupCms` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: GroupCms.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.groupId<_$Scalars>>;
    /**
     * Select the `onboarding` field on the `GroupCms` object. Its type is `GroupCmsOnboarding` (a `OutputObject` kind of type).
     */
    onboarding?: GroupCms.onboarding$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCms.onboarding<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GroupCms$FragmentInline<_$Scalars> | GroupCms$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GroupCms$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GroupCms<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GroupCms {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type onboarding<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = onboarding$SelectionSet<_$Scalars>;
    interface onboarding$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupCmsOnboarding<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `onboarding` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type onboarding$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<onboarding$SelectionSet<_$Scalars>>;
}
export interface GroupCmsOnboarding<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `allowProfileRoleOnSignUp` field on the `GroupCmsOnboarding` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    allowProfileRoleOnSignUp?: GroupCmsOnboarding.allowProfileRoleOnSignUp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.allowProfileRoleOnSignUp<_$Scalars>>;
    /**
     * Select the `showDataConsentPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showDataConsentPage?: GroupCmsOnboarding.showDataConsentPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showDataConsentPage<_$Scalars>>;
    /**
     * Select the `showPreferredLanguagePage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showPreferredLanguagePage?: GroupCmsOnboarding.showPreferredLanguagePage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showPreferredLanguagePage<_$Scalars>>;
    /**
     * Select the `showLocationPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showLocationPage?: GroupCmsOnboarding.showLocationPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showLocationPage<_$Scalars>>;
    /**
     * Select the `showPhoneNumberPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showPhoneNumberPage?: GroupCmsOnboarding.showPhoneNumberPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showPhoneNumberPage<_$Scalars>>;
    /**
     * Select the `showGenderPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showGenderPage?: GroupCmsOnboarding.showGenderPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showGenderPage<_$Scalars>>;
    /**
     * Select the `showBirthYearPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showBirthYearPage?: GroupCmsOnboarding.showBirthYearPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showBirthYearPage<_$Scalars>>;
    /**
     * Select the `showProfileRolePage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showProfileRolePage?: GroupCmsOnboarding.showProfileRolePage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showProfileRolePage<_$Scalars>>;
    /**
     * Select the `showExpertisesPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showExpertisesPage?: GroupCmsOnboarding.showExpertisesPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showExpertisesPage<_$Scalars>>;
    /**
     * Select the `showIndustryPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showIndustryPage?: GroupCmsOnboarding.showIndustryPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showIndustryPage<_$Scalars>>;
    /**
     * Select the `showVentureNamePage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showVentureNamePage?: GroupCmsOnboarding.showVentureNamePage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showVentureNamePage<_$Scalars>>;
    /**
     * Select the `showVentureStartDatePage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showVentureStartDatePage?: GroupCmsOnboarding.showVentureStartDatePage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showVentureStartDatePage<_$Scalars>>;
    /**
     * Select the `showVentureStagePage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showVentureStagePage?: GroupCmsOnboarding.showVentureStagePage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showVentureStagePage<_$Scalars>>;
    /**
     * Select the `showReasonToJoinPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showReasonToJoinPage?: GroupCmsOnboarding.showReasonToJoinPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showReasonToJoinPage<_$Scalars>>;
    /**
     * Select the `showMentorRolePage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showMentorRolePage?: GroupCmsOnboarding.showMentorRolePage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showMentorRolePage<_$Scalars>>;
    /**
     * Select the `showAcceptTermsPage` field on the `GroupCmsOnboarding` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showAcceptTermsPage?: GroupCmsOnboarding.showAcceptTermsPage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.showAcceptTermsPage<_$Scalars>>;
    /**
     * Select the `nextRoute` field on the `GroupCmsOnboarding` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    nextRoute?: GroupCmsOnboarding.nextRoute$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GroupCmsOnboarding.nextRoute<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GroupCmsOnboarding$FragmentInline<_$Scalars> | GroupCmsOnboarding$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GroupCmsOnboarding$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GroupCmsOnboarding<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GroupCmsOnboarding {
    type allowProfileRoleOnSignUp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | allowProfileRoleOnSignUp$SelectionSet<_$Scalars>;
    interface allowProfileRoleOnSignUp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `allowProfileRoleOnSignUp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type allowProfileRoleOnSignUp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | allowProfileRoleOnSignUp$SelectionSet<_$Scalars>>;
    type showDataConsentPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showDataConsentPage$SelectionSet<_$Scalars>;
    interface showDataConsentPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showDataConsentPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showDataConsentPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showDataConsentPage$SelectionSet<_$Scalars>>;
    type showPreferredLanguagePage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showPreferredLanguagePage$SelectionSet<_$Scalars>;
    interface showPreferredLanguagePage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showPreferredLanguagePage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showPreferredLanguagePage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showPreferredLanguagePage$SelectionSet<_$Scalars>>;
    type showLocationPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showLocationPage$SelectionSet<_$Scalars>;
    interface showLocationPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showLocationPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showLocationPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showLocationPage$SelectionSet<_$Scalars>>;
    type showPhoneNumberPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showPhoneNumberPage$SelectionSet<_$Scalars>;
    interface showPhoneNumberPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showPhoneNumberPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showPhoneNumberPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showPhoneNumberPage$SelectionSet<_$Scalars>>;
    type showGenderPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showGenderPage$SelectionSet<_$Scalars>;
    interface showGenderPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showGenderPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showGenderPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showGenderPage$SelectionSet<_$Scalars>>;
    type showBirthYearPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showBirthYearPage$SelectionSet<_$Scalars>;
    interface showBirthYearPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showBirthYearPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showBirthYearPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showBirthYearPage$SelectionSet<_$Scalars>>;
    type showProfileRolePage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showProfileRolePage$SelectionSet<_$Scalars>;
    interface showProfileRolePage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showProfileRolePage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showProfileRolePage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showProfileRolePage$SelectionSet<_$Scalars>>;
    type showExpertisesPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showExpertisesPage$SelectionSet<_$Scalars>;
    interface showExpertisesPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showExpertisesPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showExpertisesPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showExpertisesPage$SelectionSet<_$Scalars>>;
    type showIndustryPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showIndustryPage$SelectionSet<_$Scalars>;
    interface showIndustryPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showIndustryPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showIndustryPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showIndustryPage$SelectionSet<_$Scalars>>;
    type showVentureNamePage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showVentureNamePage$SelectionSet<_$Scalars>;
    interface showVentureNamePage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showVentureNamePage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showVentureNamePage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showVentureNamePage$SelectionSet<_$Scalars>>;
    type showVentureStartDatePage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showVentureStartDatePage$SelectionSet<_$Scalars>;
    interface showVentureStartDatePage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showVentureStartDatePage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showVentureStartDatePage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showVentureStartDatePage$SelectionSet<_$Scalars>>;
    type showVentureStagePage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showVentureStagePage$SelectionSet<_$Scalars>;
    interface showVentureStagePage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showVentureStagePage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showVentureStagePage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showVentureStagePage$SelectionSet<_$Scalars>>;
    type showReasonToJoinPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showReasonToJoinPage$SelectionSet<_$Scalars>;
    interface showReasonToJoinPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showReasonToJoinPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showReasonToJoinPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showReasonToJoinPage$SelectionSet<_$Scalars>>;
    type showMentorRolePage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showMentorRolePage$SelectionSet<_$Scalars>;
    interface showMentorRolePage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showMentorRolePage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showMentorRolePage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showMentorRolePage$SelectionSet<_$Scalars>>;
    type showAcceptTermsPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showAcceptTermsPage$SelectionSet<_$Scalars>;
    interface showAcceptTermsPage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showAcceptTermsPage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showAcceptTermsPage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showAcceptTermsPage$SelectionSet<_$Scalars>>;
    type nextRoute<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | nextRoute$SelectionSet<_$Scalars>;
    interface nextRoute$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `nextRoute` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type nextRoute$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | nextRoute$SelectionSet<_$Scalars>>;
}
export interface Pronoun<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Pronoun` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Pronoun.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Pronoun.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Pronoun` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Pronoun.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Pronoun` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Pronoun.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Pronoun` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Pronoun.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Pronoun` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Pronoun.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Pronoun` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Pronoun.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Pronoun` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Pronoun.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Pronoun` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Pronoun.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Pronoun` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Pronoun.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: Pronoun.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: Pronoun.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `Pronoun` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: Pronoun.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `Pronoun` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: Pronoun.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: Pronoun.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: Pronoun.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `Pronoun` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: Pronoun.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: Pronoun.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Pronoun.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: Pronoun.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `Pronoun` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: Pronoun.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Pronoun.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: Pronoun.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Pronoun` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Pronoun.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: Pronoun.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `Pronoun` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: Pronoun.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `Pronoun` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: Pronoun.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `Pronoun` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: Pronoun.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Pronoun.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Pronoun$FragmentInline<_$Scalars> | Pronoun$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Pronoun$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Pronoun<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Pronoun {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface UserCms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userId` field on the `UserCms` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: UserCms.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserCms.userId<_$Scalars>>;
    /**
     * Select the `groupCms` field on the `UserCms` object. Its type is `GroupCms` (a `OutputObject` kind of type).
     */
    groupCms?: UserCms.groupCms$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserCms.groupCms<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserCms$FragmentInline<_$Scalars> | UserCms$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserCms$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserCms<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserCms {
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type groupCms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupCms$SelectionSet<_$Scalars>;
    interface groupCms$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GroupCms<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupCms` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupCms$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupCms$SelectionSet<_$Scalars>>;
}
export interface UserInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UserInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UserInbox.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `UserInbox` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: UserInbox.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `UserInbox` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: UserInbox.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `UserInbox` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: UserInbox.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserInbox` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserInbox.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `UserInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: UserInbox.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UserInbox` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserInbox.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `UserInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: UserInbox.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UserInbox` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UserInbox.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `UserInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: UserInbox.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `UserInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: UserInbox.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.userId<_$Scalars>>;
    /**
     * Select the `channels` field on the `UserInbox` object. Its type is `ChannelInbox` (a `OutputObject` kind of type).
     */
    channels?: UserInbox.channels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserInbox.channels<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserInbox$FragmentInline<_$Scalars> | UserInbox$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserInbox$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserInbox<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserInbox {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type channels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channels$SelectionSet<_$Scalars>;
    interface channels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInbox<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channels$SelectionSet<_$Scalars>>;
}
export interface ChannelInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userId` field on the `ChannelInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: ChannelInbox.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.userId<_$Scalars>>;
    /**
     * Select the `unseenMessages` field on the `ChannelInbox` object. Its type is `ChannelInboxItemMessage` (a `OutputObject` kind of type).
     */
    unseenMessages?: ChannelInbox.unseenMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.unseenMessages<_$Scalars>>;
    /**
     * Select the `unseenSystemMessages` field on the `ChannelInbox` object. Its type is `ChannelInboxItemMessage` (a `OutputObject` kind of type).
     */
    unseenSystemMessages?: ChannelInbox.unseenSystemMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.unseenSystemMessages<_$Scalars>>;
    /**
     * Select the `unseenArchivedMessages` field on the `ChannelInbox` object. Its type is `ChannelInboxItemMessage` (a `OutputObject` kind of type).
     */
    unseenArchivedMessages?: ChannelInbox.unseenArchivedMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.unseenArchivedMessages<_$Scalars>>;
    /**
     * Select the `latestMessages` field on the `ChannelInbox` object. Its type is `ChannelInboxItemMessage` (a `OutputObject` kind of type).
     */
    latestMessages?: ChannelInbox.latestMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.latestMessages<_$Scalars>>;
    /**
     * Select the `latestArchivedMessages` field on the `ChannelInbox` object. Its type is `ChannelInboxItemMessage` (a `OutputObject` kind of type).
     */
    latestArchivedMessages?: ChannelInbox.latestArchivedMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.latestArchivedMessages<_$Scalars>>;
    /**
     * Select the `pendingInvitations` field on the `ChannelInbox` object. Its type is `ChannelInboxItemInvitation` (a `OutputObject` kind of type).
     */
    pendingInvitations?: ChannelInbox.pendingInvitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.pendingInvitations<_$Scalars>>;
    /**
     * Select the `invitations` field on the `ChannelInbox` object. Its type is `ChannelInboxItemInvitation` (a `OutputObject` kind of type).
     */
    invitations?: ChannelInbox.invitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.invitations<_$Scalars>>;
    /**
     * Select the `itemIdHash` field on the `ChannelInbox` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    itemIdHash?: ChannelInbox.itemIdHash$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.itemIdHash<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ChannelInbox` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelInbox.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ChannelInbox` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ChannelInbox.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.updatedBy<_$Scalars>>;
    /**
     * Select the `channelsExceedMaxCount` field on the `ChannelInbox` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    channelsExceedMaxCount?: ChannelInbox.channelsExceedMaxCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.channelsExceedMaxCount<_$Scalars>>;
    /**
     * Select the `invitationsExceedMaxCount` field on the `ChannelInbox` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    invitationsExceedMaxCount?: ChannelInbox.invitationsExceedMaxCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInbox.invitationsExceedMaxCount<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelInbox$FragmentInline<_$Scalars> | ChannelInbox$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelInbox$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelInbox<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelInbox {
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type unseenMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unseenMessages$SelectionSet<_$Scalars>;
    interface unseenMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `unseenMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unseenMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unseenMessages$SelectionSet<_$Scalars>>;
    type unseenSystemMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unseenSystemMessages$SelectionSet<_$Scalars>;
    interface unseenSystemMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `unseenSystemMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unseenSystemMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unseenSystemMessages$SelectionSet<_$Scalars>>;
    type unseenArchivedMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unseenArchivedMessages$SelectionSet<_$Scalars>;
    interface unseenArchivedMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `unseenArchivedMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unseenArchivedMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unseenArchivedMessages$SelectionSet<_$Scalars>>;
    type latestMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = latestMessages$SelectionSet<_$Scalars>;
    interface latestMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `latestMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<latestMessages$SelectionSet<_$Scalars>>;
    type latestArchivedMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = latestArchivedMessages$SelectionSet<_$Scalars>;
    interface latestArchivedMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `latestArchivedMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestArchivedMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<latestArchivedMessages$SelectionSet<_$Scalars>>;
    type pendingInvitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pendingInvitations$SelectionSet<_$Scalars>;
    interface pendingInvitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pendingInvitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pendingInvitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pendingInvitations$SelectionSet<_$Scalars>>;
    type invitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = invitations$SelectionSet<_$Scalars>;
    interface invitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInboxItemInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `invitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type invitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<invitations$SelectionSet<_$Scalars>>;
    type itemIdHash<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | itemIdHash$SelectionSet<_$Scalars>;
    interface itemIdHash$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `itemIdHash` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type itemIdHash$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | itemIdHash$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type channelsExceedMaxCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelsExceedMaxCount$SelectionSet<_$Scalars>;
    interface channelsExceedMaxCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelsExceedMaxCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelsExceedMaxCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelsExceedMaxCount$SelectionSet<_$Scalars>>;
    type invitationsExceedMaxCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | invitationsExceedMaxCount$SelectionSet<_$Scalars>;
    interface invitationsExceedMaxCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `invitationsExceedMaxCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type invitationsExceedMaxCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | invitationsExceedMaxCount$SelectionSet<_$Scalars>>;
}
export interface ChannelInboxItemMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ChannelInboxItemMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ChannelInboxItemMessage.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.id<_$Scalars>>;
    /**
     * Select the `channelId` field on the `ChannelInboxItemMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: ChannelInboxItemMessage.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.channelId<_$Scalars>>;
    /**
     * Select the `replyToMessageId` field on the `ChannelInboxItemMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    replyToMessageId?: ChannelInboxItemMessage.replyToMessageId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.replyToMessageId<_$Scalars>>;
    /**
     * Select the `channelMessageType` field on the `ChannelInboxItemMessage` object. Its type is `ChannelMessageType` (a `Enum` kind of type).
     */
    channelMessageType?: ChannelInboxItemMessage.channelMessageType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.channelMessageType<_$Scalars>>;
    /**
     * Select the `messageText` field on the `ChannelInboxItemMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: ChannelInboxItemMessage.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.messageText<_$Scalars>>;
    /**
     * Select the `senderUserHandle` field on the `ChannelInboxItemMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderUserHandle?: ChannelInboxItemMessage.senderUserHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.senderUserHandle<_$Scalars>>;
    /**
     * Select the `senderFirstName` field on the `ChannelInboxItemMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderFirstName?: ChannelInboxItemMessage.senderFirstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.senderFirstName<_$Scalars>>;
    /**
     * Select the `senderLastName` field on the `ChannelInboxItemMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderLastName?: ChannelInboxItemMessage.senderLastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.senderLastName<_$Scalars>>;
    /**
     * Select the `senderAvatarUrl` field on the `ChannelInboxItemMessage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderAvatarUrl?: ChannelInboxItemMessage.senderAvatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.senderAvatarUrl<_$Scalars>>;
    /**
     * Select the `seenAt` field on the `ChannelInboxItemMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    seenAt?: ChannelInboxItemMessage.seenAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.seenAt<_$Scalars>>;
    /**
     * Select the `isArchived` field on the `ChannelInboxItemMessage` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isArchived?: ChannelInboxItemMessage.isArchived$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.isArchived<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ChannelInboxItemMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ChannelInboxItemMessage.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ChannelInboxItemMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ChannelInboxItemMessage.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ChannelInboxItemMessage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelInboxItemMessage.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ChannelInboxItemMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ChannelInboxItemMessage.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.updatedBy<_$Scalars>>;
    /**
     * Select the `userIds` field on the `ChannelInboxItemMessage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userIds?: ChannelInboxItemMessage.userIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemMessage.userIds<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelInboxItemMessage$FragmentInline<_$Scalars> | ChannelInboxItemMessage$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelInboxItemMessage$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelInboxItemMessage<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelInboxItemMessage {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type replyToMessageId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | replyToMessageId$SelectionSet<_$Scalars>;
    interface replyToMessageId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `replyToMessageId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type replyToMessageId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | replyToMessageId$SelectionSet<_$Scalars>>;
    type channelMessageType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelMessageType$SelectionSet<_$Scalars>;
    interface channelMessageType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelMessageType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelMessageType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelMessageType$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type senderUserHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderUserHandle$SelectionSet<_$Scalars>;
    interface senderUserHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderUserHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderUserHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderUserHandle$SelectionSet<_$Scalars>>;
    type senderFirstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFirstName$SelectionSet<_$Scalars>;
    interface senderFirstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderFirstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderFirstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderFirstName$SelectionSet<_$Scalars>>;
    type senderLastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderLastName$SelectionSet<_$Scalars>;
    interface senderLastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderLastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderLastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderLastName$SelectionSet<_$Scalars>>;
    type senderAvatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderAvatarUrl$SelectionSet<_$Scalars>;
    interface senderAvatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderAvatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderAvatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderAvatarUrl$SelectionSet<_$Scalars>>;
    type seenAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seenAt$SelectionSet<_$Scalars>;
    interface seenAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seenAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seenAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seenAt$SelectionSet<_$Scalars>>;
    type isArchived<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isArchived$SelectionSet<_$Scalars>;
    interface isArchived$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isArchived` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isArchived$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isArchived$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type userIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>;
    interface userIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>>;
}
export interface ChannelInboxItemInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ChannelInboxItemInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ChannelInboxItemInvitation.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.id<_$Scalars>>;
    /**
     * Select the `channelId` field on the `ChannelInboxItemInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: ChannelInboxItemInvitation.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.channelId<_$Scalars>>;
    /**
     * Select the `messageText` field on the `ChannelInboxItemInvitation` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: ChannelInboxItemInvitation.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.messageText<_$Scalars>>;
    /**
     * Select the `readByRecipientAt` field on the `ChannelInboxItemInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    readByRecipientAt?: ChannelInboxItemInvitation.readByRecipientAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.readByRecipientAt<_$Scalars>>;
    /**
     * Select the `autoAccept` field on the `ChannelInboxItemInvitation` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    autoAccept?: ChannelInboxItemInvitation.autoAccept$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.autoAccept<_$Scalars>>;
    /**
     * Select the `status` field on the `ChannelInboxItemInvitation` object. Its type is `ChannelInvitationStatus` (a `Enum` kind of type).
     */
    status?: ChannelInboxItemInvitation.status$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.status<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ChannelInboxItemInvitation` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ChannelInboxItemInvitation.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ChannelInboxItemInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ChannelInboxItemInvitation.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.createdBy<_$Scalars>>;
    /**
     * Select the `recipientId` field on the `ChannelInboxItemInvitation` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    recipientId?: ChannelInboxItemInvitation.recipientId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelInboxItemInvitation.recipientId<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelInboxItemInvitation$FragmentInline<_$Scalars> | ChannelInboxItemInvitation$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelInboxItemInvitation$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelInboxItemInvitation<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelInboxItemInvitation {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type readByRecipientAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | readByRecipientAt$SelectionSet<_$Scalars>;
    interface readByRecipientAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `readByRecipientAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type readByRecipientAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | readByRecipientAt$SelectionSet<_$Scalars>>;
    type autoAccept<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | autoAccept$SelectionSet<_$Scalars>;
    interface autoAccept$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `autoAccept` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type autoAccept$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | autoAccept$SelectionSet<_$Scalars>>;
    type status<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | status$SelectionSet<_$Scalars>;
    interface status$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `status` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type status$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | status$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type recipientId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>;
    interface recipientId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientId$SelectionSet<_$Scalars>>;
}
export interface AdminTask<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `AdminTask` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: AdminTask.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `AdminTask` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: AdminTask.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `AdminTask` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: AdminTask.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `AdminTask` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: AdminTask.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `AdminTask` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: AdminTask.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `AdminTask` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: AdminTask.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `AdminTask` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: AdminTask.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `AdminTask` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: AdminTask.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `AdminTask` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: AdminTask.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `AdminTask` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: AdminTask.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.deletedBy<_$Scalars>>;
    /**
     * Select the `adminTaskType` field on the `AdminTask` object. Its type is `AdminTaskType` (a `Enum` kind of type).
     */
    adminTaskType?: AdminTask.adminTaskType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.adminTaskType<_$Scalars>>;
    /**
     * Select the `result` field on the `AdminTask` object. Its type is `AdminTaskResult` (a `Enum` kind of type).
     */
    result?: AdminTask.result$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.result<_$Scalars>>;
    /**
     * Select the `resultMessage` field on the `AdminTask` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    resultMessage?: AdminTask.resultMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.resultMessage<_$Scalars>>;
    /**
     * Select the `error` field on the `AdminTask` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    error?: AdminTask.error$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.error<_$Scalars>>;
    /**
     * Select the `args` field on the `AdminTask` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    args?: AdminTask.args$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.args<_$Scalars>>;
    /**
     * Select the `timeout` field on the `AdminTask` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    timeout?: AdminTask.timeout$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.timeout<_$Scalars>>;
    /**
     * Select the `autoRun` field on the `AdminTask` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    autoRun?: AdminTask.autoRun$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.autoRun<_$Scalars>>;
    /**
     * Select the `synchronous` field on the `AdminTask` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    synchronous?: AdminTask.synchronous$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.synchronous<_$Scalars>>;
    /**
     * Select the `startedAt` field on the `AdminTask` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    startedAt?: AdminTask.startedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.startedAt<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `AdminTask` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: AdminTask.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.expiresAt<_$Scalars>>;
    /**
     * Select the `finishedAt` field on the `AdminTask` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    finishedAt?: AdminTask.finishedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTask.finishedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: AdminTask$FragmentInline<_$Scalars> | AdminTask$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface AdminTask$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends AdminTask<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace AdminTask {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type adminTaskType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminTaskType$SelectionSet<_$Scalars>;
    interface adminTaskType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminTaskType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminTaskType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminTaskType$SelectionSet<_$Scalars>>;
    type result<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>;
    interface result$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `result` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type result$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>>;
    type resultMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | resultMessage$SelectionSet<_$Scalars>;
    interface resultMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `resultMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type resultMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | resultMessage$SelectionSet<_$Scalars>>;
    type error<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | error$SelectionSet<_$Scalars>;
    interface error$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `error` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type error$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | error$SelectionSet<_$Scalars>>;
    type args<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | args$SelectionSet<_$Scalars>;
    interface args$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `args` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type args$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | args$SelectionSet<_$Scalars>>;
    type timeout<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timeout$SelectionSet<_$Scalars>;
    interface timeout$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timeout` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timeout$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timeout$SelectionSet<_$Scalars>>;
    type autoRun<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | autoRun$SelectionSet<_$Scalars>;
    interface autoRun$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `autoRun` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type autoRun$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | autoRun$SelectionSet<_$Scalars>>;
    type synchronous<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | synchronous$SelectionSet<_$Scalars>;
    interface synchronous$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `synchronous` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type synchronous$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | synchronous$SelectionSet<_$Scalars>>;
    type startedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startedAt$SelectionSet<_$Scalars>;
    interface startedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `startedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startedAt$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
    type finishedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | finishedAt$SelectionSet<_$Scalars>;
    interface finishedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `finishedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type finishedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | finishedAt$SelectionSet<_$Scalars>>;
}
export interface AdminTaskDef<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `adminTaskType` field on the `AdminTaskDef` object. Its type is `AdminTaskType` (a `Enum` kind of type).
     */
    adminTaskType?: AdminTaskDef.adminTaskType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskDef.adminTaskType<_$Scalars>>;
    /**
     * Select the `label` field on the `AdminTaskDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    label?: AdminTaskDef.label$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskDef.label<_$Scalars>>;
    /**
     * Select the `description` field on the `AdminTaskDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: AdminTaskDef.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskDef.description<_$Scalars>>;
    /**
     * Select the `args` field on the `AdminTaskDef` object. Its type is `AdminTaskArgDef` (a `OutputObject` kind of type).
     */
    args?: AdminTaskDef.args$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskDef.args<_$Scalars>>;
    /**
     * Select the `available` field on the `AdminTaskDef` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    available?: AdminTaskDef.available$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskDef.available<_$Scalars>>;
    /**
     * Select the `timeout` field on the `AdminTaskDef` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    timeout?: AdminTaskDef.timeout$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskDef.timeout<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: AdminTaskDef$FragmentInline<_$Scalars> | AdminTaskDef$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface AdminTaskDef$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends AdminTaskDef<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace AdminTaskDef {
    type adminTaskType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminTaskType$SelectionSet<_$Scalars>;
    interface adminTaskType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminTaskType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminTaskType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminTaskType$SelectionSet<_$Scalars>>;
    type label<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | label$SelectionSet<_$Scalars>;
    interface label$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `label` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type label$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | label$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type args<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = args$SelectionSet<_$Scalars>;
    interface args$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AdminTaskArgDef<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `args` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type args$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<args$SelectionSet<_$Scalars>>;
    type available<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | available$SelectionSet<_$Scalars>;
    interface available$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `available` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type available$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | available$SelectionSet<_$Scalars>>;
    type timeout<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timeout$SelectionSet<_$Scalars>;
    interface timeout$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timeout` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timeout$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timeout$SelectionSet<_$Scalars>>;
}
export interface AdminTaskArgDef<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `name` field on the `AdminTaskArgDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: AdminTaskArgDef.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskArgDef.name<_$Scalars>>;
    /**
     * Select the `label` field on the `AdminTaskArgDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    label?: AdminTaskArgDef.label$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskArgDef.label<_$Scalars>>;
    /**
     * Select the `dataType` field on the `AdminTaskArgDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    dataType?: AdminTaskArgDef.dataType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskArgDef.dataType<_$Scalars>>;
    /**
     * Select the `choices` field on the `AdminTaskArgDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    choices?: AdminTaskArgDef.choices$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskArgDef.choices<_$Scalars>>;
    /**
     * Select the `optional` field on the `AdminTaskArgDef` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    optional?: AdminTaskArgDef.optional$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskArgDef.optional<_$Scalars>>;
    /**
     * Select the `description` field on the `AdminTaskArgDef` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: AdminTaskArgDef.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<AdminTaskArgDef.description<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: AdminTaskArgDef$FragmentInline<_$Scalars> | AdminTaskArgDef$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface AdminTaskArgDef$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends AdminTaskArgDef<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace AdminTaskArgDef {
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type label<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | label$SelectionSet<_$Scalars>;
    interface label$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `label` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type label$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | label$SelectionSet<_$Scalars>>;
    type dataType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dataType$SelectionSet<_$Scalars>;
    interface dataType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dataType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dataType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dataType$SelectionSet<_$Scalars>>;
    type choices<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | choices$SelectionSet<_$Scalars>;
    interface choices$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `choices` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type choices$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | choices$SelectionSet<_$Scalars>>;
    type optional<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optional$SelectionSet<_$Scalars>;
    interface optional$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optional` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optional$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optional$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
}
export interface ChannelListItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ChannelListItem.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ChannelListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ChannelListItem.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ChannelListItem` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ChannelListItem.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ChannelListItem` object. Its type is `ChannelMetadata` (a `OutputObject` kind of type).
     */
    metadata?: ChannelListItem.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ChannelListItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ChannelListItem.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ChannelListItem.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ChannelListItem.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ChannelListItem.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ChannelListItem.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.deletedBy<_$Scalars>>;
    /**
     * Select the `name` field on the `ChannelListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: ChannelListItem.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.name<_$Scalars>>;
    /**
     * Select the `topic` field on the `ChannelListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    topic?: ChannelListItem.topic$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.topic<_$Scalars>>;
    /**
     * Select the `description` field on the `ChannelListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: ChannelListItem.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.description<_$Scalars>>;
    /**
     * Select the `tags` field on the `ChannelListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    tags?: ChannelListItem.tags$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.tags<_$Scalars>>;
    /**
     * Select the `channelType` field on the `ChannelListItem` object. Its type is `ChannelType` (a `Enum` kind of type).
     */
    channelType?: ChannelListItem.channelType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.channelType<_$Scalars>>;
    /**
     * Select the `statuses` field on the `ChannelListItem` object. Its type is `BgChannelStatus` (a `OutputObject` kind of type).
     */
    statuses?: ChannelListItem.statuses$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.statuses<_$Scalars>>;
    /**
     * Select the `userIds` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userIds?: ChannelListItem.userIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.userIds<_$Scalars>>;
    /**
     * Select the `otherUserId` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    otherUserId?: ChannelListItem.otherUserId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.otherUserId<_$Scalars>>;
    /**
     * Select the `pausedAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    pausedAt?: ChannelListItem.pausedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.pausedAt<_$Scalars>>;
    /**
     * Select the `pausedBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    pausedBy?: ChannelListItem.pausedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.pausedBy<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: ChannelListItem.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: ChannelListItem.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.suspendedBy<_$Scalars>>;
    /**
     * Select the `lockedAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    lockedAt?: ChannelListItem.lockedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.lockedAt<_$Scalars>>;
    /**
     * Select the `lockedBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    lockedBy?: ChannelListItem.lockedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.lockedBy<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: ChannelListItem.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.archivedAt<_$Scalars>>;
    /**
     * Select the `archivedBy` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    archivedBy?: ChannelListItem.archivedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.archivedBy<_$Scalars>>;
    /**
     * Select the `assumedMentorId` field on the `ChannelListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    assumedMentorId?: ChannelListItem.assumedMentorId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.assumedMentorId<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ChannelListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ChannelListItem.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ChannelListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ChannelListItem.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `creator` field on the `ChannelListItem` object. Its type is `User` (a `OutputObject` kind of type).
     */
    creator?: ChannelListItem.creator$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.creator<_$Scalars>>;
    /**
     * Select the `status` field on the `ChannelListItem` object. Its type is `BgChannelStatus` (a `OutputObject` kind of type).
     */
    status?: ChannelListItem.status$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.status<_$Scalars>>;
    /**
     * Select the `invitations` field on the `ChannelListItem` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    invitations?: ChannelListItem.invitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.invitations<_$Scalars>>;
    /**
     * Select the `isArchivedForMe` field on the `ChannelListItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isArchivedForMe?: ChannelListItem.isArchivedForMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.isArchivedForMe<_$Scalars>>;
    /**
     * Select the `latestMessage` field on the `ChannelListItem` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    latestMessage?: ChannelListItem.latestMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.latestMessage<_$Scalars>>;
    /**
     * Select the `messages` field on the `ChannelListItem` object. Its type is `ChannelMessage` (a `OutputObject` kind of type).
     */
    messages?: ChannelListItem.messages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.messages<_$Scalars>>;
    /**
     * Select the `myContacts` field on the `ChannelListItem` object. Its type is `Contact` (a `OutputObject` kind of type).
     */
    myContacts?: ChannelListItem.myContacts$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.myContacts<_$Scalars>>;
    /**
     * Select the `participants` field on the `ChannelListItem` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    participants?: ChannelListItem.participants$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.participants<_$Scalars>>;
    /**
     * Select the `pendingInvitations` field on the `ChannelListItem` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    pendingInvitations?: ChannelListItem.pendingInvitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ChannelListItem.pendingInvitations<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ChannelListItem$FragmentInline<_$Scalars> | ChannelListItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ChannelListItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ChannelListItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ChannelListItem {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type topic<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | topic$SelectionSet<_$Scalars>;
    interface topic$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `topic` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type topic$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | topic$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type tags<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>;
    interface tags$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `tags` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type tags$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>>;
    type channelType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelType$SelectionSet<_$Scalars>;
    interface channelType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelType$SelectionSet<_$Scalars>>;
    type statuses<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = statuses$SelectionSet<_$Scalars>;
    interface statuses$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BgChannelStatus<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `statuses` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type statuses$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<statuses$SelectionSet<_$Scalars>>;
    type userIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>;
    interface userIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIds$SelectionSet<_$Scalars>>;
    type otherUserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | otherUserId$SelectionSet<_$Scalars>;
    interface otherUserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `otherUserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type otherUserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | otherUserId$SelectionSet<_$Scalars>>;
    type pausedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedAt$SelectionSet<_$Scalars>;
    interface pausedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pausedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pausedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedAt$SelectionSet<_$Scalars>>;
    type pausedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedBy$SelectionSet<_$Scalars>;
    interface pausedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pausedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pausedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pausedBy$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type lockedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedAt$SelectionSet<_$Scalars>;
    interface lockedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lockedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lockedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedAt$SelectionSet<_$Scalars>>;
    type lockedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedBy$SelectionSet<_$Scalars>;
    interface lockedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lockedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lockedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lockedBy$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
    type archivedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedBy$SelectionSet<_$Scalars>;
    interface archivedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedBy$SelectionSet<_$Scalars>>;
    type assumedMentorId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | assumedMentorId$SelectionSet<_$Scalars>;
    interface assumedMentorId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `assumedMentorId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type assumedMentorId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | assumedMentorId$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type creator<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = creator$SelectionSet<_$Scalars>;
    interface creator$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$User<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `creator` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type creator$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<creator$SelectionSet<_$Scalars>>;
    type status<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = status$SelectionSet<_$Scalars>;
    interface status$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BgChannelStatus<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `status` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type status$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<status$SelectionSet<_$Scalars>>;
    type invitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = invitations$SelectionSet<_$Scalars>;
    interface invitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `invitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type invitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<invitations$SelectionSet<_$Scalars>>;
    type isArchivedForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isArchivedForMe$SelectionSet<_$Scalars>;
    interface isArchivedForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isArchivedForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isArchivedForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isArchivedForMe$SelectionSet<_$Scalars>>;
    type latestMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = latestMessage$SelectionSet<_$Scalars>;
    interface latestMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `latestMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<latestMessage$SelectionSet<_$Scalars>>;
    type messages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = messages$SelectionSet<_$Scalars>;
    interface messages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelMessage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `messages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<messages$SelectionSet<_$Scalars>>;
    type myContacts<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myContacts$SelectionSet<_$Scalars>;
    interface myContacts$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Contact<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myContacts` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myContacts$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myContacts$SelectionSet<_$Scalars>>;
    type participants<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = participants$SelectionSet<_$Scalars>;
    interface participants$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `participants` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type participants$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<participants$SelectionSet<_$Scalars>>;
    type pendingInvitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pendingInvitations$SelectionSet<_$Scalars>;
    interface pendingInvitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pendingInvitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pendingInvitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pendingInvitations$SelectionSet<_$Scalars>>;
}
export interface ErrorCodeOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ErrorCodeOption` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ErrorCodeOption.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ErrorCodeOption.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ErrorCodeOption` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ErrorCodeOption.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ErrorCodeOption` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ErrorCodeOption.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ErrorCodeOption` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ErrorCodeOption.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ErrorCodeOption` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ErrorCodeOption.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ErrorCodeOption` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ErrorCodeOption.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ErrorCodeOption` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ErrorCodeOption.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ErrorCodeOption` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ErrorCodeOption.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ErrorCodeOption` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ErrorCodeOption.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: ErrorCodeOption.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: ErrorCodeOption.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `ErrorCodeOption` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: ErrorCodeOption.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `ErrorCodeOption` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: ErrorCodeOption.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: ErrorCodeOption.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: ErrorCodeOption.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `ErrorCodeOption` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: ErrorCodeOption.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: ErrorCodeOption.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: ErrorCodeOption.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: ErrorCodeOption.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `ErrorCodeOption` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: ErrorCodeOption.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ErrorCodeOption.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: ErrorCodeOption.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ErrorCodeOption` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ErrorCodeOption.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: ErrorCodeOption.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `ErrorCodeOption` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: ErrorCodeOption.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `ErrorCodeOption` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: ErrorCodeOption.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `ErrorCodeOption` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: ErrorCodeOption.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ErrorCodeOption.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ErrorCodeOption$FragmentInline<_$Scalars> | ErrorCodeOption$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ErrorCodeOption$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ErrorCodeOption<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ErrorCodeOption {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface IndonesianCity<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `IndonesianCity` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: IndonesianCity.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: IndonesianCity.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `IndonesianCity` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: IndonesianCity.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `IndonesianCity` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: IndonesianCity.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `IndonesianCity` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: IndonesianCity.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `IndonesianCity` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: IndonesianCity.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `IndonesianCity` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: IndonesianCity.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `IndonesianCity` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: IndonesianCity.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `IndonesianCity` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: IndonesianCity.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `IndonesianCity` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: IndonesianCity.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: IndonesianCity.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: IndonesianCity.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `IndonesianCity` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: IndonesianCity.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `IndonesianCity` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: IndonesianCity.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: IndonesianCity.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: IndonesianCity.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `IndonesianCity` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: IndonesianCity.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: IndonesianCity.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: IndonesianCity.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: IndonesianCity.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `IndonesianCity` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: IndonesianCity.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: IndonesianCity.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: IndonesianCity.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `IndonesianCity` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: IndonesianCity.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: IndonesianCity.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `IndonesianCity` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: IndonesianCity.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `IndonesianCity` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: IndonesianCity.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `IndonesianCity` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: IndonesianCity.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianCity.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: IndonesianCity$FragmentInline<_$Scalars> | IndonesianCity$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface IndonesianCity$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends IndonesianCity<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace IndonesianCity {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface IndonesianProvince<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `IndonesianProvince` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: IndonesianProvince.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: IndonesianProvince.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `IndonesianProvince` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: IndonesianProvince.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `IndonesianProvince` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: IndonesianProvince.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `IndonesianProvince` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: IndonesianProvince.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `IndonesianProvince` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: IndonesianProvince.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `IndonesianProvince` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: IndonesianProvince.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `IndonesianProvince` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: IndonesianProvince.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `IndonesianProvince` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: IndonesianProvince.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `IndonesianProvince` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: IndonesianProvince.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: IndonesianProvince.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: IndonesianProvince.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `IndonesianProvince` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: IndonesianProvince.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `IndonesianProvince` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: IndonesianProvince.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: IndonesianProvince.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: IndonesianProvince.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `IndonesianProvince` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: IndonesianProvince.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: IndonesianProvince.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: IndonesianProvince.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: IndonesianProvince.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `IndonesianProvince` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: IndonesianProvince.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: IndonesianProvince.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: IndonesianProvince.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `IndonesianProvince` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: IndonesianProvince.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: IndonesianProvince.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `IndonesianProvince` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: IndonesianProvince.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `IndonesianProvince` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: IndonesianProvince.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `IndonesianProvince` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: IndonesianProvince.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IndonesianProvince.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: IndonesianProvince$FragmentInline<_$Scalars> | IndonesianProvince$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface IndonesianProvince$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends IndonesianProvince<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace IndonesianProvince {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface IqlaaJordanianDistrict<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `IqlaaJordanianDistrict` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: IqlaaJordanianDistrict.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: IqlaaJordanianDistrict.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `IqlaaJordanianDistrict` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: IqlaaJordanianDistrict.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `IqlaaJordanianDistrict` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: IqlaaJordanianDistrict.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `IqlaaJordanianDistrict` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: IqlaaJordanianDistrict.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `IqlaaJordanianDistrict` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: IqlaaJordanianDistrict.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `IqlaaJordanianDistrict` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: IqlaaJordanianDistrict.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `IqlaaJordanianDistrict` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: IqlaaJordanianDistrict.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `IqlaaJordanianDistrict` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: IqlaaJordanianDistrict.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `IqlaaJordanianDistrict` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: IqlaaJordanianDistrict.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: IqlaaJordanianDistrict.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: IqlaaJordanianDistrict.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `IqlaaJordanianDistrict` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: IqlaaJordanianDistrict.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `IqlaaJordanianDistrict` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: IqlaaJordanianDistrict.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: IqlaaJordanianDistrict.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: IqlaaJordanianDistrict.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `IqlaaJordanianDistrict` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: IqlaaJordanianDistrict.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: IqlaaJordanianDistrict.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: IqlaaJordanianDistrict.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: IqlaaJordanianDistrict.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `IqlaaJordanianDistrict` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: IqlaaJordanianDistrict.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: IqlaaJordanianDistrict.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: IqlaaJordanianDistrict.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `IqlaaJordanianDistrict` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: IqlaaJordanianDistrict.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: IqlaaJordanianDistrict.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `IqlaaJordanianDistrict` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: IqlaaJordanianDistrict.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `IqlaaJordanianDistrict` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: IqlaaJordanianDistrict.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `IqlaaJordanianDistrict` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: IqlaaJordanianDistrict.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianDistrict.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: IqlaaJordanianDistrict$FragmentInline<_$Scalars> | IqlaaJordanianDistrict$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface IqlaaJordanianDistrict$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends IqlaaJordanianDistrict<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace IqlaaJordanianDistrict {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface IqlaaJordanianGovernorate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `IqlaaJordanianGovernorate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: IqlaaJordanianGovernorate.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: IqlaaJordanianGovernorate.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `IqlaaJordanianGovernorate` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: IqlaaJordanianGovernorate.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `IqlaaJordanianGovernorate` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: IqlaaJordanianGovernorate.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `IqlaaJordanianGovernorate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: IqlaaJordanianGovernorate.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `IqlaaJordanianGovernorate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: IqlaaJordanianGovernorate.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `IqlaaJordanianGovernorate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: IqlaaJordanianGovernorate.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `IqlaaJordanianGovernorate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: IqlaaJordanianGovernorate.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `IqlaaJordanianGovernorate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: IqlaaJordanianGovernorate.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `IqlaaJordanianGovernorate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: IqlaaJordanianGovernorate.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: IqlaaJordanianGovernorate.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: IqlaaJordanianGovernorate.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `IqlaaJordanianGovernorate` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: IqlaaJordanianGovernorate.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `IqlaaJordanianGovernorate` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: IqlaaJordanianGovernorate.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: IqlaaJordanianGovernorate.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: IqlaaJordanianGovernorate.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `IqlaaJordanianGovernorate` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: IqlaaJordanianGovernorate.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: IqlaaJordanianGovernorate.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: IqlaaJordanianGovernorate.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: IqlaaJordanianGovernorate.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `IqlaaJordanianGovernorate` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: IqlaaJordanianGovernorate.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: IqlaaJordanianGovernorate.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: IqlaaJordanianGovernorate.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `IqlaaJordanianGovernorate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: IqlaaJordanianGovernorate.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: IqlaaJordanianGovernorate.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `IqlaaJordanianGovernorate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: IqlaaJordanianGovernorate.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `IqlaaJordanianGovernorate` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: IqlaaJordanianGovernorate.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `IqlaaJordanianGovernorate` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: IqlaaJordanianGovernorate.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<IqlaaJordanianGovernorate.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: IqlaaJordanianGovernorate$FragmentInline<_$Scalars> | IqlaaJordanianGovernorate$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface IqlaaJordanianGovernorate$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends IqlaaJordanianGovernorate<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace IqlaaJordanianGovernorate {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface MastercardBank<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MastercardBank` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MastercardBank.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MastercardBank.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MastercardBank` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MastercardBank.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MastercardBank` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: MastercardBank.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MastercardBank` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MastercardBank.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MastercardBank` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MastercardBank.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MastercardBank` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MastercardBank.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MastercardBank` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MastercardBank.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MastercardBank` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MastercardBank.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MastercardBank` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MastercardBank.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: MastercardBank.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.textId<_$Scalars>>;
    /**
     * Select the `countryTextId` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryTextId?: MastercardBank.countryTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.countryTextId<_$Scalars>>;
    /**
     * Select the `name` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: MastercardBank.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.name<_$Scalars>>;
    /**
     * Select the `enDisplayName` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    enDisplayName?: MastercardBank.enDisplayName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.enDisplayName<_$Scalars>>;
    /**
     * Select the `esDisplayName` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    esDisplayName?: MastercardBank.esDisplayName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.esDisplayName<_$Scalars>>;
    /**
     * Select the `displayName` field on the `MastercardBank` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    displayName?: MastercardBank.displayName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MastercardBank.displayName<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MastercardBank$FragmentInline<_$Scalars> | MastercardBank$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MastercardBank$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MastercardBank<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MastercardBank {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type countryTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryTextId$SelectionSet<_$Scalars>;
    interface countryTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryTextId$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type enDisplayName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enDisplayName$SelectionSet<_$Scalars>;
    interface enDisplayName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `enDisplayName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type enDisplayName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enDisplayName$SelectionSet<_$Scalars>>;
    type esDisplayName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | esDisplayName$SelectionSet<_$Scalars>;
    interface esDisplayName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `esDisplayName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type esDisplayName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | esDisplayName$SelectionSet<_$Scalars>>;
    type displayName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayName$SelectionSet<_$Scalars>;
    interface displayName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `displayName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type displayName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | displayName$SelectionSet<_$Scalars>>;
}
export interface Brand<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Brand` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Brand.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Brand.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Brand` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Brand.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Brand` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Brand.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Brand` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Brand.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Brand` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Brand.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Brand` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Brand.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Brand` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Brand.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Brand` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Brand.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Brand` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Brand.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.deletedBy<_$Scalars>>;
    /**
     * Select the `name` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: Brand.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.name<_$Scalars>>;
    /**
     * Select the `importId` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    importId?: Brand.importId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.importId<_$Scalars>>;
    /**
     * Select the `imageSource` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    imageSource?: Brand.imageSource$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.imageSource<_$Scalars>>;
    /**
     * Select the `slug` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slug?: Brand.slug$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.slug<_$Scalars>>;
    /**
     * Select the `url` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    url?: Brand.url$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.url<_$Scalars>>;
    /**
     * Select the `balanceLookupUri` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    balanceLookupUri?: Brand.balanceLookupUri$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.balanceLookupUri<_$Scalars>>;
    /**
     * Select the `listed` field on the `Brand` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    listed?: Brand.listed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.listed<_$Scalars>>;
    /**
     * Select the `logoImageSource` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    logoImageSource?: Brand.logoImageSource$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.logoImageSource<_$Scalars>>;
    /**
     * Select the `description` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: Brand.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.description<_$Scalars>>;
    /**
     * Select the `alias1` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    alias1?: Brand.alias1$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.alias1<_$Scalars>>;
    /**
     * Select the `alias2` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    alias2?: Brand.alias2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.alias2<_$Scalars>>;
    /**
     * Select the `alias3` field on the `Brand` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    alias3?: Brand.alias3$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Brand.alias3<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Brand$FragmentInline<_$Scalars> | Brand$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Brand$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Brand<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Brand {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type importId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | importId$SelectionSet<_$Scalars>;
    interface importId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `importId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type importId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | importId$SelectionSet<_$Scalars>>;
    type imageSource<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSource$SelectionSet<_$Scalars>;
    interface imageSource$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `imageSource` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type imageSource$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSource$SelectionSet<_$Scalars>>;
    type slug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>;
    interface slug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>>;
    type url<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | url$SelectionSet<_$Scalars>;
    interface url$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `url` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type url$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | url$SelectionSet<_$Scalars>>;
    type balanceLookupUri<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | balanceLookupUri$SelectionSet<_$Scalars>;
    interface balanceLookupUri$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `balanceLookupUri` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type balanceLookupUri$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | balanceLookupUri$SelectionSet<_$Scalars>>;
    type listed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | listed$SelectionSet<_$Scalars>;
    interface listed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `listed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type listed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | listed$SelectionSet<_$Scalars>>;
    type logoImageSource<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | logoImageSource$SelectionSet<_$Scalars>;
    interface logoImageSource$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `logoImageSource` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type logoImageSource$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | logoImageSource$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type alias1<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alias1$SelectionSet<_$Scalars>;
    interface alias1$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `alias1` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type alias1$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alias1$SelectionSet<_$Scalars>>;
    type alias2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alias2$SelectionSet<_$Scalars>;
    interface alias2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `alias2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type alias2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alias2$SelectionSet<_$Scalars>>;
    type alias3<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alias3$SelectionSet<_$Scalars>;
    interface alias3$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `alias3` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type alias3$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | alias3$SelectionSet<_$Scalars>>;
}
export interface PurchaseOrderItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: PurchaseOrderItem.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `PurchaseOrderItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: PurchaseOrderItem.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `PurchaseOrderItem` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: PurchaseOrderItem.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `PurchaseOrderItem` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: PurchaseOrderItem.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `PurchaseOrderItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: PurchaseOrderItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: PurchaseOrderItem.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `PurchaseOrderItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: PurchaseOrderItem.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: PurchaseOrderItem.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `PurchaseOrderItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: PurchaseOrderItem.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: PurchaseOrderItem.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.deletedBy<_$Scalars>>;
    /**
     * Select the `purchaseOrderId` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    purchaseOrderId?: PurchaseOrderItem.purchaseOrderId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.purchaseOrderId<_$Scalars>>;
    /**
     * Select the `shoppingCartItemId` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    shoppingCartItemId?: PurchaseOrderItem.shoppingCartItemId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.shoppingCartItemId<_$Scalars>>;
    /**
     * Select the `productId` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    productId?: PurchaseOrderItem.productId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.productId<_$Scalars>>;
    /**
     * Select the `brandId` field on the `PurchaseOrderItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    brandId?: PurchaseOrderItem.brandId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.brandId<_$Scalars>>;
    /**
     * Select the `quantity` field on the `PurchaseOrderItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    quantity?: PurchaseOrderItem.quantity$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.quantity<_$Scalars>>;
    /**
     * Select the `price` field on the `PurchaseOrderItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    price?: PurchaseOrderItem.price$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.price<_$Scalars>>;
    /**
     * Select the `totalPrice` field on the `PurchaseOrderItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalPrice?: PurchaseOrderItem.totalPrice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrderItem.totalPrice<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: PurchaseOrderItem$FragmentInline<_$Scalars> | PurchaseOrderItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface PurchaseOrderItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends PurchaseOrderItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace PurchaseOrderItem {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type purchaseOrderId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | purchaseOrderId$SelectionSet<_$Scalars>;
    interface purchaseOrderId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `purchaseOrderId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type purchaseOrderId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | purchaseOrderId$SelectionSet<_$Scalars>>;
    type shoppingCartItemId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shoppingCartItemId$SelectionSet<_$Scalars>;
    interface shoppingCartItemId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shoppingCartItemId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shoppingCartItemId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shoppingCartItemId$SelectionSet<_$Scalars>>;
    type productId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productId$SelectionSet<_$Scalars>;
    interface productId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `productId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type productId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productId$SelectionSet<_$Scalars>>;
    type brandId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandId$SelectionSet<_$Scalars>;
    interface brandId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `brandId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type brandId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandId$SelectionSet<_$Scalars>>;
    type quantity<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | quantity$SelectionSet<_$Scalars>;
    interface quantity$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `quantity` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type quantity$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | quantity$SelectionSet<_$Scalars>>;
    type price<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | price$SelectionSet<_$Scalars>;
    interface price$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `price` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type price$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | price$SelectionSet<_$Scalars>>;
    type totalPrice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>;
    interface totalPrice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalPrice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalPrice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>>;
}
export interface PurchaseOrder<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `PurchaseOrder` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: PurchaseOrder.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `PurchaseOrder` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: PurchaseOrder.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `PurchaseOrder` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: PurchaseOrder.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `PurchaseOrder` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: PurchaseOrder.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `PurchaseOrder` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: PurchaseOrder.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `PurchaseOrder` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: PurchaseOrder.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `PurchaseOrder` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: PurchaseOrder.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `PurchaseOrder` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: PurchaseOrder.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `PurchaseOrder` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: PurchaseOrder.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `PurchaseOrder` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: PurchaseOrder.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `PurchaseOrder` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: PurchaseOrder.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.userId<_$Scalars>>;
    /**
     * Select the `shoppingCartId` field on the `PurchaseOrder` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    shoppingCartId?: PurchaseOrder.shoppingCartId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.shoppingCartId<_$Scalars>>;
    /**
     * Select the `sumItemPrice` field on the `PurchaseOrder` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    sumItemPrice?: PurchaseOrder.sumItemPrice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.sumItemPrice<_$Scalars>>;
    /**
     * Select the `totalPrice` field on the `PurchaseOrder` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalPrice?: PurchaseOrder.totalPrice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.totalPrice<_$Scalars>>;
    /**
     * Select the `vat` field on the `PurchaseOrder` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    vat?: PurchaseOrder.vat$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.vat<_$Scalars>>;
    /**
     * Select the `paidAt` field on the `PurchaseOrder` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    paidAt?: PurchaseOrder.paidAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.paidAt<_$Scalars>>;
    /**
     * Select the `canceledAt` field on the `PurchaseOrder` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    canceledAt?: PurchaseOrder.canceledAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.canceledAt<_$Scalars>>;
    /**
     * Select the `refundedAt` field on the `PurchaseOrder` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    refundedAt?: PurchaseOrder.refundedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.refundedAt<_$Scalars>>;
    /**
     * Select the `items` field on the `PurchaseOrder` object. Its type is `PurchaseOrderItem` (a `OutputObject` kind of type).
     */
    items?: PurchaseOrder.items$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<PurchaseOrder.items<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: PurchaseOrder$FragmentInline<_$Scalars> | PurchaseOrder$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface PurchaseOrder$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends PurchaseOrder<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace PurchaseOrder {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type shoppingCartId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shoppingCartId$SelectionSet<_$Scalars>;
    interface shoppingCartId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shoppingCartId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shoppingCartId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shoppingCartId$SelectionSet<_$Scalars>>;
    type sumItemPrice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sumItemPrice$SelectionSet<_$Scalars>;
    interface sumItemPrice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sumItemPrice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sumItemPrice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sumItemPrice$SelectionSet<_$Scalars>>;
    type totalPrice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>;
    interface totalPrice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalPrice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalPrice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>>;
    type vat<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | vat$SelectionSet<_$Scalars>;
    interface vat$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `vat` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type vat$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | vat$SelectionSet<_$Scalars>>;
    type paidAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | paidAt$SelectionSet<_$Scalars>;
    interface paidAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `paidAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type paidAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | paidAt$SelectionSet<_$Scalars>>;
    type canceledAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | canceledAt$SelectionSet<_$Scalars>;
    interface canceledAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `canceledAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type canceledAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | canceledAt$SelectionSet<_$Scalars>>;
    type refundedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | refundedAt$SelectionSet<_$Scalars>;
    interface refundedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `refundedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type refundedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | refundedAt$SelectionSet<_$Scalars>>;
    type items<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = items$SelectionSet<_$Scalars>;
    interface items$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$PurchaseOrderItem<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `items` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type items$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<items$SelectionSet<_$Scalars>>;
}
export interface ShoppingCartItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ShoppingCartItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ShoppingCartItem.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ShoppingCartItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ShoppingCartItem.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ShoppingCartItem` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ShoppingCartItem.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ShoppingCartItem` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ShoppingCartItem.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ShoppingCartItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ShoppingCartItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ShoppingCartItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ShoppingCartItem.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ShoppingCartItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ShoppingCartItem.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ShoppingCartItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ShoppingCartItem.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ShoppingCartItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ShoppingCartItem.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ShoppingCartItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ShoppingCartItem.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.deletedBy<_$Scalars>>;
    /**
     * Select the `shoppingCartId` field on the `ShoppingCartItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    shoppingCartId?: ShoppingCartItem.shoppingCartId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.shoppingCartId<_$Scalars>>;
    /**
     * Select the `productId` field on the `ShoppingCartItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    productId?: ShoppingCartItem.productId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.productId<_$Scalars>>;
    /**
     * Select the `quantity` field on the `ShoppingCartItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    quantity?: ShoppingCartItem.quantity$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.quantity<_$Scalars>>;
    /**
     * Select the `price` field on the `ShoppingCartItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    price?: ShoppingCartItem.price$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.price<_$Scalars>>;
    /**
     * Select the `totalPrice` field on the `ShoppingCartItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalPrice?: ShoppingCartItem.totalPrice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCartItem.totalPrice<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ShoppingCartItem$FragmentInline<_$Scalars> | ShoppingCartItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ShoppingCartItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ShoppingCartItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ShoppingCartItem {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type shoppingCartId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shoppingCartId$SelectionSet<_$Scalars>;
    interface shoppingCartId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shoppingCartId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shoppingCartId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shoppingCartId$SelectionSet<_$Scalars>>;
    type productId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productId$SelectionSet<_$Scalars>;
    interface productId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `productId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type productId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productId$SelectionSet<_$Scalars>>;
    type quantity<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | quantity$SelectionSet<_$Scalars>;
    interface quantity$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `quantity` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type quantity$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | quantity$SelectionSet<_$Scalars>>;
    type price<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | price$SelectionSet<_$Scalars>;
    interface price$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `price` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type price$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | price$SelectionSet<_$Scalars>>;
    type totalPrice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>;
    interface totalPrice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalPrice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalPrice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>>;
}
export interface ShoppingCart<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ShoppingCart` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ShoppingCart.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ShoppingCart` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ShoppingCart.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ShoppingCart` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ShoppingCart.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ShoppingCart` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ShoppingCart.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ShoppingCart` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ShoppingCart.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ShoppingCart` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ShoppingCart.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ShoppingCart` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ShoppingCart.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ShoppingCart` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ShoppingCart.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ShoppingCart` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ShoppingCart.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ShoppingCart` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ShoppingCart.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.deletedBy<_$Scalars>>;
    /**
     * Select the `sumItemPrice` field on the `ShoppingCart` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    sumItemPrice?: ShoppingCart.sumItemPrice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.sumItemPrice<_$Scalars>>;
    /**
     * Select the `totalPrice` field on the `ShoppingCart` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalPrice?: ShoppingCart.totalPrice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.totalPrice<_$Scalars>>;
    /**
     * Select the `vat` field on the `ShoppingCart` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    vat?: ShoppingCart.vat$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.vat<_$Scalars>>;
    /**
     * Select the `items` field on the `ShoppingCart` object. Its type is `ShoppingCartItem` (a `OutputObject` kind of type).
     */
    items?: ShoppingCart.items$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ShoppingCart.items<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ShoppingCart$FragmentInline<_$Scalars> | ShoppingCart$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ShoppingCart$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ShoppingCart<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ShoppingCart {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type sumItemPrice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sumItemPrice$SelectionSet<_$Scalars>;
    interface sumItemPrice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sumItemPrice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sumItemPrice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sumItemPrice$SelectionSet<_$Scalars>>;
    type totalPrice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>;
    interface totalPrice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalPrice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalPrice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalPrice$SelectionSet<_$Scalars>>;
    type vat<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | vat$SelectionSet<_$Scalars>;
    interface vat$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `vat` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type vat$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | vat$SelectionSet<_$Scalars>>;
    type items<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = items$SelectionSet<_$Scalars>;
    interface items$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ShoppingCartItem<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `items` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type items$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<items$SelectionSet<_$Scalars>>;
}
export interface WalletItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: WalletItem.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: WalletItem.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `WalletItem` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: WalletItem.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `WalletItem` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: WalletItem.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: WalletItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: WalletItem.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: WalletItem.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: WalletItem.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: WalletItem.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: WalletItem.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.deletedBy<_$Scalars>>;
    /**
     * Select the `walletId` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    walletId?: WalletItem.walletId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.walletId<_$Scalars>>;
    /**
     * Select the `productId` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    productId?: WalletItem.productId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.productId<_$Scalars>>;
    /**
     * Select the `purchaseOrderItemId` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    purchaseOrderItemId?: WalletItem.purchaseOrderItemId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.purchaseOrderItemId<_$Scalars>>;
    /**
     * Select the `brandId` field on the `WalletItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    brandId?: WalletItem.brandId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.brandId<_$Scalars>>;
    /**
     * Select the `productType` field on the `WalletItem` object. Its type is `ProductType` (a `Enum` kind of type).
     */
    productType?: WalletItem.productType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.productType<_$Scalars>>;
    /**
     * Select the `name` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: WalletItem.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.name<_$Scalars>>;
    /**
     * Select the `price` field on the `WalletItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    price?: WalletItem.price$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.price<_$Scalars>>;
    /**
     * Select the `initialBalance` field on the `WalletItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    initialBalance?: WalletItem.initialBalance$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.initialBalance<_$Scalars>>;
    /**
     * Select the `balance` field on the `WalletItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    balance?: WalletItem.balance$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.balance<_$Scalars>>;
    /**
     * Select the `code` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    code?: WalletItem.code$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.code<_$Scalars>>;
    /**
     * Select the `hasBarcode` field on the `WalletItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasBarcode?: WalletItem.hasBarcode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.hasBarcode<_$Scalars>>;
    /**
     * Select the `barcodeFormat` field on the `WalletItem` object. Its type is `BarcodeType` (a `Enum` kind of type).
     */
    barcodeFormat?: WalletItem.barcodeFormat$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.barcodeFormat<_$Scalars>>;
    /**
     * Select the `pin` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pin?: WalletItem.pin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.pin<_$Scalars>>;
    /**
     * Select the `source` field on the `WalletItem` object. Its type is `WalletItemSource` (a `Enum` kind of type).
     */
    source?: WalletItem.source$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.source<_$Scalars>>;
    /**
     * Select the `imageSourceFront` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    imageSourceFront?: WalletItem.imageSourceFront$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.imageSourceFront<_$Scalars>>;
    /**
     * Select the `imageSourceBack` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    imageSourceBack?: WalletItem.imageSourceBack$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.imageSourceBack<_$Scalars>>;
    /**
     * Select the `referenceUrl` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    referenceUrl?: WalletItem.referenceUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.referenceUrl<_$Scalars>>;
    /**
     * Select the `termsEn` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    termsEn?: WalletItem.termsEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.termsEn<_$Scalars>>;
    /**
     * Select the `termsUrl` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    termsUrl?: WalletItem.termsUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.termsUrl<_$Scalars>>;
    /**
     * Select the `instructionsEn` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    instructionsEn?: WalletItem.instructionsEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.instructionsEn<_$Scalars>>;
    /**
     * Select the `instructionsUrl` field on the `WalletItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    instructionsUrl?: WalletItem.instructionsUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.instructionsUrl<_$Scalars>>;
    /**
     * Select the `sortIndex` field on the `WalletItem` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    sortIndex?: WalletItem.sortIndex$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.sortIndex<_$Scalars>>;
    /**
     * Select the `issuedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    issuedAt?: WalletItem.issuedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.issuedAt<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: WalletItem.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.expiresAt<_$Scalars>>;
    /**
     * Select the `balanceUpdatedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    balanceUpdatedAt?: WalletItem.balanceUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.balanceUpdatedAt<_$Scalars>>;
    /**
     * Select the `transferStartedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    transferStartedAt?: WalletItem.transferStartedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.transferStartedAt<_$Scalars>>;
    /**
     * Select the `transferAcceptedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    transferAcceptedAt?: WalletItem.transferAcceptedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.transferAcceptedAt<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `WalletItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: WalletItem.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItem.archivedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: WalletItem$FragmentInline<_$Scalars> | WalletItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface WalletItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends WalletItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace WalletItem {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type walletId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | walletId$SelectionSet<_$Scalars>;
    interface walletId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `walletId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type walletId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | walletId$SelectionSet<_$Scalars>>;
    type productId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productId$SelectionSet<_$Scalars>;
    interface productId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `productId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type productId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productId$SelectionSet<_$Scalars>>;
    type purchaseOrderItemId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | purchaseOrderItemId$SelectionSet<_$Scalars>;
    interface purchaseOrderItemId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `purchaseOrderItemId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type purchaseOrderItemId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | purchaseOrderItemId$SelectionSet<_$Scalars>>;
    type brandId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandId$SelectionSet<_$Scalars>;
    interface brandId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `brandId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type brandId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandId$SelectionSet<_$Scalars>>;
    type productType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productType$SelectionSet<_$Scalars>;
    interface productType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `productType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type productType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productType$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type price<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | price$SelectionSet<_$Scalars>;
    interface price$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `price` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type price$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | price$SelectionSet<_$Scalars>>;
    type initialBalance<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | initialBalance$SelectionSet<_$Scalars>;
    interface initialBalance$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `initialBalance` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type initialBalance$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | initialBalance$SelectionSet<_$Scalars>>;
    type balance<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | balance$SelectionSet<_$Scalars>;
    interface balance$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `balance` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type balance$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | balance$SelectionSet<_$Scalars>>;
    type code<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | code$SelectionSet<_$Scalars>;
    interface code$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `code` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type code$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | code$SelectionSet<_$Scalars>>;
    type hasBarcode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasBarcode$SelectionSet<_$Scalars>;
    interface hasBarcode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasBarcode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasBarcode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasBarcode$SelectionSet<_$Scalars>>;
    type barcodeFormat<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | barcodeFormat$SelectionSet<_$Scalars>;
    interface barcodeFormat$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `barcodeFormat` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type barcodeFormat$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | barcodeFormat$SelectionSet<_$Scalars>>;
    type pin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pin$SelectionSet<_$Scalars>;
    interface pin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pin$SelectionSet<_$Scalars>>;
    type source<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>;
    interface source$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `source` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type source$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>>;
    type imageSourceFront<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceFront$SelectionSet<_$Scalars>;
    interface imageSourceFront$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `imageSourceFront` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type imageSourceFront$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceFront$SelectionSet<_$Scalars>>;
    type imageSourceBack<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceBack$SelectionSet<_$Scalars>;
    interface imageSourceBack$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `imageSourceBack` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type imageSourceBack$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceBack$SelectionSet<_$Scalars>>;
    type referenceUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | referenceUrl$SelectionSet<_$Scalars>;
    interface referenceUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `referenceUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type referenceUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | referenceUrl$SelectionSet<_$Scalars>>;
    type termsEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsEn$SelectionSet<_$Scalars>;
    interface termsEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `termsEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type termsEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsEn$SelectionSet<_$Scalars>>;
    type termsUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsUrl$SelectionSet<_$Scalars>;
    interface termsUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `termsUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type termsUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsUrl$SelectionSet<_$Scalars>>;
    type instructionsEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsEn$SelectionSet<_$Scalars>;
    interface instructionsEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `instructionsEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type instructionsEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsEn$SelectionSet<_$Scalars>>;
    type instructionsUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsUrl$SelectionSet<_$Scalars>;
    interface instructionsUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `instructionsUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type instructionsUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsUrl$SelectionSet<_$Scalars>>;
    type sortIndex<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sortIndex$SelectionSet<_$Scalars>;
    interface sortIndex$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sortIndex` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sortIndex$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sortIndex$SelectionSet<_$Scalars>>;
    type issuedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | issuedAt$SelectionSet<_$Scalars>;
    interface issuedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `issuedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type issuedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | issuedAt$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
    type balanceUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | balanceUpdatedAt$SelectionSet<_$Scalars>;
    interface balanceUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `balanceUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type balanceUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | balanceUpdatedAt$SelectionSet<_$Scalars>>;
    type transferStartedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | transferStartedAt$SelectionSet<_$Scalars>;
    interface transferStartedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `transferStartedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type transferStartedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | transferStartedAt$SelectionSet<_$Scalars>>;
    type transferAcceptedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | transferAcceptedAt$SelectionSet<_$Scalars>;
    interface transferAcceptedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `transferAcceptedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type transferAcceptedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | transferAcceptedAt$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
}
export interface WalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `WalletItemTransfer` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: WalletItemTransfer.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `WalletItemTransfer` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: WalletItemTransfer.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `WalletItemTransfer` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: WalletItemTransfer.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `WalletItemTransfer` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: WalletItemTransfer.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: WalletItemTransfer.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `WalletItemTransfer` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: WalletItemTransfer.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: WalletItemTransfer.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `WalletItemTransfer` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: WalletItemTransfer.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: WalletItemTransfer.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `WalletItemTransfer` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: WalletItemTransfer.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.deletedBy<_$Scalars>>;
    /**
     * Select the `walletItemId` field on the `WalletItemTransfer` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    walletItemId?: WalletItemTransfer.walletItemId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.walletItemId<_$Scalars>>;
    /**
     * Select the `notificationId` field on the `WalletItemTransfer` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    notificationId?: WalletItemTransfer.notificationId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.notificationId<_$Scalars>>;
    /**
     * Select the `recipientEmail` field on the `WalletItemTransfer` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientEmail?: WalletItemTransfer.recipientEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.recipientEmail<_$Scalars>>;
    /**
     * Select the `recipientFullName` field on the `WalletItemTransfer` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    recipientFullName?: WalletItemTransfer.recipientFullName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.recipientFullName<_$Scalars>>;
    /**
     * Select the `subjectText` field on the `WalletItemTransfer` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    subjectText?: WalletItemTransfer.subjectText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.subjectText<_$Scalars>>;
    /**
     * Select the `messageText` field on the `WalletItemTransfer` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: WalletItemTransfer.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.messageText<_$Scalars>>;
    /**
     * Select the `transferSlug` field on the `WalletItemTransfer` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    transferSlug?: WalletItemTransfer.transferSlug$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.transferSlug<_$Scalars>>;
    /**
     * Select the `sentAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    sentAt?: WalletItemTransfer.sentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.sentAt<_$Scalars>>;
    /**
     * Select the `acceptedAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    acceptedAt?: WalletItemTransfer.acceptedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.acceptedAt<_$Scalars>>;
    /**
     * Select the `declinedAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    declinedAt?: WalletItemTransfer.declinedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.declinedAt<_$Scalars>>;
    /**
     * Select the `canceledAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    canceledAt?: WalletItemTransfer.canceledAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.canceledAt<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `WalletItemTransfer` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: WalletItemTransfer.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletItemTransfer.archivedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: WalletItemTransfer$FragmentInline<_$Scalars> | WalletItemTransfer$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface WalletItemTransfer$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends WalletItemTransfer<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace WalletItemTransfer {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type walletItemId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | walletItemId$SelectionSet<_$Scalars>;
    interface walletItemId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `walletItemId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type walletItemId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | walletItemId$SelectionSet<_$Scalars>>;
    type notificationId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationId$SelectionSet<_$Scalars>;
    interface notificationId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationId$SelectionSet<_$Scalars>>;
    type recipientEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientEmail$SelectionSet<_$Scalars>;
    interface recipientEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientEmail$SelectionSet<_$Scalars>>;
    type recipientFullName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientFullName$SelectionSet<_$Scalars>;
    interface recipientFullName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `recipientFullName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type recipientFullName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | recipientFullName$SelectionSet<_$Scalars>>;
    type subjectText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | subjectText$SelectionSet<_$Scalars>;
    interface subjectText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `subjectText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type subjectText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | subjectText$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type transferSlug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | transferSlug$SelectionSet<_$Scalars>;
    interface transferSlug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `transferSlug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type transferSlug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | transferSlug$SelectionSet<_$Scalars>>;
    type sentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sentAt$SelectionSet<_$Scalars>;
    interface sentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sentAt$SelectionSet<_$Scalars>>;
    type acceptedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | acceptedAt$SelectionSet<_$Scalars>;
    interface acceptedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `acceptedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type acceptedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | acceptedAt$SelectionSet<_$Scalars>>;
    type declinedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | declinedAt$SelectionSet<_$Scalars>;
    interface declinedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `declinedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type declinedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | declinedAt$SelectionSet<_$Scalars>>;
    type canceledAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | canceledAt$SelectionSet<_$Scalars>;
    interface canceledAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `canceledAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type canceledAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | canceledAt$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
}
export interface Wallet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Wallet` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Wallet.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Wallet` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Wallet.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Wallet` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Wallet.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Wallet` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Wallet.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Wallet` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Wallet.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Wallet` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Wallet.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Wallet` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Wallet.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Wallet` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Wallet.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Wallet` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Wallet.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Wallet` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Wallet.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Wallet.deletedBy<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Wallet$FragmentInline<_$Scalars> | Wallet$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Wallet$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Wallet<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Wallet {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
}
export interface WalletServiceRecord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `WalletServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: WalletServiceRecord.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `WalletServiceRecord` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: WalletServiceRecord.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `WalletServiceRecord` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: WalletServiceRecord.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `WalletServiceRecord` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: WalletServiceRecord.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `WalletServiceRecord` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: WalletServiceRecord.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `WalletServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: WalletServiceRecord.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `WalletServiceRecord` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: WalletServiceRecord.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `WalletServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: WalletServiceRecord.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `WalletServiceRecord` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: WalletServiceRecord.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `WalletServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: WalletServiceRecord.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.deletedBy<_$Scalars>>;
    /**
     * Select the `serviceName` field on the `WalletServiceRecord` object. Its type is `ServiceName` (a `Enum` kind of type).
     */
    serviceName?: WalletServiceRecord.serviceName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<WalletServiceRecord.serviceName<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: WalletServiceRecord$FragmentInline<_$Scalars> | WalletServiceRecord$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface WalletServiceRecord$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends WalletServiceRecord<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace WalletServiceRecord {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type serviceName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | serviceName$SelectionSet<_$Scalars>;
    interface serviceName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `serviceName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type serviceName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | serviceName$SelectionSet<_$Scalars>>;
}
export interface GiftCardProduct<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: GiftCardProduct.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: GiftCardProduct.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `GiftCardProduct` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: GiftCardProduct.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `GiftCardProduct` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: GiftCardProduct.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `GiftCardProduct` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: GiftCardProduct.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: GiftCardProduct.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `GiftCardProduct` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: GiftCardProduct.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: GiftCardProduct.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `GiftCardProduct` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: GiftCardProduct.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: GiftCardProduct.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.deletedBy<_$Scalars>>;
    /**
     * Select the `importId` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    importId?: GiftCardProduct.importId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.importId<_$Scalars>>;
    /**
     * Select the `brandId` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    brandId?: GiftCardProduct.brandId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.brandId<_$Scalars>>;
    /**
     * Select the `brandImportId` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    brandImportId?: GiftCardProduct.brandImportId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.brandImportId<_$Scalars>>;
    /**
     * Select the `name` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: GiftCardProduct.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.name<_$Scalars>>;
    /**
     * Select the `description` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: GiftCardProduct.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.description<_$Scalars>>;
    /**
     * Select the `productType` field on the `GiftCardProduct` object. Its type is `ProductType` (a `Enum` kind of type).
     */
    productType?: GiftCardProduct.productType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.productType<_$Scalars>>;
    /**
     * Select the `categories` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    categories?: GiftCardProduct.categories$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.categories<_$Scalars>>;
    /**
     * Select the `slug` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slug?: GiftCardProduct.slug$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.slug<_$Scalars>>;
    /**
     * Select the `url` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    url?: GiftCardProduct.url$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.url<_$Scalars>>;
    /**
     * Select the `imageSourceFront` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    imageSourceFront?: GiftCardProduct.imageSourceFront$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.imageSourceFront<_$Scalars>>;
    /**
     * Select the `imageSourceBack` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    imageSourceBack?: GiftCardProduct.imageSourceBack$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.imageSourceBack<_$Scalars>>;
    /**
     * Select the `hasBarcode` field on the `GiftCardProduct` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasBarcode?: GiftCardProduct.hasBarcode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.hasBarcode<_$Scalars>>;
    /**
     * Select the `barcodeFormat` field on the `GiftCardProduct` object. Its type is `BarcodeType` (a `Enum` kind of type).
     */
    barcodeFormat?: GiftCardProduct.barcodeFormat$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.barcodeFormat<_$Scalars>>;
    /**
     * Select the `genericGiftCardId` field on the `GiftCardProduct` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    genericGiftCardId?: GiftCardProduct.genericGiftCardId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.genericGiftCardId<_$Scalars>>;
    /**
     * Select the `isGeneric` field on the `GiftCardProduct` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isGeneric?: GiftCardProduct.isGeneric$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.isGeneric<_$Scalars>>;
    /**
     * Select the `hasPin` field on the `GiftCardProduct` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasPin?: GiftCardProduct.hasPin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.hasPin<_$Scalars>>;
    /**
     * Select the `termsEn` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    termsEn?: GiftCardProduct.termsEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.termsEn<_$Scalars>>;
    /**
     * Select the `termsUrl` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    termsUrl?: GiftCardProduct.termsUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.termsUrl<_$Scalars>>;
    /**
     * Select the `instructionsEn` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    instructionsEn?: GiftCardProduct.instructionsEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.instructionsEn<_$Scalars>>;
    /**
     * Select the `instructionsUrl` field on the `GiftCardProduct` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    instructionsUrl?: GiftCardProduct.instructionsUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.instructionsUrl<_$Scalars>>;
    /**
     * Select the `denominations` field on the `GiftCardProduct` object. Its type is `GiftCardDenomination` (a `OutputObject` kind of type).
     */
    denominations?: GiftCardProduct.denominations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardProduct.denominations<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GiftCardProduct$FragmentInline<_$Scalars> | GiftCardProduct$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GiftCardProduct$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GiftCardProduct<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GiftCardProduct {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type importId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | importId$SelectionSet<_$Scalars>;
    interface importId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `importId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type importId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | importId$SelectionSet<_$Scalars>>;
    type brandId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandId$SelectionSet<_$Scalars>;
    interface brandId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `brandId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type brandId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandId$SelectionSet<_$Scalars>>;
    type brandImportId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandImportId$SelectionSet<_$Scalars>;
    interface brandImportId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `brandImportId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type brandImportId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | brandImportId$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type productType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productType$SelectionSet<_$Scalars>;
    interface productType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `productType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type productType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | productType$SelectionSet<_$Scalars>>;
    type categories<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | categories$SelectionSet<_$Scalars>;
    interface categories$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `categories` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type categories$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | categories$SelectionSet<_$Scalars>>;
    type slug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>;
    interface slug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>>;
    type url<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | url$SelectionSet<_$Scalars>;
    interface url$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `url` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type url$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | url$SelectionSet<_$Scalars>>;
    type imageSourceFront<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceFront$SelectionSet<_$Scalars>;
    interface imageSourceFront$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `imageSourceFront` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type imageSourceFront$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceFront$SelectionSet<_$Scalars>>;
    type imageSourceBack<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceBack$SelectionSet<_$Scalars>;
    interface imageSourceBack$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `imageSourceBack` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type imageSourceBack$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageSourceBack$SelectionSet<_$Scalars>>;
    type hasBarcode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasBarcode$SelectionSet<_$Scalars>;
    interface hasBarcode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasBarcode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasBarcode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasBarcode$SelectionSet<_$Scalars>>;
    type barcodeFormat<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | barcodeFormat$SelectionSet<_$Scalars>;
    interface barcodeFormat$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `barcodeFormat` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type barcodeFormat$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | barcodeFormat$SelectionSet<_$Scalars>>;
    type genericGiftCardId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genericGiftCardId$SelectionSet<_$Scalars>;
    interface genericGiftCardId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genericGiftCardId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genericGiftCardId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genericGiftCardId$SelectionSet<_$Scalars>>;
    type isGeneric<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isGeneric$SelectionSet<_$Scalars>;
    interface isGeneric$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isGeneric` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isGeneric$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isGeneric$SelectionSet<_$Scalars>>;
    type hasPin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasPin$SelectionSet<_$Scalars>;
    interface hasPin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasPin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasPin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasPin$SelectionSet<_$Scalars>>;
    type termsEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsEn$SelectionSet<_$Scalars>;
    interface termsEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `termsEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type termsEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsEn$SelectionSet<_$Scalars>>;
    type termsUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsUrl$SelectionSet<_$Scalars>;
    interface termsUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `termsUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type termsUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsUrl$SelectionSet<_$Scalars>>;
    type instructionsEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsEn$SelectionSet<_$Scalars>;
    interface instructionsEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `instructionsEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type instructionsEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsEn$SelectionSet<_$Scalars>>;
    type instructionsUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsUrl$SelectionSet<_$Scalars>;
    interface instructionsUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `instructionsUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type instructionsUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | instructionsUrl$SelectionSet<_$Scalars>>;
    type denominations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = denominations$SelectionSet<_$Scalars>;
    interface denominations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$GiftCardDenomination<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `denominations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type denominations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<denominations$SelectionSet<_$Scalars>>;
}
export interface GiftCardDenomination<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `amount` field on the `GiftCardDenomination` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    amount?: GiftCardDenomination.amount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardDenomination.amount<_$Scalars>>;
    /**
     * Select the `enabled` field on the `GiftCardDenomination` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    enabled?: GiftCardDenomination.enabled$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<GiftCardDenomination.enabled<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: GiftCardDenomination$FragmentInline<_$Scalars> | GiftCardDenomination$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface GiftCardDenomination$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends GiftCardDenomination<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace GiftCardDenomination {
    type amount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | amount$SelectionSet<_$Scalars>;
    interface amount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `amount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type amount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | amount$SelectionSet<_$Scalars>>;
    type enabled<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enabled$SelectionSet<_$Scalars>;
    interface enabled$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `enabled` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type enabled$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | enabled$SelectionSet<_$Scalars>>;
}
export interface MarketplaceServiceRecord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MarketplaceServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MarketplaceServiceRecord.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MarketplaceServiceRecord` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MarketplaceServiceRecord.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MarketplaceServiceRecord` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MarketplaceServiceRecord.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MarketplaceServiceRecord` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: MarketplaceServiceRecord.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MarketplaceServiceRecord` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MarketplaceServiceRecord.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MarketplaceServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MarketplaceServiceRecord.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MarketplaceServiceRecord` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MarketplaceServiceRecord.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MarketplaceServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MarketplaceServiceRecord.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MarketplaceServiceRecord` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MarketplaceServiceRecord.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MarketplaceServiceRecord` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MarketplaceServiceRecord.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.deletedBy<_$Scalars>>;
    /**
     * Select the `serviceName` field on the `MarketplaceServiceRecord` object. Its type is `ServiceName` (a `Enum` kind of type).
     */
    serviceName?: MarketplaceServiceRecord.serviceName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MarketplaceServiceRecord.serviceName<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MarketplaceServiceRecord$FragmentInline<_$Scalars> | MarketplaceServiceRecord$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MarketplaceServiceRecord$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MarketplaceServiceRecord<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MarketplaceServiceRecord {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type serviceName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | serviceName$SelectionSet<_$Scalars>;
    interface serviceName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `serviceName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type serviceName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | serviceName$SelectionSet<_$Scalars>>;
}
export interface ProductCategory<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ProductCategory` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ProductCategory.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ProductCategory` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ProductCategory.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ProductCategory` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ProductCategory.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ProductCategory` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ProductCategory.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ProductCategory` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ProductCategory.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ProductCategory` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ProductCategory.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ProductCategory` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ProductCategory.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ProductCategory` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ProductCategory.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ProductCategory` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ProductCategory.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ProductCategory` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ProductCategory.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.deletedBy<_$Scalars>>;
    /**
     * Select the `importId` field on the `ProductCategory` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    importId?: ProductCategory.importId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.importId<_$Scalars>>;
    /**
     * Select the `name` field on the `ProductCategory` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: ProductCategory.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.name<_$Scalars>>;
    /**
     * Select the `labelEn` field on the `ProductCategory` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    labelEn?: ProductCategory.labelEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.labelEn<_$Scalars>>;
    /**
     * Select the `sortIndex` field on the `ProductCategory` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    sortIndex?: ProductCategory.sortIndex$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ProductCategory.sortIndex<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ProductCategory$FragmentInline<_$Scalars> | ProductCategory$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ProductCategory$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ProductCategory<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ProductCategory {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type importId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | importId$SelectionSet<_$Scalars>;
    interface importId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `importId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type importId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | importId$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type labelEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | labelEn$SelectionSet<_$Scalars>;
    interface labelEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `labelEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type labelEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | labelEn$SelectionSet<_$Scalars>>;
    type sortIndex<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sortIndex$SelectionSet<_$Scalars>;
    interface sortIndex$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sortIndex` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sortIndex$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sortIndex$SelectionSet<_$Scalars>>;
}
export interface UserSearch<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UserSearch.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `UserSearch` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: UserSearch.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `UserSearch` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: UserSearch.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `UserSearch` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: UserSearch.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserSearch` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserSearch.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: UserSearch.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UserSearch` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserSearch.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: UserSearch.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UserSearch` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UserSearch.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: UserSearch.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: UserSearch.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.userId<_$Scalars>>;
    /**
     * Select the `matchingEngineId` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    matchingEngineId?: UserSearch.matchingEngineId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.matchingEngineId<_$Scalars>>;
    /**
     * Select the `userSearchType` field on the `UserSearch` object. Its type is `UserSearchType` (a `Enum` kind of type).
     */
    userSearchType?: UserSearch.userSearchType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.userSearchType<_$Scalars>>;
    /**
     * Select the `name` field on the `UserSearch` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    name?: UserSearch.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.name<_$Scalars>>;
    /**
     * Select the `filter` field on the `UserSearch` object. Its type is `UserSearchFilter` (a `OutputObject` kind of type).
     */
    filter?: UserSearch.filter$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.filter<_$Scalars>>;
    /**
     * Select the `excludeUserIds` field on the `UserSearch` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    excludeUserIds?: UserSearch.excludeUserIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.excludeUserIds<_$Scalars>>;
    /**
     * Select the `maxResultCount` field on the `UserSearch` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    maxResultCount?: UserSearch.maxResultCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.maxResultCount<_$Scalars>>;
    /**
     * Select the `subscription` field on the `UserSearch` object. Its type is `UserSearchSubscriptionType` (a `Enum` kind of type).
     */
    subscription?: UserSearch.subscription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.subscription<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `UserSearch` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: UserSearch.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.expiresAt<_$Scalars>>;
    /**
     * Select the `resultExpiresAt` field on the `UserSearch` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    resultExpiresAt?: UserSearch.resultExpiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.resultExpiresAt<_$Scalars>>;
    /**
     * Select the `runInfos` field on the `UserSearch` object. Its type is `UserSearchRunInfo` (a `OutputObject` kind of type).
     */
    runInfos?: UserSearch.runInfos$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.runInfos<_$Scalars>>;
    /**
     * Select the `topFoundUsers` field on the `UserSearch` object. Its type is `UserListItem` (a `OutputObject` kind of type).
     */
    topFoundUsers?: UserSearch.topFoundUsers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearch.topFoundUsers<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserSearch$FragmentInline<_$Scalars> | UserSearch$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserSearch$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserSearch<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserSearch {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type matchingEngineId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | matchingEngineId$SelectionSet<_$Scalars>;
    interface matchingEngineId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `matchingEngineId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type matchingEngineId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | matchingEngineId$SelectionSet<_$Scalars>>;
    type userSearchType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userSearchType$SelectionSet<_$Scalars>;
    interface userSearchType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userSearchType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userSearchType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userSearchType$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type filter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = filter$SelectionSet<_$Scalars>;
    interface filter$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserSearchFilter<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `filter` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type filter$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<filter$SelectionSet<_$Scalars>>;
    type excludeUserIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | excludeUserIds$SelectionSet<_$Scalars>;
    interface excludeUserIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `excludeUserIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type excludeUserIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | excludeUserIds$SelectionSet<_$Scalars>>;
    type maxResultCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | maxResultCount$SelectionSet<_$Scalars>;
    interface maxResultCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `maxResultCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type maxResultCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | maxResultCount$SelectionSet<_$Scalars>>;
    type subscription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | subscription$SelectionSet<_$Scalars>;
    interface subscription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `subscription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type subscription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | subscription$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
    type resultExpiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | resultExpiresAt$SelectionSet<_$Scalars>;
    interface resultExpiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `resultExpiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type resultExpiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | resultExpiresAt$SelectionSet<_$Scalars>>;
    type runInfos<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = runInfos$SelectionSet<_$Scalars>;
    interface runInfos$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserSearchRunInfo<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `runInfos` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type runInfos$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<runInfos$SelectionSet<_$Scalars>>;
    type topFoundUsers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = topFoundUsers$SelectionSet<_$Scalars>;
    interface topFoundUsers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserListItem<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `topFoundUsers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type topFoundUsers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<topFoundUsers$SelectionSet<_$Scalars>>;
}
export interface UserSearchFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `searchText` field on the `UserSearchFilter` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    searchText?: UserSearchFilter.searchText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.searchText<_$Scalars>>;
    /**
     * Select the `seeksHelp` field on the `UserSearchFilter` object. Its type is `UserSearchFieldOption` (a `Enum` kind of type).
     */
    seeksHelp?: UserSearchFilter.seeksHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.seeksHelp<_$Scalars>>;
    /**
     * Select the `offersHelp` field on the `UserSearchFilter` object. Its type is `UserSearchFieldOption` (a `Enum` kind of type).
     */
    offersHelp?: UserSearchFilter.offersHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.offersHelp<_$Scalars>>;
    /**
     * Select the `languagesTextIds` field on the `UserSearchFilter` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    languagesTextIds?: UserSearchFilter.languagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.languagesTextIds<_$Scalars>>;
    /**
     * Select the `expertisesTextIds` field on the `UserSearchFilter` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    expertisesTextIds?: UserSearchFilter.expertisesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.expertisesTextIds<_$Scalars>>;
    /**
     * Select the `industriesTextIds` field on the `UserSearchFilter` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    industriesTextIds?: UserSearchFilter.industriesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.industriesTextIds<_$Scalars>>;
    /**
     * Select the `countryTextIds` field on the `UserSearchFilter` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryTextIds?: UserSearchFilter.countryTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.countryTextIds<_$Scalars>>;
    /**
     * Select the `companyStagesTextIds` field on the `UserSearchFilter` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    companyStagesTextIds?: UserSearchFilter.companyStagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.companyStagesTextIds<_$Scalars>>;
    /**
     * Select the `latestActivityAfter` field on the `UserSearchFilter` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    latestActivityAfter?: UserSearchFilter.latestActivityAfter$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchFilter.latestActivityAfter<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserSearchFilter$FragmentInline<_$Scalars> | UserSearchFilter$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserSearchFilter$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserSearchFilter<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserSearchFilter {
    type searchText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | searchText$SelectionSet<_$Scalars>;
    interface searchText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `searchText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type searchText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | searchText$SelectionSet<_$Scalars>>;
    type seeksHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>;
    interface seeksHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seeksHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seeksHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>>;
    type offersHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>;
    interface offersHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `offersHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type offersHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>>;
    type languagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languagesTextIds$SelectionSet<_$Scalars>;
    interface languagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `languagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type languagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languagesTextIds$SelectionSet<_$Scalars>>;
    type expertisesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expertisesTextIds$SelectionSet<_$Scalars>;
    interface expertisesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expertisesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expertisesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expertisesTextIds$SelectionSet<_$Scalars>>;
    type industriesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industriesTextIds$SelectionSet<_$Scalars>;
    interface industriesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `industriesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type industriesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | industriesTextIds$SelectionSet<_$Scalars>>;
    type countryTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryTextIds$SelectionSet<_$Scalars>;
    interface countryTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryTextIds$SelectionSet<_$Scalars>>;
    type companyStagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyStagesTextIds$SelectionSet<_$Scalars>;
    interface companyStagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `companyStagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyStagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyStagesTextIds$SelectionSet<_$Scalars>>;
    type latestActivityAfter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAfter$SelectionSet<_$Scalars>;
    interface latestActivityAfter$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `latestActivityAfter` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestActivityAfter$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAfter$SelectionSet<_$Scalars>>;
}
export interface UserSearchRunInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `topUserIds` field on the `UserSearchRunInfo` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    topUserIds?: UserSearchRunInfo.topUserIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.topUserIds<_$Scalars>>;
    /**
     * Select the `userCount` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    userCount?: UserSearchRunInfo.userCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.userCount<_$Scalars>>;
    /**
     * Select the `matchCount` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    matchCount?: UserSearchRunInfo.matchCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.matchCount<_$Scalars>>;
    /**
     * Select the `batchSize` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    batchSize?: UserSearchRunInfo.batchSize$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.batchSize<_$Scalars>>;
    /**
     * Select the `batchCount` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    batchCount?: UserSearchRunInfo.batchCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.batchCount<_$Scalars>>;
    /**
     * Select the `startedAt` field on the `UserSearchRunInfo` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    startedAt?: UserSearchRunInfo.startedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.startedAt<_$Scalars>>;
    /**
     * Select the `finishedAt` field on the `UserSearchRunInfo` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    finishedAt?: UserSearchRunInfo.finishedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.finishedAt<_$Scalars>>;
    /**
     * Select the `durationInSecs` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    durationInSecs?: UserSearchRunInfo.durationInSecs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.durationInSecs<_$Scalars>>;
    /**
     * Select the `durationHuman` field on the `UserSearchRunInfo` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    durationHuman?: UserSearchRunInfo.durationHuman$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.durationHuman<_$Scalars>>;
    /**
     * Select the `totalDurationSearchInDb` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalDurationSearchInDb?: UserSearchRunInfo.totalDurationSearchInDb$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.totalDurationSearchInDb<_$Scalars>>;
    /**
     * Select the `totalDurationReadFromDb` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalDurationReadFromDb?: UserSearchRunInfo.totalDurationReadFromDb$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.totalDurationReadFromDb<_$Scalars>>;
    /**
     * Select the `totalDurationWriteToDb` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalDurationWriteToDb?: UserSearchRunInfo.totalDurationWriteToDb$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.totalDurationWriteToDb<_$Scalars>>;
    /**
     * Select the `totalDurationMatching` field on the `UserSearchRunInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    totalDurationMatching?: UserSearchRunInfo.totalDurationMatching$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserSearchRunInfo.totalDurationMatching<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserSearchRunInfo$FragmentInline<_$Scalars> | UserSearchRunInfo$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserSearchRunInfo$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserSearchRunInfo<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserSearchRunInfo {
    type topUserIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | topUserIds$SelectionSet<_$Scalars>;
    interface topUserIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `topUserIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type topUserIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | topUserIds$SelectionSet<_$Scalars>>;
    type userCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userCount$SelectionSet<_$Scalars>;
    interface userCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userCount$SelectionSet<_$Scalars>>;
    type matchCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | matchCount$SelectionSet<_$Scalars>;
    interface matchCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `matchCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type matchCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | matchCount$SelectionSet<_$Scalars>>;
    type batchSize<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | batchSize$SelectionSet<_$Scalars>;
    interface batchSize$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `batchSize` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type batchSize$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | batchSize$SelectionSet<_$Scalars>>;
    type batchCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | batchCount$SelectionSet<_$Scalars>;
    interface batchCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `batchCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type batchCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | batchCount$SelectionSet<_$Scalars>>;
    type startedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startedAt$SelectionSet<_$Scalars>;
    interface startedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `startedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startedAt$SelectionSet<_$Scalars>>;
    type finishedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | finishedAt$SelectionSet<_$Scalars>;
    interface finishedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `finishedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type finishedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | finishedAt$SelectionSet<_$Scalars>>;
    type durationInSecs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | durationInSecs$SelectionSet<_$Scalars>;
    interface durationInSecs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `durationInSecs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type durationInSecs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | durationInSecs$SelectionSet<_$Scalars>>;
    type durationHuman<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | durationHuman$SelectionSet<_$Scalars>;
    interface durationHuman$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `durationHuman` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type durationHuman$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | durationHuman$SelectionSet<_$Scalars>>;
    type totalDurationSearchInDb<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationSearchInDb$SelectionSet<_$Scalars>;
    interface totalDurationSearchInDb$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalDurationSearchInDb` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalDurationSearchInDb$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationSearchInDb$SelectionSet<_$Scalars>>;
    type totalDurationReadFromDb<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationReadFromDb$SelectionSet<_$Scalars>;
    interface totalDurationReadFromDb$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalDurationReadFromDb` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalDurationReadFromDb$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationReadFromDb$SelectionSet<_$Scalars>>;
    type totalDurationWriteToDb<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationWriteToDb$SelectionSet<_$Scalars>;
    interface totalDurationWriteToDb$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalDurationWriteToDb` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalDurationWriteToDb$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationWriteToDb$SelectionSet<_$Scalars>>;
    type totalDurationMatching<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationMatching$SelectionSet<_$Scalars>;
    interface totalDurationMatching$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `totalDurationMatching` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type totalDurationMatching$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | totalDurationMatching$SelectionSet<_$Scalars>>;
}
export interface UserWithScore<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `UserWithScore` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: UserWithScore.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.id<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `UserWithScore` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: UserWithScore.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.createdAt<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `UserWithScore` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: UserWithScore.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.updatedAt<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `UserWithScore` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: UserWithScore.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.deletedAt<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: UserWithScore.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.userHandle<_$Scalars>>;
    /**
     * Select the `firstName` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: UserWithScore.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: UserWithScore.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.lastName<_$Scalars>>;
    /**
     * Select the `avatarUrl` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    avatarUrl?: UserWithScore.avatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.avatarUrl<_$Scalars>>;
    /**
     * Select the `genderTextId` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    genderTextId?: UserWithScore.genderTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.genderTextId<_$Scalars>>;
    /**
     * Select the `websites` field on the `UserWithScore` object. Its type is `LabeledStringValue` (a `OutputObject` kind of type).
     */
    websites?: UserWithScore.websites$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.websites<_$Scalars>>;
    /**
     * Select the `preferredLanguageTextId` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    preferredLanguageTextId?: UserWithScore.preferredLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.preferredLanguageTextId<_$Scalars>>;
    /**
     * Select the `spokenLanguagesTextIds` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    spokenLanguagesTextIds?: UserWithScore.spokenLanguagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.spokenLanguagesTextIds<_$Scalars>>;
    /**
     * Select the `countryOfResidenceTextId` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryOfResidenceTextId?: UserWithScore.countryOfResidenceTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.countryOfResidenceTextId<_$Scalars>>;
    /**
     * Select the `regionOfResidence` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    regionOfResidence?: UserWithScore.regionOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.regionOfResidence<_$Scalars>>;
    /**
     * Select the `cityOfResidence` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    cityOfResidence?: UserWithScore.cityOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.cityOfResidence<_$Scalars>>;
    /**
     * Select the `timezone` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    timezone?: UserWithScore.timezone$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.timezone<_$Scalars>>;
    /**
     * Select the `roles` field on the `UserWithScore` object. Its type is `UserRole` (a `Enum` kind of type).
     */
    roles?: UserWithScore.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.roles<_$Scalars>>;
    /**
     * Select the `discoverable` field on the `UserWithScore` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    discoverable?: UserWithScore.discoverable$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.discoverable<_$Scalars>>;
    /**
     * Select the `trustLevel` field on the `UserWithScore` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    trustLevel?: UserWithScore.trustLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.trustLevel<_$Scalars>>;
    /**
     * Select the `userBlocks` field on the `UserWithScore` object. Its type is `UserBlock` (a `OutputObject` kind of type).
     */
    userBlocks?: UserWithScore.userBlocks$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.userBlocks<_$Scalars>>;
    /**
     * Select the `latestActivityAt` field on the `UserWithScore` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    latestActivityAt?: UserWithScore.latestActivityAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.latestActivityAt<_$Scalars>>;
    /**
     * Select the `inactivatedAt` field on the `UserWithScore` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    inactivatedAt?: UserWithScore.inactivatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.inactivatedAt<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `UserWithScore` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: UserWithScore.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.suspendedAt<_$Scalars>>;
    /**
     * Select the `seeksHelp` field on the `UserWithScore` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    seeksHelp?: UserWithScore.seeksHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.seeksHelp<_$Scalars>>;
    /**
     * Select the `offersHelp` field on the `UserWithScore` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    offersHelp?: UserWithScore.offersHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.offersHelp<_$Scalars>>;
    /**
     * Select the `yearsManagementExperience` field on the `UserWithScore` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsManagementExperience?: UserWithScore.yearsManagementExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.yearsManagementExperience<_$Scalars>>;
    /**
     * Select the `yearsOwnershipExperience` field on the `UserWithScore` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsOwnershipExperience?: UserWithScore.yearsOwnershipExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.yearsOwnershipExperience<_$Scalars>>;
    /**
     * Select the `academicExperiences` field on the `UserWithScore` object. Its type is `AcademicExperience` (a `OutputObject` kind of type).
     */
    academicExperiences?: UserWithScore.academicExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.academicExperiences<_$Scalars>>;
    /**
     * Select the `businessExperiences` field on the `UserWithScore` object. Its type is `BusinessExperience` (a `OutputObject` kind of type).
     */
    businessExperiences?: UserWithScore.businessExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.businessExperiences<_$Scalars>>;
    /**
     * Select the `isOnVacation` field on the `UserWithScore` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isOnVacation?: UserWithScore.isOnVacation$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.isOnVacation<_$Scalars>>;
    /**
     * Select the `mentor` field on the `UserWithScore` object. Its type is `MentorsGroupMembership` (a `OutputObject` kind of type).
     */
    mentor?: UserWithScore.mentor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.mentor<_$Scalars>>;
    /**
     * Select the `mentee` field on the `UserWithScore` object. Its type is `MenteesGroupMembership` (a `OutputObject` kind of type).
     */
    mentee?: UserWithScore.mentee$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.mentee<_$Scalars>>;
    /**
     * Select the `groupMemberships` field on the `UserWithScore` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    groupMemberships?: UserWithScore.groupMemberships$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.groupMemberships<_$Scalars>>;
    /**
     * Select the `companies` field on the `UserWithScore` object. Its type is `Company` (a `OutputObject` kind of type).
     */
    companies?: UserWithScore.companies$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.companies<_$Scalars>>;
    /**
     * Select the `countryOfOrigin` field on the `UserWithScore` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfOrigin?: UserWithScore.countryOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.countryOfOrigin<_$Scalars>>;
    /**
     * Select the `countryOfResidence` field on the `UserWithScore` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfResidence?: UserWithScore.countryOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.countryOfResidence<_$Scalars>>;
    /**
     * Select the `educationLevel` field on the `UserWithScore` object. Its type is `EducationLevel` (a `OutputObject` kind of type).
     */
    educationLevel?: UserWithScore.educationLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.educationLevel<_$Scalars>>;
    /**
     * Select the `endorsements` field on the `UserWithScore` object. Its type is `EndorsementWithTypes` (a `OutputObject` kind of type).
     */
    endorsements?: UserWithScore.endorsements$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.endorsements<_$Scalars>>;
    /**
     * Select the `groups` field on the `UserWithScore` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    groups?: UserWithScore.groups$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.groups<_$Scalars>>;
    /**
     * Select the `profileCompletionPercentage` field on the `UserWithScore` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    profileCompletionPercentage?: UserWithScore.profileCompletionPercentage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.profileCompletionPercentage<_$Scalars>>;
    /**
     * Select the `profileRole` field on the `UserWithScore` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    profileRole?: UserWithScore.profileRole$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.profileRole<_$Scalars>>;
    /**
     * Select the `pronouns` field on the `UserWithScore` object. Its type is `Pronoun` (a `OutputObject` kind of type).
     */
    pronouns?: UserWithScore.pronouns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.pronouns<_$Scalars>>;
    /**
     * Select the `pronounsDisplay` field on the `UserWithScore` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pronounsDisplay?: UserWithScore.pronounsDisplay$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.pronounsDisplay<_$Scalars>>;
    /**
     * Select the `score` field on the `UserWithScore` object. Its type is `Float` (a `ScalarStandard` kind of type).
     */
    score?: UserWithScore.score$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserWithScore.score<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserWithScore$FragmentInline<_$Scalars> | UserWithScore$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserWithScore$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserWithScore<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserWithScore {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type avatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>;
    interface avatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `avatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>>;
    type genderTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>;
    interface genderTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genderTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genderTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>>;
    type websites<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = websites$SelectionSet<_$Scalars>;
    interface websites$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$LabeledStringValue<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `websites` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type websites$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<websites$SelectionSet<_$Scalars>>;
    type preferredLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>;
    interface preferredLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `preferredLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>>;
    type spokenLanguagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>;
    interface spokenLanguagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `spokenLanguagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type spokenLanguagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>>;
    type countryOfResidenceTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>;
    interface countryOfResidenceTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryOfResidenceTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidenceTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>>;
    type regionOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>;
    interface regionOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `regionOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type regionOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>>;
    type cityOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>;
    interface cityOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `cityOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type cityOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>>;
    type timezone<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>;
    interface timezone$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timezone` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timezone$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type discoverable<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>;
    interface discoverable$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `discoverable` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type discoverable$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>>;
    type trustLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>;
    interface trustLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trustLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trustLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>>;
    type userBlocks<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userBlocks$SelectionSet<_$Scalars>;
    interface userBlocks$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserBlock<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userBlocks` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userBlocks$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userBlocks$SelectionSet<_$Scalars>>;
    type latestActivityAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>;
    interface latestActivityAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `latestActivityAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestActivityAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>>;
    type inactivatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>;
    interface inactivatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inactivatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inactivatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type seeksHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>;
    interface seeksHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seeksHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seeksHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>>;
    type offersHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>;
    interface offersHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `offersHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type offersHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>>;
    type yearsManagementExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>;
    interface yearsManagementExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsManagementExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsManagementExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>>;
    type yearsOwnershipExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>;
    interface yearsOwnershipExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsOwnershipExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsOwnershipExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>>;
    type academicExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = academicExperiences$SelectionSet<_$Scalars>;
    interface academicExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AcademicExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `academicExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type academicExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<academicExperiences$SelectionSet<_$Scalars>>;
    type businessExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = businessExperiences$SelectionSet<_$Scalars>;
    interface businessExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BusinessExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `businessExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<businessExperiences$SelectionSet<_$Scalars>>;
    type isOnVacation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>;
    interface isOnVacation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isOnVacation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isOnVacation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>>;
    type mentor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentor$SelectionSet<_$Scalars>;
    interface mentor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MentorsGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentor$SelectionSet<_$Scalars>>;
    type mentee<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentee$SelectionSet<_$Scalars>;
    interface mentee$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MenteesGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentee` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentee$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentee$SelectionSet<_$Scalars>>;
    type groupMemberships<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupMemberships$SelectionSet<_$Scalars>;
    interface groupMemberships$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupMemberships` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupMemberships$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupMemberships$SelectionSet<_$Scalars>>;
    type companies<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = companies$SelectionSet<_$Scalars>;
    interface companies$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Company<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `companies` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companies$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<companies$SelectionSet<_$Scalars>>;
    type countryOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfOrigin$SelectionSet<_$Scalars>;
    interface countryOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfOrigin$SelectionSet<_$Scalars>>;
    type countryOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfResidence$SelectionSet<_$Scalars>;
    interface countryOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfResidence$SelectionSet<_$Scalars>>;
    type educationLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = educationLevel$SelectionSet<_$Scalars>;
    interface educationLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EducationLevel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `educationLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type educationLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<educationLevel$SelectionSet<_$Scalars>>;
    type endorsements<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = endorsements$SelectionSet<_$Scalars>;
    interface endorsements$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EndorsementWithTypes<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `endorsements` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endorsements$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<endorsements$SelectionSet<_$Scalars>>;
    type groups<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groups$SelectionSet<_$Scalars>;
    interface groups$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groups` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groups$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groups$SelectionSet<_$Scalars>>;
    type profileCompletionPercentage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>;
    interface profileCompletionPercentage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileCompletionPercentage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileCompletionPercentage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>>;
    type profileRole<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>;
    interface profileRole$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileRole` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileRole$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>>;
    type pronouns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pronouns$SelectionSet<_$Scalars>;
    interface pronouns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Pronoun<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pronouns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronouns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pronouns$SelectionSet<_$Scalars>>;
    type pronounsDisplay<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>;
    interface pronounsDisplay$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pronounsDisplay` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronounsDisplay$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>>;
    type score<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | score$SelectionSet<_$Scalars>;
    interface score$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `score` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type score$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | score$SelectionSet<_$Scalars>>;
}
export interface ServiceRequest<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ServiceRequest` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ServiceRequest.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ServiceRequest` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ServiceRequest.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ServiceRequest` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ServiceRequest.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ServiceRequest` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ServiceRequest.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ServiceRequest` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ServiceRequest.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ServiceRequest` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ServiceRequest.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ServiceRequest` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ServiceRequest.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ServiceRequest` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ServiceRequest.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ServiceRequest` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ServiceRequest.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ServiceRequest` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ServiceRequest.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.deletedBy<_$Scalars>>;
    /**
     * Select the `serviceRequestType` field on the `ServiceRequest` object. Its type is `ServiceRequestType` (a `Enum` kind of type).
     */
    serviceRequestType?: ServiceRequest.serviceRequestType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.serviceRequestType<_$Scalars>>;
    /**
     * Select the `userRoles` field on the `ServiceRequest` object. Its type is `UserRole` (a `Enum` kind of type).
     */
    userRoles?: ServiceRequest.userRoles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.userRoles<_$Scalars>>;
    /**
     * Select the `objectIds` field on the `ServiceRequest` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    objectIds?: ServiceRequest.objectIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.objectIds<_$Scalars>>;
    /**
     * Select the `modelTypes` field on the `ServiceRequest` object. Its type is `ModelType` (a `Enum` kind of type).
     */
    modelTypes?: ServiceRequest.modelTypes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.modelTypes<_$Scalars>>;
    /**
     * Select the `result` field on the `ServiceRequest` object. Its type is `ServiceRequestResult` (a `Enum` kind of type).
     */
    result?: ServiceRequest.result$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.result<_$Scalars>>;
    /**
     * Select the `messageIds` field on the `ServiceRequest` object. Its type is `ServiceRequestMessageId` (a `Enum` kind of type).
     */
    messageIds?: ServiceRequest.messageIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.messageIds<_$Scalars>>;
    /**
     * Select the `message` field on the `ServiceRequest` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    message?: ServiceRequest.message$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.message<_$Scalars>>;
    /**
     * Select the `errorCode` field on the `ServiceRequest` object. Its type is `ErrorCode` (a `Enum` kind of type).
     */
    errorCode?: ServiceRequest.errorCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.errorCode<_$Scalars>>;
    /**
     * Select the `deviceUuid` field on the `ServiceRequest` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deviceUuid?: ServiceRequest.deviceUuid$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.deviceUuid<_$Scalars>>;
    /**
     * Select the `source` field on the `ServiceRequest` object. Its type is `ServiceRequestSource` (a `Enum` kind of type).
     */
    source?: ServiceRequest.source$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.source<_$Scalars>>;
    /**
     * Select the `finishedAt` field on the `ServiceRequest` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    finishedAt?: ServiceRequest.finishedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.finishedAt<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `ServiceRequest` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: ServiceRequest.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.expiresAt<_$Scalars>>;
    /**
     * Select the `userId` field on the `ServiceRequest` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userId?: ServiceRequest.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ServiceRequest.userId<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ServiceRequest$FragmentInline<_$Scalars> | ServiceRequest$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ServiceRequest$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ServiceRequest<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ServiceRequest {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type serviceRequestType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | serviceRequestType$SelectionSet<_$Scalars>;
    interface serviceRequestType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `serviceRequestType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type serviceRequestType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | serviceRequestType$SelectionSet<_$Scalars>>;
    type userRoles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userRoles$SelectionSet<_$Scalars>;
    interface userRoles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userRoles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userRoles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userRoles$SelectionSet<_$Scalars>>;
    type objectIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectIds$SelectionSet<_$Scalars>;
    interface objectIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `objectIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type objectIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectIds$SelectionSet<_$Scalars>>;
    type modelTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | modelTypes$SelectionSet<_$Scalars>;
    interface modelTypes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `modelTypes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type modelTypes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | modelTypes$SelectionSet<_$Scalars>>;
    type result<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>;
    interface result$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `result` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type result$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>>;
    type messageIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageIds$SelectionSet<_$Scalars>;
    interface messageIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageIds$SelectionSet<_$Scalars>>;
    type message<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | message$SelectionSet<_$Scalars>;
    interface message$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `message` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type message$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | message$SelectionSet<_$Scalars>>;
    type errorCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | errorCode$SelectionSet<_$Scalars>;
    interface errorCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `errorCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type errorCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | errorCode$SelectionSet<_$Scalars>>;
    type deviceUuid<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceUuid$SelectionSet<_$Scalars>;
    interface deviceUuid$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deviceUuid` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deviceUuid$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceUuid$SelectionSet<_$Scalars>>;
    type source<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>;
    interface source$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `source` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type source$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>>;
    type finishedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | finishedAt$SelectionSet<_$Scalars>;
    interface finishedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `finishedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type finishedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | finishedAt$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
}
export interface ContactListItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ContactListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ContactListItem.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ContactListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ContactListItem.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ContactListItem` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ContactListItem.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ContactListItem` object. Its type is `ContactMetadata` (a `OutputObject` kind of type).
     */
    metadata?: ContactListItem.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ContactListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ContactListItem.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ContactListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ContactListItem.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ContactListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ContactListItem.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ContactListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ContactListItem.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ContactListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ContactListItem.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ContactListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ContactListItem.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `ContactListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: ContactListItem.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.userId<_$Scalars>>;
    /**
     * Select the `channelId` field on the `ContactListItem` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: ContactListItem.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.channelId<_$Scalars>>;
    /**
     * Select the `nickname` field on the `ContactListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    nickname?: ContactListItem.nickname$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.nickname<_$Scalars>>;
    /**
     * Select the `typeTextIds` field on the `ContactListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    typeTextIds?: ContactListItem.typeTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.typeTextIds<_$Scalars>>;
    /**
     * Select the `favorite` field on the `ContactListItem` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    favorite?: ContactListItem.favorite$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.favorite<_$Scalars>>;
    /**
     * Select the `notes` field on the `ContactListItem` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    notes?: ContactListItem.notes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.notes<_$Scalars>>;
    /**
     * Select the `archivedAt` field on the `ContactListItem` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    archivedAt?: ContactListItem.archivedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContactListItem.archivedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ContactListItem$FragmentInline<_$Scalars> | ContactListItem$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ContactListItem$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ContactListItem<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ContactListItem {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContactMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type nickname<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | nickname$SelectionSet<_$Scalars>;
    interface nickname$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `nickname` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type nickname$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | nickname$SelectionSet<_$Scalars>>;
    type typeTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | typeTextIds$SelectionSet<_$Scalars>;
    interface typeTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `typeTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type typeTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | typeTextIds$SelectionSet<_$Scalars>>;
    type favorite<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | favorite$SelectionSet<_$Scalars>;
    interface favorite$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `favorite` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type favorite$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | favorite$SelectionSet<_$Scalars>>;
    type notes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notes$SelectionSet<_$Scalars>;
    interface notes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notes$SelectionSet<_$Scalars>>;
    type archivedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>;
    interface archivedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `archivedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type archivedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | archivedAt$SelectionSet<_$Scalars>>;
}
export interface SidMultiStepAction<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `SidMultiStepAction` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: SidMultiStepAction.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: SidMultiStepAction.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `SidMultiStepAction` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: SidMultiStepAction.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `SidMultiStepAction` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: SidMultiStepAction.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: SidMultiStepAction.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `SidMultiStepAction` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: SidMultiStepAction.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: SidMultiStepAction.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `SidMultiStepAction` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: SidMultiStepAction.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: SidMultiStepAction.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `SidMultiStepAction` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: SidMultiStepAction.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.deletedBy<_$Scalars>>;
    /**
     * Select the `userId` field on the `SidMultiStepAction` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: SidMultiStepAction.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.userId<_$Scalars>>;
    /**
     * Select the `userIdent` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userIdent?: SidMultiStepAction.userIdent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.userIdent<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: SidMultiStepAction.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.userHandle<_$Scalars>>;
    /**
     * Select the `email` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    email?: SidMultiStepAction.email$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.email<_$Scalars>>;
    /**
     * Select the `phoneNumber` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    phoneNumber?: SidMultiStepAction.phoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.phoneNumber<_$Scalars>>;
    /**
     * Select the `deviceUuid` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    deviceUuid?: SidMultiStepAction.deviceUuid$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.deviceUuid<_$Scalars>>;
    /**
     * Select the `actionType` field on the `SidMultiStepAction` object. Its type is `MultiStepActionType` (a `Enum` kind of type).
     */
    actionType?: SidMultiStepAction.actionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.actionType<_$Scalars>>;
    /**
     * Select the `actionStatus` field on the `SidMultiStepAction` object. Its type is `MultiStepActionStatus` (a `Enum` kind of type).
     */
    actionStatus?: SidMultiStepAction.actionStatus$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.actionStatus<_$Scalars>>;
    /**
     * Select the `notificationMethod` field on the `SidMultiStepAction` object. Its type is `NotificationMethod` (a `Enum` kind of type).
     */
    notificationMethod?: SidMultiStepAction.notificationMethod$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.notificationMethod<_$Scalars>>;
    /**
     * Select the `result` field on the `SidMultiStepAction` object. Its type is `MultiStepActionResult` (a `Enum` kind of type).
     */
    result?: SidMultiStepAction.result$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.result<_$Scalars>>;
    /**
     * Select the `confirmToken` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    confirmToken?: SidMultiStepAction.confirmToken$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.confirmToken<_$Scalars>>;
    /**
     * Select the `attemptCount` field on the `SidMultiStepAction` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    attemptCount?: SidMultiStepAction.attemptCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.attemptCount<_$Scalars>>;
    /**
     * Select the `notificationSentAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    notificationSentAt?: SidMultiStepAction.notificationSentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.notificationSentAt<_$Scalars>>;
    /**
     * Select the `notificationResult` field on the `SidMultiStepAction` object. Its type is `MultiStepActionSendNotificationResult` (a `Enum` kind of type).
     */
    notificationResult?: SidMultiStepAction.notificationResult$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.notificationResult<_$Scalars>>;
    /**
     * Select the `notificationId` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    notificationId?: SidMultiStepAction.notificationId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.notificationId<_$Scalars>>;
    /**
     * Select the `textData` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textData?: SidMultiStepAction.textData$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.textData<_$Scalars>>;
    /**
     * Select the `report` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    report?: SidMultiStepAction.report$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.report<_$Scalars>>;
    /**
     * Select the `emailPassed` field on the `SidMultiStepAction` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    emailPassed?: SidMultiStepAction.emailPassed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.emailPassed<_$Scalars>>;
    /**
     * Select the `emailUpdatedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailUpdatedAt?: SidMultiStepAction.emailUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.emailUpdatedAt<_$Scalars>>;
    /**
     * Select the `emailVerifiedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailVerifiedAt?: SidMultiStepAction.emailVerifiedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.emailVerifiedAt<_$Scalars>>;
    /**
     * Select the `errors` field on the `SidMultiStepAction` object. Its type is `MultiStepActionError` (a `OutputObject` kind of type).
     */
    errors?: SidMultiStepAction.errors$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.errors<_$Scalars>>;
    /**
     * Select the `password` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    password?: SidMultiStepAction.password$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.password<_$Scalars>>;
    /**
     * Select the `passwordPassed` field on the `SidMultiStepAction` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    passwordPassed?: SidMultiStepAction.passwordPassed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.passwordPassed<_$Scalars>>;
    /**
     * Select the `passwordResettedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    passwordResettedAt?: SidMultiStepAction.passwordResettedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.passwordResettedAt<_$Scalars>>;
    /**
     * Select the `passwordUpdatedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    passwordUpdatedAt?: SidMultiStepAction.passwordUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.passwordUpdatedAt<_$Scalars>>;
    /**
     * Select the `phoneNumberPassed` field on the `SidMultiStepAction` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    phoneNumberPassed?: SidMultiStepAction.phoneNumberPassed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.phoneNumberPassed<_$Scalars>>;
    /**
     * Select the `phoneNumberUpdatedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberUpdatedAt?: SidMultiStepAction.phoneNumberUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.phoneNumberUpdatedAt<_$Scalars>>;
    /**
     * Select the `phoneNumberVerifiedAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberVerifiedAt?: SidMultiStepAction.phoneNumberVerifiedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.phoneNumberVerifiedAt<_$Scalars>>;
    /**
     * Select the `signedInAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedInAt?: SidMultiStepAction.signedInAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.signedInAt<_$Scalars>>;
    /**
     * Select the `tfaBackupCodes` field on the `SidMultiStepAction` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    tfaBackupCodes?: SidMultiStepAction.tfaBackupCodes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.tfaBackupCodes<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `SidMultiStepAction` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: SidMultiStepAction.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepAction.expiresAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: SidMultiStepAction$FragmentInline<_$Scalars> | SidMultiStepAction$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface SidMultiStepAction$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends SidMultiStepAction<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace SidMultiStepAction {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type userIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIdent$SelectionSet<_$Scalars>;
    interface userIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userIdent$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type email<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>;
    interface email$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `email` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type email$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>>;
    type phoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>;
    interface phoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>>;
    type deviceUuid<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceUuid$SelectionSet<_$Scalars>;
    interface deviceUuid$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deviceUuid` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deviceUuid$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deviceUuid$SelectionSet<_$Scalars>>;
    type actionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionType$SelectionSet<_$Scalars>;
    interface actionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionType$SelectionSet<_$Scalars>>;
    type actionStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionStatus$SelectionSet<_$Scalars>;
    interface actionStatus$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionStatus` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionStatus$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionStatus$SelectionSet<_$Scalars>>;
    type notificationMethod<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationMethod$SelectionSet<_$Scalars>;
    interface notificationMethod$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationMethod` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationMethod$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationMethod$SelectionSet<_$Scalars>>;
    type result<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>;
    interface result$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `result` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type result$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>>;
    type confirmToken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | confirmToken$SelectionSet<_$Scalars>;
    interface confirmToken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `confirmToken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type confirmToken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | confirmToken$SelectionSet<_$Scalars>>;
    type attemptCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | attemptCount$SelectionSet<_$Scalars>;
    interface attemptCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `attemptCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type attemptCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | attemptCount$SelectionSet<_$Scalars>>;
    type notificationSentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationSentAt$SelectionSet<_$Scalars>;
    interface notificationSentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationSentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationSentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationSentAt$SelectionSet<_$Scalars>>;
    type notificationResult<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationResult$SelectionSet<_$Scalars>;
    interface notificationResult$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationResult` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationResult$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationResult$SelectionSet<_$Scalars>>;
    type notificationId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationId$SelectionSet<_$Scalars>;
    interface notificationId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationId$SelectionSet<_$Scalars>>;
    type textData<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textData$SelectionSet<_$Scalars>;
    interface textData$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textData` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textData$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textData$SelectionSet<_$Scalars>>;
    type report<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | report$SelectionSet<_$Scalars>;
    interface report$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `report` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type report$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | report$SelectionSet<_$Scalars>>;
    type emailPassed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailPassed$SelectionSet<_$Scalars>;
    interface emailPassed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailPassed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailPassed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailPassed$SelectionSet<_$Scalars>>;
    type emailUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>;
    interface emailUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>>;
    type emailVerifiedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailVerifiedAt$SelectionSet<_$Scalars>;
    interface emailVerifiedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailVerifiedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailVerifiedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailVerifiedAt$SelectionSet<_$Scalars>>;
    type errors<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = errors$SelectionSet<_$Scalars>;
    interface errors$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MultiStepActionError<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `errors` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type errors$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<errors$SelectionSet<_$Scalars>>;
    type password<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | password$SelectionSet<_$Scalars>;
    interface password$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `password` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type password$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | password$SelectionSet<_$Scalars>>;
    type passwordPassed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordPassed$SelectionSet<_$Scalars>;
    interface passwordPassed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordPassed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordPassed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordPassed$SelectionSet<_$Scalars>>;
    type passwordResettedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordResettedAt$SelectionSet<_$Scalars>;
    interface passwordResettedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordResettedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordResettedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordResettedAt$SelectionSet<_$Scalars>>;
    type passwordUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>;
    interface passwordUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>>;
    type phoneNumberPassed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberPassed$SelectionSet<_$Scalars>;
    interface phoneNumberPassed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberPassed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberPassed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberPassed$SelectionSet<_$Scalars>>;
    type phoneNumberUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>;
    interface phoneNumberUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>>;
    type phoneNumberVerifiedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberVerifiedAt$SelectionSet<_$Scalars>;
    interface phoneNumberVerifiedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberVerifiedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberVerifiedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberVerifiedAt$SelectionSet<_$Scalars>>;
    type signedInAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>;
    interface signedInAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedInAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedInAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>>;
    type tfaBackupCodes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tfaBackupCodes$SelectionSet<_$Scalars>;
    interface tfaBackupCodes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `tfaBackupCodes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type tfaBackupCodes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tfaBackupCodes$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
}
export interface MultiStepActionError<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MultiStepActionError` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MultiStepActionError.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MultiStepActionError` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MultiStepActionError.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MultiStepActionError` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MultiStepActionError.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MultiStepActionError` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: MultiStepActionError.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MultiStepActionError` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MultiStepActionError.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MultiStepActionError` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MultiStepActionError.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MultiStepActionError` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MultiStepActionError.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MultiStepActionError` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MultiStepActionError.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MultiStepActionError` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MultiStepActionError.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MultiStepActionError` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MultiStepActionError.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.deletedBy<_$Scalars>>;
    /**
     * Select the `key` field on the `MultiStepActionError` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    key?: MultiStepActionError.key$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.key<_$Scalars>>;
    /**
     * Select the `messageId` field on the `MultiStepActionError` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageId?: MultiStepActionError.messageId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.messageId<_$Scalars>>;
    /**
     * Select the `message` field on the `MultiStepActionError` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    message?: MultiStepActionError.message$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MultiStepActionError.message<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MultiStepActionError$FragmentInline<_$Scalars> | MultiStepActionError$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MultiStepActionError$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MultiStepActionError<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MultiStepActionError {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type key<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | key$SelectionSet<_$Scalars>;
    interface key$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `key` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type key$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | key$SelectionSet<_$Scalars>>;
    type messageId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageId$SelectionSet<_$Scalars>;
    interface messageId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageId$SelectionSet<_$Scalars>>;
    type message<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | message$SelectionSet<_$Scalars>;
    interface message$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `message` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type message$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | message$SelectionSet<_$Scalars>>;
}
export interface SidMultiStepActionProgress<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `actionId` field on the `SidMultiStepActionProgress` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    actionId?: SidMultiStepActionProgress.actionId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.actionId<_$Scalars>>;
    /**
     * Select the `userId` field on the `SidMultiStepActionProgress` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: SidMultiStepActionProgress.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.userId<_$Scalars>>;
    /**
     * Select the `actionType` field on the `SidMultiStepActionProgress` object. Its type is `MultiStepActionType` (a `Enum` kind of type).
     */
    actionType?: SidMultiStepActionProgress.actionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.actionType<_$Scalars>>;
    /**
     * Select the `actionStatus` field on the `SidMultiStepActionProgress` object. Its type is `MultiStepActionStatus` (a `Enum` kind of type).
     */
    actionStatus?: SidMultiStepActionProgress.actionStatus$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.actionStatus<_$Scalars>>;
    /**
     * Select the `notificationMethod` field on the `SidMultiStepActionProgress` object. Its type is `NotificationMethod` (a `Enum` kind of type).
     */
    notificationMethod?: SidMultiStepActionProgress.notificationMethod$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.notificationMethod<_$Scalars>>;
    /**
     * Select the `result` field on the `SidMultiStepActionProgress` object. Its type is `MultiStepActionResult` (a `Enum` kind of type).
     */
    result?: SidMultiStepActionProgress.result$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.result<_$Scalars>>;
    /**
     * Select the `attemptCount` field on the `SidMultiStepActionProgress` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    attemptCount?: SidMultiStepActionProgress.attemptCount$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.attemptCount<_$Scalars>>;
    /**
     * Select the `notificationSentAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    notificationSentAt?: SidMultiStepActionProgress.notificationSentAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.notificationSentAt<_$Scalars>>;
    /**
     * Select the `notificationResult` field on the `SidMultiStepActionProgress` object. Its type is `MultiStepActionSendNotificationResult` (a `Enum` kind of type).
     */
    notificationResult?: SidMultiStepActionProgress.notificationResult$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.notificationResult<_$Scalars>>;
    /**
     * Select the `notificationId` field on the `SidMultiStepActionProgress` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    notificationId?: SidMultiStepActionProgress.notificationId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.notificationId<_$Scalars>>;
    /**
     * Select the `textData` field on the `SidMultiStepActionProgress` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textData?: SidMultiStepActionProgress.textData$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.textData<_$Scalars>>;
    /**
     * Select the `report` field on the `SidMultiStepActionProgress` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    report?: SidMultiStepActionProgress.report$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.report<_$Scalars>>;
    /**
     * Select the `emailPassed` field on the `SidMultiStepActionProgress` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    emailPassed?: SidMultiStepActionProgress.emailPassed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.emailPassed<_$Scalars>>;
    /**
     * Select the `emailUpdatedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailUpdatedAt?: SidMultiStepActionProgress.emailUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.emailUpdatedAt<_$Scalars>>;
    /**
     * Select the `emailVerifiedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailVerifiedAt?: SidMultiStepActionProgress.emailVerifiedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.emailVerifiedAt<_$Scalars>>;
    /**
     * Select the `errors` field on the `SidMultiStepActionProgress` object. Its type is `MultiStepActionError` (a `OutputObject` kind of type).
     */
    errors?: SidMultiStepActionProgress.errors$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.errors<_$Scalars>>;
    /**
     * Select the `authToken` field on the `SidMultiStepActionProgress` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    authToken?: SidMultiStepActionProgress.authToken$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.authToken<_$Scalars>>;
    /**
     * Select the `authTokenExpiresAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    authTokenExpiresAt?: SidMultiStepActionProgress.authTokenExpiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.authTokenExpiresAt<_$Scalars>>;
    /**
     * Select the `passwordPassed` field on the `SidMultiStepActionProgress` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    passwordPassed?: SidMultiStepActionProgress.passwordPassed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.passwordPassed<_$Scalars>>;
    /**
     * Select the `passwordResettedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    passwordResettedAt?: SidMultiStepActionProgress.passwordResettedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.passwordResettedAt<_$Scalars>>;
    /**
     * Select the `passwordUpdatedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    passwordUpdatedAt?: SidMultiStepActionProgress.passwordUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.passwordUpdatedAt<_$Scalars>>;
    /**
     * Select the `phoneNumberPassed` field on the `SidMultiStepActionProgress` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    phoneNumberPassed?: SidMultiStepActionProgress.phoneNumberPassed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.phoneNumberPassed<_$Scalars>>;
    /**
     * Select the `phoneNumberUpdatedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberUpdatedAt?: SidMultiStepActionProgress.phoneNumberUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.phoneNumberUpdatedAt<_$Scalars>>;
    /**
     * Select the `phoneNumberVerifiedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberVerifiedAt?: SidMultiStepActionProgress.phoneNumberVerifiedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.phoneNumberVerifiedAt<_$Scalars>>;
    /**
     * Select the `signedInAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedInAt?: SidMultiStepActionProgress.signedInAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.signedInAt<_$Scalars>>;
    /**
     * Select the `expiresAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    expiresAt?: SidMultiStepActionProgress.expiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.expiresAt<_$Scalars>>;
    /**
     * Select the `events` field on the `SidMultiStepActionProgress` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: SidMultiStepActionProgress.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `SidMultiStepActionProgress` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: SidMultiStepActionProgress.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: SidMultiStepActionProgress.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `SidMultiStepActionProgress` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: SidMultiStepActionProgress.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: SidMultiStepActionProgress.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `SidMultiStepActionProgress` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: SidMultiStepActionProgress.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `SidMultiStepActionProgress` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: SidMultiStepActionProgress.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `SidMultiStepActionProgress` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: SidMultiStepActionProgress.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SidMultiStepActionProgress.deletedBy<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: SidMultiStepActionProgress$FragmentInline<_$Scalars> | SidMultiStepActionProgress$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface SidMultiStepActionProgress$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends SidMultiStepActionProgress<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace SidMultiStepActionProgress {
    type actionId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionId$SelectionSet<_$Scalars>;
    interface actionId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionId$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type actionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionType$SelectionSet<_$Scalars>;
    interface actionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionType$SelectionSet<_$Scalars>>;
    type actionStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionStatus$SelectionSet<_$Scalars>;
    interface actionStatus$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `actionStatus` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type actionStatus$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | actionStatus$SelectionSet<_$Scalars>>;
    type notificationMethod<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationMethod$SelectionSet<_$Scalars>;
    interface notificationMethod$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationMethod` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationMethod$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationMethod$SelectionSet<_$Scalars>>;
    type result<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>;
    interface result$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `result` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type result$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | result$SelectionSet<_$Scalars>>;
    type attemptCount<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | attemptCount$SelectionSet<_$Scalars>;
    interface attemptCount$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `attemptCount` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type attemptCount$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | attemptCount$SelectionSet<_$Scalars>>;
    type notificationSentAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationSentAt$SelectionSet<_$Scalars>;
    interface notificationSentAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationSentAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationSentAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationSentAt$SelectionSet<_$Scalars>>;
    type notificationResult<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationResult$SelectionSet<_$Scalars>;
    interface notificationResult$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationResult` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationResult$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationResult$SelectionSet<_$Scalars>>;
    type notificationId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationId$SelectionSet<_$Scalars>;
    interface notificationId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `notificationId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type notificationId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | notificationId$SelectionSet<_$Scalars>>;
    type textData<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textData$SelectionSet<_$Scalars>;
    interface textData$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textData` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textData$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textData$SelectionSet<_$Scalars>>;
    type report<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | report$SelectionSet<_$Scalars>;
    interface report$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `report` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type report$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | report$SelectionSet<_$Scalars>>;
    type emailPassed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailPassed$SelectionSet<_$Scalars>;
    interface emailPassed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailPassed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailPassed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailPassed$SelectionSet<_$Scalars>>;
    type emailUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>;
    interface emailUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>>;
    type emailVerifiedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailVerifiedAt$SelectionSet<_$Scalars>;
    interface emailVerifiedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailVerifiedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailVerifiedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailVerifiedAt$SelectionSet<_$Scalars>>;
    type errors<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = errors$SelectionSet<_$Scalars>;
    interface errors$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MultiStepActionError<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `errors` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type errors$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<errors$SelectionSet<_$Scalars>>;
    type authToken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authToken$SelectionSet<_$Scalars>;
    interface authToken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `authToken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type authToken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authToken$SelectionSet<_$Scalars>>;
    type authTokenExpiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authTokenExpiresAt$SelectionSet<_$Scalars>;
    interface authTokenExpiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `authTokenExpiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type authTokenExpiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authTokenExpiresAt$SelectionSet<_$Scalars>>;
    type passwordPassed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordPassed$SelectionSet<_$Scalars>;
    interface passwordPassed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordPassed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordPassed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordPassed$SelectionSet<_$Scalars>>;
    type passwordResettedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordResettedAt$SelectionSet<_$Scalars>;
    interface passwordResettedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordResettedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordResettedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordResettedAt$SelectionSet<_$Scalars>>;
    type passwordUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>;
    interface passwordUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>>;
    type phoneNumberPassed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberPassed$SelectionSet<_$Scalars>;
    interface phoneNumberPassed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberPassed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberPassed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberPassed$SelectionSet<_$Scalars>>;
    type phoneNumberUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>;
    interface phoneNumberUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>>;
    type phoneNumberVerifiedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberVerifiedAt$SelectionSet<_$Scalars>;
    interface phoneNumberVerifiedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberVerifiedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberVerifiedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberVerifiedAt$SelectionSet<_$Scalars>>;
    type signedInAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>;
    interface signedInAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedInAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedInAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>>;
    type expiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>;
    interface expiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expiresAt$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
}
export interface MyUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: MyUser.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: MyUser.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `MyUser` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: MyUser.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `MyUser` object. Its type is `UserMetadata` (a `OutputObject` kind of type).
     */
    metadata?: MyUser.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: MyUser.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: MyUser.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: MyUser.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: MyUser.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: MyUser.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: MyUser.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.deletedBy<_$Scalars>>;
    /**
     * Select the `firstName` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: MyUser.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: MyUser.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.lastName<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: MyUser.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.userHandle<_$Scalars>>;
    /**
     * Select the `phoneNumber` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    phoneNumber?: MyUser.phoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.phoneNumber<_$Scalars>>;
    /**
     * Select the `phoneNumberUpdatedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    phoneNumberUpdatedAt?: MyUser.phoneNumberUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.phoneNumberUpdatedAt<_$Scalars>>;
    /**
     * Select the `isPhoneNumberVerified` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isPhoneNumberVerified?: MyUser.isPhoneNumberVerified$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.isPhoneNumberVerified<_$Scalars>>;
    /**
     * Select the `email` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    email?: MyUser.email$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.email<_$Scalars>>;
    /**
     * Select the `emailSource` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    emailSource?: MyUser.emailSource$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.emailSource<_$Scalars>>;
    /**
     * Select the `emailUpdatedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    emailUpdatedAt?: MyUser.emailUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.emailUpdatedAt<_$Scalars>>;
    /**
     * Select the `isEmailVerified` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isEmailVerified?: MyUser.isEmailVerified$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.isEmailVerified<_$Scalars>>;
    /**
     * Select the `genderTextId` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    genderTextId?: MyUser.genderTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.genderTextId<_$Scalars>>;
    /**
     * Select the `cityOfResidence` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    cityOfResidence?: MyUser.cityOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.cityOfResidence<_$Scalars>>;
    /**
     * Select the `regionOfResidence` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    regionOfResidence?: MyUser.regionOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.regionOfResidence<_$Scalars>>;
    /**
     * Select the `countryOfResidenceTextId` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryOfResidenceTextId?: MyUser.countryOfResidenceTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.countryOfResidenceTextId<_$Scalars>>;
    /**
     * Select the `postalCode` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    postalCode?: MyUser.postalCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.postalCode<_$Scalars>>;
    /**
     * Select the `avatarUrl` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    avatarUrl?: MyUser.avatarUrl$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.avatarUrl<_$Scalars>>;
    /**
     * Select the `websites` field on the `MyUser` object. Its type is `LabeledStringValue` (a `OutputObject` kind of type).
     */
    websites?: MyUser.websites$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.websites<_$Scalars>>;
    /**
     * Select the `inviteCode` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    inviteCode?: MyUser.inviteCode$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.inviteCode<_$Scalars>>;
    /**
     * Select the `passwordUpdatedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    passwordUpdatedAt?: MyUser.passwordUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.passwordUpdatedAt<_$Scalars>>;
    /**
     * Select the `preferredLanguageTextId` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    preferredLanguageTextId?: MyUser.preferredLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.preferredLanguageTextId<_$Scalars>>;
    /**
     * Select the `spokenLanguagesTextIds` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    spokenLanguagesTextIds?: MyUser.spokenLanguagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.spokenLanguagesTextIds<_$Scalars>>;
    /**
     * Select the `selectedUiLanguageTextId` field on the `MyUser` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    selectedUiLanguageTextId?: MyUser.selectedUiLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.selectedUiLanguageTextId<_$Scalars>>;
    /**
     * Select the `fallbackUiLanguageTextId` field on the `MyUser` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    fallbackUiLanguageTextId?: MyUser.fallbackUiLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.fallbackUiLanguageTextId<_$Scalars>>;
    /**
     * Select the `discoverable` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    discoverable?: MyUser.discoverable$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.discoverable<_$Scalars>>;
    /**
     * Select the `roles` field on the `MyUser` object. Its type is `UserRole` (a `Enum` kind of type).
     */
    roles?: MyUser.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.roles<_$Scalars>>;
    /**
     * Select the `appFeatures` field on the `MyUser` object. Its type is `AppFeature` (a `Enum` kind of type).
     */
    appFeatures?: MyUser.appFeatures$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.appFeatures<_$Scalars>>;
    /**
     * Select the `source` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    source?: MyUser.source$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.source<_$Scalars>>;
    /**
     * Select the `timezone` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    timezone?: MyUser.timezone$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.timezone<_$Scalars>>;
    /**
     * Select the `preferences` field on the `MyUser` object. Its type is `UserPreferences` (a `OutputObject` kind of type).
     */
    preferences?: MyUser.preferences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.preferences<_$Scalars>>;
    /**
     * Select the `trustLevel` field on the `MyUser` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    trustLevel?: MyUser.trustLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.trustLevel<_$Scalars>>;
    /**
     * Select the `userDevices` field on the `MyUser` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    userDevices?: MyUser.userDevices$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.userDevices<_$Scalars>>;
    /**
     * Select the `userBlocks` field on the `MyUser` object. Its type is `UserBlock` (a `OutputObject` kind of type).
     */
    userBlocks?: MyUser.userBlocks$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.userBlocks<_$Scalars>>;
    /**
     * Select the `termsAndConditionsAcceptedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    termsAndConditionsAcceptedAt?: MyUser.termsAndConditionsAcceptedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.termsAndConditionsAcceptedAt<_$Scalars>>;
    /**
     * Select the `optIntoNewsletter` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    optIntoNewsletter?: MyUser.optIntoNewsletter$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.optIntoNewsletter<_$Scalars>>;
    /**
     * Select the `onboardingStage` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    onboardingStage?: MyUser.onboardingStage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.onboardingStage<_$Scalars>>;
    /**
     * Select the `isTestUser` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isTestUser?: MyUser.isTestUser$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.isTestUser<_$Scalars>>;
    /**
     * Select the `signedInAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedInAt?: MyUser.signedInAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.signedInAt<_$Scalars>>;
    /**
     * Select the `signedOutAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    signedOutAt?: MyUser.signedOutAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.signedOutAt<_$Scalars>>;
    /**
     * Select the `latestActivityAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    latestActivityAt?: MyUser.latestActivityAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.latestActivityAt<_$Scalars>>;
    /**
     * Select the `inactivatedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    inactivatedAt?: MyUser.inactivatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.inactivatedAt<_$Scalars>>;
    /**
     * Select the `inactivatedBy` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    inactivatedBy?: MyUser.inactivatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.inactivatedBy<_$Scalars>>;
    /**
     * Select the `suspendedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    suspendedAt?: MyUser.suspendedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.suspendedAt<_$Scalars>>;
    /**
     * Select the `suspendedBy` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    suspendedBy?: MyUser.suspendedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.suspendedBy<_$Scalars>>;
    /**
     * Select the `anonymizedAt` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    anonymizedAt?: MyUser.anonymizedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.anonymizedAt<_$Scalars>>;
    /**
     * Select the `companyIds` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    companyIds?: MyUser.companyIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.companyIds<_$Scalars>>;
    /**
     * Select the `companies` field on the `MyUser` object. Its type is `Company` (a `OutputObject` kind of type).
     */
    companies?: MyUser.companies$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.companies<_$Scalars>>;
    /**
     * Select the `groupIds` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupIds?: MyUser.groupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.groupIds<_$Scalars>>;
    /**
     * Select the `parentGroupIds` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    parentGroupIds?: MyUser.parentGroupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.parentGroupIds<_$Scalars>>;
    /**
     * Select the `externalGroupIds` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    externalGroupIds?: MyUser.externalGroupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.externalGroupIds<_$Scalars>>;
    /**
     * Select the `groupMemberships` field on the `MyUser` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    groupMemberships?: MyUser.groupMemberships$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.groupMemberships<_$Scalars>>;
    /**
     * Select the `mentor` field on the `MyUser` object. Its type is `MentorsGroupMembership` (a `OutputObject` kind of type).
     */
    mentor?: MyUser.mentor$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mentor<_$Scalars>>;
    /**
     * Select the `mentee` field on the `MyUser` object. Its type is `MenteesGroupMembership` (a `OutputObject` kind of type).
     */
    mentee?: MyUser.mentee$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mentee<_$Scalars>>;
    /**
     * Select the `pronounsTextIds` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pronounsTextIds?: MyUser.pronounsTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.pronounsTextIds<_$Scalars>>;
    /**
     * Select the `seeksHelp` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    seeksHelp?: MyUser.seeksHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.seeksHelp<_$Scalars>>;
    /**
     * Select the `offersHelp` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    offersHelp?: MyUser.offersHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.offersHelp<_$Scalars>>;
    /**
     * Select the `birthYear` field on the `MyUser` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    birthYear?: MyUser.birthYear$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.birthYear<_$Scalars>>;
    /**
     * Select the `ethnicity` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    ethnicity?: MyUser.ethnicity$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.ethnicity<_$Scalars>>;
    /**
     * Select the `educationLevelTextId` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    educationLevelTextId?: MyUser.educationLevelTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.educationLevelTextId<_$Scalars>>;
    /**
     * Select the `personalBio` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    personalBio?: MyUser.personalBio$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.personalBio<_$Scalars>>;
    /**
     * Select the `yearsManagementExperience` field on the `MyUser` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsManagementExperience?: MyUser.yearsManagementExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.yearsManagementExperience<_$Scalars>>;
    /**
     * Select the `yearsOwnershipExperience` field on the `MyUser` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    yearsOwnershipExperience?: MyUser.yearsOwnershipExperience$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.yearsOwnershipExperience<_$Scalars>>;
    /**
     * Select the `academicExperienceIds` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    academicExperienceIds?: MyUser.academicExperienceIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.academicExperienceIds<_$Scalars>>;
    /**
     * Select the `academicExperiences` field on the `MyUser` object. Its type is `AcademicExperience` (a `OutputObject` kind of type).
     */
    academicExperiences?: MyUser.academicExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.academicExperiences<_$Scalars>>;
    /**
     * Select the `genderSelfDescribed` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    genderSelfDescribed?: MyUser.genderSelfDescribed$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.genderSelfDescribed<_$Scalars>>;
    /**
     * Select the `businessExperienceIds` field on the `MyUser` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    businessExperienceIds?: MyUser.businessExperienceIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.businessExperienceIds<_$Scalars>>;
    /**
     * Select the `businessExperiences` field on the `MyUser` object. Its type is `BusinessExperience` (a `OutputObject` kind of type).
     */
    businessExperiences?: MyUser.businessExperiences$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.businessExperiences<_$Scalars>>;
    /**
     * Select the `cityOfOrigin` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    cityOfOrigin?: MyUser.cityOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.cityOfOrigin<_$Scalars>>;
    /**
     * Select the `regionOfOrigin` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    regionOfOrigin?: MyUser.regionOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.regionOfOrigin<_$Scalars>>;
    /**
     * Select the `countryOfOriginTextId` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countryOfOriginTextId?: MyUser.countryOfOriginTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.countryOfOriginTextId<_$Scalars>>;
    /**
     * Select the `isOnVacation` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isOnVacation?: MyUser.isOnVacation$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.isOnVacation<_$Scalars>>;
    /**
     * Select the `avatarAsset` field on the `MyUser` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    avatarAsset?: MyUser.avatarAsset$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.avatarAsset<_$Scalars>>;
    /**
     * Select the `profileRoleHistory` field on the `MyUser` object. Its type is `UserProfileRoleHistoryItem` (a `OutputObject` kind of type).
     */
    profileRoleHistory?: MyUser.profileRoleHistory$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.profileRoleHistory<_$Scalars>>;
    /**
     * Select the `ssoIdp` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    ssoIdp?: MyUser.ssoIdp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.ssoIdp<_$Scalars>>;
    /**
     * Select the `originatedInMm2` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    originatedInMm2?: MyUser.originatedInMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.originatedInMm2<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `MyUser` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: MyUser.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2PasswordHash` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2PasswordHash?: MyUser.mm2PasswordHash$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mm2PasswordHash<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: MyUser.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2ProfileId` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2ProfileId?: MyUser.mm2ProfileId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mm2ProfileId<_$Scalars>>;
    /**
     * Select the `mm2PhotoOriginal` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2PhotoOriginal?: MyUser.mm2PhotoOriginal$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mm2PhotoOriginal<_$Scalars>>;
    /**
     * Select the `mm2BasicAccountCompleted` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    mm2BasicAccountCompleted?: MyUser.mm2BasicAccountCompleted$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.mm2BasicAccountCompleted<_$Scalars>>;
    /**
     * Select the `hasSignedInToMm3` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasSignedInToMm3?: MyUser.hasSignedInToMm3$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.hasSignedInToMm3<_$Scalars>>;
    /**
     * Select the `hasSignedInToMm2` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasSignedInToMm2?: MyUser.hasSignedInToMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.hasSignedInToMm2<_$Scalars>>;
    /**
     * Select the `countryOfResidence` field on the `MyUser` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfResidence?: MyUser.countryOfResidence$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.countryOfResidence<_$Scalars>>;
    /**
     * Select the `gender` field on the `MyUser` object. Its type is `Gender` (a `OutputObject` kind of type).
     */
    gender?: MyUser.gender$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.gender<_$Scalars>>;
    /**
     * Select the `latestUserDevice` field on the `MyUser` object. Its type is `UserDeviceWithoutAuth` (a `OutputObject` kind of type).
     */
    latestUserDevice?: MyUser.latestUserDevice$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.latestUserDevice<_$Scalars>>;
    /**
     * Select the `spokenLanguages` field on the `MyUser` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    spokenLanguages?: MyUser.spokenLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.spokenLanguages<_$Scalars>>;
    /**
     * Select the `preferredLanguage` field on the `MyUser` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    preferredLanguage?: MyUser.preferredLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.preferredLanguage<_$Scalars>>;
    /**
     * Select the `fallbackUiLanguage` field on the `MyUser` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    fallbackUiLanguage?: MyUser.fallbackUiLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.fallbackUiLanguage<_$Scalars>>;
    /**
     * Select the `preferredUiLanguage` field on the `MyUser` object. Its type is `Language` (a `OutputObject` kind of type).
     */
    preferredUiLanguage?: MyUser.preferredUiLanguage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.preferredUiLanguage<_$Scalars>>;
    /**
     * Select the `unreadInAppMessages` field on the `MyUser` object. Its type is `Notification` (a `OutputObject` kind of type).
     */
    unreadInAppMessages?: MyUser.unreadInAppMessages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.unreadInAppMessages<_$Scalars>>;
    /**
     * Select the `channels` field on the `MyUser` object. Its type is `Channel` (a `OutputObject` kind of type).
     */
    channels?: MyUser.channels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.channels<_$Scalars>>;
    /**
     * Select the `channelInvitations` field on the `MyUser` object. Its type is `ChannelInvitation` (a `OutputObject` kind of type).
     */
    channelInvitations?: MyUser.channelInvitations$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.channelInvitations<_$Scalars>>;
    /**
     * Select the `channelParticipants` field on the `MyUser` object. Its type is `ChannelParticipant` (a `OutputObject` kind of type).
     */
    channelParticipants?: MyUser.channelParticipants$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.channelParticipants<_$Scalars>>;
    /**
     * Select the `countryOfOrigin` field on the `MyUser` object. Its type is `Country` (a `OutputObject` kind of type).
     */
    countryOfOrigin?: MyUser.countryOfOrigin$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.countryOfOrigin<_$Scalars>>;
    /**
     * Select the `educationLevel` field on the `MyUser` object. Its type is `EducationLevel` (a `OutputObject` kind of type).
     */
    educationLevel?: MyUser.educationLevel$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.educationLevel<_$Scalars>>;
    /**
     * Select the `endorsements` field on the `MyUser` object. Its type is `EndorsementWithTypes` (a `OutputObject` kind of type).
     */
    endorsements?: MyUser.endorsements$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.endorsements<_$Scalars>>;
    /**
     * Select the `groupMembers` field on the `MyUser` object. Its type is `IGroupMembership` (a `Interface` kind of type).
     */
    groupMembers?: MyUser.groupMembers$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.groupMembers<_$Scalars>>;
    /**
     * Select the `groups` field on the `MyUser` object. Its type is `Group` (a `OutputObject` kind of type).
     */
    groups?: MyUser.groups$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.groups<_$Scalars>>;
    /**
     * Select the `hasTrainings` field on the `MyUser` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    hasTrainings?: MyUser.hasTrainings$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.hasTrainings<_$Scalars>>;
    /**
     * Select the `profileCompletionPercentage` field on the `MyUser` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    profileCompletionPercentage?: MyUser.profileCompletionPercentage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.profileCompletionPercentage<_$Scalars>>;
    /**
     * Select the `profileRole` field on the `MyUser` object. Its type is `UserProfileRole` (a `Enum` kind of type).
     */
    profileRole?: MyUser.profileRole$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.profileRole<_$Scalars>>;
    /**
     * Select the `pronouns` field on the `MyUser` object. Its type is `Pronoun` (a `OutputObject` kind of type).
     */
    pronouns?: MyUser.pronouns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.pronouns<_$Scalars>>;
    /**
     * Select the `pronounsDisplay` field on the `MyUser` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    pronounsDisplay?: MyUser.pronounsDisplay$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.pronounsDisplay<_$Scalars>>;
    /**
     * Select the `uploadedAssets` field on the `MyUser` object. Its type is `UploadedAsset` (a `OutputObject` kind of type).
     */
    uploadedAssets?: MyUser.uploadedAssets$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.uploadedAssets<_$Scalars>>;
    /**
     * Select the `inbox` field on the `MyUser` object. Its type is `UserInbox` (a `OutputObject` kind of type).
     */
    inbox?: MyUser.inbox$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<MyUser.inbox<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: MyUser$FragmentInline<_$Scalars> | MyUser$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface MyUser$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends MyUser<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace MyUser {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type phoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>;
    interface phoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>>;
    type phoneNumberUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>;
    interface phoneNumberUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumberUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumberUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumberUpdatedAt$SelectionSet<_$Scalars>>;
    type isPhoneNumberVerified<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberVerified$SelectionSet<_$Scalars>;
    interface isPhoneNumberVerified$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isPhoneNumberVerified` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isPhoneNumberVerified$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPhoneNumberVerified$SelectionSet<_$Scalars>>;
    type email<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>;
    interface email$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `email` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type email$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>>;
    type emailSource<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSource$SelectionSet<_$Scalars>;
    interface emailSource$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailSource` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailSource$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailSource$SelectionSet<_$Scalars>>;
    type emailUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>;
    interface emailUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `emailUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type emailUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | emailUpdatedAt$SelectionSet<_$Scalars>>;
    type isEmailVerified<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isEmailVerified$SelectionSet<_$Scalars>;
    interface isEmailVerified$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isEmailVerified` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isEmailVerified$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isEmailVerified$SelectionSet<_$Scalars>>;
    type genderTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>;
    interface genderTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genderTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genderTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderTextId$SelectionSet<_$Scalars>>;
    type cityOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>;
    interface cityOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `cityOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type cityOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfResidence$SelectionSet<_$Scalars>>;
    type regionOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>;
    interface regionOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `regionOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type regionOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfResidence$SelectionSet<_$Scalars>>;
    type countryOfResidenceTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>;
    interface countryOfResidenceTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryOfResidenceTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidenceTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfResidenceTextId$SelectionSet<_$Scalars>>;
    type postalCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | postalCode$SelectionSet<_$Scalars>;
    interface postalCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `postalCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type postalCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | postalCode$SelectionSet<_$Scalars>>;
    type avatarUrl<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>;
    interface avatarUrl$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `avatarUrl` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarUrl$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | avatarUrl$SelectionSet<_$Scalars>>;
    type websites<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = websites$SelectionSet<_$Scalars>;
    interface websites$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$LabeledStringValue<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `websites` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type websites$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<websites$SelectionSet<_$Scalars>>;
    type inviteCode<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inviteCode$SelectionSet<_$Scalars>;
    interface inviteCode$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inviteCode` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inviteCode$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inviteCode$SelectionSet<_$Scalars>>;
    type passwordUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>;
    interface passwordUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `passwordUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type passwordUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | passwordUpdatedAt$SelectionSet<_$Scalars>>;
    type preferredLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>;
    interface preferredLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `preferredLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preferredLanguageTextId$SelectionSet<_$Scalars>>;
    type spokenLanguagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>;
    interface spokenLanguagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `spokenLanguagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type spokenLanguagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | spokenLanguagesTextIds$SelectionSet<_$Scalars>>;
    type selectedUiLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | selectedUiLanguageTextId$SelectionSet<_$Scalars>;
    interface selectedUiLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `selectedUiLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type selectedUiLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | selectedUiLanguageTextId$SelectionSet<_$Scalars>>;
    type fallbackUiLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fallbackUiLanguageTextId$SelectionSet<_$Scalars>;
    interface fallbackUiLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `fallbackUiLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type fallbackUiLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | fallbackUiLanguageTextId$SelectionSet<_$Scalars>>;
    type discoverable<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>;
    interface discoverable$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `discoverable` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type discoverable$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | discoverable$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type appFeatures<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appFeatures$SelectionSet<_$Scalars>;
    interface appFeatures$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `appFeatures` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type appFeatures$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | appFeatures$SelectionSet<_$Scalars>>;
    type source<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>;
    interface source$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `source` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type source$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | source$SelectionSet<_$Scalars>>;
    type timezone<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>;
    interface timezone$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `timezone` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type timezone$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | timezone$SelectionSet<_$Scalars>>;
    type preferences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = preferences$SelectionSet<_$Scalars>;
    interface preferences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserPreferences<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `preferences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<preferences$SelectionSet<_$Scalars>>;
    type trustLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>;
    interface trustLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trustLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trustLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trustLevel$SelectionSet<_$Scalars>>;
    type userDevices<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userDevices$SelectionSet<_$Scalars>;
    interface userDevices$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userDevices` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userDevices$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userDevices$SelectionSet<_$Scalars>>;
    type userBlocks<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = userBlocks$SelectionSet<_$Scalars>;
    interface userBlocks$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserBlock<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `userBlocks` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userBlocks$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<userBlocks$SelectionSet<_$Scalars>>;
    type termsAndConditionsAcceptedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsAndConditionsAcceptedAt$SelectionSet<_$Scalars>;
    interface termsAndConditionsAcceptedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `termsAndConditionsAcceptedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type termsAndConditionsAcceptedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | termsAndConditionsAcceptedAt$SelectionSet<_$Scalars>>;
    type optIntoNewsletter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optIntoNewsletter$SelectionSet<_$Scalars>;
    interface optIntoNewsletter$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optIntoNewsletter` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optIntoNewsletter$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optIntoNewsletter$SelectionSet<_$Scalars>>;
    type onboardingStage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | onboardingStage$SelectionSet<_$Scalars>;
    interface onboardingStage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `onboardingStage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type onboardingStage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | onboardingStage$SelectionSet<_$Scalars>>;
    type isTestUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTestUser$SelectionSet<_$Scalars>;
    interface isTestUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isTestUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isTestUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTestUser$SelectionSet<_$Scalars>>;
    type signedInAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>;
    interface signedInAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedInAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedInAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedInAt$SelectionSet<_$Scalars>>;
    type signedOutAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedOutAt$SelectionSet<_$Scalars>;
    interface signedOutAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `signedOutAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type signedOutAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | signedOutAt$SelectionSet<_$Scalars>>;
    type latestActivityAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>;
    interface latestActivityAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `latestActivityAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestActivityAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | latestActivityAt$SelectionSet<_$Scalars>>;
    type inactivatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>;
    interface inactivatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inactivatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inactivatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedAt$SelectionSet<_$Scalars>>;
    type inactivatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedBy$SelectionSet<_$Scalars>;
    interface inactivatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `inactivatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inactivatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | inactivatedBy$SelectionSet<_$Scalars>>;
    type suspendedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>;
    interface suspendedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedAt$SelectionSet<_$Scalars>>;
    type suspendedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>;
    interface suspendedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `suspendedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type suspendedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | suspendedBy$SelectionSet<_$Scalars>>;
    type anonymizedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | anonymizedAt$SelectionSet<_$Scalars>;
    interface anonymizedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `anonymizedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type anonymizedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | anonymizedAt$SelectionSet<_$Scalars>>;
    type companyIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyIds$SelectionSet<_$Scalars>;
    interface companyIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `companyIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companyIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | companyIds$SelectionSet<_$Scalars>>;
    type companies<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = companies$SelectionSet<_$Scalars>;
    interface companies$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Company<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `companies` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type companies$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<companies$SelectionSet<_$Scalars>>;
    type groupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIds$SelectionSet<_$Scalars>;
    interface groupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIds$SelectionSet<_$Scalars>>;
    type parentGroupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentGroupIds$SelectionSet<_$Scalars>;
    interface parentGroupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentGroupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentGroupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentGroupIds$SelectionSet<_$Scalars>>;
    type externalGroupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | externalGroupIds$SelectionSet<_$Scalars>;
    interface externalGroupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `externalGroupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type externalGroupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | externalGroupIds$SelectionSet<_$Scalars>>;
    type groupMemberships<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupMemberships$SelectionSet<_$Scalars>;
    interface groupMemberships$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupMemberships` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupMemberships$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupMemberships$SelectionSet<_$Scalars>>;
    type mentor<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentor$SelectionSet<_$Scalars>;
    interface mentor$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MentorsGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentor` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentor$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentor$SelectionSet<_$Scalars>>;
    type mentee<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = mentee$SelectionSet<_$Scalars>;
    interface mentee$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$MenteesGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `mentee` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mentee$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<mentee$SelectionSet<_$Scalars>>;
    type pronounsTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsTextIds$SelectionSet<_$Scalars>;
    interface pronounsTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pronounsTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronounsTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsTextIds$SelectionSet<_$Scalars>>;
    type seeksHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>;
    interface seeksHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seeksHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seeksHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>>;
    type offersHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>;
    interface offersHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `offersHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type offersHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>>;
    type birthYear<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | birthYear$SelectionSet<_$Scalars>;
    interface birthYear$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `birthYear` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type birthYear$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | birthYear$SelectionSet<_$Scalars>>;
    type ethnicity<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ethnicity$SelectionSet<_$Scalars>;
    interface ethnicity$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ethnicity` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ethnicity$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ethnicity$SelectionSet<_$Scalars>>;
    type educationLevelTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | educationLevelTextId$SelectionSet<_$Scalars>;
    interface educationLevelTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `educationLevelTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type educationLevelTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | educationLevelTextId$SelectionSet<_$Scalars>>;
    type personalBio<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | personalBio$SelectionSet<_$Scalars>;
    interface personalBio$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `personalBio` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type personalBio$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | personalBio$SelectionSet<_$Scalars>>;
    type yearsManagementExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>;
    interface yearsManagementExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsManagementExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsManagementExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsManagementExperience$SelectionSet<_$Scalars>>;
    type yearsOwnershipExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>;
    interface yearsOwnershipExperience$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `yearsOwnershipExperience` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type yearsOwnershipExperience$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | yearsOwnershipExperience$SelectionSet<_$Scalars>>;
    type academicExperienceIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | academicExperienceIds$SelectionSet<_$Scalars>;
    interface academicExperienceIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `academicExperienceIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type academicExperienceIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | academicExperienceIds$SelectionSet<_$Scalars>>;
    type academicExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = academicExperiences$SelectionSet<_$Scalars>;
    interface academicExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$AcademicExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `academicExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type academicExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<academicExperiences$SelectionSet<_$Scalars>>;
    type genderSelfDescribed<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderSelfDescribed$SelectionSet<_$Scalars>;
    interface genderSelfDescribed$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `genderSelfDescribed` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type genderSelfDescribed$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | genderSelfDescribed$SelectionSet<_$Scalars>>;
    type businessExperienceIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessExperienceIds$SelectionSet<_$Scalars>;
    interface businessExperienceIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `businessExperienceIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessExperienceIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | businessExperienceIds$SelectionSet<_$Scalars>>;
    type businessExperiences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = businessExperiences$SelectionSet<_$Scalars>;
    interface businessExperiences$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BusinessExperience<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `businessExperiences` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type businessExperiences$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<businessExperiences$SelectionSet<_$Scalars>>;
    type cityOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfOrigin$SelectionSet<_$Scalars>;
    interface cityOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `cityOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type cityOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | cityOfOrigin$SelectionSet<_$Scalars>>;
    type regionOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfOrigin$SelectionSet<_$Scalars>;
    interface regionOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `regionOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type regionOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | regionOfOrigin$SelectionSet<_$Scalars>>;
    type countryOfOriginTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfOriginTextId$SelectionSet<_$Scalars>;
    interface countryOfOriginTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countryOfOriginTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfOriginTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countryOfOriginTextId$SelectionSet<_$Scalars>>;
    type isOnVacation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>;
    interface isOnVacation$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isOnVacation` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isOnVacation$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isOnVacation$SelectionSet<_$Scalars>>;
    type avatarAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = avatarAsset$SelectionSet<_$Scalars>;
    interface avatarAsset$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `avatarAsset` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type avatarAsset$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<avatarAsset$SelectionSet<_$Scalars>>;
    type profileRoleHistory<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = profileRoleHistory$SelectionSet<_$Scalars>;
    interface profileRoleHistory$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserProfileRoleHistoryItem<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `profileRoleHistory` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileRoleHistory$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<profileRoleHistory$SelectionSet<_$Scalars>>;
    type ssoIdp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ssoIdp$SelectionSet<_$Scalars>;
    interface ssoIdp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ssoIdp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ssoIdp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ssoIdp$SelectionSet<_$Scalars>>;
    type originatedInMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | originatedInMm2$SelectionSet<_$Scalars>;
    interface originatedInMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `originatedInMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type originatedInMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | originatedInMm2$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2PasswordHash<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PasswordHash$SelectionSet<_$Scalars>;
    interface mm2PasswordHash$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2PasswordHash` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2PasswordHash$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PasswordHash$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2ProfileId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ProfileId$SelectionSet<_$Scalars>;
    interface mm2ProfileId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2ProfileId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2ProfileId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2ProfileId$SelectionSet<_$Scalars>>;
    type mm2PhotoOriginal<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PhotoOriginal$SelectionSet<_$Scalars>;
    interface mm2PhotoOriginal$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2PhotoOriginal` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2PhotoOriginal$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2PhotoOriginal$SelectionSet<_$Scalars>>;
    type mm2BasicAccountCompleted<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2BasicAccountCompleted$SelectionSet<_$Scalars>;
    interface mm2BasicAccountCompleted$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2BasicAccountCompleted` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2BasicAccountCompleted$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2BasicAccountCompleted$SelectionSet<_$Scalars>>;
    type hasSignedInToMm3<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm3$SelectionSet<_$Scalars>;
    interface hasSignedInToMm3$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasSignedInToMm3` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasSignedInToMm3$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm3$SelectionSet<_$Scalars>>;
    type hasSignedInToMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm2$SelectionSet<_$Scalars>;
    interface hasSignedInToMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasSignedInToMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasSignedInToMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasSignedInToMm2$SelectionSet<_$Scalars>>;
    type countryOfResidence<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfResidence$SelectionSet<_$Scalars>;
    interface countryOfResidence$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfResidence` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfResidence$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfResidence$SelectionSet<_$Scalars>>;
    type gender<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = gender$SelectionSet<_$Scalars>;
    interface gender$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Gender<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `gender` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type gender$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<gender$SelectionSet<_$Scalars>>;
    type latestUserDevice<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = latestUserDevice$SelectionSet<_$Scalars>;
    interface latestUserDevice$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserDeviceWithoutAuth<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `latestUserDevice` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type latestUserDevice$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<latestUserDevice$SelectionSet<_$Scalars>>;
    type spokenLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = spokenLanguages$SelectionSet<_$Scalars>;
    interface spokenLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `spokenLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type spokenLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<spokenLanguages$SelectionSet<_$Scalars>>;
    type preferredLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = preferredLanguage$SelectionSet<_$Scalars>;
    interface preferredLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `preferredLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<preferredLanguage$SelectionSet<_$Scalars>>;
    type fallbackUiLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = fallbackUiLanguage$SelectionSet<_$Scalars>;
    interface fallbackUiLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `fallbackUiLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type fallbackUiLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<fallbackUiLanguage$SelectionSet<_$Scalars>>;
    type preferredUiLanguage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = preferredUiLanguage$SelectionSet<_$Scalars>;
    interface preferredUiLanguage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Language<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `preferredUiLanguage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preferredUiLanguage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<preferredUiLanguage$SelectionSet<_$Scalars>>;
    type unreadInAppMessages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = unreadInAppMessages$SelectionSet<_$Scalars>;
    interface unreadInAppMessages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Notification<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `unreadInAppMessages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type unreadInAppMessages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<unreadInAppMessages$SelectionSet<_$Scalars>>;
    type channels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channels$SelectionSet<_$Scalars>;
    interface channels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Channel<_$Scalars> {
        /**
         * Arguments for `channels` field. No arguments are required so you may omit this.
         */
        $?: channels$Arguments<_$Scalars>;
    }
    interface channels$Arguments<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
        /**
         * Set options on channels, e.g. to include archived channels.
         */
        options?: $NamedTypes.$FindObjectsOptions<_$Scalars> | undefined | null;
        /**
         * Set to True to return only channels which have been accepted. Default is False, which also returns channels with multiple messages that have not been accepted. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
         */
        mustBeAccepted?: boolean | undefined | null;
        /**
         * Set to True to return only channels with messages. Default is False, which also returns channels without messages. Channels with only unaccepted invitations have no messages (except for channels created via the synchronizer).
         */
        mustHaveMessages?: boolean | undefined | null;
    }
    /**
     * This is the "expanded" version of the `channels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channels$SelectionSet<_$Scalars>>;
    type channelInvitations<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channelInvitations$SelectionSet<_$Scalars>;
    interface channelInvitations$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelInvitation<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channelInvitations` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelInvitations$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channelInvitations$SelectionSet<_$Scalars>>;
    type channelParticipants<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = channelParticipants$SelectionSet<_$Scalars>;
    interface channelParticipants$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ChannelParticipant<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `channelParticipants` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelParticipants$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<channelParticipants$SelectionSet<_$Scalars>>;
    type countryOfOrigin<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = countryOfOrigin$SelectionSet<_$Scalars>;
    interface countryOfOrigin$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Country<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `countryOfOrigin` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countryOfOrigin$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<countryOfOrigin$SelectionSet<_$Scalars>>;
    type educationLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = educationLevel$SelectionSet<_$Scalars>;
    interface educationLevel$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EducationLevel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `educationLevel` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type educationLevel$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<educationLevel$SelectionSet<_$Scalars>>;
    type endorsements<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = endorsements$SelectionSet<_$Scalars>;
    interface endorsements$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$EndorsementWithTypes<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `endorsements` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type endorsements$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<endorsements$SelectionSet<_$Scalars>>;
    type groupMembers<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groupMembers$SelectionSet<_$Scalars>;
    interface groupMembers$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$IGroupMembership<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groupMembers` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupMembers$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groupMembers$SelectionSet<_$Scalars>>;
    type groups<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = groups$SelectionSet<_$Scalars>;
    interface groups$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Group<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `groups` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groups$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<groups$SelectionSet<_$Scalars>>;
    type hasTrainings<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasTrainings$SelectionSet<_$Scalars>;
    interface hasTrainings$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `hasTrainings` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type hasTrainings$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | hasTrainings$SelectionSet<_$Scalars>>;
    type profileCompletionPercentage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>;
    interface profileCompletionPercentage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileCompletionPercentage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileCompletionPercentage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileCompletionPercentage$SelectionSet<_$Scalars>>;
    type profileRole<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>;
    interface profileRole$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `profileRole` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type profileRole$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | profileRole$SelectionSet<_$Scalars>>;
    type pronouns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = pronouns$SelectionSet<_$Scalars>;
    interface pronouns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Pronoun<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `pronouns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronouns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<pronouns$SelectionSet<_$Scalars>>;
    type pronounsDisplay<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>;
    interface pronounsDisplay$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `pronounsDisplay` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type pronounsDisplay$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | pronounsDisplay$SelectionSet<_$Scalars>>;
    type uploadedAssets<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = uploadedAssets$SelectionSet<_$Scalars>;
    interface uploadedAssets$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UploadedAsset<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `uploadedAssets` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type uploadedAssets$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<uploadedAssets$SelectionSet<_$Scalars>>;
    type inbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = inbox$SelectionSet<_$Scalars>;
    interface inbox$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$UserInbox<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `inbox` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type inbox$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<inbox$SelectionSet<_$Scalars>>;
}
export interface ReportUserReason<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ReportUserReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ReportUserReason.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ReportUserReason.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ReportUserReason` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ReportUserReason.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ReportUserReason` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ReportUserReason.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ReportUserReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ReportUserReason.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ReportUserReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ReportUserReason.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ReportUserReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ReportUserReason.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ReportUserReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ReportUserReason.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ReportUserReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ReportUserReason.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ReportUserReason` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ReportUserReason.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.deletedBy<_$Scalars>>;
    /**
     * Select the `textId` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    textId?: ReportUserReason.textId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.textId<_$Scalars>>;
    /**
     * Select the `parentTextId` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    parentTextId?: ReportUserReason.parentTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.parentTextId<_$Scalars>>;
    /**
     * Select the `isParent` field on the `ReportUserReason` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isParent?: ReportUserReason.isParent$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.isParent<_$Scalars>>;
    /**
     * Select the `optionType` field on the `ReportUserReason` object. Its type is `OptionType` (a `Enum` kind of type).
     */
    optionType?: ReportUserReason.optionType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.optionType<_$Scalars>>;
    /**
     * Select the `value` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    value?: ReportUserReason.value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.value<_$Scalars>>;
    /**
     * Select the `translatedValue` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedValue?: ReportUserReason.translatedValue$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.translatedValue<_$Scalars>>;
    /**
     * Select the `supportedLanguages` field on the `ReportUserReason` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    supportedLanguages?: ReportUserReason.supportedLanguages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.supportedLanguages<_$Scalars>>;
    /**
     * Select the `materialIconName` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    materialIconName?: ReportUserReason.materialIconName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.materialIconName<_$Scalars>>;
    /**
     * Select the `description` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: ReportUserReason.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.description<_$Scalars>>;
    /**
     * Select the `translatedDescription` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    translatedDescription?: ReportUserReason.translatedDescription$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.translatedDescription<_$Scalars>>;
    /**
     * Select the `language` field on the `ReportUserReason` object. Its type is `UiLanguage` (a `Enum` kind of type).
     */
    language?: ReportUserReason.language$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.language<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: ReportUserReason.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.mm2Id<_$Scalars>>;
    /**
     * Select the `mm2Value` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Value?: ReportUserReason.mm2Value$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.mm2Value<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `ReportUserReason` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: ReportUserReason.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `mm2TextId` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2TextId?: ReportUserReason.mm2TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.mm2TextId<_$Scalars>>;
    /**
     * Select the `mm3TextId` field on the `ReportUserReason` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm3TextId?: ReportUserReason.mm3TextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.mm3TextId<_$Scalars>>;
    /**
     * Select the `childOptions` field on the `ReportUserReason` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    childOptions?: ReportUserReason.childOptions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.childOptions<_$Scalars>>;
    /**
     * Select the `parentOption` field on the `ReportUserReason` object. Its type is `Option` (a `OutputObject` kind of type).
     */
    parentOption?: ReportUserReason.parentOption$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ReportUserReason.parentOption<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ReportUserReason$FragmentInline<_$Scalars> | ReportUserReason$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ReportUserReason$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ReportUserReason<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ReportUserReason {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type textId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>;
    interface textId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `textId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type textId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | textId$SelectionSet<_$Scalars>>;
    type parentTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>;
    interface parentTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `parentTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | parentTextId$SelectionSet<_$Scalars>>;
    type isParent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>;
    interface isParent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isParent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isParent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isParent$SelectionSet<_$Scalars>>;
    type optionType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>;
    interface optionType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionType$SelectionSet<_$Scalars>>;
    type value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>;
    interface value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | value$SelectionSet<_$Scalars>>;
    type translatedValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>;
    interface translatedValue$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedValue` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedValue$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedValue$SelectionSet<_$Scalars>>;
    type supportedLanguages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>;
    interface supportedLanguages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `supportedLanguages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type supportedLanguages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | supportedLanguages$SelectionSet<_$Scalars>>;
    type materialIconName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>;
    interface materialIconName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `materialIconName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type materialIconName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | materialIconName$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type translatedDescription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>;
    interface translatedDescription$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `translatedDescription` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type translatedDescription$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | translatedDescription$SelectionSet<_$Scalars>>;
    type language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>;
    interface language$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `language` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type language$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | language$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type mm2Value<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>;
    interface mm2Value$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Value` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Value$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Value$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type mm2TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>;
    interface mm2TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2TextId$SelectionSet<_$Scalars>>;
    type mm3TextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>;
    interface mm3TextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm3TextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm3TextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm3TextId$SelectionSet<_$Scalars>>;
    type childOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childOptions$SelectionSet<_$Scalars>;
    interface childOptions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childOptions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childOptions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childOptions$SelectionSet<_$Scalars>>;
    type parentOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = parentOption$SelectionSet<_$Scalars>;
    interface parentOption$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$Option<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `parentOption` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type parentOption$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<parentOption$SelectionSet<_$Scalars>>;
}
export interface Training<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `Training` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: Training.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: Training.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `Training` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: Training.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `Training` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: Training.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `Training` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: Training.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `Training` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: Training.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `Training` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: Training.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `Training` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: Training.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `Training` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: Training.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `Training` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: Training.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.deletedBy<_$Scalars>>;
    /**
     * Select the `title` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    title?: Training.title$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.title<_$Scalars>>;
    /**
     * Select the `titleAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleAr?: Training.titleAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.titleAr<_$Scalars>>;
    /**
     * Select the `titleEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleEn?: Training.titleEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.titleEn<_$Scalars>>;
    /**
     * Select the `titleEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleEs?: Training.titleEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.titleEs<_$Scalars>>;
    /**
     * Select the `titleInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleInd?: Training.titleInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.titleInd<_$Scalars>>;
    /**
     * Select the `titleRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleRu?: Training.titleRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.titleRu<_$Scalars>>;
    /**
     * Select the `titleSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleSo?: Training.titleSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.titleSo<_$Scalars>>;
    /**
     * Select the `slug` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slug?: Training.slug$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slug<_$Scalars>>;
    /**
     * Select the `slugAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugAr?: Training.slugAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slugAr<_$Scalars>>;
    /**
     * Select the `slugEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugEn?: Training.slugEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slugEn<_$Scalars>>;
    /**
     * Select the `slugEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugEs?: Training.slugEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slugEs<_$Scalars>>;
    /**
     * Select the `slugInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugInd?: Training.slugInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slugInd<_$Scalars>>;
    /**
     * Select the `slugRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugRu?: Training.slugRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slugRu<_$Scalars>>;
    /**
     * Select the `slugSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugSo?: Training.slugSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.slugSo<_$Scalars>>;
    /**
     * Select the `urlPath` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPath?: Training.urlPath$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPath<_$Scalars>>;
    /**
     * Select the `urlPathAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathAr?: Training.urlPathAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPathAr<_$Scalars>>;
    /**
     * Select the `urlPathEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathEn?: Training.urlPathEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPathEn<_$Scalars>>;
    /**
     * Select the `urlPathEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathEs?: Training.urlPathEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPathEs<_$Scalars>>;
    /**
     * Select the `urlPathInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathInd?: Training.urlPathInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPathInd<_$Scalars>>;
    /**
     * Select the `urlPathRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathRu?: Training.urlPathRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPathRu<_$Scalars>>;
    /**
     * Select the `urlPathSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathSo?: Training.urlPathSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.urlPathSo<_$Scalars>>;
    /**
     * Select the `relativeUrlPath` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPath?: Training.relativeUrlPath$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPath<_$Scalars>>;
    /**
     * Select the `relativeUrlPathAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathAr?: Training.relativeUrlPathAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPathAr<_$Scalars>>;
    /**
     * Select the `relativeUrlPathEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathEn?: Training.relativeUrlPathEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPathEn<_$Scalars>>;
    /**
     * Select the `relativeUrlPathEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathEs?: Training.relativeUrlPathEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPathEs<_$Scalars>>;
    /**
     * Select the `relativeUrlPathInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathInd?: Training.relativeUrlPathInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPathInd<_$Scalars>>;
    /**
     * Select the `relativeUrlPathRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathRu?: Training.relativeUrlPathRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPathRu<_$Scalars>>;
    /**
     * Select the `relativeUrlPathSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathSo?: Training.relativeUrlPathSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.relativeUrlPathSo<_$Scalars>>;
    /**
     * Select the `live` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    live?: Training.live$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.live<_$Scalars>>;
    /**
     * Select the `locked` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    locked?: Training.locked$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.locked<_$Scalars>>;
    /**
     * Select the `expired` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    expired?: Training.expired$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.expired<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: Training.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `Training` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: Training.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `numCorrectAnswersToPass` field on the `Training` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    numCorrectAnswersToPass?: Training.numCorrectAnswersToPass$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.numCorrectAnswersToPass<_$Scalars>>;
    /**
     * Select the `about` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    about?: Training.about$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.about<_$Scalars>>;
    /**
     * Select the `aboutAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutAr?: Training.aboutAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutAr<_$Scalars>>;
    /**
     * Select the `aboutEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutEn?: Training.aboutEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutEn<_$Scalars>>;
    /**
     * Select the `aboutEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutEs?: Training.aboutEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutEs<_$Scalars>>;
    /**
     * Select the `aboutInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutInd?: Training.aboutInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutInd<_$Scalars>>;
    /**
     * Select the `aboutRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutRu?: Training.aboutRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutRu<_$Scalars>>;
    /**
     * Select the `aboutSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutSo?: Training.aboutSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutSo<_$Scalars>>;
    /**
     * Select the `aboutMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutMm2?: Training.aboutMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutMm2<_$Scalars>>;
    /**
     * Select the `aboutArMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutArMm2?: Training.aboutArMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutArMm2<_$Scalars>>;
    /**
     * Select the `aboutEnMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutEnMm2?: Training.aboutEnMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutEnMm2<_$Scalars>>;
    /**
     * Select the `aboutEsMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutEsMm2?: Training.aboutEsMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutEsMm2<_$Scalars>>;
    /**
     * Select the `aboutIndMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutIndMm2?: Training.aboutIndMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutIndMm2<_$Scalars>>;
    /**
     * Select the `aboutRuMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutRuMm2?: Training.aboutRuMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutRuMm2<_$Scalars>>;
    /**
     * Select the `aboutSoMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    aboutSoMm2?: Training.aboutSoMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.aboutSoMm2<_$Scalars>>;
    /**
     * Select the `introduction` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introduction?: Training.introduction$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introduction<_$Scalars>>;
    /**
     * Select the `introductionAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionAr?: Training.introductionAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionAr<_$Scalars>>;
    /**
     * Select the `introductionEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionEn?: Training.introductionEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionEn<_$Scalars>>;
    /**
     * Select the `introductionEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionEs?: Training.introductionEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionEs<_$Scalars>>;
    /**
     * Select the `introductionInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionInd?: Training.introductionInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionInd<_$Scalars>>;
    /**
     * Select the `introductionRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionRu?: Training.introductionRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionRu<_$Scalars>>;
    /**
     * Select the `introductionSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionSo?: Training.introductionSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionSo<_$Scalars>>;
    /**
     * Select the `introductionMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionMm2?: Training.introductionMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionMm2<_$Scalars>>;
    /**
     * Select the `introductionArMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionArMm2?: Training.introductionArMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionArMm2<_$Scalars>>;
    /**
     * Select the `introductionEnMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionEnMm2?: Training.introductionEnMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionEnMm2<_$Scalars>>;
    /**
     * Select the `introductionEsMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionEsMm2?: Training.introductionEsMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionEsMm2<_$Scalars>>;
    /**
     * Select the `introductionIndMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionIndMm2?: Training.introductionIndMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionIndMm2<_$Scalars>>;
    /**
     * Select the `introductionRuMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionRuMm2?: Training.introductionRuMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionRuMm2<_$Scalars>>;
    /**
     * Select the `introductionSoMm2` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    introductionSoMm2?: Training.introductionSoMm2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.introductionSoMm2<_$Scalars>>;
    /**
     * Select the `lessonPlanLevels` field on the `Training` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    lessonPlanLevels?: Training.lessonPlanLevels$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanLevels<_$Scalars>>;
    /**
     * Select the `certificateTemplateId` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    certificateTemplateId?: Training.certificateTemplateId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.certificateTemplateId<_$Scalars>>;
    /**
     * Select the `code` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    code?: Training.code$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.code<_$Scalars>>;
    /**
     * Select the `tags` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    tags?: Training.tags$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.tags<_$Scalars>>;
    /**
     * Select the `restricted` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    restricted?: Training.restricted$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.restricted<_$Scalars>>;
    /**
     * Select the `showInMenus` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    showInMenus?: Training.showInMenus$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.showInMenus<_$Scalars>>;
    /**
     * Select the `countriesTextIds` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    countriesTextIds?: Training.countriesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.countriesTextIds<_$Scalars>>;
    /**
     * Select the `groupIds` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    groupIds?: Training.groupIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.groupIds<_$Scalars>>;
    /**
     * Select the `languagesTextIds` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    languagesTextIds?: Training.languagesTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.languagesTextIds<_$Scalars>>;
    /**
     * Select the `seeksHelp` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    seeksHelp?: Training.seeksHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.seeksHelp<_$Scalars>>;
    /**
     * Select the `offersHelp` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    offersHelp?: Training.offersHelp$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.offersHelp<_$Scalars>>;
    /**
     * Select the `imageUrls` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    imageUrls?: Training.imageUrls$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.imageUrls<_$Scalars>>;
    /**
     * Select the `lessonPlan` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlan?: Training.lessonPlan$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlan<_$Scalars>>;
    /**
     * Select the `lessonPlanAr` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlanAr?: Training.lessonPlanAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanAr<_$Scalars>>;
    /**
     * Select the `lessonPlanEn` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlanEn?: Training.lessonPlanEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanEn<_$Scalars>>;
    /**
     * Select the `lessonPlanEs` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlanEs?: Training.lessonPlanEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanEs<_$Scalars>>;
    /**
     * Select the `lessonPlanInd` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlanInd?: Training.lessonPlanInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanInd<_$Scalars>>;
    /**
     * Select the `lessonPlanRu` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlanRu?: Training.lessonPlanRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanRu<_$Scalars>>;
    /**
     * Select the `lessonPlanSo` field on the `Training` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lessonPlanSo?: Training.lessonPlanSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.lessonPlanSo<_$Scalars>>;
    /**
     * Select the `trainingContentPages` field on the `Training` object. Its type is `TrainingContentPage` (a `OutputObject` kind of type).
     */
    trainingContentPages?: Training.trainingContentPages$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.trainingContentPages<_$Scalars>>;
    /**
     * Select the `myTrainingSessions` field on the `Training` object. Its type is `TrainingSession` (a `OutputObject` kind of type).
     */
    myTrainingSessions?: Training.myTrainingSessions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.myTrainingSessions<_$Scalars>>;
    /**
     * Select the `myLatestTrainingSession` field on the `Training` object. Its type is `TrainingSession` (a `OutputObject` kind of type).
     */
    myLatestTrainingSession?: Training.myLatestTrainingSession$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.myLatestTrainingSession<_$Scalars>>;
    /**
     * Select the `isTrainingCompletedForMe` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isTrainingCompletedForMe?: Training.isTrainingCompletedForMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.isTrainingCompletedForMe<_$Scalars>>;
    /**
     * Select the `isTrainingPassedForMe` field on the `Training` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isTrainingPassedForMe?: Training.isTrainingPassedForMe$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<Training.isTrainingPassedForMe<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: Training$FragmentInline<_$Scalars> | Training$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface Training$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends Training<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace Training {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type title<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>;
    interface title$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `title` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type title$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>>;
    type titleAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleAr$SelectionSet<_$Scalars>;
    interface titleAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleAr$SelectionSet<_$Scalars>>;
    type titleEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEn$SelectionSet<_$Scalars>;
    interface titleEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEn$SelectionSet<_$Scalars>>;
    type titleEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEs$SelectionSet<_$Scalars>;
    interface titleEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEs$SelectionSet<_$Scalars>>;
    type titleInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleInd$SelectionSet<_$Scalars>;
    interface titleInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleInd$SelectionSet<_$Scalars>>;
    type titleRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleRu$SelectionSet<_$Scalars>;
    interface titleRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleRu$SelectionSet<_$Scalars>>;
    type titleSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleSo$SelectionSet<_$Scalars>;
    interface titleSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleSo$SelectionSet<_$Scalars>>;
    type slug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>;
    interface slug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>>;
    type slugAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugAr$SelectionSet<_$Scalars>;
    interface slugAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugAr$SelectionSet<_$Scalars>>;
    type slugEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEn$SelectionSet<_$Scalars>;
    interface slugEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEn$SelectionSet<_$Scalars>>;
    type slugEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEs$SelectionSet<_$Scalars>;
    interface slugEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEs$SelectionSet<_$Scalars>>;
    type slugInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugInd$SelectionSet<_$Scalars>;
    interface slugInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugInd$SelectionSet<_$Scalars>>;
    type slugRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugRu$SelectionSet<_$Scalars>;
    interface slugRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugRu$SelectionSet<_$Scalars>>;
    type slugSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugSo$SelectionSet<_$Scalars>;
    interface slugSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugSo$SelectionSet<_$Scalars>>;
    type urlPath<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPath$SelectionSet<_$Scalars>;
    interface urlPath$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPath` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPath$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPath$SelectionSet<_$Scalars>>;
    type urlPathAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathAr$SelectionSet<_$Scalars>;
    interface urlPathAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathAr$SelectionSet<_$Scalars>>;
    type urlPathEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEn$SelectionSet<_$Scalars>;
    interface urlPathEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEn$SelectionSet<_$Scalars>>;
    type urlPathEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEs$SelectionSet<_$Scalars>;
    interface urlPathEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEs$SelectionSet<_$Scalars>>;
    type urlPathInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathInd$SelectionSet<_$Scalars>;
    interface urlPathInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathInd$SelectionSet<_$Scalars>>;
    type urlPathRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathRu$SelectionSet<_$Scalars>;
    interface urlPathRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathRu$SelectionSet<_$Scalars>>;
    type urlPathSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathSo$SelectionSet<_$Scalars>;
    interface urlPathSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathSo$SelectionSet<_$Scalars>>;
    type relativeUrlPath<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPath$SelectionSet<_$Scalars>;
    interface relativeUrlPath$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPath` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPath$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPath$SelectionSet<_$Scalars>>;
    type relativeUrlPathAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathAr$SelectionSet<_$Scalars>;
    interface relativeUrlPathAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathAr$SelectionSet<_$Scalars>>;
    type relativeUrlPathEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEn$SelectionSet<_$Scalars>;
    interface relativeUrlPathEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEn$SelectionSet<_$Scalars>>;
    type relativeUrlPathEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEs$SelectionSet<_$Scalars>;
    interface relativeUrlPathEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEs$SelectionSet<_$Scalars>>;
    type relativeUrlPathInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathInd$SelectionSet<_$Scalars>;
    interface relativeUrlPathInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathInd$SelectionSet<_$Scalars>>;
    type relativeUrlPathRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathRu$SelectionSet<_$Scalars>;
    interface relativeUrlPathRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathRu$SelectionSet<_$Scalars>>;
    type relativeUrlPathSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathSo$SelectionSet<_$Scalars>;
    interface relativeUrlPathSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathSo$SelectionSet<_$Scalars>>;
    type live<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | live$SelectionSet<_$Scalars>;
    interface live$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `live` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type live$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | live$SelectionSet<_$Scalars>>;
    type locked<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locked$SelectionSet<_$Scalars>;
    interface locked$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `locked` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type locked$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locked$SelectionSet<_$Scalars>>;
    type expired<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expired$SelectionSet<_$Scalars>;
    interface expired$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expired` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expired$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expired$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type numCorrectAnswersToPass<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numCorrectAnswersToPass$SelectionSet<_$Scalars>;
    interface numCorrectAnswersToPass$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `numCorrectAnswersToPass` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type numCorrectAnswersToPass$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numCorrectAnswersToPass$SelectionSet<_$Scalars>>;
    type about<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | about$SelectionSet<_$Scalars>;
    interface about$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `about` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type about$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | about$SelectionSet<_$Scalars>>;
    type aboutAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutAr$SelectionSet<_$Scalars>;
    interface aboutAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutAr$SelectionSet<_$Scalars>>;
    type aboutEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEn$SelectionSet<_$Scalars>;
    interface aboutEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEn$SelectionSet<_$Scalars>>;
    type aboutEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEs$SelectionSet<_$Scalars>;
    interface aboutEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEs$SelectionSet<_$Scalars>>;
    type aboutInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutInd$SelectionSet<_$Scalars>;
    interface aboutInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutInd$SelectionSet<_$Scalars>>;
    type aboutRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutRu$SelectionSet<_$Scalars>;
    interface aboutRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutRu$SelectionSet<_$Scalars>>;
    type aboutSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutSo$SelectionSet<_$Scalars>;
    interface aboutSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutSo$SelectionSet<_$Scalars>>;
    type aboutMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutMm2$SelectionSet<_$Scalars>;
    interface aboutMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutMm2$SelectionSet<_$Scalars>>;
    type aboutArMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutArMm2$SelectionSet<_$Scalars>;
    interface aboutArMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutArMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutArMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutArMm2$SelectionSet<_$Scalars>>;
    type aboutEnMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEnMm2$SelectionSet<_$Scalars>;
    interface aboutEnMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutEnMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutEnMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEnMm2$SelectionSet<_$Scalars>>;
    type aboutEsMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEsMm2$SelectionSet<_$Scalars>;
    interface aboutEsMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutEsMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutEsMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutEsMm2$SelectionSet<_$Scalars>>;
    type aboutIndMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutIndMm2$SelectionSet<_$Scalars>;
    interface aboutIndMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutIndMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutIndMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutIndMm2$SelectionSet<_$Scalars>>;
    type aboutRuMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutRuMm2$SelectionSet<_$Scalars>;
    interface aboutRuMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutRuMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutRuMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutRuMm2$SelectionSet<_$Scalars>>;
    type aboutSoMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutSoMm2$SelectionSet<_$Scalars>;
    interface aboutSoMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `aboutSoMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type aboutSoMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | aboutSoMm2$SelectionSet<_$Scalars>>;
    type introduction<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introduction$SelectionSet<_$Scalars>;
    interface introduction$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introduction` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introduction$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introduction$SelectionSet<_$Scalars>>;
    type introductionAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionAr$SelectionSet<_$Scalars>;
    interface introductionAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionAr$SelectionSet<_$Scalars>>;
    type introductionEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEn$SelectionSet<_$Scalars>;
    interface introductionEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEn$SelectionSet<_$Scalars>>;
    type introductionEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEs$SelectionSet<_$Scalars>;
    interface introductionEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEs$SelectionSet<_$Scalars>>;
    type introductionInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionInd$SelectionSet<_$Scalars>;
    interface introductionInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionInd$SelectionSet<_$Scalars>>;
    type introductionRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionRu$SelectionSet<_$Scalars>;
    interface introductionRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionRu$SelectionSet<_$Scalars>>;
    type introductionSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionSo$SelectionSet<_$Scalars>;
    interface introductionSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionSo$SelectionSet<_$Scalars>>;
    type introductionMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionMm2$SelectionSet<_$Scalars>;
    interface introductionMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionMm2$SelectionSet<_$Scalars>>;
    type introductionArMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionArMm2$SelectionSet<_$Scalars>;
    interface introductionArMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionArMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionArMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionArMm2$SelectionSet<_$Scalars>>;
    type introductionEnMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEnMm2$SelectionSet<_$Scalars>;
    interface introductionEnMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionEnMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionEnMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEnMm2$SelectionSet<_$Scalars>>;
    type introductionEsMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEsMm2$SelectionSet<_$Scalars>;
    interface introductionEsMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionEsMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionEsMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionEsMm2$SelectionSet<_$Scalars>>;
    type introductionIndMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionIndMm2$SelectionSet<_$Scalars>;
    interface introductionIndMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionIndMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionIndMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionIndMm2$SelectionSet<_$Scalars>>;
    type introductionRuMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionRuMm2$SelectionSet<_$Scalars>;
    interface introductionRuMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionRuMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionRuMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionRuMm2$SelectionSet<_$Scalars>>;
    type introductionSoMm2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionSoMm2$SelectionSet<_$Scalars>;
    interface introductionSoMm2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `introductionSoMm2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type introductionSoMm2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | introductionSoMm2$SelectionSet<_$Scalars>>;
    type lessonPlanLevels<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanLevels$SelectionSet<_$Scalars>;
    interface lessonPlanLevels$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanLevels` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanLevels$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanLevels$SelectionSet<_$Scalars>>;
    type certificateTemplateId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | certificateTemplateId$SelectionSet<_$Scalars>;
    interface certificateTemplateId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `certificateTemplateId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type certificateTemplateId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | certificateTemplateId$SelectionSet<_$Scalars>>;
    type code<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | code$SelectionSet<_$Scalars>;
    interface code$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `code` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type code$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | code$SelectionSet<_$Scalars>>;
    type tags<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>;
    interface tags$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `tags` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type tags$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | tags$SelectionSet<_$Scalars>>;
    type restricted<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | restricted$SelectionSet<_$Scalars>;
    interface restricted$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `restricted` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type restricted$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | restricted$SelectionSet<_$Scalars>>;
    type showInMenus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showInMenus$SelectionSet<_$Scalars>;
    interface showInMenus$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `showInMenus` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type showInMenus$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | showInMenus$SelectionSet<_$Scalars>>;
    type countriesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countriesTextIds$SelectionSet<_$Scalars>;
    interface countriesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `countriesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type countriesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | countriesTextIds$SelectionSet<_$Scalars>>;
    type groupIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIds$SelectionSet<_$Scalars>;
    interface groupIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIds$SelectionSet<_$Scalars>>;
    type languagesTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languagesTextIds$SelectionSet<_$Scalars>;
    interface languagesTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `languagesTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type languagesTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | languagesTextIds$SelectionSet<_$Scalars>>;
    type seeksHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>;
    interface seeksHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `seeksHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type seeksHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | seeksHelp$SelectionSet<_$Scalars>>;
    type offersHelp<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>;
    interface offersHelp$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `offersHelp` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type offersHelp$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | offersHelp$SelectionSet<_$Scalars>>;
    type imageUrls<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageUrls$SelectionSet<_$Scalars>;
    interface imageUrls$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `imageUrls` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type imageUrls$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | imageUrls$SelectionSet<_$Scalars>>;
    type lessonPlan<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlan$SelectionSet<_$Scalars>;
    interface lessonPlan$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlan` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlan$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlan$SelectionSet<_$Scalars>>;
    type lessonPlanAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanAr$SelectionSet<_$Scalars>;
    interface lessonPlanAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanAr$SelectionSet<_$Scalars>>;
    type lessonPlanEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanEn$SelectionSet<_$Scalars>;
    interface lessonPlanEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanEn$SelectionSet<_$Scalars>>;
    type lessonPlanEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanEs$SelectionSet<_$Scalars>;
    interface lessonPlanEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanEs$SelectionSet<_$Scalars>>;
    type lessonPlanInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanInd$SelectionSet<_$Scalars>;
    interface lessonPlanInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanInd$SelectionSet<_$Scalars>>;
    type lessonPlanRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanRu$SelectionSet<_$Scalars>;
    interface lessonPlanRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanRu$SelectionSet<_$Scalars>>;
    type lessonPlanSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanSo$SelectionSet<_$Scalars>;
    interface lessonPlanSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lessonPlanSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lessonPlanSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lessonPlanSo$SelectionSet<_$Scalars>>;
    type trainingContentPages<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = trainingContentPages$SelectionSet<_$Scalars>;
    interface trainingContentPages$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingContentPage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `trainingContentPages` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trainingContentPages$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<trainingContentPages$SelectionSet<_$Scalars>>;
    type myTrainingSessions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myTrainingSessions$SelectionSet<_$Scalars>;
    interface myTrainingSessions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSession<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myTrainingSessions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myTrainingSessions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myTrainingSessions$SelectionSet<_$Scalars>>;
    type myLatestTrainingSession<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = myLatestTrainingSession$SelectionSet<_$Scalars>;
    interface myLatestTrainingSession$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSession<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `myLatestTrainingSession` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myLatestTrainingSession$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<myLatestTrainingSession$SelectionSet<_$Scalars>>;
    type isTrainingCompletedForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTrainingCompletedForMe$SelectionSet<_$Scalars>;
    interface isTrainingCompletedForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isTrainingCompletedForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isTrainingCompletedForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTrainingCompletedForMe$SelectionSet<_$Scalars>>;
    type isTrainingPassedForMe<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTrainingPassedForMe$SelectionSet<_$Scalars>;
    interface isTrainingPassedForMe$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isTrainingPassedForMe` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isTrainingPassedForMe$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isTrainingPassedForMe$SelectionSet<_$Scalars>>;
}
export interface TrainingContentPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `TrainingContentPage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: TrainingContentPage.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: TrainingContentPage.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `TrainingContentPage` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: TrainingContentPage.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `TrainingContentPage` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: TrainingContentPage.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `TrainingContentPage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: TrainingContentPage.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `TrainingContentPage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: TrainingContentPage.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `TrainingContentPage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: TrainingContentPage.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `TrainingContentPage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: TrainingContentPage.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `TrainingContentPage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: TrainingContentPage.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `TrainingContentPage` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: TrainingContentPage.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.deletedBy<_$Scalars>>;
    /**
     * Select the `title` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    title?: TrainingContentPage.title$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.title<_$Scalars>>;
    /**
     * Select the `titleAr` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleAr?: TrainingContentPage.titleAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.titleAr<_$Scalars>>;
    /**
     * Select the `titleEn` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleEn?: TrainingContentPage.titleEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.titleEn<_$Scalars>>;
    /**
     * Select the `titleEs` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleEs?: TrainingContentPage.titleEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.titleEs<_$Scalars>>;
    /**
     * Select the `titleInd` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleInd?: TrainingContentPage.titleInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.titleInd<_$Scalars>>;
    /**
     * Select the `titleRu` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleRu?: TrainingContentPage.titleRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.titleRu<_$Scalars>>;
    /**
     * Select the `titleSo` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleSo?: TrainingContentPage.titleSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.titleSo<_$Scalars>>;
    /**
     * Select the `slug` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slug?: TrainingContentPage.slug$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slug<_$Scalars>>;
    /**
     * Select the `slugAr` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugAr?: TrainingContentPage.slugAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slugAr<_$Scalars>>;
    /**
     * Select the `slugEn` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugEn?: TrainingContentPage.slugEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slugEn<_$Scalars>>;
    /**
     * Select the `slugEs` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugEs?: TrainingContentPage.slugEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slugEs<_$Scalars>>;
    /**
     * Select the `slugInd` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugInd?: TrainingContentPage.slugInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slugInd<_$Scalars>>;
    /**
     * Select the `slugRu` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugRu?: TrainingContentPage.slugRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slugRu<_$Scalars>>;
    /**
     * Select the `slugSo` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    slugSo?: TrainingContentPage.slugSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.slugSo<_$Scalars>>;
    /**
     * Select the `urlPath` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPath?: TrainingContentPage.urlPath$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPath<_$Scalars>>;
    /**
     * Select the `urlPathAr` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathAr?: TrainingContentPage.urlPathAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPathAr<_$Scalars>>;
    /**
     * Select the `urlPathEn` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathEn?: TrainingContentPage.urlPathEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPathEn<_$Scalars>>;
    /**
     * Select the `urlPathEs` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathEs?: TrainingContentPage.urlPathEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPathEs<_$Scalars>>;
    /**
     * Select the `urlPathInd` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathInd?: TrainingContentPage.urlPathInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPathInd<_$Scalars>>;
    /**
     * Select the `urlPathRu` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathRu?: TrainingContentPage.urlPathRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPathRu<_$Scalars>>;
    /**
     * Select the `urlPathSo` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    urlPathSo?: TrainingContentPage.urlPathSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.urlPathSo<_$Scalars>>;
    /**
     * Select the `relativeUrlPath` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPath?: TrainingContentPage.relativeUrlPath$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPath<_$Scalars>>;
    /**
     * Select the `relativeUrlPathAr` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathAr?: TrainingContentPage.relativeUrlPathAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPathAr<_$Scalars>>;
    /**
     * Select the `relativeUrlPathEn` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathEn?: TrainingContentPage.relativeUrlPathEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPathEn<_$Scalars>>;
    /**
     * Select the `relativeUrlPathEs` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathEs?: TrainingContentPage.relativeUrlPathEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPathEs<_$Scalars>>;
    /**
     * Select the `relativeUrlPathInd` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathInd?: TrainingContentPage.relativeUrlPathInd$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPathInd<_$Scalars>>;
    /**
     * Select the `relativeUrlPathRu` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathRu?: TrainingContentPage.relativeUrlPathRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPathRu<_$Scalars>>;
    /**
     * Select the `relativeUrlPathSo` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    relativeUrlPathSo?: TrainingContentPage.relativeUrlPathSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.relativeUrlPathSo<_$Scalars>>;
    /**
     * Select the `live` field on the `TrainingContentPage` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    live?: TrainingContentPage.live$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.live<_$Scalars>>;
    /**
     * Select the `locked` field on the `TrainingContentPage` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    locked?: TrainingContentPage.locked$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.locked<_$Scalars>>;
    /**
     * Select the `expired` field on the `TrainingContentPage` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    expired?: TrainingContentPage.expired$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.expired<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: TrainingContentPage.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `TrainingContentPage` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: TrainingContentPage.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `children` field on the `TrainingContentPage` object. Its type is `TrainingContentPage` (a `OutputObject` kind of type).
     */
    children?: TrainingContentPage.children$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.children<_$Scalars>>;
    /**
     * Select the `trainingId` field on the `TrainingContentPage` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    trainingId?: TrainingContentPage.trainingId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingContentPage.trainingId<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: TrainingContentPage$FragmentInline<_$Scalars> | TrainingContentPage$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface TrainingContentPage$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends TrainingContentPage<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace TrainingContentPage {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type title<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>;
    interface title$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `title` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type title$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | title$SelectionSet<_$Scalars>>;
    type titleAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleAr$SelectionSet<_$Scalars>;
    interface titleAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleAr$SelectionSet<_$Scalars>>;
    type titleEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEn$SelectionSet<_$Scalars>;
    interface titleEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEn$SelectionSet<_$Scalars>>;
    type titleEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEs$SelectionSet<_$Scalars>;
    interface titleEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEs$SelectionSet<_$Scalars>>;
    type titleInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleInd$SelectionSet<_$Scalars>;
    interface titleInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleInd$SelectionSet<_$Scalars>>;
    type titleRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleRu$SelectionSet<_$Scalars>;
    interface titleRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleRu$SelectionSet<_$Scalars>>;
    type titleSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleSo$SelectionSet<_$Scalars>;
    interface titleSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleSo$SelectionSet<_$Scalars>>;
    type slug<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>;
    interface slug$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slug` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slug$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slug$SelectionSet<_$Scalars>>;
    type slugAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugAr$SelectionSet<_$Scalars>;
    interface slugAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugAr$SelectionSet<_$Scalars>>;
    type slugEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEn$SelectionSet<_$Scalars>;
    interface slugEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEn$SelectionSet<_$Scalars>>;
    type slugEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEs$SelectionSet<_$Scalars>;
    interface slugEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugEs$SelectionSet<_$Scalars>>;
    type slugInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugInd$SelectionSet<_$Scalars>;
    interface slugInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugInd$SelectionSet<_$Scalars>>;
    type slugRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugRu$SelectionSet<_$Scalars>;
    interface slugRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugRu$SelectionSet<_$Scalars>>;
    type slugSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugSo$SelectionSet<_$Scalars>;
    interface slugSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `slugSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type slugSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | slugSo$SelectionSet<_$Scalars>>;
    type urlPath<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPath$SelectionSet<_$Scalars>;
    interface urlPath$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPath` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPath$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPath$SelectionSet<_$Scalars>>;
    type urlPathAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathAr$SelectionSet<_$Scalars>;
    interface urlPathAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathAr$SelectionSet<_$Scalars>>;
    type urlPathEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEn$SelectionSet<_$Scalars>;
    interface urlPathEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEn$SelectionSet<_$Scalars>>;
    type urlPathEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEs$SelectionSet<_$Scalars>;
    interface urlPathEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathEs$SelectionSet<_$Scalars>>;
    type urlPathInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathInd$SelectionSet<_$Scalars>;
    interface urlPathInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathInd$SelectionSet<_$Scalars>>;
    type urlPathRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathRu$SelectionSet<_$Scalars>;
    interface urlPathRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathRu$SelectionSet<_$Scalars>>;
    type urlPathSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathSo$SelectionSet<_$Scalars>;
    interface urlPathSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `urlPathSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type urlPathSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | urlPathSo$SelectionSet<_$Scalars>>;
    type relativeUrlPath<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPath$SelectionSet<_$Scalars>;
    interface relativeUrlPath$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPath` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPath$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPath$SelectionSet<_$Scalars>>;
    type relativeUrlPathAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathAr$SelectionSet<_$Scalars>;
    interface relativeUrlPathAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathAr$SelectionSet<_$Scalars>>;
    type relativeUrlPathEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEn$SelectionSet<_$Scalars>;
    interface relativeUrlPathEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEn$SelectionSet<_$Scalars>>;
    type relativeUrlPathEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEs$SelectionSet<_$Scalars>;
    interface relativeUrlPathEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathEs$SelectionSet<_$Scalars>>;
    type relativeUrlPathInd<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathInd$SelectionSet<_$Scalars>;
    interface relativeUrlPathInd$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathInd` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathInd$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathInd$SelectionSet<_$Scalars>>;
    type relativeUrlPathRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathRu$SelectionSet<_$Scalars>;
    interface relativeUrlPathRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathRu$SelectionSet<_$Scalars>>;
    type relativeUrlPathSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathSo$SelectionSet<_$Scalars>;
    interface relativeUrlPathSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `relativeUrlPathSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type relativeUrlPathSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | relativeUrlPathSo$SelectionSet<_$Scalars>>;
    type live<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | live$SelectionSet<_$Scalars>;
    interface live$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `live` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type live$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | live$SelectionSet<_$Scalars>>;
    type locked<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locked$SelectionSet<_$Scalars>;
    interface locked$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `locked` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type locked$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | locked$SelectionSet<_$Scalars>>;
    type expired<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expired$SelectionSet<_$Scalars>;
    interface expired$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `expired` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type expired$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | expired$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type children<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = children$SelectionSet<_$Scalars>;
    interface children$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingContentPage<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `children` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type children$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<children$SelectionSet<_$Scalars>>;
    type trainingId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trainingId$SelectionSet<_$Scalars>;
    interface trainingId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trainingId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trainingId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trainingId$SelectionSet<_$Scalars>>;
}
export interface TrainingSession<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `TrainingSession` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: TrainingSession.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `TrainingSession` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: TrainingSession.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `TrainingSession` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: TrainingSession.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `TrainingSession` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: TrainingSession.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `TrainingSession` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: TrainingSession.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `TrainingSession` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: TrainingSession.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `TrainingSession` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: TrainingSession.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `TrainingSession` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: TrainingSession.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `TrainingSession` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: TrainingSession.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `TrainingSession` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: TrainingSession.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.deletedBy<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `TrainingSession` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: TrainingSession.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `TrainingSession` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: TrainingSession.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `startedAt` field on the `TrainingSession` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    startedAt?: TrainingSession.startedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.startedAt<_$Scalars>>;
    /**
     * Select the `trainingId` field on the `TrainingSession` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    trainingId?: TrainingSession.trainingId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.trainingId<_$Scalars>>;
    /**
     * Select the `userId` field on the `TrainingSession` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userId?: TrainingSession.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.userId<_$Scalars>>;
    /**
     * Select the `isInProgress` field on the `TrainingSession` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isInProgress?: TrainingSession.isInProgress$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.isInProgress<_$Scalars>>;
    /**
     * Select the `percentCompleted` field on the `TrainingSession` object. Its type is `Float` (a `ScalarStandard` kind of type).
     */
    percentCompleted?: TrainingSession.percentCompleted$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.percentCompleted<_$Scalars>>;
    /**
     * Select the `completionInfo` field on the `TrainingSession` object. Its type is `TrainingSessionCompletionInfo` (a `OutputObject` kind of type).
     */
    completionInfo?: TrainingSession.completionInfo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSession.completionInfo<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: TrainingSession$FragmentInline<_$Scalars> | TrainingSession$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface TrainingSession$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends TrainingSession<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace TrainingSession {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type startedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startedAt$SelectionSet<_$Scalars>;
    interface startedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `startedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type startedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | startedAt$SelectionSet<_$Scalars>>;
    type trainingId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trainingId$SelectionSet<_$Scalars>;
    interface trainingId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `trainingId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type trainingId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | trainingId$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type isInProgress<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isInProgress$SelectionSet<_$Scalars>;
    interface isInProgress$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isInProgress` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isInProgress$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isInProgress$SelectionSet<_$Scalars>>;
    type percentCompleted<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | percentCompleted$SelectionSet<_$Scalars>;
    interface percentCompleted$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `percentCompleted` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type percentCompleted$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | percentCompleted$SelectionSet<_$Scalars>>;
    type completionInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = completionInfo$SelectionSet<_$Scalars>;
    interface completionInfo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$TrainingSessionCompletionInfo<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `completionInfo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type completionInfo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<completionInfo$SelectionSet<_$Scalars>>;
}
export interface TrainingSessionCompletionInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `updatedAt` field on the `TrainingSessionCompletionInfo` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: TrainingSessionCompletionInfo.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.updatedAt<_$Scalars>>;
    /**
     * Select the `mm2Id` field on the `TrainingSessionCompletionInfo` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    mm2Id?: TrainingSessionCompletionInfo.mm2Id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.mm2Id<_$Scalars>>;
    /**
     * Select the `syncedWithMm2At` field on the `TrainingSessionCompletionInfo` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    syncedWithMm2At?: TrainingSessionCompletionInfo.syncedWithMm2At$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.syncedWithMm2At<_$Scalars>>;
    /**
     * Select the `completedAt` field on the `TrainingSessionCompletionInfo` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    completedAt?: TrainingSessionCompletionInfo.completedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.completedAt<_$Scalars>>;
    /**
     * Select the `questionsAnsweredCorrectly` field on the `TrainingSessionCompletionInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    questionsAnsweredCorrectly?: TrainingSessionCompletionInfo.questionsAnsweredCorrectly$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.questionsAnsweredCorrectly<_$Scalars>>;
    /**
     * Select the `numberOfQuestions` field on the `TrainingSessionCompletionInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    numberOfQuestions?: TrainingSessionCompletionInfo.numberOfQuestions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.numberOfQuestions<_$Scalars>>;
    /**
     * Select the `numCorrectAnswersToPass` field on the `TrainingSessionCompletionInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    numCorrectAnswersToPass?: TrainingSessionCompletionInfo.numCorrectAnswersToPass$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.numCorrectAnswersToPass<_$Scalars>>;
    /**
     * Select the `isPassingScore` field on the `TrainingSessionCompletionInfo` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isPassingScore?: TrainingSessionCompletionInfo.isPassingScore$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.isPassingScore<_$Scalars>>;
    /**
     * Select the `preTestQuestionsAnsweredCorrectly` field on the `TrainingSessionCompletionInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    preTestQuestionsAnsweredCorrectly?: TrainingSessionCompletionInfo.preTestQuestionsAnsweredCorrectly$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.preTestQuestionsAnsweredCorrectly<_$Scalars>>;
    /**
     * Select the `numberOfPreTestQuestions` field on the `TrainingSessionCompletionInfo` object. Its type is `Int` (a `ScalarStandard` kind of type).
     */
    numberOfPreTestQuestions?: TrainingSessionCompletionInfo.numberOfPreTestQuestions$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<TrainingSessionCompletionInfo.numberOfPreTestQuestions<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: TrainingSessionCompletionInfo$FragmentInline<_$Scalars> | TrainingSessionCompletionInfo$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface TrainingSessionCompletionInfo$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends TrainingSessionCompletionInfo<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace TrainingSessionCompletionInfo {
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type mm2Id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>;
    interface mm2Id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `mm2Id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type mm2Id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | mm2Id$SelectionSet<_$Scalars>>;
    type syncedWithMm2At<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>;
    interface syncedWithMm2At$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `syncedWithMm2At` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type syncedWithMm2At$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | syncedWithMm2At$SelectionSet<_$Scalars>>;
    type completedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | completedAt$SelectionSet<_$Scalars>;
    interface completedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `completedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type completedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | completedAt$SelectionSet<_$Scalars>>;
    type questionsAnsweredCorrectly<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | questionsAnsweredCorrectly$SelectionSet<_$Scalars>;
    interface questionsAnsweredCorrectly$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `questionsAnsweredCorrectly` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type questionsAnsweredCorrectly$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | questionsAnsweredCorrectly$SelectionSet<_$Scalars>>;
    type numberOfQuestions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numberOfQuestions$SelectionSet<_$Scalars>;
    interface numberOfQuestions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `numberOfQuestions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type numberOfQuestions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numberOfQuestions$SelectionSet<_$Scalars>>;
    type numCorrectAnswersToPass<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numCorrectAnswersToPass$SelectionSet<_$Scalars>;
    interface numCorrectAnswersToPass$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `numCorrectAnswersToPass` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type numCorrectAnswersToPass$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numCorrectAnswersToPass$SelectionSet<_$Scalars>>;
    type isPassingScore<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPassingScore$SelectionSet<_$Scalars>;
    interface isPassingScore$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isPassingScore` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isPassingScore$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isPassingScore$SelectionSet<_$Scalars>>;
    type preTestQuestionsAnsweredCorrectly<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preTestQuestionsAnsweredCorrectly$SelectionSet<_$Scalars>;
    interface preTestQuestionsAnsweredCorrectly$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `preTestQuestionsAnsweredCorrectly` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type preTestQuestionsAnsweredCorrectly$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | preTestQuestionsAnsweredCorrectly$SelectionSet<_$Scalars>>;
    type numberOfPreTestQuestions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numberOfPreTestQuestions$SelectionSet<_$Scalars>;
    interface numberOfPreTestQuestions$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `numberOfPreTestQuestions` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type numberOfPreTestQuestions$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | numberOfPreTestQuestions$SelectionSet<_$Scalars>>;
}
/**
 * API response to signInUser/signUpUser/signInOauthUser
 */
export interface UserAuthResponse<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `userId` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userId?: UserAuthResponse.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.userId<_$Scalars>>;
    /**
     * Select the `firstName` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstName?: UserAuthResponse.firstName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.firstName<_$Scalars>>;
    /**
     * Select the `lastName` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    lastName?: UserAuthResponse.lastName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.lastName<_$Scalars>>;
    /**
     * Select the `userHandle` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    userHandle?: UserAuthResponse.userHandle$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.userHandle<_$Scalars>>;
    /**
     * Select the `email` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    email?: UserAuthResponse.email$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.email<_$Scalars>>;
    /**
     * Select the `phoneNumber` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    phoneNumber?: UserAuthResponse.phoneNumber$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.phoneNumber<_$Scalars>>;
    /**
     * Select the `roles` field on the `UserAuthResponse` object. Its type is `UserRole` (a `Enum` kind of type).
     */
    roles?: UserAuthResponse.roles$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.roles<_$Scalars>>;
    /**
     * Select the `onboardingStage` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    onboardingStage?: UserAuthResponse.onboardingStage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.onboardingStage<_$Scalars>>;
    /**
     * Select the `foundUser` field on the `UserAuthResponse` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    foundUser?: UserAuthResponse.foundUser$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.foundUser<_$Scalars>>;
    /**
     * Select the `authType` field on the `UserAuthResponse` object. Its type is `AuthType` (a `Enum` kind of type).
     */
    authType?: UserAuthResponse.authType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.authType<_$Scalars>>;
    /**
     * Select the `authToken` field on the `UserAuthResponse` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    authToken?: UserAuthResponse.authToken$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.authToken<_$Scalars>>;
    /**
     * Select the `authTokenExpiresAt` field on the `UserAuthResponse` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    authTokenExpiresAt?: UserAuthResponse.authTokenExpiresAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<UserAuthResponse.authTokenExpiresAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: UserAuthResponse$FragmentInline<_$Scalars> | UserAuthResponse$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface UserAuthResponse$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends UserAuthResponse<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace UserAuthResponse {
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type firstName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>;
    interface firstName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstName$SelectionSet<_$Scalars>>;
    type lastName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>;
    interface lastName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `lastName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type lastName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | lastName$SelectionSet<_$Scalars>>;
    type userHandle<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>;
    interface userHandle$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userHandle` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userHandle$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userHandle$SelectionSet<_$Scalars>>;
    type email<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>;
    interface email$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `email` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type email$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | email$SelectionSet<_$Scalars>>;
    type phoneNumber<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>;
    interface phoneNumber$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `phoneNumber` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type phoneNumber$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | phoneNumber$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
    type onboardingStage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | onboardingStage$SelectionSet<_$Scalars>;
    interface onboardingStage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `onboardingStage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type onboardingStage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | onboardingStage$SelectionSet<_$Scalars>>;
    type foundUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | foundUser$SelectionSet<_$Scalars>;
    interface foundUser$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `foundUser` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type foundUser$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | foundUser$SelectionSet<_$Scalars>>;
    type authType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authType$SelectionSet<_$Scalars>;
    interface authType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `authType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type authType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authType$SelectionSet<_$Scalars>>;
    type authToken<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authToken$SelectionSet<_$Scalars>;
    interface authToken$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `authToken` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type authToken$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authToken$SelectionSet<_$Scalars>>;
    type authTokenExpiresAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authTokenExpiresAt$SelectionSet<_$Scalars>;
    interface authTokenExpiresAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `authTokenExpiresAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type authTokenExpiresAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | authTokenExpiresAt$SelectionSet<_$Scalars>>;
}
export interface ContentTag<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ContentTag.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ContentTag` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ContentTag.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ContentTag` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ContentTag.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ContentTag` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ContentTag.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ContentTag` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ContentTag.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ContentTag.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ContentTag` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ContentTag.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ContentTag.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ContentTag` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ContentTag.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ContentTag.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.deletedBy<_$Scalars>>;
    /**
     * Select the `objectId` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    objectId?: ContentTag.objectId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.objectId<_$Scalars>>;
    /**
     * Select the `contentModelType` field on the `ContentTag` object. Its type is `ModelType` (a `Enum` kind of type).
     */
    contentModelType?: ContentTag.contentModelType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.contentModelType<_$Scalars>>;
    /**
     * Select the `userId` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    userId?: ContentTag.userId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.userId<_$Scalars>>;
    /**
     * Select the `contentTagTypeTextId` field on the `ContentTag` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    contentTagTypeTextId?: ContentTag.contentTagTypeTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.contentTagTypeTextId<_$Scalars>>;
    /**
     * Select the `childContentTagTypeTextId` field on the `ContentTag` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    childContentTagTypeTextId?: ContentTag.childContentTagTypeTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.childContentTagTypeTextId<_$Scalars>>;
    /**
     * Select the `messageText` field on the `ContentTag` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageText?: ContentTag.messageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.messageText<_$Scalars>>;
    /**
     * Select the `moderationConcern` field on the `ContentTag` object. Its type is `ModerationConcern` (a `OutputObject` kind of type).
     */
    moderationConcern?: ContentTag.moderationConcern$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.moderationConcern<_$Scalars>>;
    /**
     * Select the `allModerationConcerns` field on the `ContentTag` object. Its type is `ModerationConcern` (a `OutputObject` kind of type).
     */
    allModerationConcerns?: ContentTag.allModerationConcerns$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.allModerationConcerns<_$Scalars>>;
    /**
     * Select the `approvedByRecipientAt` field on the `ContentTag` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    approvedByRecipientAt?: ContentTag.approvedByRecipientAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.approvedByRecipientAt<_$Scalars>>;
    /**
     * Select the `verifiedBy` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    verifiedBy?: ContentTag.verifiedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.verifiedBy<_$Scalars>>;
    /**
     * Select the `verifiedAt` field on the `ContentTag` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    verifiedAt?: ContentTag.verifiedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.verifiedAt<_$Scalars>>;
    /**
     * Select the `dismissedBy` field on the `ContentTag` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    dismissedBy?: ContentTag.dismissedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.dismissedBy<_$Scalars>>;
    /**
     * Select the `dismissedAt` field on the `ContentTag` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    dismissedAt?: ContentTag.dismissedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.dismissedAt<_$Scalars>>;
    /**
     * Select the `childContentTagType` field on the `ContentTag` object. Its type is `ContentTagType` (a `OutputObject` kind of type).
     */
    childContentTagType?: ContentTag.childContentTagType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.childContentTagType<_$Scalars>>;
    /**
     * Select the `contentTagType` field on the `ContentTag` object. Its type is `ContentTagType` (a `OutputObject` kind of type).
     */
    contentTagType?: ContentTag.contentTagType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentTag.contentTagType<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ContentTag$FragmentInline<_$Scalars> | ContentTag$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ContentTag$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ContentTag<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ContentTag {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type objectId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectId$SelectionSet<_$Scalars>;
    interface objectId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `objectId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type objectId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectId$SelectionSet<_$Scalars>>;
    type contentModelType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentModelType$SelectionSet<_$Scalars>;
    interface contentModelType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `contentModelType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contentModelType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentModelType$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type contentTagTypeTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentTagTypeTextId$SelectionSet<_$Scalars>;
    interface contentTagTypeTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `contentTagTypeTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contentTagTypeTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | contentTagTypeTextId$SelectionSet<_$Scalars>>;
    type childContentTagTypeTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | childContentTagTypeTextId$SelectionSet<_$Scalars>;
    interface childContentTagTypeTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `childContentTagTypeTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childContentTagTypeTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | childContentTagTypeTextId$SelectionSet<_$Scalars>>;
    type messageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>;
    interface messageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageText$SelectionSet<_$Scalars>>;
    type moderationConcern<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = moderationConcern$SelectionSet<_$Scalars>;
    interface moderationConcern$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModerationConcern<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `moderationConcern` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type moderationConcern$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<moderationConcern$SelectionSet<_$Scalars>>;
    type allModerationConcerns<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = allModerationConcerns$SelectionSet<_$Scalars>;
    interface allModerationConcerns$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModerationConcern<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `allModerationConcerns` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type allModerationConcerns$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<allModerationConcerns$SelectionSet<_$Scalars>>;
    type approvedByRecipientAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | approvedByRecipientAt$SelectionSet<_$Scalars>;
    interface approvedByRecipientAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `approvedByRecipientAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type approvedByRecipientAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | approvedByRecipientAt$SelectionSet<_$Scalars>>;
    type verifiedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedBy$SelectionSet<_$Scalars>;
    interface verifiedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `verifiedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifiedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedBy$SelectionSet<_$Scalars>>;
    type verifiedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedAt$SelectionSet<_$Scalars>;
    interface verifiedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `verifiedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type verifiedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | verifiedAt$SelectionSet<_$Scalars>>;
    type dismissedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedBy$SelectionSet<_$Scalars>;
    interface dismissedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dismissedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedBy$SelectionSet<_$Scalars>>;
    type dismissedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedAt$SelectionSet<_$Scalars>;
    interface dismissedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `dismissedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type dismissedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | dismissedAt$SelectionSet<_$Scalars>>;
    type childContentTagType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = childContentTagType$SelectionSet<_$Scalars>;
    interface childContentTagType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContentTagType<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `childContentTagType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type childContentTagType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<childContentTagType$SelectionSet<_$Scalars>>;
    type contentTagType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = contentTagType$SelectionSet<_$Scalars>;
    interface contentTagType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ContentTagType<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `contentTagType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type contentTagType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<contentTagType$SelectionSet<_$Scalars>>;
}
export interface SupportChannelConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `SupportChannelConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: SupportChannelConfig.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `SupportChannelConfig` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: SupportChannelConfig.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `SupportChannelConfig` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: SupportChannelConfig.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `SupportChannelConfig` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: SupportChannelConfig.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `SupportChannelConfig` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: SupportChannelConfig.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `SupportChannelConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: SupportChannelConfig.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `SupportChannelConfig` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: SupportChannelConfig.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `SupportChannelConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: SupportChannelConfig.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `SupportChannelConfig` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: SupportChannelConfig.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `SupportChannelConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: SupportChannelConfig.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.deletedBy<_$Scalars>>;
    /**
     * Select the `groupId` field on the `SupportChannelConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    groupId?: SupportChannelConfig.groupId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.groupId<_$Scalars>>;
    /**
     * Select the `senderUserId` field on the `SupportChannelConfig` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    senderUserId?: SupportChannelConfig.senderUserId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.senderUserId<_$Scalars>>;
    /**
     * Select the `isActive` field on the `SupportChannelConfig` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isActive?: SupportChannelConfig.isActive$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.isActive<_$Scalars>>;
    /**
     * Select the `createSupportChannelForMentees` field on the `SupportChannelConfig` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    createSupportChannelForMentees?: SupportChannelConfig.createSupportChannelForMentees$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.createSupportChannelForMentees<_$Scalars>>;
    /**
     * Select the `createSupportChannelForMentors` field on the `SupportChannelConfig` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    createSupportChannelForMentors?: SupportChannelConfig.createSupportChannelForMentors$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.createSupportChannelForMentors<_$Scalars>>;
    /**
     * Select the `channelLanguageTextId` field on the `SupportChannelConfig` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    channelLanguageTextId?: SupportChannelConfig.channelLanguageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.channelLanguageTextId<_$Scalars>>;
    /**
     * Select the `filterByGenderTextIds` field on the `SupportChannelConfig` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    filterByGenderTextIds?: SupportChannelConfig.filterByGenderTextIds$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.filterByGenderTextIds<_$Scalars>>;
    /**
     * Select the `firstMessageText` field on the `SupportChannelConfig` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    firstMessageText?: SupportChannelConfig.firstMessageText$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.firstMessageText<_$Scalars>>;
    /**
     * Select the `sendNotifications` field on the `SupportChannelConfig` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendNotifications?: SupportChannelConfig.sendNotifications$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<SupportChannelConfig.sendNotifications<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: SupportChannelConfig$FragmentInline<_$Scalars> | SupportChannelConfig$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface SupportChannelConfig$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends SupportChannelConfig<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace SupportChannelConfig {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type senderUserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderUserId$SelectionSet<_$Scalars>;
    interface senderUserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderUserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderUserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderUserId$SelectionSet<_$Scalars>>;
    type isActive<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isActive$SelectionSet<_$Scalars>;
    interface isActive$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isActive` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isActive$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isActive$SelectionSet<_$Scalars>>;
    type createSupportChannelForMentees<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createSupportChannelForMentees$SelectionSet<_$Scalars>;
    interface createSupportChannelForMentees$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createSupportChannelForMentees` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createSupportChannelForMentees$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createSupportChannelForMentees$SelectionSet<_$Scalars>>;
    type createSupportChannelForMentors<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createSupportChannelForMentors$SelectionSet<_$Scalars>;
    interface createSupportChannelForMentors$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createSupportChannelForMentors` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createSupportChannelForMentors$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createSupportChannelForMentors$SelectionSet<_$Scalars>>;
    type channelLanguageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelLanguageTextId$SelectionSet<_$Scalars>;
    interface channelLanguageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelLanguageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelLanguageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelLanguageTextId$SelectionSet<_$Scalars>>;
    type filterByGenderTextIds<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | filterByGenderTextIds$SelectionSet<_$Scalars>;
    interface filterByGenderTextIds$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `filterByGenderTextIds` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type filterByGenderTextIds$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | filterByGenderTextIds$SelectionSet<_$Scalars>>;
    type firstMessageText<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstMessageText$SelectionSet<_$Scalars>;
    interface firstMessageText$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `firstMessageText` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type firstMessageText$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | firstMessageText$SelectionSet<_$Scalars>>;
    type sendNotifications<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendNotifications$SelectionSet<_$Scalars>;
    interface sendNotifications$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendNotifications` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendNotifications$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendNotifications$SelectionSet<_$Scalars>>;
}
export interface NotificationTemplate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `NotificationTemplate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: NotificationTemplate.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: NotificationTemplate.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `NotificationTemplate` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: NotificationTemplate.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `NotificationTemplate` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: NotificationTemplate.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `NotificationTemplate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: NotificationTemplate.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `NotificationTemplate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: NotificationTemplate.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `NotificationTemplate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: NotificationTemplate.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `NotificationTemplate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: NotificationTemplate.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `NotificationTemplate` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: NotificationTemplate.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `NotificationTemplate` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: NotificationTemplate.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.deletedBy<_$Scalars>>;
    /**
     * Select the `name` field on the `NotificationTemplate` object. Its type is `NotificationTemplateName` (a `Enum` kind of type).
     */
    name?: NotificationTemplate.name$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.name<_$Scalars>>;
    /**
     * Select the `description` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    description?: NotificationTemplate.description$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.description<_$Scalars>>;
    /**
     * Select the `titleAr` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleAr?: NotificationTemplate.titleAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.titleAr<_$Scalars>>;
    /**
     * Select the `messageTextAr` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageTextAr?: NotificationTemplate.messageTextAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.messageTextAr<_$Scalars>>;
    /**
     * Select the `shortMessageTextAr` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageTextAr?: NotificationTemplate.shortMessageTextAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.shortMessageTextAr<_$Scalars>>;
    /**
     * Select the `htmlMessageAr` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessageAr?: NotificationTemplate.htmlMessageAr$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.htmlMessageAr<_$Scalars>>;
    /**
     * Select the `titleEn` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleEn?: NotificationTemplate.titleEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.titleEn<_$Scalars>>;
    /**
     * Select the `messageTextEn` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageTextEn?: NotificationTemplate.messageTextEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.messageTextEn<_$Scalars>>;
    /**
     * Select the `shortMessageTextEn` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageTextEn?: NotificationTemplate.shortMessageTextEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.shortMessageTextEn<_$Scalars>>;
    /**
     * Select the `htmlMessageEn` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessageEn?: NotificationTemplate.htmlMessageEn$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.htmlMessageEn<_$Scalars>>;
    /**
     * Select the `titleEs` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleEs?: NotificationTemplate.titleEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.titleEs<_$Scalars>>;
    /**
     * Select the `messageTextEs` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageTextEs?: NotificationTemplate.messageTextEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.messageTextEs<_$Scalars>>;
    /**
     * Select the `shortMessageTextEs` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageTextEs?: NotificationTemplate.shortMessageTextEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.shortMessageTextEs<_$Scalars>>;
    /**
     * Select the `htmlMessageEs` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessageEs?: NotificationTemplate.htmlMessageEs$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.htmlMessageEs<_$Scalars>>;
    /**
     * Select the `titleId` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleId?: NotificationTemplate.titleId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.titleId<_$Scalars>>;
    /**
     * Select the `messageTextId` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageTextId?: NotificationTemplate.messageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.messageTextId<_$Scalars>>;
    /**
     * Select the `shortMessageTextId` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageTextId?: NotificationTemplate.shortMessageTextId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.shortMessageTextId<_$Scalars>>;
    /**
     * Select the `htmlMessageId` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessageId?: NotificationTemplate.htmlMessageId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.htmlMessageId<_$Scalars>>;
    /**
     * Select the `titleRu` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleRu?: NotificationTemplate.titleRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.titleRu<_$Scalars>>;
    /**
     * Select the `messageTextRu` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageTextRu?: NotificationTemplate.messageTextRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.messageTextRu<_$Scalars>>;
    /**
     * Select the `shortMessageTextRu` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageTextRu?: NotificationTemplate.shortMessageTextRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.shortMessageTextRu<_$Scalars>>;
    /**
     * Select the `htmlMessageRu` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessageRu?: NotificationTemplate.htmlMessageRu$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.htmlMessageRu<_$Scalars>>;
    /**
     * Select the `titleSo` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    titleSo?: NotificationTemplate.titleSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.titleSo<_$Scalars>>;
    /**
     * Select the `messageTextSo` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    messageTextSo?: NotificationTemplate.messageTextSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.messageTextSo<_$Scalars>>;
    /**
     * Select the `shortMessageTextSo` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    shortMessageTextSo?: NotificationTemplate.shortMessageTextSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.shortMessageTextSo<_$Scalars>>;
    /**
     * Select the `htmlMessageSo` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    htmlMessageSo?: NotificationTemplate.htmlMessageSo$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.htmlMessageSo<_$Scalars>>;
    /**
     * Select the `version` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    version?: NotificationTemplate.version$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.version<_$Scalars>>;
    /**
     * Select the `senderName` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderName?: NotificationTemplate.senderName$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.senderName<_$Scalars>>;
    /**
     * Select the `senderEmail` field on the `NotificationTemplate` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    senderEmail?: NotificationTemplate.senderEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.senderEmail<_$Scalars>>;
    /**
     * Select the `action0` field on the `NotificationTemplate` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    action0?: NotificationTemplate.action0$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.action0<_$Scalars>>;
    /**
     * Select the `action1` field on the `NotificationTemplate` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    action1?: NotificationTemplate.action1$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.action1<_$Scalars>>;
    /**
     * Select the `action2` field on the `NotificationTemplate` object. Its type is `AppAction` (a `Enum` kind of type).
     */
    action2?: NotificationTemplate.action2$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.action2<_$Scalars>>;
    /**
     * Select the `sendEmail` field on the `NotificationTemplate` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendEmail?: NotificationTemplate.sendEmail$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.sendEmail<_$Scalars>>;
    /**
     * Select the `sendInAppMessage` field on the `NotificationTemplate` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendInAppMessage?: NotificationTemplate.sendInAppMessage$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.sendInAppMessage<_$Scalars>>;
    /**
     * Select the `sendPushNotification` field on the `NotificationTemplate` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendPushNotification?: NotificationTemplate.sendPushNotification$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.sendPushNotification<_$Scalars>>;
    /**
     * Select the `sendSms` field on the `NotificationTemplate` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    sendSms?: NotificationTemplate.sendSms$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.sendSms<_$Scalars>>;
    /**
     * Select the `isCore` field on the `NotificationTemplate` object. Its type is `Boolean` (a `ScalarStandard` kind of type).
     */
    isCore?: NotificationTemplate.isCore$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<NotificationTemplate.isCore<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: NotificationTemplate$FragmentInline<_$Scalars> | NotificationTemplate$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface NotificationTemplate$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends NotificationTemplate<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace NotificationTemplate {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type name<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>;
    interface name$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `name` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type name$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | name$SelectionSet<_$Scalars>>;
    type description<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>;
    interface description$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `description` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type description$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | description$SelectionSet<_$Scalars>>;
    type titleAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleAr$SelectionSet<_$Scalars>;
    interface titleAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleAr$SelectionSet<_$Scalars>>;
    type messageTextAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextAr$SelectionSet<_$Scalars>;
    interface messageTextAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageTextAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageTextAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextAr$SelectionSet<_$Scalars>>;
    type shortMessageTextAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextAr$SelectionSet<_$Scalars>;
    interface shortMessageTextAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageTextAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageTextAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextAr$SelectionSet<_$Scalars>>;
    type htmlMessageAr<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageAr$SelectionSet<_$Scalars>;
    interface htmlMessageAr$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessageAr` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessageAr$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageAr$SelectionSet<_$Scalars>>;
    type titleEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEn$SelectionSet<_$Scalars>;
    interface titleEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEn$SelectionSet<_$Scalars>>;
    type messageTextEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextEn$SelectionSet<_$Scalars>;
    interface messageTextEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageTextEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageTextEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextEn$SelectionSet<_$Scalars>>;
    type shortMessageTextEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextEn$SelectionSet<_$Scalars>;
    interface shortMessageTextEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageTextEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageTextEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextEn$SelectionSet<_$Scalars>>;
    type htmlMessageEn<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageEn$SelectionSet<_$Scalars>;
    interface htmlMessageEn$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessageEn` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessageEn$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageEn$SelectionSet<_$Scalars>>;
    type titleEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEs$SelectionSet<_$Scalars>;
    interface titleEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleEs$SelectionSet<_$Scalars>>;
    type messageTextEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextEs$SelectionSet<_$Scalars>;
    interface messageTextEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageTextEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageTextEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextEs$SelectionSet<_$Scalars>>;
    type shortMessageTextEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextEs$SelectionSet<_$Scalars>;
    interface shortMessageTextEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageTextEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageTextEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextEs$SelectionSet<_$Scalars>>;
    type htmlMessageEs<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageEs$SelectionSet<_$Scalars>;
    interface htmlMessageEs$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessageEs` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessageEs$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageEs$SelectionSet<_$Scalars>>;
    type titleId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleId$SelectionSet<_$Scalars>;
    interface titleId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleId$SelectionSet<_$Scalars>>;
    type messageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextId$SelectionSet<_$Scalars>;
    interface messageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextId$SelectionSet<_$Scalars>>;
    type shortMessageTextId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextId$SelectionSet<_$Scalars>;
    interface shortMessageTextId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageTextId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageTextId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextId$SelectionSet<_$Scalars>>;
    type htmlMessageId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageId$SelectionSet<_$Scalars>;
    interface htmlMessageId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessageId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessageId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageId$SelectionSet<_$Scalars>>;
    type titleRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleRu$SelectionSet<_$Scalars>;
    interface titleRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleRu$SelectionSet<_$Scalars>>;
    type messageTextRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextRu$SelectionSet<_$Scalars>;
    interface messageTextRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageTextRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageTextRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextRu$SelectionSet<_$Scalars>>;
    type shortMessageTextRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextRu$SelectionSet<_$Scalars>;
    interface shortMessageTextRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageTextRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageTextRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextRu$SelectionSet<_$Scalars>>;
    type htmlMessageRu<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageRu$SelectionSet<_$Scalars>;
    interface htmlMessageRu$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessageRu` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessageRu$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageRu$SelectionSet<_$Scalars>>;
    type titleSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleSo$SelectionSet<_$Scalars>;
    interface titleSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `titleSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type titleSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | titleSo$SelectionSet<_$Scalars>>;
    type messageTextSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextSo$SelectionSet<_$Scalars>;
    interface messageTextSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageTextSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageTextSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageTextSo$SelectionSet<_$Scalars>>;
    type shortMessageTextSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextSo$SelectionSet<_$Scalars>;
    interface shortMessageTextSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `shortMessageTextSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type shortMessageTextSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | shortMessageTextSo$SelectionSet<_$Scalars>>;
    type htmlMessageSo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageSo$SelectionSet<_$Scalars>;
    interface htmlMessageSo$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `htmlMessageSo` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type htmlMessageSo$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | htmlMessageSo$SelectionSet<_$Scalars>>;
    type version<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | version$SelectionSet<_$Scalars>;
    interface version$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `version` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type version$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | version$SelectionSet<_$Scalars>>;
    type senderName<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderName$SelectionSet<_$Scalars>;
    interface senderName$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderName` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderName$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderName$SelectionSet<_$Scalars>>;
    type senderEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderEmail$SelectionSet<_$Scalars>;
    interface senderEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `senderEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type senderEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | senderEmail$SelectionSet<_$Scalars>>;
    type action0<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action0$SelectionSet<_$Scalars>;
    interface action0$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `action0` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type action0$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action0$SelectionSet<_$Scalars>>;
    type action1<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action1$SelectionSet<_$Scalars>;
    interface action1$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `action1` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type action1$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action1$SelectionSet<_$Scalars>>;
    type action2<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action2$SelectionSet<_$Scalars>;
    interface action2$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `action2` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type action2$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | action2$SelectionSet<_$Scalars>>;
    type sendEmail<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendEmail$SelectionSet<_$Scalars>;
    interface sendEmail$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendEmail` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendEmail$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendEmail$SelectionSet<_$Scalars>>;
    type sendInAppMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendInAppMessage$SelectionSet<_$Scalars>;
    interface sendInAppMessage$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendInAppMessage` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendInAppMessage$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendInAppMessage$SelectionSet<_$Scalars>>;
    type sendPushNotification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendPushNotification$SelectionSet<_$Scalars>;
    interface sendPushNotification$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendPushNotification` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendPushNotification$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendPushNotification$SelectionSet<_$Scalars>>;
    type sendSms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendSms$SelectionSet<_$Scalars>;
    interface sendSms$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `sendSms` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type sendSms$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | sendSms$SelectionSet<_$Scalars>>;
    type isCore<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isCore$SelectionSet<_$Scalars>;
    interface isCore$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `isCore` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type isCore$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | isCore$SelectionSet<_$Scalars>>;
}
export interface ContentStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `ContentStatus` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: ContentStatus.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `ContentStatus` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: ContentStatus.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `ContentStatus` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: ContentStatus.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `ContentStatus` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: ContentStatus.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `ContentStatus` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: ContentStatus.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `ContentStatus` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: ContentStatus.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `ContentStatus` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: ContentStatus.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `ContentStatus` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: ContentStatus.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `ContentStatus` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: ContentStatus.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `ContentStatus` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: ContentStatus.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.deletedBy<_$Scalars>>;
    /**
     * Select the `optionsUpdatedAt` field on the `ContentStatus` object. Its type is `Long` (a `ScalarCustom` kind of type).
     */
    optionsUpdatedAt?: ContentStatus.optionsUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.optionsUpdatedAt<_$Scalars>>;
    /**
     * Select the `myUserUpdatedAt` field on the `ContentStatus` object. Its type is `Long` (a `ScalarCustom` kind of type).
     */
    myUserUpdatedAt?: ContentStatus.myUserUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.myUserUpdatedAt<_$Scalars>>;
    /**
     * Select the `myUserInboxUpdatedAt` field on the `ContentStatus` object. Its type is `Long` (a `ScalarCustom` kind of type).
     */
    myUserInboxUpdatedAt?: ContentStatus.myUserInboxUpdatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ContentStatus.myUserInboxUpdatedAt<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ContentStatus$FragmentInline<_$Scalars> | ContentStatus$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ContentStatus$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ContentStatus<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ContentStatus {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
    type optionsUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionsUpdatedAt$SelectionSet<_$Scalars>;
    interface optionsUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `optionsUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type optionsUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | optionsUpdatedAt$SelectionSet<_$Scalars>>;
    type myUserUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | myUserUpdatedAt$SelectionSet<_$Scalars>;
    interface myUserUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `myUserUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myUserUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | myUserUpdatedAt$SelectionSet<_$Scalars>>;
    type myUserInboxUpdatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | myUserInboxUpdatedAt$SelectionSet<_$Scalars>;
    interface myUserInboxUpdatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `myUserInboxUpdatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type myUserInboxUpdatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | myUserInboxUpdatedAt$SelectionSet<_$Scalars>>;
}
export interface BgChannelChangedEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `serviceRequest` field on the `BgChannelChangedEvent` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    serviceRequest?: BgChannelChangedEvent.serviceRequest$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.serviceRequest<_$Scalars>>;
    /**
     * Select the `channelId` field on the `BgChannelChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    channelId?: BgChannelChangedEvent.channelId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.channelId<_$Scalars>>;
    /**
     * Select the `invitationId` field on the `BgChannelChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    invitationId?: BgChannelChangedEvent.invitationId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.invitationId<_$Scalars>>;
    /**
     * Select the `messageId` field on the `BgChannelChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    messageId?: BgChannelChangedEvent.messageId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.messageId<_$Scalars>>;
    /**
     * Select the `participantId` field on the `BgChannelChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    participantId?: BgChannelChangedEvent.participantId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.participantId<_$Scalars>>;
    /**
     * Select the `eventType` field on the `BgChannelChangedEvent` object. Its type is `ChannelChangedEventType` (a `Enum` kind of type).
     */
    eventType?: BgChannelChangedEvent.eventType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.eventType<_$Scalars>>;
    /**
     * Select the `requestId` field on the `BgChannelChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    requestId?: BgChannelChangedEvent.requestId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BgChannelChangedEvent.requestId<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: BgChannelChangedEvent$FragmentInline<_$Scalars> | BgChannelChangedEvent$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface BgChannelChangedEvent$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends BgChannelChangedEvent<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace BgChannelChangedEvent {
    type serviceRequest<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = serviceRequest$SelectionSet<_$Scalars>;
    interface serviceRequest$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `serviceRequest` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type serviceRequest$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<serviceRequest$SelectionSet<_$Scalars>>;
    type channelId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>;
    interface channelId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `channelId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type channelId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | channelId$SelectionSet<_$Scalars>>;
    type invitationId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | invitationId$SelectionSet<_$Scalars>;
    interface invitationId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `invitationId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type invitationId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | invitationId$SelectionSet<_$Scalars>>;
    type messageId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageId$SelectionSet<_$Scalars>;
    interface messageId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageId$SelectionSet<_$Scalars>>;
    type participantId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | participantId$SelectionSet<_$Scalars>;
    interface participantId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `participantId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type participantId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | participantId$SelectionSet<_$Scalars>>;
    type eventType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | eventType$SelectionSet<_$Scalars>;
    interface eventType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `eventType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type eventType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | eventType$SelectionSet<_$Scalars>>;
    type requestId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | requestId$SelectionSet<_$Scalars>;
    interface requestId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `requestId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type requestId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | requestId$SelectionSet<_$Scalars>>;
}
export interface ObjectChangedEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `serviceRequest` field on the `ObjectChangedEvent` object. Its type is `ServiceRequest` (a `OutputObject` kind of type).
     */
    serviceRequest?: ObjectChangedEvent.serviceRequest$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.serviceRequest<_$Scalars>>;
    /**
     * Select the `objectId` field on the `ObjectChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    objectId?: ObjectChangedEvent.objectId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.objectId<_$Scalars>>;
    /**
     * Select the `modelType` field on the `ObjectChangedEvent` object. Its type is `ModelType` (a `Enum` kind of type).
     */
    modelType?: ObjectChangedEvent.modelType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.modelType<_$Scalars>>;
    /**
     * Select the `ownerUserId` field on the `ObjectChangedEvent` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    ownerUserId?: ObjectChangedEvent.ownerUserId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.ownerUserId<_$Scalars>>;
    /**
     * Select the `messageType` field on the `ObjectChangedEvent` object. Its type is `ObjectChangedEventType` (a `Enum` kind of type).
     */
    messageType?: ObjectChangedEvent.messageType$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.messageType<_$Scalars>>;
    /**
     * Select the `requestId` field on the `ObjectChangedEvent` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    requestId?: ObjectChangedEvent.requestId$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.requestId<_$Scalars>>;
    /**
     * Select the `object` field on the `ObjectChangedEvent` object. Its type is `BaseModel` (a `OutputObject` kind of type).
     */
    object?: ObjectChangedEvent.$object$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<ObjectChangedEvent.$object<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: ObjectChangedEvent$FragmentInline<_$Scalars> | ObjectChangedEvent$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface ObjectChangedEvent$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends ObjectChangedEvent<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace ObjectChangedEvent {
    type serviceRequest<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = serviceRequest$SelectionSet<_$Scalars>;
    interface serviceRequest$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ServiceRequest<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `serviceRequest` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type serviceRequest$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<serviceRequest$SelectionSet<_$Scalars>>;
    type objectId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectId$SelectionSet<_$Scalars>;
    interface objectId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `objectId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type objectId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | objectId$SelectionSet<_$Scalars>>;
    type modelType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | modelType$SelectionSet<_$Scalars>;
    interface modelType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `modelType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type modelType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | modelType$SelectionSet<_$Scalars>>;
    type ownerUserId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ownerUserId$SelectionSet<_$Scalars>;
    interface ownerUserId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `ownerUserId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type ownerUserId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | ownerUserId$SelectionSet<_$Scalars>>;
    type messageType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageType$SelectionSet<_$Scalars>;
    interface messageType$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `messageType` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type messageType$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | messageType$SelectionSet<_$Scalars>>;
    type requestId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | requestId$SelectionSet<_$Scalars>;
    interface requestId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `requestId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type requestId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | requestId$SelectionSet<_$Scalars>>;
    type $object<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $object$SelectionSet<_$Scalars>;
    interface $object$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModel<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `$object` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type $object$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$object$SelectionSet<_$Scalars>>;
}
export interface BaseModel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    /**
     * Select the `id` field on the `BaseModel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    id?: BaseModel.id$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.id<_$Scalars>>;
    /**
     * Select the `adminNotes` field on the `BaseModel` object. Its type is `String` (a `ScalarStandard` kind of type).
     */
    adminNotes?: BaseModel.adminNotes$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.adminNotes<_$Scalars>>;
    /**
     * Select the `events` field on the `BaseModel` object. Its type is `ModelEvent` (a `OutputObject` kind of type).
     */
    events?: BaseModel.events$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.events<_$Scalars>>;
    /**
     * Select the `metadata` field on the `BaseModel` object. Its type is `BaseModelMetadata` (a `Interface` kind of type).
     */
    metadata?: BaseModel.metadata$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.metadata<_$Scalars>>;
    /**
     * Select the `createdAt` field on the `BaseModel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    createdAt?: BaseModel.createdAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.createdAt<_$Scalars>>;
    /**
     * Select the `createdBy` field on the `BaseModel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    createdBy?: BaseModel.createdBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.createdBy<_$Scalars>>;
    /**
     * Select the `updatedAt` field on the `BaseModel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    updatedAt?: BaseModel.updatedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.updatedAt<_$Scalars>>;
    /**
     * Select the `updatedBy` field on the `BaseModel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    updatedBy?: BaseModel.updatedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.updatedBy<_$Scalars>>;
    /**
     * Select the `deletedAt` field on the `BaseModel` object. Its type is `DateTimeISO` (a `ScalarCustom` kind of type).
     */
    deletedAt?: BaseModel.deletedAt$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.deletedAt<_$Scalars>>;
    /**
     * Select the `deletedBy` field on the `BaseModel` object. Its type is `ID` (a `ScalarStandard` kind of type).
     */
    deletedBy?: BaseModel.deletedBy$Expanded<_$Scalars> | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<BaseModel.deletedBy<_$Scalars>>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: BaseModel$FragmentInline<_$Scalars> | BaseModel$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface BaseModel$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends BaseModel<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace BaseModel {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type adminNotes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>;
    interface adminNotes$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `adminNotes` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type adminNotes$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | adminNotes$SelectionSet<_$Scalars>>;
    type events<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = events$SelectionSet<_$Scalars>;
    interface events$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$ModelEvent<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `events` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type events$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<events$SelectionSet<_$Scalars>>;
    type metadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = metadata$SelectionSet<_$Scalars>;
    interface metadata$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base, $NamedTypes.$BaseModelMetadata<_$Scalars> {
    }
    /**
     * This is the "expanded" version of the `metadata` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type metadata$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<metadata$SelectionSet<_$Scalars>>;
    type createdAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>;
    interface createdAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdAt$SelectionSet<_$Scalars>>;
    type createdBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>;
    interface createdBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `createdBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type createdBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | createdBy$SelectionSet<_$Scalars>>;
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
    type updatedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>;
    interface updatedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedBy$SelectionSet<_$Scalars>>;
    type deletedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>;
    interface deletedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedAt$SelectionSet<_$Scalars>>;
    type deletedBy<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>;
    interface deletedBy$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `deletedBy` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type deletedBy$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | deletedBy$SelectionSet<_$Scalars>>;
}
export interface BaseModelMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    updatedAt?: BaseModelMetadata.updatedAt<_$Scalars>;
    ___on_UserMetadata?: UserMetadata<_$Scalars>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: BaseModelMetadata$FragmentInline<_$Scalars> | BaseModelMetadata$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected. Since this is a interface type and thus polymorphic,
     * the name is one of the implementor type names, whichever is ultimately returned at runtime.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface BaseModelMetadata$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends BaseModelMetadata<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace BaseModelMetadata {
    type updatedAt<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>;
    interface updatedAt$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `updatedAt` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type updatedAt$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | updatedAt$SelectionSet<_$Scalars>>;
}
export interface IGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.ObjectLike {
    id?: IGroupMembership.id<_$Scalars>;
    groupId?: IGroupMembership.groupId<_$Scalars>;
    groupIdent?: IGroupMembership.groupIdent<_$Scalars>;
    userId?: IGroupMembership.userId<_$Scalars>;
    roles?: IGroupMembership.roles<_$Scalars>;
    ___on_GroupMembership?: GroupMembership<_$Scalars>;
    ___on_MenteesGroupMembership?: MenteesGroupMembership<_$Scalars>;
    ___on_MentorsGroupMembership?: MentorsGroupMembership<_$Scalars>;
    ___on_MastercardGroupMembership?: MastercardGroupMembership<_$Scalars>;
    ___on_IqlaaGroupMembership?: IqlaaGroupMembership<_$Scalars>;
    ___on_StriveIndonesiaGroupMembership?: StriveIndonesiaGroupMembership<_$Scalars>;
    /**
     * Inline fragments for field groups.
     *
     * Generally a niche feature. This can be useful for example to apply an `@include` directive to a subset of the
     * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
     *
     * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
     */
    ___?: IGroupMembership$FragmentInline<_$Scalars> | IGroupMembership$FragmentInline<_$Scalars>[];
    /**
     * A meta field. Is the name of the type being selected. Since this is a interface type and thus polymorphic,
     * the name is one of the implementor type names, whichever is ultimately returned at runtime.
     *
     * @see https://graphql.org/learn/queries/#meta-fields
     */
    __typename?: $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator$Expanded | $$Utilities.DocumentBuilder.Select.SelectAlias.SelectAlias<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator>;
}
export interface IGroupMembership$FragmentInline<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends IGroupMembership<_$Scalars>, $$Utilities.DocumentBuilder.Select.Directive.$Groups.InlineFragment.Fields {
}
export declare namespace IGroupMembership {
    type id<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>;
    interface id$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `id` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type id$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | id$SelectionSet<_$Scalars>>;
    type groupId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>;
    interface groupId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupId$SelectionSet<_$Scalars>>;
    type groupIdent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>;
    interface groupIdent$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `groupIdent` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type groupIdent$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | groupIdent$SelectionSet<_$Scalars>>;
    type userId<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>;
    interface userId$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `userId` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type userId$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | userId$SelectionSet<_$Scalars>>;
    type roles<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>;
    interface roles$SelectionSet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> extends $$Utilities.DocumentBuilder.Select.Bases.Base {
    }
    /**
     * This is the "expanded" version of the `roles` type. It is identical except for the fact
     * that IDEs will display its contents (a union type) directly, rather than the name of this type.
     * In some cases, this is a preferable DX, making the types easier to read for users.
     */
    type roles$Expanded<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = $$Utilities.Simplify<$$Utilities.DocumentBuilder.Select.Indicator.NoArgsIndicator | roles$SelectionSet<_$Scalars>>;
}
/**
 * [1] These definitions serve to allow field selection interfaces to extend their respective object type without
 *     name clashing between the field name and the object name.
 *
 *     For example imagine `Query.Foo` field with type also called `Foo`. Our generated interfaces for each field
 *     would end up with an error of `export interface Foo extends Foo ...`
 */
export declare namespace $NamedTypes {
    type $Query<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Query<_$Scalars>;
    type $Mutation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Mutation<_$Scalars>;
    type $Subscription<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Subscription<_$Scalars>;
    type $GroupMembershipRole = GroupMembershipRole;
    type $ModelEventType = ModelEventType;
    type $OptionType = OptionType;
    type $UiLanguage = UiLanguage;
    type $MastercardCardType = MastercardCardType;
    type $UserIdentType = UserIdentType;
    type $UserRole = UserRole;
    type $AppFeature = AppFeature;
    type $NotificationType = NotificationType;
    type $IdentityProvider = IdentityProvider;
    type $ModelType = ModelType;
    type $UploadedAssetType = UploadedAssetType;
    type $AssetHostingService = AssetHostingService;
    type $UserProfileRole = UserProfileRole;
    type $AppAction = AppAction;
    type $ChannelType = ChannelType;
    type $ChannelInvitationStatus = ChannelInvitationStatus;
    type $ChannelMessageType = ChannelMessageType;
    type $ChannelParticipantRole = ChannelParticipantRole;
    type $ModerationConcernType = ModerationConcernType;
    type $GroupRuleEventType = GroupRuleEventType;
    type $SortDirection = SortDirection;
    type $IncludeFilterOption = IncludeFilterOption;
    type $AuthType = AuthType;
    type $FederatedIdentityProvider = FederatedIdentityProvider;
    type $AdminTaskType = AdminTaskType;
    type $AdminTaskResult = AdminTaskResult;
    type $ChannelInvitationDirection = ChannelInvitationDirection;
    type $ProductType = ProductType;
    type $BarcodeType = BarcodeType;
    type $WalletItemSource = WalletItemSource;
    type $ServiceName = ServiceName;
    type $UserSearchType = UserSearchType;
    type $UserSearchFieldOption = UserSearchFieldOption;
    type $UserSearchSubscriptionType = UserSearchSubscriptionType;
    type $ServiceRequestType = ServiceRequestType;
    type $ServiceRequestResult = ServiceRequestResult;
    type $ServiceRequestMessageId = ServiceRequestMessageId;
    type $ErrorCode = ErrorCode;
    type $ServiceRequestSource = ServiceRequestSource;
    type $MultiStepActionType = MultiStepActionType;
    type $MultiStepActionStatus = MultiStepActionStatus;
    type $NotificationMethod = NotificationMethod;
    type $MultiStepActionResult = MultiStepActionResult;
    type $MultiStepActionSendNotificationResult = MultiStepActionSendNotificationResult;
    type $CookieChoiceTextId = CookieChoiceTextId;
    type $ReportUserReasonTextId = ReportUserReasonTextId;
    type $DeclineChannelInvitationReasonTextId = DeclineChannelInvitationReasonTextId;
    type $ChannelMessageEvent = ChannelMessageEvent;
    type $NotificationTemplateName = NotificationTemplateName;
    type $ChannelChangedEventType = ChannelChangedEventType;
    type $ObjectChangedEventType = ObjectChangedEventType;
    type $FindObjectsOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = FindObjectsOptions<_$Scalars>;
    type $SortItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SortItem<_$Scalars>;
    type $FindUserByIdentOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = FindUserByIdentOptions<_$Scalars>;
    type $UserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserInput<_$Scalars>;
    type $ModelEventInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ModelEventInput<_$Scalars>;
    type $BaseModelMetadataInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BaseModelMetadataInput<_$Scalars>;
    type $LabeledStringValueInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = LabeledStringValueInput<_$Scalars>;
    type $UserPreferencesInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserPreferencesInput<_$Scalars>;
    type $NotificationOptionsInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = NotificationOptionsInput<_$Scalars>;
    type $CompanyInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = CompanyInput<_$Scalars>;
    type $GroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupMembershipInput<_$Scalars>;
    type $AcademicExperienceInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AcademicExperienceInput<_$Scalars>;
    type $BusinessExperienceInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BusinessExperienceInput<_$Scalars>;
    type $UserProfileRoleHistoryItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserProfileRoleHistoryItemInput<_$Scalars>;
    type $UserListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserListFilter<_$Scalars>;
    type $UserDeviceInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserDeviceInput<_$Scalars>;
    type $UserDeviceListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserDeviceListFilter<_$Scalars>;
    type $UploadedAssetInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UploadedAssetInput<_$Scalars>;
    type $UploadedAssetListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UploadedAssetListFilter<_$Scalars>;
    type $ChannelInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelInput<_$Scalars>;
    type $BgChannelStatusInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BgChannelStatusInput<_$Scalars>;
    type $ChannelListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelListFilter<_$Scalars>;
    type $ChannelMessageInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMessageInput<_$Scalars>;
    type $ChannelMessageStatusInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMessageStatusInput<_$Scalars>;
    type $ChannelMessageListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMessageListFilter<_$Scalars>;
    type $ChannelParticipantInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelParticipantInput<_$Scalars>;
    type $ChannelParticipantListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelParticipantListFilter<_$Scalars>;
    type $GroupMembershipListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupMembershipListFilter<_$Scalars>;
    type $GroupInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupInput<_$Scalars>;
    type $AppliedGroupRuleInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AppliedGroupRuleInput<_$Scalars>;
    type $GroupRuleBaseConfigInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupRuleBaseConfigInput<_$Scalars>;
    type $GroupListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupListFilter<_$Scalars>;
    type $BrandInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BrandInput<_$Scalars>;
    type $BrandListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BrandListFilter<_$Scalars>;
    type $PurchaseOrderItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = PurchaseOrderItemInput<_$Scalars>;
    type $PurchaseOrderItemListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = PurchaseOrderItemListFilter<_$Scalars>;
    type $PurchaseOrderInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = PurchaseOrderInput<_$Scalars>;
    type $PurchaseOrderListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = PurchaseOrderListFilter<_$Scalars>;
    type $ShoppingCartItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ShoppingCartItemInput<_$Scalars>;
    type $ShoppingCartItemListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ShoppingCartItemListFilter<_$Scalars>;
    type $ShoppingCartInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ShoppingCartInput<_$Scalars>;
    type $ShoppingCartListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ShoppingCartListFilter<_$Scalars>;
    type $WalletItemInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletItemInput<_$Scalars>;
    type $WalletItemListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletItemListFilter<_$Scalars>;
    type $WalletItemTransferInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletItemTransferInput<_$Scalars>;
    type $WalletItemTransferListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletItemTransferListFilter<_$Scalars>;
    type $WalletInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletInput<_$Scalars>;
    type $WalletListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletListFilter<_$Scalars>;
    type $GiftCardProductInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GiftCardProductInput<_$Scalars>;
    type $GiftCardDenominationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GiftCardDenominationInput<_$Scalars>;
    type $GiftCardProductListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GiftCardProductListFilter<_$Scalars>;
    type $ProductCategoryInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ProductCategoryInput<_$Scalars>;
    type $ProductCategoryListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ProductCategoryListFilter<_$Scalars>;
    type $UserSearchInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserSearchInput<_$Scalars>;
    type $UserSearchFilterInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserSearchFilterInput<_$Scalars>;
    type $UserSearchListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserSearchListFilter<_$Scalars>;
    type $ContactInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContactInput<_$Scalars>;
    type $SidContactListFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SidContactListFilter<_$Scalars>;
    type $SignInUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SignInUserInput<_$Scalars>;
    type $SignInOauthUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SignInOauthUserInput<_$Scalars>;
    type $SignUpUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SignUpUserInput<_$Scalars>;
    type $VerifyOneTimeAuthTokenInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = VerifyOneTimeAuthTokenInput<_$Scalars>;
    type $ReportUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ReportUserInput<_$Scalars>;
    type $AdminTaskInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AdminTaskInput<_$Scalars>;
    type $ChannelInvitationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelInvitationInput<_$Scalars>;
    type $BgAddChannelMessageEventInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BgAddChannelMessageEventInput<_$Scalars>;
    type $ContentTagInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContentTagInput<_$Scalars>;
    type $ModerationConcernInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ModerationConcernInput<_$Scalars>;
    type $MenteesGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MenteesGroupMembershipInput<_$Scalars>;
    type $MentorsGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MentorsGroupMembershipInput<_$Scalars>;
    type $IqlaaGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IqlaaGroupMembershipInput<_$Scalars>;
    type $MastercardGroupMembershipInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MastercardGroupMembershipInput<_$Scalars>;
    type $SupportChannelConfigInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SupportChannelConfigInput<_$Scalars>;
    type $UpdateObjectOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UpdateObjectOptions<_$Scalars>;
    type $NotificationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = NotificationInput<_$Scalars>;
    type $SendMultiStepActionNotificationInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SendMultiStepActionNotificationInput<_$Scalars>;
    type $NotificationTemplateInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = NotificationTemplateInput<_$Scalars>;
    type $SidMultiStepActionInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SidMultiStepActionInput<_$Scalars>;
    type $MultiStepActionErrorInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MultiStepActionErrorInput<_$Scalars>;
    type $UserIdentInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserIdentInput<_$Scalars>;
    type $VerifyMultiStepActionTokenInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = VerifyMultiStepActionTokenInput<_$Scalars>;
    type $MyUserInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MyUserInput<_$Scalars>;
    type $UserTrackingInput<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserTrackingInput<_$Scalars>;
    type $UserMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserMetadata<_$Scalars>;
    type $ChannelsUserMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelsUserMetadata<_$Scalars>;
    type $GroupsUserMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupsUserMetadata<_$Scalars>;
    type $GroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupMembership<_$Scalars>;
    type $ModelEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ModelEvent<_$Scalars>;
    type $Expertise<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Expertise<_$Scalars>;
    type $Option<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Option<_$Scalars>;
    type $Industry<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Industry<_$Scalars>;
    type $MenteesGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MenteesGroupMembership<_$Scalars>;
    type $MentorsGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MentorsGroupMembership<_$Scalars>;
    type $MastercardGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MastercardGroupMembership<_$Scalars>;
    type $IqlaaGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IqlaaGroupMembership<_$Scalars>;
    type $StriveIndonesiaGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = StriveIndonesiaGroupMembership<_$Scalars>;
    type $User<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = User<_$Scalars>;
    type $LabeledStringValue<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = LabeledStringValue<_$Scalars>;
    type $UserPreferences<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserPreferences<_$Scalars>;
    type $NotificationOptions<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = NotificationOptions<_$Scalars>;
    type $UserDeviceWithoutAuth<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserDeviceWithoutAuth<_$Scalars>;
    type $UserBlock<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserBlock<_$Scalars>;
    type $Company<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Company<_$Scalars>;
    type $CompanyStage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = CompanyStage<_$Scalars>;
    type $CompanyType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = CompanyType<_$Scalars>;
    type $AcademicExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AcademicExperience<_$Scalars>;
    type $BusinessExperience<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BusinessExperience<_$Scalars>;
    type $UploadedAsset<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UploadedAsset<_$Scalars>;
    type $UserProfileRoleHistoryItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserProfileRoleHistoryItem<_$Scalars>;
    type $Country<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Country<_$Scalars>;
    type $Gender<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Gender<_$Scalars>;
    type $Language<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Language<_$Scalars>;
    type $Notification<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Notification<_$Scalars>;
    type $NotificationContext<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = NotificationContext<_$Scalars>;
    type $Channel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Channel<_$Scalars>;
    type $ChannelMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMetadata<_$Scalars>;
    type $BgChannelStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BgChannelStatus<_$Scalars>;
    type $ChannelInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelInvitation<_$Scalars>;
    type $DeclineChannelInvitationReason<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = DeclineChannelInvitationReason<_$Scalars>;
    type $ChannelMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMessage<_$Scalars>;
    type $ChannelMessageMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMessageMetadata<_$Scalars>;
    type $ChannelMessageStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelMessageStatus<_$Scalars>;
    type $Contact<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Contact<_$Scalars>;
    type $ContactMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContactMetadata<_$Scalars>;
    type $ContactType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContactType<_$Scalars>;
    type $ChannelParticipant<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelParticipant<_$Scalars>;
    type $BgChannelParticipantUserInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BgChannelParticipantUserInfo<_$Scalars>;
    type $UserListItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserListItem<_$Scalars>;
    type $EducationLevel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = EducationLevel<_$Scalars>;
    type $EndorsementWithTypes<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = EndorsementWithTypes<_$Scalars>;
    type $ModerationConcern<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ModerationConcern<_$Scalars>;
    type $ContentTagType<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContentTagType<_$Scalars>;
    type $Group<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Group<_$Scalars>;
    type $AppliedGroupRule<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AppliedGroupRule<_$Scalars>;
    type $GroupRuleBaseConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupRuleBaseConfig<_$Scalars>;
    type $GroupCms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupCms<_$Scalars>;
    type $GroupCmsOnboarding<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GroupCmsOnboarding<_$Scalars>;
    type $Pronoun<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Pronoun<_$Scalars>;
    type $UserCms<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserCms<_$Scalars>;
    type $UserInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserInbox<_$Scalars>;
    type $ChannelInbox<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelInbox<_$Scalars>;
    type $ChannelInboxItemMessage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelInboxItemMessage<_$Scalars>;
    type $ChannelInboxItemInvitation<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelInboxItemInvitation<_$Scalars>;
    type $AdminTask<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AdminTask<_$Scalars>;
    type $AdminTaskDef<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AdminTaskDef<_$Scalars>;
    type $AdminTaskArgDef<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = AdminTaskArgDef<_$Scalars>;
    type $ChannelListItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ChannelListItem<_$Scalars>;
    type $ErrorCodeOption<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ErrorCodeOption<_$Scalars>;
    type $IndonesianCity<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IndonesianCity<_$Scalars>;
    type $IndonesianProvince<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IndonesianProvince<_$Scalars>;
    type $IqlaaJordanianDistrict<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IqlaaJordanianDistrict<_$Scalars>;
    type $IqlaaJordanianGovernorate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IqlaaJordanianGovernorate<_$Scalars>;
    type $MastercardBank<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MastercardBank<_$Scalars>;
    type $Brand<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Brand<_$Scalars>;
    type $PurchaseOrderItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = PurchaseOrderItem<_$Scalars>;
    type $PurchaseOrder<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = PurchaseOrder<_$Scalars>;
    type $ShoppingCartItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ShoppingCartItem<_$Scalars>;
    type $ShoppingCart<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ShoppingCart<_$Scalars>;
    type $WalletItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletItem<_$Scalars>;
    type $WalletItemTransfer<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletItemTransfer<_$Scalars>;
    type $Wallet<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Wallet<_$Scalars>;
    type $WalletServiceRecord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = WalletServiceRecord<_$Scalars>;
    type $GiftCardProduct<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GiftCardProduct<_$Scalars>;
    type $GiftCardDenomination<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = GiftCardDenomination<_$Scalars>;
    type $MarketplaceServiceRecord<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MarketplaceServiceRecord<_$Scalars>;
    type $ProductCategory<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ProductCategory<_$Scalars>;
    type $UserSearch<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserSearch<_$Scalars>;
    type $UserSearchFilter<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserSearchFilter<_$Scalars>;
    type $UserSearchRunInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserSearchRunInfo<_$Scalars>;
    type $UserWithScore<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserWithScore<_$Scalars>;
    type $ServiceRequest<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ServiceRequest<_$Scalars>;
    type $ContactListItem<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContactListItem<_$Scalars>;
    type $SidMultiStepAction<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SidMultiStepAction<_$Scalars>;
    type $MultiStepActionError<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MultiStepActionError<_$Scalars>;
    type $SidMultiStepActionProgress<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SidMultiStepActionProgress<_$Scalars>;
    type $MyUser<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = MyUser<_$Scalars>;
    type $ReportUserReason<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ReportUserReason<_$Scalars>;
    type $Training<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = Training<_$Scalars>;
    type $TrainingContentPage<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = TrainingContentPage<_$Scalars>;
    type $TrainingSession<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = TrainingSession<_$Scalars>;
    type $TrainingSessionCompletionInfo<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = TrainingSessionCompletionInfo<_$Scalars>;
    type $UserAuthResponse<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = UserAuthResponse<_$Scalars>;
    type $ContentTag<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContentTag<_$Scalars>;
    type $SupportChannelConfig<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = SupportChannelConfig<_$Scalars>;
    type $NotificationTemplate<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = NotificationTemplate<_$Scalars>;
    type $ContentStatus<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ContentStatus<_$Scalars>;
    type $BgChannelChangedEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BgChannelChangedEvent<_$Scalars>;
    type $ObjectChangedEvent<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = ObjectChangedEvent<_$Scalars>;
    type $BaseModel<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BaseModel<_$Scalars>;
    type $BaseModelMetadata<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = BaseModelMetadata<_$Scalars>;
    type $IGroupMembership<_$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> = IGroupMembership<_$Scalars>;
}
