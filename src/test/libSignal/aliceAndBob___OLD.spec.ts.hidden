import SignalClient from '@signalapp/libsignal-client';
// import { connect, StringCodec, type NatsConnection, type Subscription } from 'nats.ws';

import { makeX3DHBundle } from '../libSignalUtils.js';
import rxdb from '../../db/rxdb/helpers/db.js';

// import {
//   HKDF,
//   ScannableFingerprint,
//   DisplayableFingerprint,
//   Fingerprint,
//   Aes256GcmSiv,
//   KEMPublicKey,
//   KEMSecretKey,
//   KEMKeyPair,
//   PreKeyBundle,
//   PreKeyRecord,
//   SignedPreKeyRecord,
//   KyberPreKeyRecord,
//   SignalMessage,
//   PreKeySignalMessage,
//   SessionRecord,
//   ServerCertificate,
//   SenderKeyRecord,
//   SenderCertificate,
//   SenderKeyDistributionMessage,
//   SenderKeyMessage,
//   UnidentifiedSenderMessageContent,
//   SealedSenderDecryptionResult,
//   CiphertextMessage,
//   PlaintextContent,
//   DecryptionErrorMessage,
//   Cds2Client,
//   HsmEnclaveClient,
// } from '@signalapp/libsignal-client';
import type { ChatInvite, ChannelMessage, PrekeyBundle } from './types.js';
import initRxdbStores from '../stores/rxdb/initRxdbStores.js';
import { BgNodeClientConfig } from '../../types/BgNodeClientConfig.js';
import { DbType } from '../../types/enums.js';
import { describe, test } from 'vitest';
import { init } from '../../index.js';
import { LibSignalMemStores } from '../stores/mem/LibSignalMemStores.js';
import { LibSignalStores } from '../stores/rxdb/LibSignalStores.js';

const config: BgNodeClientConfig = {
  dbType: DbType.rxdb,
  inBrowser: false,
  debugMode: true,
}

describe('libSignal', () => {
  test('should create a channel with the given properties', async () => {
    let userId: string = Math.random().toString(36).substr(2, 8);
    const deviceId = 1; // assume one device per user for simplicity
    let targetUserId: string = '';
    let message: string = '';
    let messages: ChannelMessage[] = [];
    let invitations: ChatInvite[] = [];
    let myPrekeyBundle: PrekeyBundle | null = null;

    // We'll store remote prekey bundles and session state in memory.
    const remotePrekeys: Record<string, PrekeyBundle> = {};
    // In this example, the session state is managed by your utility functions.
    // You could store a flag (or an object) per remote user if needed.
    const sessions: Record<string, boolean> = {};

    const client = await init(config);

    // -------------------------
    // NATS Settings
    // -------------------------
    // let nats: NatsConnection;
    // const sc = StringCodec();


    ///////////////////////////////////////////////////////////////////////////////////////////////////

    const aliceStores = new LibSignalStores(rxdb.getDb());
    const bobStores = new LibSignalMemStores();

    const aAddress = SignalClient.ProtocolAddress.new('+14151111111', 1);
    const bAddress = SignalClient.ProtocolAddress.new('+19192222222', 1);

    // or use makePQXDHBundle()
    const bPreKeyBundle = await makeX3DHBundle(bAddress, bobStores);

    await SignalClient.processPreKeyBundle(
      bPreKeyBundle,
      bAddress,
      aliceStores.session,
      aliceStores.identity
    );
    const aMessage = Buffer.from('Greetings hoo-man', 'utf8');

    const aCiphertext = await SignalClient.signalEncrypt(
      aMessage,
      bAddress,
      aliceStores.session,
      aliceStores.identity
    );

    // assert.deepEqual(
    //   aCiphertext.type(),
    //   SignalClient.CiphertextMessageType.PreKey
    // );

    const aCiphertextR = SignalClient.PreKeySignalMessage.deserialize(
      aCiphertext.serialize()
    );

    const bDPlaintext = await SignalClient.signalDecryptPreKey(
      aCiphertextR,
      aAddress,
      bobStores.session,
      bobStores.identity,
      bobStores.prekey,
      bobStores.signed,
      bobStores.kyber
    );
    // assert.deepEqual(bDPlaintext, aMessage);

    const bMessage = Buffer.from(
      'Sometimes the only thing more dangerous than a question is an answer.',
      'utf8'
    );

    const bCiphertext = await SignalClient.signalEncrypt(
      bMessage,
      aAddress,
      bobStores.session,
      bobStores.identity
    );

    // assert.deepEqual(
    //   bCiphertext.type(),
    //   SignalClient.CiphertextMessageType.Whisper
    // );

    const bCiphertextR = SignalClient.SignalMessage.deserialize(
      bCiphertext.serialize()
    );

    const aDPlaintext = await SignalClient.signalDecrypt(
      bCiphertextR,
      bAddress,
      aliceStores.session,
      aliceStores.identity
    );

    // assert.deepEqual(aDPlaintext, bMessage);

    const session = await bobStores.session.getSession(aAddress);

    // assert(session !== null);
    // assert(session.serialize().length > 0);
    // assert.deepEqual(session.localRegistrationId(), 5);
    // assert.deepEqual(session.remoteRegistrationId(), 5);
    // assert(session.hasCurrentState());
    // assert(
    //   !session.currentRatchetKeyMatches(
    //     SignalClient.PrivateKey.generate().getPublicKey()
    //   )
    // );

    session?.archiveCurrentState();

    // assert(!session.hasCurrentState());
    // assert(
    //   !session.currentRatchetKeyMatches(
    //     SignalClient.PrivateKey.generate().getPublicKey()
    //   )
    // );

    ///////////////////////////////////////////////////////////////////////////////////////////////////
  });
});

/*
const prekeysSubject: string = 'signal.prekeys'; // for broadcasting our prekey bundle
const chatSubject: string = 'chat';              // for encrypted chat messages

// -------------------------
// Signal Setup: Create Identity & Prekey Bundle
// -------------------------
async function setupSignal(): Promise<void> {
  // Generate our identity key pair and registration ID.
  const identityKeyPair = await generateIdentityKeyPair();
  const registrationId = await generateRegistrationId();
  // Generate one prekey and one signed prekey.
  const preKeyId = 1;
  const preKey = await generatePreKey(preKeyId);
  const signedPreKeyId = 1;
  const signedPreKey = await generateSignedPreKey(identityKeyPair, signedPreKeyId);

  // Create our public prekey bundle.
  myPrekeyBundle = {
    identityKey: arrayBufferToBase64(identityKeyPair.pubKey),
    registrationId,
    preKey: {
      keyId: preKey.keyId,
      publicKey: arrayBufferToBase64(preKey.keyPair.pubKey)
    },
    signedPreKey: {
      keyId: signedPreKey.keyId,
      publicKey: arrayBufferToBase64(signedPreKey.keyPair.pubKey),
      signature: arrayBufferToBase64(signedPreKey.signature)
    },
    userId,
    deviceId
  };

  console.log("My prekey bundle:", myPrekeyBundle);
}

// -------------------------
// NATS Setup: Prekey Broadcast, Invitations & Chat Messages
// -------------------------
async function setupNATS(): Promise<void> {
  nats = await connect({ servers: 'ws://localhost:4222' });

  // 1. Subscribe to public prekey broadcasts.
  const prekeySub: Subscription = nats.subscribe(prekeysSubject);
  (async () => {
    for await (const msg of prekeySub) {
      try {
        const payload = JSON.parse(sc.decode(msg.data));
        if (payload.type === 'prekey' && payload.userId && payload.userId !== userId) {
          remotePrekeys[payload.userId] = payload.prekeyBundle as PrekeyBundle;
          console.log("Received prekey bundle from", payload.userId, payload.prekeyBundle);
        }
      } catch (err) {
        console.error("Error processing prekey bundle:", err);
      }
    }
  })();

  // 2. Subscribe to direct chat invitations.
  const inviteSubject: string = `chat.invite.${userId}`;
  const inviteSub: Subscription = nats.subscribe(inviteSubject);
  (async () => {
    for await (const msg of inviteSub) {
      try {
        const invite: ChatInvite = JSON.parse(sc.decode(msg.data));
        invitations = [...invitations, invite];
        console.log("Received chat invitation:", invite);
      } catch (err) {
        console.error("Error processing invitation:", err);
      }
    }
  })();

  // 3. Subscribe to chat messages.
  const chatSub: Subscription = nats.subscribe(chatSubject);
  (async () => {
    for await (const msg of chatSub) {
      try {
        const payload = JSON.parse(sc.decode(msg.data));
        if (payload.sender === userId) continue; // ignore own messages

        // If we don't have a session with this sender, try to build one.
        if (!sessions[payload.sender] && remotePrekeys[payload.sender]) {
          await buildSessionWithPeer(payload.sender, remotePrekeys[payload.sender]);
        }
        if (sessions[payload.sender]) {
          const decrypted: string = await utilDecryptMessage(
            payload.sender,
            base64ToArrayBuffer(payload.data)
          );
          messages = [...messages, { createBy: payload.sender, text: decrypted }];
        } else {
          console.warn("No session established with", payload.sender);
        }
      } catch (err) {
        console.error("Error processing chat message:", err);
      }
    }
  })();

  // Finally, broadcast our own prekey bundle.
  broadcastPrekeyBundle();
}

// Broadcast our prekey bundle so that peers can initialize a session.
function broadcastPrekeyBundle(): void {
  if (!myPrekeyBundle) return;
  const msg = JSON.stringify({
    type: "prekey",
    userId,
    prekeyBundle: myPrekeyBundle
  });
  nats.publish(prekeysSubject, sc.encode(msg));
}

// -------------------------
// Session Establishment
// -------------------------
async function buildSessionWithPeer(remoteUserId: string, remoteBundle: PrekeyBundle): Promise<void> {
  console.log("Building session with", remoteUserId);
  // Use your utility function to process the remote prekey bundle.
  // This function should build a session and store any necessary state.
  await processRemotePreKeyBundle(remoteBundle, userId, deviceId);
  // Mark that we now have a session with this remote user.
  sessions[remoteUserId] = true;
  console.log("Session built with", remoteUserId);
}

// -------------------------
// Encrypting and Sending Chat Messages
// -------------------------
async function encryptForPeer(remoteUserId: string, plaintext: string): Promise<string> {
  // Ensure a session exists.
  if (!sessions[remoteUserId]) {
    if (remotePrekeys[remoteUserId]) {
      await buildSessionWithPeer(remoteUserId, remotePrekeys[remoteUserId]);
    } else {
      throw new Error("No prekey bundle available for remote user " + remoteUserId);
    }
  }
  // Use your utility encryption function.
  const ciphertext: ArrayBuffer = await utilEncryptMessage(remoteUserId, plaintext);
  return arrayBufferToBase64(ciphertext);
}

async function sendMessage(): Promise<void> {
  if (message.trim() === '' || targetUserId.trim() === '') return;
  try {
    const encrypted = await encryptForPeer(targetUserId, message);
    const payload = {
      sender: userId,
      target: targetUserId,
      data: encrypted
    };
    nats.publish(chatSubject, sc.encode(JSON.stringify(payload)));
    messages = [...messages, { createBy: "me", text: message }];
    message = '';
  } catch (err) {
    console.error("Error sending message:", err);
  }
}

// -------------------------
// Accepting a Chat Invitation
// -------------------------
function acceptInvite(invite: ChatInvite): void {
  console.log(`Accepted chat with ${invite.from}`);
  targetUserId = invite.from;
  invitations = invitations.filter(i => i !== invite);
}
*/
